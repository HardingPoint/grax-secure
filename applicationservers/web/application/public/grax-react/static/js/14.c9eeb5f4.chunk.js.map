{"version":3,"sources":["components/GRAXFieldsCombobox.jsx"],"names":["selectedDataIndex","cookieSubfix","GRAXFieldsCombobox","props","state","options","inputValue","selection","id","label","type","isLoaded","error","getMappedFieldList","bind","_","map","this","item","event","selectedFieldList","onLoad","onChange","setCookie","JSON","stringify","_isMounted","dataIndex","$","ajax","url","baseUrl","GetParams","action","data","success","val","key","setState","selectedFieldsCookie","getCookie","startsWith","selectedFields","parse","length","sortBy","reduce","_selection","indexOf","push","onLoadHandler","xhr","status","err","console","toString","Fragment","classNameMenu","events","value","onRequestRemoveSelectedOption","onChangeHandler","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","required","multiple","style","position","height","size","variant","React","Component"],"mappings":"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","file":"static/js/14.c9eeb5f4.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}