{"version":3,"sources":["components/SLDSSection.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx","components/GRAXCloudSFLoginForm.jsx"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","propTypes","PropTypes","required","string","labels","error","onChange","disabled","errorId","variant","defaultProps","RadioGroup","shortid","assign","classNames","style","RadioButtonGroup","rest","GRAXCloudSFLoginForm","getSFConnectionInfoHandler","dataSource","configuration","dataSources","dataSourceIndex","length","alert","provider","userName","password","url","isLoading","$","ajax","type","baseUrl","contentType","data","JSON","stringify","skipFail","success","console","log","accessToken","userInfo","instanceUrl","organizationId","triggerConfigurationChange","xhr","status","err","onGetConfig","path","f","defaultValue","_","get","onChangeConfig","targetKey","hasOwnProperty","persist","set","target","isMetadataBackupEnabled","loginHandler","cloneDeep","onLogin","Fragment","onBlur","value","checked","readOnly"],"mappings":"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","file":"static/js/13.e27a06c2.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n","import React from \"react\";\nimport { Spinner, Button, Input, RadioButtonGroup, Radio } from \"@salesforce/design-system-react\";\n\nimport SLDSSection from \"./SLDSSection\";\n\nimport { $, baseUrl } from \"../lib/grax-data-lake\";\n\nimport _ from \"lodash\";\n\n/*const METADATA_BACKUP_SETTINGS = [\n    {\n        name: 'RETRIEVE_SALESFORCE_METADATA',\n        type: 'boolean'\n    }\n];*/\n\nconst NEW_DATASOURCE = \"New Data Source\";\n\nexport default class GRAXCloudSFLoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n\n      configuration: {},\n      dataSourceIndex: 0,\n\n      isMetadataBackupEnabled: false\n    };\n\n    this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n\n    this.loginHandler = this.loginHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const configuration = this.props.configuration ? _.cloneDeep(this.props.configuration) : {};\n\n    if (!configuration.dataSources) {\n      configuration.dataSources = [];\n    }\n\n    let dataSource = {\n      name: NEW_DATASOURCE,\n      provider: \"salesforce\"\n    };\n\n    if (configuration.dataSources[this.props.dataSourceIndex]) {\n      dataSource = {\n        ...dataSource,\n        ...configuration.dataSources[this.props.dataSourceIndex]\n      };\n    }\n\n    configuration.dataSources[this.props.dataSourceIndex] = dataSource;\n\n    this.triggerConfigurationChange(configuration);\n\n    this.setState({\n      isLoading: false,\n      configuration\n    });\n  }\n\n  triggerConfigurationChange(configuration = this.state.configuration) {\n    if (this.props.onChange) {\n      this.props.onChange(\n        configuration,\n        _.get(configuration, [\"dataSources\", this.props.dataSourceIndex])\n      );\n    }\n  }\n\n  loginHandler() {\n    if (this.props.onLogin) {\n      const configuration = this.state.configuration;\n      const dataSource = configuration.dataSources[this.props.dataSourceIndex];\n\n      this.props.onLogin(configuration, dataSource);\n    }\n  }\n\n  getSFConnectionInfoHandler = () => {\n    const configuration = this.state.configuration;\n    const dataSource = configuration.dataSources[this.props.dataSourceIndex];\n\n    if (dataSource == null || dataSource.length === 0) {\n      return alert(\"Incomplete data\");\n    }\n\n    if (dataSource.provider == null) {\n      // return alert('Provider required');\n      dataSource.provider = \"salesforce\";\n    }\n\n    if (dataSource.userName == null) {\n      return alert(\"User Name required\");\n    }\n\n    if (dataSource.password == null) {\n      return alert(\"Password required\");\n    }\n\n    if (dataSource.url == null) {\n      return alert(\"Url required\");\n    }\n\n    this.setState({\n      isLoading: true\n    });\n\n    $.ajax({\n      type: \"POST\",\n      url: baseUrl + \"/grax-app/grax-cloud/salesforce/login\",\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify(dataSource),\n      skipFail: true,\n      success: function(data) {\n        console.log(data);\n\n        dataSource[\"instanceUrl\"] = null;\n        dataSource[\"organizationId\"] = null;\n\n        if (data.accessToken != null) {\n          dataSource[\"instanceUrl\"] = data.userInfo.instanceUrl;\n          dataSource[\"organizationId\"] = data.userInfo.organizationId;\n\n          alert(\"Success!\");\n        } else {\n          alert(\"Invalid Login\");\n        }\n\n        this.setState({\n          dataSource,\n          isLoading: false\n        });\n\n        this.triggerConfigurationChange();\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoading: false\n        });\n\n        alert(\"Error!\");\n\n        return false;\n      }.bind(this)\n    });\n  };\n\n  onGetConfig = (...path) => {\n    return (f, defaultValue = null) => {\n      return _.get(this.state.configuration, [...path, f], defaultValue);\n    };\n  };\n\n  onChangeConfig = (...path) => {\n    return (f, targetKey = \"value\") => {\n      return e => {\n        if (e != null && e.hasOwnProperty(\"originalEvent\")) e.persist();\n\n        const configuration = this.state.configuration;\n\n        _.set(configuration, [...path, f], e.target[targetKey]);\n\n        this.setState({\n          configuration\n        });\n\n        this.triggerConfigurationChange();\n      };\n    };\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.isLoading ? <Spinner size=\"large\" variant=\"brand\" /> : null}\n\n        <div className=\"slds-p-around_medium\">\n          <SLDSSection title=\"Salesforce Connection\">\n            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center slds-p-bottom_medium\">\n              <div className=\"slds-col\">\n                <Input\n                  id=\"sf-connection-name\"\n                  label=\"Conection Name\"\n                  defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"name\")}\n                  onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\"name\")}\n                />\n\n                <RadioButtonGroup\n                  labels={{\n                    label: \"Authentication Type\"\n                  }}\n                  onChange={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                    \"provider\"\n                  )}\n                  className=\"slds-m-top_small\"\n                >\n                  <Radio\n                    id=\"authentication-type-username-password\"\n                    label=\"Username / Password\"\n                    value=\"salesforce\"\n                    checked={\n                      this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") ===\n                      \"salesforce\"\n                    }\n                    variant=\"button-group\"\n                  />\n\n                  <Radio\n                    id=\"authentication-type-oauth\"\n                    label=\"OAuth\"\n                    value=\"oauth\"\n                    checked={\n                      this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") ===\n                      \"oauth\"\n                    }\n                    variant=\"button-group\"\n                  />\n                </RadioButtonGroup>\n              </div>\n            </div>\n\n            {this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") === \"oauth\" ? (\n              <React.Fragment>\n                <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                  <div className=\"slds-col\">\n                    {/*<Input id=\"sf-connection-name\" label=\"Conection Name\" defaultValue={this.state.dataSource.name} onBlur={(e) => {\n                                        var dataSource = this.state.dataSource;\n                                        \n                                        dataSource.name = e.target.value;\n                                        \n                                        this.setState({\n                                            dataSource: dataSource\n                                        });\n\n                                        this.triggerDataSourceChange();\n                                    }} />*/}\n\n                    {/*<div className=\"slds-form-element\">\n                      <label className=\"slds-form-element__label\" htmlFor=\"sf-environment-type\">\n                        Environment Type\n                      </label>\n                      <div className=\"slds-form-element__control\">\n                        <div className=\"slds-select_container\">\n                          <select className=\"slds-select\" id=\"sf-environment-type\">\n                            <option value=\"Production\">Production</option>\n                            <option value=\"Developer\">Developer</option>\n                            <option value=\"Sandbox\">Sandbox</option>\n                          </select>\n                        </div>\n                      </div>\n\n                                  </div>*/}\n\n                    <Input\n                      id=\"oauth-client-id\"\n                      label=\"Client Id\"\n                      defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientId\"\n                      )}\n                      onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientId\"\n                      )}\n                    />\n\n                    <Input\n                      id=\"oauth-client-secret\"\n                      label=\"Client Secret\"\n                      defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientSecret\"\n                      )}\n                      onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientSecret\"\n                      )}\n                    />\n\n                    <Input\n                      id=\"oauth-token-url\"\n                      label=\"Token URL\"\n                      defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"tokenUrl\"\n                      )}\n                      onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"tokenUrl\"\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/*<div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                  <div className=\"slds-col\">\n                    <div className=\"slds-p-top_medium\">\n                      <Button\n                        label=\"Login with SalesForce\"\n                        variant=\"brand\"\n                        onClick={e => {\n                          this.loginHandler();\n                        }}\n                      />\n                    </div>\n                  </div>\n                      </div>*/}\n              </React.Fragment>\n            ) : null}\n          </SLDSSection>\n\n          {this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") ===\n          \"salesforce\" ? (\n            <SLDSSection title=\"Login Details\">\n              <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                <div className=\"slds-col\">\n                  <Input\n                    id=\"sfdc-username\"\n                    label=\"SFDC Username\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"userName\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"userName\"\n                    )}\n                  />\n                  <Input\n                    id=\"sfdc-password\"\n                    type=\"password\"\n                    label=\"SFDC Password\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"password\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"password\"\n                    )}\n                  />\n                  <Input\n                    id=\"sfdc-url\"\n                    label=\"SFDC URL\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"url\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\"url\")}\n                  />\n                </div>\n\n                <div className=\"slds-col\">\n                  <Input\n                    id=\"sfdc-token\"\n                    label=\"SFDC Security Token\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"token\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\"token\")}\n                  />\n                  <Input\n                    id=\"sfdc-org-id\"\n                    label=\"SFDC Organization ID (18 Digit)\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"organizationId\"\n                    )}\n                    readOnly\n                  />\n                  <Input\n                    id=\"sfdc-org-title\"\n                    label=\"SFDC Organization Title\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"name\"\n                    )}\n                    readOnly\n                  />\n                </div>\n              </div>\n\n              <div className=\"slds-p-top_medium\">\n                <Button\n                  label=\"Connect to SFDC\"\n                  variant=\"brand\"\n                  onClick={this.getSFConnectionInfoHandler}\n                />\n              </div>\n            </SLDSSection>\n          ) : null}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}