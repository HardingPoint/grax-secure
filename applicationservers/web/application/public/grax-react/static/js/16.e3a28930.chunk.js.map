{"version":3,"sources":["components/SLDSSection.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx","components/GRAXSObjectCombobox.jsx","components/GRAXOrgCombobox.jsx","components/GRAXRestoreMappingFields.jsx","components/GRAXRestoreMappingDefaults.jsx","components/GRAXRestoreMapping.jsx"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","propTypes","PropTypes","required","string","labels","error","onChange","disabled","errorId","variant","defaultProps","RadioGroup","shortid","assign","classNames","style","RadioButtonGroup","rest","GRAXSObjectCombobox","options","inputValue","selection","isLoaded","$","ajax","type","url","baseUrl","GetParams","action","data","_bools","_select","success","_","map","item","i","index","toLowerCase","selectionKeys","filter","indexOf","onLoad","onSelect","length","xhr","status","err","console","toString","Fragment","classNameMenu","events","event","value","onRequestRemoveSelectedOption","placeholder","comboboxFilterAndLimit","limit","menuItem","position","height","GRAXOrgCombobox","ALL_FIELDS","GRAXRestoreMappingFilter","checked","val","log","onChangeHandler","target","option","deselectable","GRAXRestoreMappingDataLakeField","isOpened","filterOptionsHandler","onOpen","onClose","hasStaticAlignment","multiple","GRAXRestoreMappingFields","_graxFieldOptions","_graxFieldOptionsList","_sfFieldOptions","_sfFieldOptionsList","_sfMappedFields","_error","_filterSelection","isPreviouslyMapped","graxFieldOptions","sfMappedFields","sfFieldOptions","forEach","sfField","mappedFields","reduce","_selection","graxFieldName","push","sfMappedFieldsList","Object","keys","graxMappedFieldsList","flatten","values","nextProps","nextState","objectName","renderKey","fieldName","mappedValues","onMappingChange","sortBy","maxHeight","scope","data-label","width","color","onMappingChangeHandler","GRAXRestoreMappingSFField","_isMounted","onRequestOpen","onRequestClose","menuPosition","GRAXRestoreMappingDefaults","_sfDefaultValues","_mappingOptions","_maskOptionsString","_maskOptionsPhone","_maskOptionsEmail","_maskOptionsDate","mapping","masking","isOverride","selectedField","defaultValue","defaultValueStruct","getDefaultValueStruct","tempMsk","mskOpt","override","sfDefaultValues","_sfDefaultValuesFields","_sfDefaultValuesList","getDefaultValuesList","sfDefaultValue","onDefaultValueChangeHandler","splice","texttransform","display","align","content","marginRight","cursor","sfFieldName","find","onBlur","date","defaultChecked","persist","sfType","removeFieldHandler","addAnotherFieldHandler","normalizeFieldType","typeName","nft","HAS_CHANGES_MESSAGE","GRAXRestoreMapping","selectedSObject","isLoading","_isCustomOrg","_customOrg","customMapping","hasChanges","isSaving","resetConfirmIsOpen","resetConfirmIsChecked","resetConfirmCallback","renderCounter","confirm","onMappingSettingsChange","fieldMap","omit","isArray","isEmpty","customMappingToSave","contentType","JSON","stringify","sObjectChangeHandler","pageParams","datalakeIndex","maxWidth","_onOrgSelectionChangeHandler","_onOrgSelectionRemoveHandler","isMapLoaded","_onMappingChangeHandler","getCustomMappingToSave","saveCustomMapping","dismissible","footer","prompt"],"mappings":"sNAGqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,QAAyB,IAAjBF,EAAME,aAA0DC,IAAxBH,EAAMI,eAG1D,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPL,E,0EAUNC,GACT,IAAIL,GAAUM,KAAKP,MAAMC,OAEzBM,KAAKC,SAAS,CACVP,OAAQA,IAGTM,KAAKR,MAAMU,UACVF,KAAKR,MAAMU,SAASR,GAGxBK,EAAEI,mB,+BAIF,IAAIC,EAAQ,0BAAMC,UAAW,iBAAoBL,KAAKR,MAAMI,cAA6C,GAA7B,4BAAkCQ,MAAOJ,KAAKR,MAAMY,OAAQJ,KAAKR,MAAMY,OAEnJ,OACI,yBAAKE,GAAIN,KAAKR,MAAMc,IAAMN,KAAKR,MAAMe,IAAKF,UAAW,CAAC,eAAgBL,KAAKP,MAAMC,QAAU,eAAgBM,KAAKR,MAAMa,WAAWG,KAAK,MAClI,wBAAIH,UAAU,wCACTL,KAAKR,MAAMI,cAAgB,4BAAQS,UAAU,yCAAyCI,QAAST,KAAKH,cACjG,kBAAC,IAAD,CACIa,cAAe,CAAEC,MAAOX,KAAKR,MAAMY,OACnCQ,SAAS,UACTC,KAAK,SACLC,KAAK,UACLT,UAAU,6EAEbD,GACOA,GAEfJ,KAAKP,MAAMC,QAAU,yBAAKW,UAAU,yBAChCL,KAAKR,MAAMuB,e,GA3CSC,IAAMC,Y,giCCY/C,IAAMC,EAAY,CAMjBR,cAAe,UAAgB,CAC9BC,MAAOQ,IADuB,OAE9BC,SAAUD,IAAUE,SAKrBN,SAAUI,SAbO,WAiBjBd,UAAWc,cAAoB,CAC9BA,IAD8B,MAE9BA,IAF8B,OAG9BA,IApBgB,SA4BjBG,OAAQ,UAAgB,CACvBC,MAAOJ,IADgB,OAEvBR,MAAOQ,IAAUE,SAKlBG,SAAUL,IAnCO,KAuCjBM,SAAUN,IAvCO,KA2CjBC,SAAUD,IA3CO,KA+CjBN,KAAMM,IA/CW,OAmDjBO,QAASP,IAnDQ,OAuDjBQ,QAASR,UAAgB,CAAC,OAAjBA,kBAGJS,EAAe,CACpBlB,cAAe,CAAEU,SAAU,YAC3BE,OAFoB,GAGpBK,QAAS,QAOJE,E,YACL,cAAmB,a,4FAAA,UAClB,6BAEA,cAAqBC,IAArB,WACA,mBAAwBA,IAAxB,WAJkB,E,qSAQlB,GAAI9B,KAAJ,WACC,OAAOA,KAAKR,MAAMkC,SAAW1B,KAA7B,mB,gCAMD,OAAOA,KAAKR,MAAMqB,MAAQb,KAA1B,gB,iCAIA,QAASA,KAAKsB,OAAd,Q,+BAGQ,WAERtB,KAAA,OAAcA,KAAKR,MAAM8B,OACtBS,IAAO,GAAIH,EAAL,OAA0B5B,KAAKR,MAD1B,QAEXoC,EAFH,OAIA,IAAMlB,E,uUAAgB,CAAH,GACfkB,EADe,cAEf5B,KAAKR,MAFT,eAIMuB,EAAW,iBAAmBf,KAAKR,MAAxB,UAAwC,mBACxD,mBAA0B,CACzBqB,KAAM,EADmB,UAEzBW,SAAU,QAFe,SAGzB,mBAAoB,EAHK,aAIzBC,SAAU,QAAWA,cAIvB,OACC,8BACCpB,UAAW2B,IAAW,oBAAqB,CAC1C,iBAAkBhC,KAAKsB,OAAOC,SAG/B,4BACClB,UAAW2B,IAAW,4BAAD,2BAGpBtB,8BAHoB,KAMpBV,KAAKR,MAAM4B,SACX,0BAAMf,UAAN,gBAAgCD,MAAM,YAAtC,IAEC,yBAAKC,UAAU,uBACbK,EADF,SAHD,MAPF,KAeEA,QAAsBA,EAAtBA,MAA4CV,KAAKsB,OApBpD,OAsBC,yBACCjB,UAAW2B,IAAW,6BAErBhC,KAAKR,MAFe,YAKG,iBAAvBQ,KAAKR,MAAMmC,QACX,yBAAKM,MAAOjC,KAAKR,MAAjB,MAA8Ba,UAAU,2BADxC,GANF,EAcEL,KAAKsB,OAAOC,MACZ,yBAAKjB,GAAIN,KAAT,aAA4BK,UAAU,2BACpCL,KAAKsB,OAFP,OArCJ,Y,8BA1CuBN,IAAMC,WA0F/BY,kBACAA,cACAA,iBAEA,Q,mkBCpKA,IAAMX,EAAY,CAKjBR,cAAe,UAAgB,CAC9BC,MAAOQ,IAAUE,SAKlBN,SAAUI,SAXO,WAejBd,UAAWc,cAAoB,CAC9BA,IAD8B,MAE9BA,IAF8B,OAG9BA,IAlBgB,SA0BjBG,OAAQ,UAAgB,CACvBC,MAAOJ,IADgB,OAEvBR,MAAOQ,IAAUE,SAKlBG,SAAUL,IAjCO,KAqCjBM,SAAUN,IArCO,KAyCjBC,SAAUD,IAzCO,KA6CjBN,KAAMM,IA7CW,OAiDjBO,QAASP,IAAUE,QASda,EAAmB,SAAC1C,GAEIA,EAFM,YAEf2C,EAFe,iBAInC,OAAO,uBAAYR,QAAQ,gBAA3B,KAGDO,kBACAA,cACAA,eAfqB,CAAEZ,OAAF,GAAcZ,cAAe,IAiBlD,O,yKCxEqB0B,E,YACjB,WAAY5C,GAAQ,IAAD,8BACrB,4CAAMA,KAEDC,MAAQ,CACH4C,QAAS,GAClBC,WAAY,GACHC,UAAW,GACXC,UAAU,EACVjB,MAAO,MARI,E,iFAafkB,IAAEC,KAAK,CACHC,KAAM,MAENC,IAAKC,IAAU,8DAAgEC,YAAU,CAACC,OAAO,SACjGC,KAAM,CACFC,OAAQ,oCACRC,QAAS,cAEbC,QAAS,SAASH,GAAO,IAAD,OACpBhD,KAAKC,SAAS,CACVoC,QAASe,IAAEC,IAAIL,GAAM,SAACM,EAAMC,GAAP,MAAc,CAC/BjD,GAAIgD,EAAKzC,KACTF,MAAO2C,EAAK3C,MACZ6C,MAAO,OAASF,EAAKzC,KAAK4C,cAAgB,YAE9CjB,UAAU,IAGiB,MAA5BxC,KAAKR,MAAMkE,eACV1D,KAAKC,SAAS,CACVsC,UAAWa,IAAEO,OAAO3D,KAAKP,MAAM4C,SAAS,SAACiB,GAAD,OAA4D,IAAlD,EAAK9D,MAAMkE,cAAcE,QAAQN,EAAKE,SAAgE,IAA/C,EAAKhE,MAAMkE,cAAcE,QAAQN,EAAKhD,SAIpJN,KAAKR,MAAMqE,QACV7D,KAAKR,MAAMqE,QAAO,GAGnB7D,KAAKR,MAAMsE,UAAoC,MAAxB9D,KAAKP,MAAM8C,WAAqBvC,KAAKP,MAAM8C,UAAUwB,OAAS,GACpF/D,KAAKR,MAAMsE,SAAS,KAAM9D,KAAKP,MAAM8C,YAE3CzC,KAAKE,MACPuB,MAAO,SAASyC,EAAKC,EAAQC,GACzBC,QAAQ5C,MAAMyC,EAAKC,EAAQC,GAE3BlE,KAAKC,SAAS,CACVuC,UAAU,EACVjB,MAAO2C,EAAIE,aAGZpE,KAAKR,MAAMqE,QACV7D,KAAKR,MAAMqE,QAAO,EAAOK,IAE/BpE,KAAKE,U,+BAIL,IAAD,OACL,OAAIA,KAAKP,MAAM8B,MACJ,uCAAavB,KAAKP,MAAM8B,OACvBvB,KAAKP,MAAM+C,SAQf,kBAAC,IAAM6B,SAAP,KACI,kBAAC,IAAD,CACIC,cAAe,iCACfC,OAAQ,CACJ/C,SAAU,SAACgD,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MAChB,EAAKxE,SAAS,CACVqC,WAAYmC,IAGZ,EAAKjF,MAAMgC,UACX,EAAKhC,MAAMgC,SAASgD,EAAOC,IAGnCC,8BAA+B,SAACF,EAAOxB,GACnC,SAAI,EAAKxD,MAAMkF,gCAAiC,EAAKlF,MAAMkF,8BAA8BF,EAAOxB,EAAKT,cACjG,EAAKtC,SAAS,CACVqC,WAAY,GACZC,UAAWS,EAAKT,aAGb,IAKfuB,SAAU,SAACU,EAAOxB,GACd,EAAK/C,SAAS,CACVqC,WAAY,GACZC,UAAWS,EAAKT,YAGhB,EAAK/C,MAAMsE,UACX,EAAKtE,MAAMsE,SAASU,EAAOxB,EAAKT,aAI5CjB,OAAQ,CACJqD,YAAa,4BAEjBtC,QAASuC,YAAuB,CAC5BtC,WAAYtC,KAAKP,MAAM6C,WACvBuC,MAAO,IACPxC,QAASrC,KAAKP,MAAM4C,QACpBE,UAAWvC,KAAKP,MAAM8C,YAE1BA,UAAWvC,KAAKP,MAAM8C,UACtBkC,MAAOzE,KAAKP,MAAM6C,WAClBX,QAAQ,iBACRP,UAAU,EACV0D,SAAU9E,KAAKR,MAAMsF,YAvD7B,yBAAK7C,MAAO,CAAE8C,SAAU,WAAYC,OAAQ,SACxC,kBAAC,IAAD,CAASlE,KAAK,QAAQa,QAAQ,c,GAnEDX,IAAMC,W,yBCAlCgE,E,YACjB,WAAYzF,GAAQ,IAAD,8BACrB,4CAAMA,KAEDC,MAAQ,CACH4C,QAAS,GAClBC,WAAY,GACHC,UAAW,GACXC,UAAU,EACVjB,MAAO,MARI,E,iFAafkB,IAAEC,KAAK,CACHC,KAAM,MAENC,IAAKC,IAAU,sCAAwCC,YAAU,CAACC,OAAO,SACzEC,KAAM,GACNG,QAAS,SAASH,GACdhD,KAAKC,SAAS,CACVoC,QAASe,IAAEC,IAAIL,GAAM,SAACM,EAAMC,GAAP,MAAc,CAC/BjD,GAAIgD,EAAKhD,GACTK,MAAO2C,EAAKhD,GAAK,KAAOgD,EAAK3C,MAAQ,QAEzC6B,UAAU,IAGXxC,KAAKR,MAAMqE,QACV7D,KAAKR,MAAMqE,QAAO,IAExB/D,KAAKE,MACPuB,MAAO,SAASyC,EAAKC,EAAQC,GACzBC,QAAQ5C,MAAMyC,EAAKC,EAAQC,GAE3BlE,KAAKC,SAAS,CACVuC,UAAU,EACVjB,MAAO2C,EAAIE,aAGZpE,KAAKR,MAAMqE,QACV7D,KAAKR,MAAMqE,QAAO,EAAOK,IAE/BpE,KAAKE,U,+BAIL,IAAD,OACL,OAAIA,KAAKP,MAAM8B,MACJ,uCAAavB,KAAKP,MAAM8B,OACvBvB,KAAKP,MAAM+C,SAQf,kBAAC,IAAM6B,SAAP,KACI,kBAAC,IAAD,CACIC,cAAe,6BACfC,OAAQ,CACJ/C,SAAU,SAACgD,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MAChB,EAAKxE,SAAS,CACVqC,WAAYmC,IAGZ,EAAKjF,MAAMgC,UACX,EAAKhC,MAAMgC,SAASgD,EAAOC,IAGnCC,8BAA+B,SAACF,EAAOxB,GACnC,EAAK/C,SAAS,CACVqC,WAAY,GACZC,UAAWS,EAAKT,YAGhB,EAAK/C,MAAMkF,+BACX,EAAKlF,MAAMkF,8BAA8BF,EAAOxB,EAAKT,YAG7DuB,SAAU,SAACU,EAAOxB,GACd,EAAK/C,SAAS,CACVqC,WAAY,GACZC,UAAWS,EAAKT,YAGhB,EAAK/C,MAAMsE,UACX,EAAKtE,MAAMsE,SAASU,EAAOxB,EAAKT,aAI5CjB,OAAQ,CACJqD,YAAa,yBAEjBtC,QAASuC,YAAuB,CAC5BtC,WAAYtC,KAAKP,MAAM6C,WACvBuC,MAAO,IACPxC,QAASrC,KAAKP,MAAM4C,QACpBE,UAAWvC,KAAKP,MAAM8C,YAE1BA,UAAWvC,KAAKP,MAAM8C,UACtBkC,MAAOzE,KAAKP,MAAM6C,WAClBX,QAAQ,iBACRP,UAAU,KApDlB,yBAAKa,MAAO,CAAE8C,SAAU,WAAYC,OAAQ,SACxC,kBAAC,IAAD,CAASlE,KAAK,QAAQa,QAAQ,c,GArDLX,IAAMC,W,yBCI7CiE,EAAa,aAGbC,E,YACL,WAAY3F,GAAQ,IAAD,8BACZ,4CAAMA,KAEPC,MAAQ,CACH2F,QAASF,GAJD,E,6EAQAG,GACZlB,QAAQmB,IAAI,mBACZnB,QAAQmB,IAAID,GACZrF,KAAKC,SAAS,CACVmF,QAASC,IAGVrF,KAAKR,MAAMgC,UACVxB,KAAKR,MAAMgC,SAAS6D,K,+BAIlB,IAAD,OACChD,EAAU,CA3BF,gBACE,mBA0BiC6C,GAEvD,OACU,yBAAK7E,UAAU,wBACX,kBAAC,IAAD,CACImB,SAAU,SAACgD,GAAD,OAAW,EAAKe,gBAAgBf,EAAMgB,OAAOf,QAEvDhD,SAAUzB,KAAKR,MAAMiC,SACrBL,SAAUpB,KAAKR,MAAM4B,SACrBP,KAAMb,KAAKR,MAAMqB,KACjBa,QAAS1B,KAAKR,MAAMkC,SAEnB0B,IAAEC,IAAIhB,EAAS,SAASoD,EAAQlC,GAC7B,OACI,kBAAC,IAAD,CACIhD,IAAK,SAAWgD,EAChBjD,GAAImF,EACJ9E,MAAO8E,EACPhB,MAAOgB,EACPL,QAASpF,KAAKP,MAAM2F,UAAYK,EAChC9D,QAAQ,eACR+D,cAAc,KAGxB5F,KAAKE,a,GA9CYgB,IAAMC,WAsDvC0E,E,YACF,WAAYnG,GAAQ,IAAD,8BACrB,4CAAMA,KAEDC,MAAQ,CACZ6C,WAAY,GACHC,UAAW,GACXqD,UAAU,GANC,E,iFAWZ5F,KAAKR,MAAM+C,WACVvC,KAAKC,SAAS,CACVsC,UAAWvC,KAAKR,MAAM+C,c,6CAM9B,IAAIF,EAAUrC,KAAKR,MAAM6C,QAMzB,OAJGrC,KAAKR,MAAMqG,sBAAwB7F,KAAKP,MAAMmG,WAC7CvD,EAAUrC,KAAKR,MAAMqG,qBAAqBxD,IAGvCuC,YAAuB,CAC1BtC,WAAYtC,KAAKP,MAAM6C,WACvBuC,MAAO,IACPxC,QAASA,EACTE,UAAWvC,KAAKP,MAAM8C,c,+BAIpB,IAAD,OACL,OACI,kBAAC,IAAM8B,SAAP,KACI,kBAAC,IAAD,CACIC,cAAe,6CACfC,OAAQ,CACJ/C,SAAU,SAACgD,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MAChB,EAAKxE,SAAS,CACVqC,WAAYmC,IAGZ,EAAKjF,MAAMgC,UACX,EAAKhC,MAAMgC,SAASgD,EAAOC,IAGnCC,8BAA+B,SAACF,EAAOxB,GACnC,EAAK/C,SAAS,CACVqC,WAAY,GACZC,UAAWS,EAAKT,YAGhB,EAAK/C,MAAMkF,+BACX,EAAKlF,MAAMkF,8BAA8BF,EAAOxB,EAAKT,YAG7DuB,SAAU,SAACU,EAAOxB,GACd,EAAK/C,SAAS,CACVqC,WAAY,GACZC,UAAWS,EAAKT,YAGhB,EAAK/C,MAAMsE,UACX,EAAKtE,MAAMsE,SAASU,EAAOxB,EAAKT,YAGxCuD,OAAQ,SAACtB,EAAOxB,GACZ,EAAK/C,SAAS,CACV2F,UAAU,KAGlBG,QAAS,SAACvB,EAAOxB,GACb,EAAK/C,SAAS,CACV2F,UAAU,MAItBtE,OAAQ,CACJqD,YAAa,yBAEjBtC,QAASrC,KAAK6F,uBACdtD,UAAWvC,KAAKP,MAAM8C,UACtBkC,MAAOzE,KAAKP,MAAM6C,WAClBX,QAAQ,WACRqE,oBAAoB,EACpBC,UAAU,S,GAxFgBjF,IAAMC,WAgG/BiF,E,YACjB,WAAY1G,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACT0G,kBAAmB,KACnBC,sBAAuB,KACvBC,gBAAiB,KACjBC,oBAAqB,KACrBC,gBAAiB,KACjBC,OAAQ,KAERC,iBAAkBvB,EAClBwB,oBAAoB,GAZT,E,wEAiBf,OAAO1G,KAAKP,MAAM+G,QAA2C,MAAhCxG,KAAKP,MAAM0G,mBAA2D,MAA9BnG,KAAKP,MAAM4G,kB,0CAKhF,IAAID,EAAwBhD,IAAEC,IAAIrD,KAAKR,MAAMmH,kBAAkB,SAASrD,EAAMC,GAC1E,OAAOD,EAAKhD,MAOZiG,EAAkBvG,KAAKR,MAAMoH,gBAAkB,GAE/CP,EAAkBrG,KAAKR,MAAMqH,eAGjCzD,IAAE0D,QAAQT,GAAiB,SAACU,EAASxD,GACjC,IAAIyD,EAAe5D,IAAE6D,OAAOV,EAAgBQ,EAAQzG,KAAO,CAACyG,EAAQzG,KAAK,SAAC4G,EAAYC,GAKlF,OAJsD,IAAlDf,EAAsBxC,QAAQuD,IAC9BD,EAAWE,KAAKD,GAGbD,IACR,IAEAF,EAAajD,OAAS,IACrBwC,EAAgBQ,EAAQzG,IAAM0G,MAItChH,KAAKC,SAAS,CACVkG,kBAAmBnG,KAAKR,MAAMmH,iBAC9BP,sBAAuBA,EACvBC,gBAAiBA,EAEjBE,gBAAiBA,EACjBc,mBAAoBC,OAAOC,KAAKhB,GAChCiB,qBAAsBpE,IAAEqE,QAAQrE,IAAEsE,OAAOnB,Q,4CAI3BoB,EAAWC,GAC7B,OACI5H,KAAKP,MAAMgH,mBAAqBmB,EAAUnB,kBACvCzG,KAAKR,MAAMqI,aAAeF,EAAUE,YACpC7H,KAAKP,MAAM0G,oBAAsByB,EAAUzB,mBAC3CnG,KAAKP,MAAM4G,kBAAoBuB,EAAUvB,iBACzCrG,KAAKR,MAAMmH,mBAAqBgB,EAAUhB,kBAC1C3G,KAAKR,MAAMqH,iBAAmBc,EAAUd,gBACxC7G,KAAKR,MAAMoH,iBAAmBe,EAAUf,gBACxC5G,KAAKR,MAAMsI,YAAcH,EAAUG,Y,6CAIvBC,EAAWxF,GAC9B,IAAIyF,EAAe5E,IAAEC,IAAId,GAAW,SAASe,EAAMC,GAC/C,OAAOD,EAAKhD,MAGZiG,EAAkBvG,KAAKP,MAAM8G,gBAE9BhE,EACCgE,EAAgBwB,GAAaC,SAEtBzB,EAAgBwB,GAG3B/H,KAAKC,SAAS,CACVsG,gBAAiBA,EACjBc,mBAAoBC,OAAOC,KAAKhB,GAChCiB,qBAAsBpE,IAAEqE,QAAQrE,IAAEsE,OAAOnB,MAG1CvG,KAAKR,MAAMyI,iBACVjI,KAAKR,MAAMyI,gBAAgBF,EAAWC,K,+BAIpC,IAAD,OACL,GAAIhI,KAAKP,MAAM+G,OACX,OAAO,uCAAaxG,KAAKP,MAAM+G,QAC5B,GAAKxG,KAAKwC,WAMV,CACH,IAAIqE,EAAiB7G,KAAKP,MAAM4G,gBAwBhC,MA/RU,kBAyQPrG,KAAKP,MAAMgH,mBACVI,EAAiBzD,IAAEO,OAAOkD,GAAgB,SAACvD,EAAMC,GAC7C,OACkC,MAA9B,EAAK9D,MAAM8G,kBAC4C,IAApD,EAAK9G,MAAM4H,mBAAmBzD,QAAQN,EAAKhD,KACI,IAA/C,EAAKb,MAAM8G,gBAAgBjD,EAAKhD,IAAIyD,WA7QvC,qBAkRT/D,KAAKP,MAAMgH,mBACVI,EAAiBzD,IAAEO,OAAOkD,GAAgB,SAACvD,EAAMC,GAC7C,OACwD,IAApD,EAAK9D,MAAM4H,mBAAmBzD,QAAQN,EAAKhD,KACD,MAAvC,EAAKb,MAAM8G,gBAAgBjD,EAAKhD,KACe,IAA/C,EAAKb,MAAM8G,gBAAgBjD,EAAKhD,IAAIyD,WAKnD8C,EAAiBzD,IAAE8E,OAAOrB,EAAgB,CAAC,OAGvC,kBAAC,IAAMxC,SAAP,KACI,kBAAC,EAAD,CAA0B7C,SAAU,SAAC6D,GAAD,OAAS,EAAKpF,SAAS,CAACwG,iBAAkBpB,OAE9E,yBAAKhF,UAAU,oBAAoB4B,MAAO,CAACkG,UAAW,SAClD,2BAAO9H,UAAU,2EACb,+BACI,wBAAIA,UAAU,0BACTL,KAAKP,MAAMgH,mBAAqBvB,GAC7B,wBAAI7E,UAAU,uBAAuB+H,MAAM,OACvC,yBAAK/H,UAAU,gBAAgBD,MA9SnD,6BAiTY,wBAAIC,UAAU,uBAAuB+H,MAAM,OACvC,yBAAK/H,UAAU,gBAAgBD,MAjThD,qCAmTa,wBAAIC,UAAU,uBAAuB+H,MAAM,OACvC,yBAAK/H,UAAU,gBAAgBD,MAnT9C,2CAuTG,+BAEKgD,IAAEC,IAAIwD,EAAgB,SAASE,EAASxD,GAAI,IAAD,OACpCwE,EAAYhB,EAAQzG,GAExB,OACI,wBAAID,UAAU,mBAAmBE,IAAKwH,GACjC/H,KAAKP,MAAMgH,mBAAqBvB,GAC7B,wBAAImD,aAjU5B,aAiUyDpG,MAAO,CAACqG,MAAO,SACF,MAAzCtI,KAAKP,MAAM8G,gBAAgBwB,IAAsB/H,KAAKP,MAAM8G,gBAAgBwB,GAAWhE,OAAS,GAC7F,kBAAC,IAAD,CACInD,SAAS,UACT2H,MAAM,UACN1H,KAAK,QACLC,KAAK,aAKrB,wBAAIuH,aA1UvB,mBA0UqDpG,MAAO,CAACqG,MAAO,SAC7C,kBAAC,EAAD,CACIjG,QAASrC,KAAKP,MAAM0G,kBACpBN,qBAAsB,SAACxD,GACnB,OAAOe,IAAEO,OAAOtB,GAAS,SAACoD,EAAQlC,GAC9B,OAA+D,IAAxD,EAAK9D,MAAM+H,qBAAqB5D,QAAQ6B,EAAOnF,KAAcyG,EAAQpE,OAAS8C,EAAO9C,SAGpGJ,UAAWa,IAAEC,IAAIrD,KAAKP,MAAM8G,gBAAgBwB,IAAY,SAACZ,EAAe5D,GACpE,MAAO,CACHjD,GAAI6G,EACJxG,MAAOwG,MAGfrD,SAAU,SAACU,EAAOjC,GAAR,OAAsB,EAAKiG,uBAAuBT,EAAWxF,IACvEmC,8BAA+B,SAACF,EAAOjC,GAAR,OAAsB,EAAKiG,uBAAuBT,EAAWxF,OAGpG,wBAAI8F,aA7VzB,iBA6VqDpG,MAAO,CAACqG,MAAO,SAC3C,yBAAKjI,UAAU,gBAAgBD,MAAO2G,EAAQzG,IAAKyG,EAAQzG,OAIzER,KAAKE,WA7F3B,OACI,yBAAKiC,MAAO,CAAE8C,SAAU,WAAYC,OAAQ,SACxC,kBAAC,IAAD,CAASlE,KAAK,QAAQa,QAAQ,c,GAxGIX,IAAMC,W,0BClJtDwH,E,YACJ,WAAYjJ,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkJ,YAAa,EAElB,EAAKjJ,MAAQ,CACX6C,WAAY,GACZC,UAAW,GACXqD,UAAU,GARK,E,iFAajB5F,KAAK0I,YAAa,EAEd1I,KAAKR,MAAM+C,WACbvC,KAAKC,SAAS,CACZsC,UAAWvC,KAAKR,MAAM+C,c,6CAM1BvC,KAAK0I,YAAa,I,6CAIlB,IAAIrG,EAAUrC,KAAKR,MAAM6C,QAMzB,OAJIrC,KAAKR,MAAMqG,sBAAwB7F,KAAKP,MAAMmG,WAChDvD,EAAUrC,KAAKR,MAAMqG,qBAAqBxD,IAGrCuC,YAAuB,CAC5BtC,WAAYtC,KAAKP,MAAM6C,WACvBuC,MAAO,IACPxC,QAASA,EACTE,UAAWvC,KAAKP,MAAM8C,c,+BAIhB,IAAD,OACP,OACE,kBAAC,IAAM8B,SAAP,KACE,kBAAC,IAAD,CACEC,cAAe,uCACfC,OAAQ,CACN/C,SAAU,SAACgD,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MACd,EAAKiE,YACP,EAAKzI,SAAS,CACZqC,WAAYmC,IAIZ,EAAKjF,MAAMgC,UACb,EAAKhC,MAAMgC,SAASgD,EAAOC,IAG/BC,8BAA+B,SAACF,EAAOxB,GACjC,EAAK0F,YACP,EAAKzI,SAAS,CACZqC,WAAY,GACZC,UAAWS,EAAKT,YAIhB,EAAK/C,MAAMkF,+BACb,EAAKlF,MAAMkF,8BAA8BF,EAAOxB,EAAKT,YAGzDuB,SAAU,SAACU,EAAOxB,GACZ,EAAK0F,YACP,EAAKzI,SAAS,CACZqC,WAAY,GACZC,UAAWS,EAAKT,YAIhB,EAAK/C,MAAMsE,UACb,EAAKtE,MAAMsE,SAASU,EAAOxB,EAAKT,YAGpCoG,cAAe,SAACnE,EAAOxB,GACjB,EAAK0F,YACP,EAAKzI,SAAS,CACZ2F,UAAU,KAIhBgD,eAAgB,SAACpE,EAAOxB,GAClB,EAAK0F,YACP,EAAKzI,SAAS,CACZ2F,UAAU,MAKlBtE,OAAQ,CACNqD,YAAa,2BAEftC,QAASrC,KAAK6F,uBACdtD,UAAWvC,KAAKP,MAAM8C,UACtBkC,MAAOzE,KAAKP,MAAM6C,WAClBX,QAAQ,WACRkH,aAAa,0BACbnJ,OAAQM,KAAKP,MAAMmG,SACnBI,oBAAoB,S,GA3GUhF,IAAMC,WAkHzB6H,E,YACnB,WAAYtJ,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACX4G,gBAAiB,KACjBC,oBAAqB,KACrByC,iBAAkB,KAClBC,gBAAiB,CAAC,CAAE1I,GAAI,UAAWK,MAAO,cAAgB,CAAEL,GAAI,OAAQK,MAAO,SAC/EsI,mBAAoB,CAClB,CAAE3I,GAAI,SAAUK,MAAO,6BACvB,CAAEL,GAAI,YAAaK,MAAO,cAE5BuI,kBAAmB,CACjB,CAAE5I,GAAI,QAASK,MAAO,6BACtB,CAAEL,GAAI,WAAYK,MAAO,cAE3BwI,kBAAmB,CACjB,CAAE7I,GAAI,QAASK,MAAO,0CACtB,CAAEL,GAAI,WAAYK,MAAO,cAE3ByI,iBAAkB,CAChB,CAAE9I,GAAI,OAAQK,MAAO,2BACrB,CAAEL,GAAI,UAAWK,MAAO,cAE1B6F,OAAQ,MAxBO,E,wEA6BjB,OAAOxG,KAAKP,MAAM+G,QAAwC,MAA9BxG,KAAKP,MAAM4G,kB,8CAIvC,MAAO,CACL/F,GAAI,KACJ+I,QAAS,CAACrJ,KAAKP,MAAMuJ,gBAAgB,IACrCM,QAAS,KACT7E,MAAO,KACP8E,YAAY,EACZC,cAAe,Q,2CAIET,GAAmB,IAAD,OACrC,OAAO3F,IAAEC,IAAI0F,GAAkB,SAACU,EAAc1B,GAC5C,IAAI2B,EAAqB,EAAKC,wBAE9BD,EAAmBpJ,GAAKyH,EACxB2B,EAAmBL,QAAUjG,IAAEO,OAAO,EAAKlE,MAAMuJ,iBAAiB,SAACvD,EAAQlC,GACzE,OAAOkC,EAAOnF,KAAOmJ,EAAaJ,WAE/BK,EAAmBL,UACtBK,EAAmBL,QAAU,CAAC,EAAK5J,MAAMuJ,gBAAgB,KAE3D,IAAIY,EAAU,GAwBd,OAvBA,EAAKnK,MAAMwJ,mBAAmBnC,SAAQ,SAAS+C,GAC7CD,EAAQxC,KAAKyC,MAEf,EAAKpK,MAAMyJ,kBAAkBpC,SAAQ,SAAS+C,GAC5CD,EAAQxC,KAAKyC,MAEf,EAAKpK,MAAM0J,kBAAkBrC,SAAQ,SAAS+C,GAC5CD,EAAQxC,KAAKyC,MAEf,EAAKpK,MAAM2J,iBAAiBtC,SAAQ,SAAS+C,GAC3CD,EAAQxC,KAAKyC,MAGfH,EAAmBJ,QAAUlG,IAAEO,OAAOiG,GAAS,SAACnE,EAAQlC,GACtD,OAAOkC,EAAOnF,KAAOmJ,EAAaH,WAEpCI,EAAmBjF,MAAQgF,EAAahF,MACxCiF,EAAmBH,WAAaE,EAAaK,SAC7CJ,EAAmBF,cACjBpG,IAAEO,OAAO,EAAKlE,MAAM4G,iBAAmB,EAAK7G,MAAMqH,gBAAgB,SAACpB,EAAQlC,GACzE,OAAOkC,EAAOnF,KAAOyH,KACpB,IAAM,KAEJ2B,O,0CAST,IAAIX,EAAmB/I,KAAKR,MAAMuK,iBAAmB,GAErD/J,KAAKC,SAAS,CACZoG,gBAAiBrG,KAAKR,MAAMqH,eAC5BkC,iBAAkBA,EAClBiB,uBAAwB1C,OAAOC,KAAKwB,GACpCkB,qBAAsBjK,KAAKkK,qBAAqBnB,O,kDAaxBoB,EAAgB5H,GAC1C,IAAIwG,EAAmB/I,KAAKP,MAAMsJ,iBAElC,GAAIxG,EAAW,CACb,IAAIkH,EAAelH,EAAU,GAE7B4H,EAAe7J,GAAKmJ,EAAanJ,GACjC6J,EAAeX,cAAgBC,EAE/BV,EAAiBoB,EAAe7J,IAAM,CACpC+I,QACEc,EAAed,SAAWc,EAAed,QAAQtF,OAAS,EACtDoG,EAAed,QAAQ,GAAG/I,GAC1B,GACNgJ,QACEa,EAAeb,SAAWa,EAAeb,QAAQvF,OAAS,EACtDoG,EAAeb,QAAQ,GAAGhJ,GAC1B,GACNmE,MAAO0F,EAAe1F,MACtBqF,SAAUK,EAAeZ,wBAGpBR,EAAiBoB,EAAe7J,IACvC6J,EAAe7J,GAAK,KACpB6J,EAAeX,cAAgB,KAGjCxJ,KAAKC,SAAS,CACZ8I,iBAAkBA,EAClBiB,uBAAwB1C,OAAOC,KAAKwB,GACpCkB,qBAAsBjK,KAAKP,MAAMwK,uBAG/BjK,KAAKR,MAAM4K,6BACbpK,KAAKR,MAAM4K,4BAA4BrB,K,+CAKzC,IAAIkB,EAAuBjK,KAAKP,MAAMwK,qBAGJ,IAAhCA,EAAqBlG,QACuC,MAA5DkG,EAAqBA,EAAqBlG,OAAS,GAAGzD,KAEtD2J,EAAqB7C,KAAKpH,KAAK2J,yBAE/B3J,KAAKC,SAAS,CACZgK,qBAAsBA,O,yCAKT1G,GACjB,IAAIwF,EAAmB/I,KAAKP,MAAMsJ,iBAC9BkB,EAAuBjK,KAAKP,MAAMwK,4BAE/BlB,EAAiBkB,EAAqB1G,GAAGjD,IAChD2J,EAAqBI,OAAO9G,EAAG,GAE/BvD,KAAKC,SAAS,CACZ8I,iBAAkBA,EAClBiB,uBAAwB1C,OAAOC,KAAKwB,GACpCkB,qBAAsBA,M,+BAIhB,IAAD,OACP,OAAIjK,KAAKP,MAAM+G,OACN,uCAAaxG,KAAKP,MAAM+G,QACrBxG,KAAKwC,WAQb,kBAAC,IAAM6B,SAAP,KAEE,2BAAOhE,UAAU,2EACf,+BACE,wBAAIA,UAAU,0BACZ,wBAAIA,UAAU,uBAAuB+H,MAAM,OACzC,yBAAK/H,UAAU,gBAAgBD,MAtTxB,yCA0TT,wBAAIC,UAAU,uBAAuB+H,MAAM,OACzC,yBAAK/H,UAAU,gBAAgBD,MA1TjC,mBA4TI,yBAAK6B,MAAO,CAAEqI,cAAe,OAAQC,QAAS,WAC5C,kBAAC,IAAD,CACEC,MAAM,WACNzF,SAAS,0BACT0F,QAAQ,yIAER,yBAAKxI,MAAO,CAAEyI,YAAa,SAAUC,OAAQ,YAC3C,kBAAC,IAAD,CACEjK,cAAe,CAAEC,MAAO,WACxBC,SAAS,UACTC,KAAK,OACLC,KAAK,iBAOjB,wBAAIT,UAAU,uBAAuB+H,MAAM,OACzC,yBAAK/H,UAAU,gBAAgBD,MA9U3B,mBAkVN,wBAAIC,UAAU,uBAAuB+H,MAAM,OACzC,yBAAK/H,UAAU,gBAAgBD,MAlV7B,iCAsVJ,wBAAIC,UAAU,uBAAuB+H,MAAM,OACzC,yBAAK/H,UAAU,qBAIrB,+BAEG+C,IAAEC,IACDrD,KAAKP,MAAMwK,qBACX,SAASE,EAAgB5G,GAAI,IAAD,OAC1BY,QAAQmB,IAAI6E,EAAgB5G,GAE5B,IAAIqH,EAAcT,EAAe7J,GAE7BkJ,EAAgBW,EAAeX,cAEnC,OACE,wBAAInJ,UAAU,mBAAmBE,IAAK,iBAAmBqK,GAAe,KACtE,wBAAIvC,aA3WD,mBA2W+BpG,MAAO,CAAEqG,MAAO,SAC/CsC,GACC,kBAAC,EAAD,CACEvI,QAASrC,KAAKP,MAAM4G,gBACpBR,qBAAsB,SAAAxD,GACpB,OAAOe,IAAEO,OAAOtB,GAAS,SAACoD,EAAQlC,GAChC,OAAiE,IAA1D,EAAK9D,MAAMuK,uBAAuBpG,QAAQ6B,EAAOnF,QAG5DiC,UAAW,CACTa,IAAEyH,KAAK7K,KAAKP,MAAM4G,iBAAiB,SAAAZ,GACjC,OAAOA,EAAOnF,KAAOsK,MAGzB9G,SAAU,SAACU,EAAOjC,GAAR,OACR,EAAK6H,4BAA4BD,EAAgB5H,IAEnDmC,8BAA+B,SAACF,EAAOjC,GAAR,OAC7B,EAAK6H,4BAA4BD,EAAgB5H,OAKzD,wBAAI8F,aAhYJ,QAgY+BpG,MAAO,CAAEqG,MAAO,SAC5CkB,GACwB,SAAvBA,EAAc7G,MACS,SAAvB6G,EAAc7G,MACd3C,KAAKP,MAAMuJ,gBAAgB,IAC3BhJ,KAAKP,MAAMuJ,gBAAgB,GAAGrI,MAC/B6I,IACyB,SAAvBA,EAAc7G,MAA0C,SAAvB6G,EAAc7G,OAC9C,kBAAC,EAAD,CACEN,QAASrC,KAAKP,MAAMuJ,gBACpBnD,qBAAsB,SAAAxD,GACpB,OAAO,EAAK5C,MAAMuJ,iBAEpBzG,UAAW4H,EAAed,QAC1BvF,SAAU,SAACU,EAAOjC,GAChB4H,EAAed,QAAU9G,EACzB4H,EAAeZ,YAAa,EAE5B,EAAKa,4BAA4BD,EAAgB,CAC/CA,EAAeX,iBAGnB9E,8BAA+B,SAACF,EAAOjC,GACrC4H,EAAed,QAAU9G,EACzB,EAAK6H,4BAA4BD,EAAgB,CAC/CA,EAAeX,oBAM3B,wBAAInB,aA/ZJ,QA+Z+BpG,MAAO,CAAEqG,MAAO,SAC5CkB,GACCW,EAAed,SACfc,EAAed,QAAQ,IACU,YAAjCc,EAAed,QAAQ,GAAG/I,MACA,SAAvBkJ,EAAc7G,MAA0C,WAAvB6G,EAAc7G,OAChD,kBAAC,IAAD,CACE8G,aAAcU,EAAe1F,MAC7B/D,cAAe,CAAEC,MAAO6I,EAAc7I,OACtCL,GAAIkJ,EAAclJ,GAClBwK,OAAQ,SAAAtG,GACN2F,EAAe1F,MAAQD,EAAMgB,OAAOf,MAEpC,EAAK2F,4BAA4BD,EAAgB,CAC/CA,EAAeX,oBAKG,SAAvBA,EAAc7G,MACb,kBAAC,IAAD,CACE8B,MAAO0F,EAAe1F,MACtBjD,SAAU,SAACgD,EAAOxB,GAChBmH,EAAe1F,MAAQzB,EAAK+H,KAE5B,EAAKX,4BAA4BD,EAAgB,CAC/CA,EAAeX,oBAKC,YAAvBA,EAAc7G,MACb,kBAAC,IAAD,CACEqI,eAAgBb,EAAe1F,MAC/BjD,SAAU,SAAAzB,GACRA,EAAEkL,UAEFd,EAAe1F,MAAQ1E,EAAEyF,OAAOJ,QAEhC,EAAKgF,4BAA4BD,EAAgB,CAC/CA,EAAeX,oBAM1BA,GACCW,EAAed,SACfc,EAAed,QAAQ,IACU,SAAjCc,EAAed,QAAQ,GAAG/I,IACzB,UAAYkJ,GACX,kBAAC,EAAD,CAEEnH,QAC2B,UAAzBmH,EAAc0B,OACVlL,KAAKP,MAAMyJ,kBACc,UAAzBM,EAAc0B,OACdlL,KAAKP,MAAM0J,kBACY,SAAvBK,EAAc7G,KACd3C,KAAKP,MAAM2J,iBACXpJ,KAAKP,MAAMwJ,mBAEjBpD,qBAAsB,SAAAxD,GACpB,MAAgC,UAAzBmH,EAAc0B,OACjB,EAAKzL,MAAMyJ,kBACc,UAAzBM,EAAc0B,OACd,EAAKzL,MAAM0J,kBACY,SAAvBK,EAAc7G,KACd,EAAKlD,MAAM2J,iBACX,EAAK3J,MAAMwJ,oBAEjB1G,UAAW4H,EAAeb,QAC1BxF,SAAU,SAACU,EAAOjC,GAChB4H,EAAeb,QAAU/G,EACzB,EAAK6H,4BAA4BD,EAAgB,CAC/CA,EAAeX,iBAGnB9E,8BAA+B,SAACF,EAAOjC,GACrC4H,EAAeb,QAAU/G,EACzB,EAAK6H,4BAA4BD,EAAgB,CAC/CA,EAAeX,oBAM3B,wBAAInB,aArfN,eAqf+BpG,MAAO,CAAEqG,MAAO,SACzC6B,EAAed,SAAwC,MAA7Bc,EAAed,QAAQ,IAClB,SAAjCc,EAAed,QAAQ,GAAG/I,GACxB,kBAAC,IAAD,CACEC,IAAI,mBACJyK,eAAgBb,EAAeZ,WAC/B/H,SAAU,SAAAzB,GACRA,EAAEkL,UAEFd,EAAeZ,WAAaxJ,EAAEyF,OAAOJ,QAErC,EAAKgF,4BAA4BD,EAAgB,CAC/CA,EAAeX,mBAKrB,kBAAC,IAAD,CAAUjJ,IAAI,oBAAoBkE,OAAO,EAAOhD,UAAU,KAG9D,wBAAI4G,aAAY,UAAWpG,MAAO,CAAEqG,MAAO,SACzC,kBAAC,IAAD,CACE3H,MAAM,eACNgB,QAAQ,OACRlB,QAAS,WACP,EAAK0K,mBAAmB5H,SAMlCzD,KAAKE,SAMb,yBAAKK,UAAU,qBACb,kBAAC,IAAD,CACEM,MAAM,YACNgB,QAAQ,QACRlB,QAAS,WACP,EAAK2K,8BAxPb,yBAAKnJ,MAAO,CAAE8C,SAAU,WAAYC,OAAQ,SAC1C,kBAAC,IAAD,CAASlE,KAAK,QAAQa,QAAQ,c,GApLgBX,IAAMC,WCxH9D,SAASoK,EAAmBC,GACxB,IAAIC,EAEJ,OAAQD,GACJ,IAAK,OACL,IAAK,WACDC,EAAM,OACN,MACJ,IAAK,UACDA,EAAM,UACN,MACJ,IAAK,SACL,IAAK,OACL,IAAK,UACL,IAAK,WACDA,EAAM,SACN,MACJ,QACIA,EAAM,OAId,OAAOA,E,wCAIX,IAAMC,EAAsB,6DAIPC,E,YACjB,WAAYjM,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTiM,gBAAiB,KACjBvF,kBAAmB,KACnBE,gBAAiB,KACjBE,gBAAiB,GACjBwC,iBAAkB,GAClBvC,OAAQ,KACRmF,WAAW,EACXC,cAAc,EACdC,WAAY,KACZC,cAAe,KACfC,YAAY,EACZC,UAAU,EACVC,oBAAoB,EACpBC,uBAAuB,EACvBC,qBAAsB,iBAAO,IAC7BC,cAAe,GAnBJ,E,qFAuBKrE,EAAWC,GAC/B7D,QAAQmB,IAAIyC,EAAWC,GAEvB,IAAIzB,EAAkBvG,KAAKP,MAAM8G,gBAEjCA,EAAgBwB,GAAaC,EAE7BhI,KAAKC,SAAS,CACVsG,gBAAiBA,EACjBwF,YAAY,M,mDAISxJ,GACzB4B,QAAQmB,IAAI/C,GAEZ,IAAIsJ,EAAatJ,EAAU,IAAM,KAE9BvC,KAAKP,MAAMoM,aAAeA,GAAgB7L,KAAKP,MAAMsM,aAAcM,QAAQb,KAC1ExL,KAAKC,SAAS,CACV4L,WAAYA,IAIhB7L,KAAKsM,wBAAwBtM,KAAKP,MAAMiM,gBAAiB1L,KAAKP,MAAMqM,kB,mDAI/CvJ,GACzB,IAAIsJ,EAAatJ,EAAU,IAAM,KAE9BvC,KAAKP,MAAMoM,aAAeA,GAAgB7L,KAAKP,MAAMsM,aAAcM,QAAQb,IAC1ExL,KAAKC,SAAS,CACV4L,WAAYA,EACZtF,gBAAiB,GACjBwC,iBAAkB,O,oCAM1B,OAAO/I,KAAKP,MAAM+G,QACc,MAA5BxG,KAAKP,MAAMqM,eACwB,MAAhC9L,KAAKP,MAAM0G,mBACmB,MAA9BnG,KAAKP,MAAM4G,iBACoB,MAA/BrG,KAAKP,MAAMsJ,mB,0CAKlB/I,KAAKC,SAAS,CACV6L,cAAe9L,KAAKR,MAAMsM,kB,8CAIVJ,EAAiB1I,GACrC,IAAI8I,EAAgB9L,KAAKP,MAAMqM,cAAcJ,IAAoB,GAE9D1L,KAAKP,MAAMmM,cAAgB5L,KAAKP,MAAMoM,aACrCC,EAAgBA,EAAc9L,KAAKP,MAAMoM,aAAe,IAG5D,IAAIU,EAAWT,EAAcS,UAAY,GAEzCvM,KAAKC,SAAS,CACVoG,gBAAiBjD,IAAEC,IAAIL,GAAM,SAACM,EAAMC,GAAP,MAAc,CACvCjD,GAAIgD,EAAKzC,KACTF,MAAO2C,EAAKzC,KACZ8B,KAAM0I,EAAmB/H,EAAKX,MAC9BuI,OAAQ5H,EAAKX,SAEjB4D,gBAAiBnD,IAAEoJ,KAAKD,EAAU,CAjGnB,uBAiG4C,GAC3DxD,iBAAkBwD,EAAQ,mBAAwB,O,2CAIrCb,GACjBjJ,IAAEC,KAAK,CACHC,KAAM,MAENC,IAAKC,IAAU,gDAAkD6I,EAAkB,UAAY5I,YAAU,CAACC,OAAO,SACjHC,KAAM,CACFC,OAAQ,aACRC,QAAS,aAEbC,QAAS,SAASH,GACdhD,KAAKsM,wBAAwBZ,EAAiB1I,IAChDlD,KAAKE,MACPuB,MAAO,SAASyC,EAAKC,EAAQC,GACzBC,QAAQ5C,MAAMyC,EAAKC,EAAQC,GAE3BlE,KAAKC,SAAS,CACVuG,OAAQtC,EAAIE,cAElBtE,KAAKE,QAGXyC,IAAEC,KAAK,CACHC,KAAM,MAENC,IAAKC,IAAU,kDAAoD6I,EAAgBjI,cAAgB,QAAUX,YAAU,CAACC,OAAO,SAC/HC,KAAM,GACNG,QAAS,SAASH,GACdhD,KAAKC,SAAS,CACVkG,kBAAmB/C,IAAEC,IAAIL,GAAM,SAACqC,EAAK9E,GAAN,MAAe,CAC1CD,GAAIC,EACJI,MAAOJ,EACPoC,KAAM0I,EAAmBhG,UAGnCvF,KAAKE,MACPuB,MAAO,SAASyC,EAAKC,EAAQC,GACzBC,QAAQ5C,MAAMyC,EAAKC,EAAQC,GAE3BlE,KAAKC,SAAS,CACVuG,OAAQtC,EAAIE,cAElBtE,KAAKE,U,+CAKXmE,QAAQmB,IAAI,2BAA4BtF,KAAKP,MAAMqM,eAEnD,IAAIvF,EAAkBvG,KAAKP,MAAM8G,gBAE7BuF,EAAgB,CAChBS,SAAUnJ,IAAE6D,OAAOV,GAAiB,SAACuF,EAAe9E,EAAce,GAK9D,OAJK3E,IAAEqJ,QAAQzF,IAAyC,IAAxBA,EAAajD,QAAgBiD,EAAa,KAAOe,IAC7E+D,EAAc/D,GAAaf,GAGxB8E,IACR,KAeP,OAZI1I,IAAEsJ,QAAQ1M,KAAKP,MAAMsJ,oBACrB+C,EAAcS,SAAd,kBAA6CvM,KAAKP,MAAMsJ,kBAGzD/I,KAAKP,MAAMmM,cAAgB5L,KAAKP,MAAMoM,aACrCC,EAAgB1I,IAAErB,OAAO,GAAI/B,KAAKP,MAAMqM,cAAc9L,KAAKP,MAAMiM,gBAAgBpL,KAAO,GAAxE,eACXN,KAAKP,MAAMoM,WAAaC,KAIjC3H,QAAQmB,IAAI,gBAAiBwG,GAEtB1I,IAAErB,OAAO,GAAI/B,KAAKP,MAAMqM,cAAxB,eACF9L,KAAKP,MAAMiM,gBAAgBpL,GAAKwL,M,wCAIvBa,GACdxI,QAAQmB,IAAI,sBAAuBqH,GAEnC3M,KAAKC,SAAS,CACV+L,UAAU,IAGdvJ,IAAEC,KAAK,CACHC,KAAM,OAENC,IAAKC,IAAU,6CAA+CC,YAAU,CAACC,OAAO,SAChF6J,YAAa,kCACb5J,KAAM6J,KAAKC,UAAUH,GACrBxJ,QAAS,SAASH,GACdmB,QAAQmB,IAAItC,GAEZhD,KAAKC,SAAS,CACV6L,cAAea,EACfZ,YAAY,EACZC,UAAU,IAGXhM,KAAKR,MAAMyI,iBACVjI,KAAKR,MAAMyI,gBAAgB0E,IAEjC7M,KAAKE,MACPuB,MAAO,SAASyC,EAAKC,EAAQC,GACzBC,QAAQ5C,MAAMyC,EAAKC,EAAQC,GAE3BlE,KAAKC,SAAS,CACVuG,OAAQtC,EAAIE,WACZ4H,UAAU,KAEhBlM,KAAKE,U,+BAML,IAAD,OACL,OAEI,6BACKA,KAAKP,MAAMuM,UAAY,kBAAC,IAAD,CAASlL,KAAK,QAAQa,QAAQ,UAEtD,kBAACpC,EAAA,EAAD,CAAaK,eAAe,EAAMF,QAAQ,EAAMU,MAAM,iCACjDJ,KAAKP,MAAM+G,QAAU,kBAAC,EAAD,CAClB1B,SAAU,SAACtF,GACP,OAAG,EAAKC,MAAMqM,cAActM,EAAMiG,OAAOnF,IAC9B,2BAAId,EAAMiG,OAAOnF,IAGrBd,EAAMiG,OAAOnF,IAExBwD,SAAU,SAACU,EAAOxB,GACd,IAAI0I,EAAkB1I,EAAK,GAE3B,EAAK/C,SAAS,CACVyL,gBAAiBA,IAGrB,EAAKqB,qBAAqBrB,EAAgBpL,KAE9CoE,8BAA+B,SAACF,EAAOxB,GACnC,QAAI,EAAKvD,MAAMsM,aAAcM,QAAQb,MACjC,EAAKvL,SAAS,CACVyL,gBAAiB,KACjBvF,kBAAmB,KACnBE,gBAAiB,KAEjB0F,YAAY,KAGT,IAKflI,OAAQ,SAACV,EAASe,GACd,EAAKjE,SAAS,CACV0L,WAAW,EACXnF,OAAQtC,EAAMA,EAAIE,SAAW,QAGrCV,cAA2C,MAA5BsJ,IAAWC,cAAwB,CAACD,IAAWC,eAAiB,QAGjFjN,KAAKP,MAAMkM,WAAa,kBAAC,IAAD,CACtBtL,UAAU,oBACViB,OAAQ,CACJX,MAAO,8EAEXa,SAAU,SAACzB,GACPA,EAAEkL,UAEF,EAAKhL,SAAS,CACV2L,aAAc7L,EAAEyF,OAAOJ,aAKlCpF,KAAKP,MAAMmM,cACR,yBAAK3J,MAAO,CAACiL,SAAU,SACnB,kBAAC,EAAD,CACIpJ,SAAU,SAACU,EAAOjC,GAAR,OAAsB,EAAK4K,6BAA6B5K,IAClEmC,8BAA+B,SAACF,EAAOjC,GAAR,OAAsB,EAAK6K,6BAA6B7K,OAKnG,yBAAKlC,UAAU,yBAGnB,kBAACd,EAAA,EAAD,CAAaK,eAAe,EAAMF,QAAQ,EAAMU,MAAM,sDAE9CJ,KAAKP,MAAMiM,kBAAoB1L,KAAKqN,cAChC,kBAAC,EAAD,CACI9M,IAAK,4BAA8BP,KAAKP,MAAM2M,cAC9CtE,UAAW,4BAA8B9H,KAAKP,MAAM2M,cACpDvE,WAAY7H,KAAKP,MAAMiM,gBAAgBpL,GACvCqG,iBAAkB3G,KAAKP,MAAM0G,kBAC7BU,eAAgB7G,KAAKP,MAAM4G,gBAC3BO,eAAgB5G,KAAKP,MAAM8G,gBAC3B0B,gBAAiBjI,KAAKsN,wBAAwBxN,KAAKE,QAGvD,yBAAKiC,MAAO,CAAE8C,SAAU,WAAYC,OAAQ,SACxC,kBAAC,IAAD,CAASlE,KAAK,SAASa,QAAQ,YAK3C,yBAAKtB,UAAU,yBAGnB,kBAACd,EAAA,EAAD,CAAaK,eAAe,EAAMF,QAAQ,EAAMU,MAAM,uDAE9CJ,KAAKP,MAAMiM,kBAAoB1L,KAAKqN,cAChC,kBAAC,EAAD,CACI9M,IAAK,8BAAgCP,KAAKP,MAAM2M,cAChDtE,UAAW,8BAAgC9H,KAAKP,MAAM2M,cACtDvE,WAAY7H,KAAKP,MAAMiM,gBAAgBpL,GACvCuG,eAAgB7G,KAAKP,MAAM4G,gBAC3B0D,gBAAiB/J,KAAKP,MAAMsJ,iBAC5BqB,4BAA6B,SAACrB,GAC1B5E,QAAQmB,IAAIyD,GAEZ,EAAK9I,SAAS,CACV8I,iBAAkBA,EAClBgD,YAAY,OAKxB,yBAAK9J,MAAO,CAAE8C,SAAU,WAAYC,OAAQ,SACxC,kBAAC,IAAD,CAASlE,KAAK,SAASa,QAAQ,YAK3C,yBAAKtB,UAAU,yBAGnB,yBAAK4B,MAAO,CACV,gBAAiB,UAEdjC,KAAKP,MAAMiM,iBAAmB1L,KAAKqN,eAChC,kBAAC,IAAMhJ,SAAP,KACI,kBAAC,IAAD,CAAQ1D,MAAM,OAAOgB,QAAQ,QAAQlB,QAAS,WAC1C,IAAIkM,EAAsB,EAAKY,yBAE/B,EAAKC,kBAAkBb,MAG1B3M,KAAKP,MAAMqM,eAAiB9L,KAAKP,MAAMqM,cAAc9L,KAAKP,MAAMiM,gBAAgBpL,KAC7E,kBAAC,IAAD,CAAQK,MAAM,gBAAgBgB,QAAQ,cAAclB,QAAS,WACzD,EAAKR,SAAS,CACVgM,oBAAoB,EACpBC,uBAAuB,EACvBC,qBAAuB,WACnB,GAAG,EAAK1M,MAAMyM,uBAAyBG,QAAQ,6DAA8D,CACzG,EAAKpM,SAAS,CACVsG,gBAAiB,GACjBwC,iBAAkB,GAElBqD,cAAe,EAAK3M,MAAM2M,cAAgB,EAE1CH,oBAAoB,EACpBE,qBAAuB,eAG3B,IAAIQ,EAAsB,EAAKY,yBAE5BZ,EAAoB,EAAKlN,MAAMiM,gBAAgBpL,YACvCqM,EAAoB,EAAKlN,MAAMiM,gBAAgBpL,IAG1D,EAAKkN,kBAAkBb,YAUtD3M,KAAKP,MAAMiM,iBAAmB1L,KAAKqN,eAChC,kBAAC,IAAD,CACII,aAAa,EACbC,OAAQ,CACJ,yBAAKnN,IAAI,aAAaF,UAAU,uBAC5B,kBAAC,IAAD,CACIK,cAAe,CACXC,MAAO,0BAEXL,GAAG,gBACHgB,OAAQ,CACJX,MAAO,0BAEXa,SAAU,SAACzB,GACPA,EAAEkL,UAEF,EAAKhL,SAAS,CACViM,sBAAuBnM,EAAEyF,OAAOJ,cAKhD,kBAAC,IAAD,CACI7E,IAAI,YACJI,MAAM,SACNF,QAAS,WACL,EAAKR,SAAS,CACVgM,oBAAoB,EACpBC,uBAAuB,OAInC,kBAAC,IAAD,CACI3L,IAAI,WACJI,MAAM,QACNF,QAAST,KAAKP,MAAM0M,qBACpBxK,QAAQ,cACRF,UAAWzB,KAAKP,MAAMyM,yBAG9BxM,OAAQM,KAAKP,MAAMwM,mBACnBrD,eAAgB,WACZ,EAAK3I,SAAS,CACVgM,oBAAoB,EACpBC,uBAAuB,KAG/ByB,OAAO,QACP7M,KAAK,SACLV,MAAO,uCAAY,2BAAIJ,KAAKP,MAAMiM,gBAAgBpL,IAA3C,cAEP,yBAAKD,UAAU,wBAAf,wEAEI,6BAFJ,gE,GAnbwBW,IAAMC","file":"static/js/16.e3a28930.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/describeGlobal/sobjects' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable,layoutable,triggerable',\n                _select: 'name,label'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.name,\n                        label: item.label,\n                        index: 'grax' + item.name.toLowerCase() + 'index'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.selectionKeys != null) {\n                    this.setState({\n                        selection: _.filter(this.state.options, (item) => this.props.selectionKeys.indexOf(item.index) !== -1 || this.props.selectionKeys.indexOf(item.id) !== -1)\n                    });\n                }\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n\n                if(this.props.onSelect && this.state.selection != null && this.state.selection.length > 0) {\n                    this.props.onSelect(null, this.state.selection);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                if (this.props.onRequestRemoveSelectedOption && this.props.onRequestRemoveSelectedOption(event, data.selection)) {\n                                    this.setState({\n                                        inputValue: '',\n                                        selection: data.selection,\n                                    });\n\n                                    return true;\n                                }\n\n                                return false;\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Object',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                        menuItem={this.props.menuItem}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXOrgCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getOrgList' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.id,\n                        label: item.id + ' (' + item.label + ')'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXOrgCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Org',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox, Icon, RadioButtonGroup, Radio} from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nconst IS_MAPPED_FIELD = 'Is Mapped?'\nconst DATALAKE_FIELD = 'Datalake Field';\nconst SALESFORCE_FIELD = 'Salesforce Field';\n\n\nconst MAPPED_FIELDS = 'Mapped Fields';\nconst UNMAPPED_FIELDS = 'Un-mapped fields';\nconst ALL_FIELDS = 'All fields';\n\n\nclass GRAXRestoreMappingFilter extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n\t\tthis.state = {\n            checked: ALL_FIELDS\n        };\n    }\n\n    onChangeHandler(val) {\n        console.log(\"onChangeHandler\");\n        console.log(val);\n        this.setState({\n            checked: val\n        });\n\n        if(this.props.onChange) {\n            this.props.onChange(val);\n        }\n    }\n\n    render() {\n        const options = [MAPPED_FIELDS, UNMAPPED_FIELDS, ALL_FIELDS];\n\n\t\treturn (\n            <div className=\"slds-p-bottom_medium\">\n                <RadioButtonGroup\n                    onChange={(event) => this.onChangeHandler(event.target.value)}\n\n                    disabled={this.props.disabled}\n                    required={this.props.required}\n                    name={this.props.name}\n                    errorId={this.props.errorId}\n                >\n                    {_.map(options, function(option, i) {\n                        return (\n                            <Radio\n                                key={'option' + i}\n                                id={option}\n                                label={option}\n                                value={option}\n                                checked={this.state.checked === option}\n                                variant=\"button-group\"\n                                deselectable={true}\n                            />\n                        );\n                    }.bind(this))}\n                </RadioButtonGroup>\n            </div>\n\t\t);\n\t}\n}\n\n\nclass GRAXRestoreMappingDataLakeField extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        if(this.props.selection) {\n            this.setState({\n                selection: this.props.selection\n            })\n        }\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options;\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXRestoreMappingDataLakeField'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            this.setState({\n                                isOpened: true\n                            });\n                        },\n                        onClose: (event, data) => {\n                            this.setState({\n                                isOpened: false\n                            });\n                        }\n                    }}\n                    labels={{\n                        placeholder: 'Select DataLake Field',\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant=\"readonly\"\n                    hasStaticAlignment={true}\n                    multiple={true}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXRestoreMappingFields extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _graxFieldOptions: null,\n            _graxFieldOptionsList: null,\n            _sfFieldOptions: null,\n            _sfFieldOptionsList: null,\n            _sfMappedFields: null,\n            _error: null,\n\n            _filterSelection: ALL_FIELDS,\n            isPreviouslyMapped: false\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.state._graxFieldOptions != null && this.state._sfFieldOptions != null);\n    }\n\n    componentDidMount() {\n\n        var _graxFieldOptionsList = _.map(this.props.graxFieldOptions, function(item, i) {\n            return item.id;\n        });\n\n        /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n        var _sfMappedFields = this.props.sfMappedFields || {};\n\n        var _sfFieldOptions = this.props.sfFieldOptions;\n\n        // Map selection\n        _.forEach(_sfFieldOptions, (sfField, i) => {\n            var mappedFields = _.reduce(_sfMappedFields[sfField.id] || [sfField.id], (_selection, graxFieldName) => {\n                if (_graxFieldOptionsList.indexOf(graxFieldName) !== -1) {\n                    _selection.push(graxFieldName);\n                }\n\n                return _selection;\n            }, []);\n\n            if(mappedFields.length > 0) {\n                _sfMappedFields[sfField.id] = mappedFields;\n            }\n        });\n\n        this.setState({\n            _graxFieldOptions: this.props.graxFieldOptions,\n            _graxFieldOptionsList: _graxFieldOptionsList,\n            _sfFieldOptions: _sfFieldOptions,\n            //_sfFieldOptionsList: _sfFieldOptionsList,\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.state._filterSelection !== nextState._filterSelection\n            || this.props.objectName !== nextProps.objectName\n            || this.state._graxFieldOptions !== nextState._graxFieldOptions\n            || this.state._sfFieldOptions !== nextState._sfFieldOptions\n            || this.props.graxFieldOptions !== nextProps.graxFieldOptions\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfMappedFields !== nextProps.sfMappedFields\n            || this.props.renderKey !== nextProps.renderKey\n        );\n    }\n\n    onMappingChangeHandler(fieldName, selection) {\n        var mappedValues = _.map(selection, function(item, i) {\n            return item.id;\n        });\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        if(selection) {\n            _sfMappedFields[fieldName] = mappedValues;\n        } else {\n            delete _sfMappedFields[fieldName];\n        }\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n\n        if(this.props.onMappingChange) {\n            this.props.onMappingChange(fieldName, mappedValues);\n        }\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            var sfFieldOptions = this.state._sfFieldOptions;\n\n            if(this.state._filterSelection === MAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state._sfMappedFields != null\n                        && this.state.sfMappedFieldsList.indexOf(item.id) !== -1\n                        && this.state._sfMappedFields[item.id].length !== 0\n                    );\n                });\n            }\n\n            if(this.state._filterSelection === UNMAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state.sfMappedFieldsList.indexOf(item.id) === -1\n                        || this.state._sfMappedFields[item.id] == null\n                        || this.state._sfMappedFields[item.id].length === 0\n                    );\n                });\n            }\n\n            sfFieldOptions = _.sortBy(sfFieldOptions, ['id']);\n\n            return (\n                <React.Fragment>\n                    <GRAXRestoreMappingFilter onChange={(val) => this.setState({_filterSelection: val})} />\n\n                    <div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    {this.state._filterSelection === ALL_FIELDS && (\n                                        <th className=\"slds-text-title_caps\" scope=\"col\">\n                                            <div className=\"slds-truncate\" title={IS_MAPPED_FIELD}>{IS_MAPPED_FIELD}</div>\n                                        </th>\n                                    )}\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={DATALAKE_FIELD}>{DATALAKE_FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>{SALESFORCE_FIELD}</div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(sfFieldOptions, function(sfField, i) {\n                                    var fieldName = sfField.id;\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={fieldName}>\n                                            {this.state._filterSelection === ALL_FIELDS && (\n                                                <td data-label={IS_MAPPED_FIELD} style={{width: '10vw'}}>\n                                                    {this.state._sfMappedFields[fieldName] != null && this.state._sfMappedFields[fieldName].length > 0 && (\n                                                        <Icon\n                                                            category=\"utility\"\n                                                            color=\"warning\"\n                                                            name=\"check\"\n                                                            size=\"x-small\"\n                                                        />\n                                                    )}\n                                                </td>\n                                            )}\n                                            <td data-label={SALESFORCE_FIELD} style={{width: '60vw'}}>\n                                                <GRAXRestoreMappingDataLakeField\n                                                    options={this.state._graxFieldOptions}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return this.state.graxMappedFieldsList.indexOf(option.id) === -1 && sfField.type === option.type;\n                                                        });\n                                                    }}\n                                                    selection={_.map(this.state._sfMappedFields[fieldName], (graxFieldName, i) => {\n                                                        return {\n                                                            id: graxFieldName,\n                                                            label: graxFieldName\n                                                        };\n                                                    })}\n                                                    onSelect={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                />\n                                            </td>\n                                            <td data-label={DATALAKE_FIELD} style={{width: '30vw'}}>\n                                                <div className=\"slds-truncate\" title={sfField.id}>{sfField.id}</div>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from \"react\";\nimport _ from \"lodash\";\n\nimport {\n  Spinner,\n  Combobox,\n  Input,\n  Datepicker,\n  Button,\n  Checkbox,\n  Tooltip,\n  Icon\n} from \"@salesforce/design-system-react\";\n\nimport { comboboxFilterAndLimit } from \"../lib/utils\";\n\nconst SALESFORCE_FIELD = \"Salesforce Field\";\nconst MAPPING = \"Option\";\nconst DEFAULT_VALUE = \"Value\";\nconst IS_OVERRIDE = \"Is Override?\";\n\nclass GRAXRestoreMappingSFField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._isMounted = false;\n\n    this.state = {\n      inputValue: \"\",\n      selection: [],\n      isOpened: false\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this.props.selection) {\n      this.setState({\n        selection: this.props.selection\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  filterOptionsHandler() {\n    var options = this.props.options;\n\n    if (this.props.filterOptionsHandler && this.state.isOpened) {\n      options = this.props.filterOptionsHandler(options);\n    }\n\n    return comboboxFilterAndLimit({\n      inputValue: this.state.inputValue,\n      limit: 1000,\n      options: options,\n      selection: this.state.selection\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Combobox\n          classNameMenu={\"scrollable-GRAXRestoreMappingSFField\"}\n          events={{\n            onChange: (event, { value }) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: value\n                });\n              }\n\n              if (this.props.onChange) {\n                this.props.onChange(event, value);\n              }\n            },\n            onRequestRemoveSelectedOption: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onRequestRemoveSelectedOption) {\n                this.props.onRequestRemoveSelectedOption(event, data.selection);\n              }\n            },\n            onSelect: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onSelect) {\n                this.props.onSelect(event, data.selection);\n              }\n            },\n            onRequestOpen: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: true\n                });\n              }\n            },\n            onRequestClose: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: false\n                });\n              }\n            }\n          }}\n          labels={{\n            placeholder: \"Select SalesForce Field\"\n          }}\n          options={this.filterOptionsHandler()}\n          selection={this.state.selection}\n          value={this.state.inputValue}\n          variant=\"readonly\"\n          menuPosition=\"overflowBoundaryElement\"\n          isOpen={this.state.isOpened}\n          hasStaticAlignment={true}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default class GRAXRestoreMappingDefaults extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _sfFieldOptions: null,\n      _sfFieldOptionsList: null,\n      _sfDefaultValues: null,\n      _mappingOptions: [{ id: \"DEFAULT\", label: \"Default To\" }, { id: \"MASK\", label: \"Mask\" }],\n      _maskOptionsString: [\n        { id: \"STRING\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"STRINGRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsPhone: [\n        { id: \"PHONE\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"PHONERND\", label: \"Randomize\" }\n      ],\n      _maskOptionsEmail: [\n        { id: \"EMAIL\", label: \"Mask the domain with @maskeddomain.com\" },\n        { id: \"EMAILRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsDate: [\n        { id: \"DATE\", label: \"Mask the year with 2000\" },\n        { id: \"DATERND\", label: \"Randomize\" }\n      ],\n      _error: null\n    };\n  }\n\n  isLoaded() {\n    return this.state._error || this.state._sfFieldOptions != null;\n  }\n\n  getDefaultValueStruct() {\n    return {\n      id: null,\n      mapping: [this.state._mappingOptions[0]],\n      masking: null,\n      value: null,\n      isOverride: false,\n      selectedField: null\n    };\n  }\n\n  getDefaultValuesList(_sfDefaultValues) {\n    return _.map(_sfDefaultValues, (defaultValue, fieldName) => {\n      var defaultValueStruct = this.getDefaultValueStruct();\n\n      defaultValueStruct.id = fieldName;\n      defaultValueStruct.mapping = _.filter(this.state._mappingOptions, (option, i) => {\n        return option.id === defaultValue.mapping;\n      });\n      if (!defaultValueStruct.mapping) {\n        defaultValueStruct.mapping = [this.state._mappingOptions[0]];\n      }\n      let tempMsk = [];\n      this.state._maskOptionsString.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsPhone.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsEmail.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsDate.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n\n      defaultValueStruct.masking = _.filter(tempMsk, (option, i) => {\n        return option.id === defaultValue.masking;\n      });\n      defaultValueStruct.value = defaultValue.value;\n      defaultValueStruct.isOverride = defaultValue.override;\n      defaultValueStruct.selectedField =\n        _.filter(this.state._sfFieldOptions || this.props.sfFieldOptions, (option, i) => {\n          return option.id === fieldName;\n        })[0] || null;\n\n      return defaultValueStruct;\n    });\n  }\n\n  componentDidMount() {\n    /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n    var _sfDefaultValues = this.props.sfDefaultValues || {};\n\n    this.setState({\n      _sfFieldOptions: this.props.sfFieldOptions,\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.getDefaultValuesList(_sfDefaultValues)\n    });\n  }\n\n  /*shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.props.objectName !== nextProps.objectName\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfDefaultValues !== nextProps.sfDefaultValues\n            || this.props.renderKey != nextProps.renderKey\n        );\n    }*/\n\n  onDefaultValueChangeHandler(sfDefaultValue, selection) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n\n    if (selection) {\n      var defaultValue = selection[0];\n\n      sfDefaultValue.id = defaultValue.id;\n      sfDefaultValue.selectedField = defaultValue;\n\n      _sfDefaultValues[sfDefaultValue.id] = {\n        mapping:\n          sfDefaultValue.mapping && sfDefaultValue.mapping.length > 0\n            ? sfDefaultValue.mapping[0].id\n            : \"\",\n        masking:\n          sfDefaultValue.masking && sfDefaultValue.masking.length > 0\n            ? sfDefaultValue.masking[0].id\n            : \"\",\n        value: sfDefaultValue.value,\n        override: sfDefaultValue.isOverride\n      };\n    } else {\n      delete _sfDefaultValues[sfDefaultValue.id];\n      sfDefaultValue.id = null;\n      sfDefaultValue.selectedField = null;\n    }\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.state._sfDefaultValuesList\n    });\n\n    if (this.props.onDefaultValueChangeHandler) {\n      this.props.onDefaultValueChangeHandler(_sfDefaultValues);\n    }\n  }\n\n  addAnotherFieldHandler() {\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    if (\n      _sfDefaultValuesList.length === 0 ||\n      _sfDefaultValuesList[_sfDefaultValuesList.length - 1].id != null\n    ) {\n      _sfDefaultValuesList.push(this.getDefaultValueStruct());\n\n      this.setState({\n        _sfDefaultValuesList: _sfDefaultValuesList\n      });\n    }\n  }\n\n  removeFieldHandler(i) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    delete _sfDefaultValues[_sfDefaultValuesList[i].id];\n    _sfDefaultValuesList.splice(i, 1);\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: _sfDefaultValuesList\n    });\n  }\n\n  render() {\n    if (this.state._error) {\n      return <div>Error: {this.state._error}</div>;\n    } else if (!this.isLoaded()) {\n      return (\n        <div style={{ position: \"relative\", height: \"5rem\" }}>\n          <Spinner size=\"small\" variant=\"base\" />\n        </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n          <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n            <thead>\n              <tr className=\"slds-line-height_reset\">\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>\n                    {SALESFORCE_FIELD}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={MAPPING}>\n                    {MAPPING}\n                    <div style={{ texttransform: \"none\", display: \"inline\" }}>\n                      <Tooltip\n                        align=\"top left\"\n                        position=\"overflowBoundaryElement\"\n                        content='Default To - Set a value which will be used for this field on all records. Mask - Select one of the options from the \"Value\" picklist'\n                      >\n                        <div style={{ marginRight: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Icon\n                            assistiveText={{ label: \"MAPPING\" }}\n                            category=\"utility\"\n                            name=\"info\"\n                            size=\"x-small\"\n                          />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={DEFAULT_VALUE}>\n                    {DEFAULT_VALUE}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={IS_OVERRIDE}>\n                    {IS_OVERRIDE}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" />\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* Iterate over fields */}\n              {_.map(\n                this.state._sfDefaultValuesList,\n                function(sfDefaultValue, i) {\n                  console.log(sfDefaultValue, i);\n\n                  var sfFieldName = sfDefaultValue.id;\n\n                  var selectedField = sfDefaultValue.selectedField;\n\n                  return (\n                    <tr className=\"slds-hint-parent\" key={\"sfFieldName: \" + (sfFieldName || \"\")}>\n                      <td data-label={SALESFORCE_FIELD} style={{ width: \"35vw\" }}>\n                        {sfFieldName || (\n                          <GRAXRestoreMappingSFField\n                            options={this.state._sfFieldOptions}\n                            filterOptionsHandler={options => {\n                              return _.filter(options, (option, i) => {\n                                return this.state._sfDefaultValuesFields.indexOf(option.id) === -1;\n                              });\n                            }}\n                            selection={[\n                              _.find(this.state._sfFieldOptions, option => {\n                                return option.id === sfFieldName;\n                              })\n                            ]}\n                            onSelect={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                            onRequestRemoveSelectedOption={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                          />\n                        )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"20vw\" }}>\n                        {selectedField &&\n                          selectedField.type !== \"text\" &&\n                          selectedField.type !== \"date\" &&\n                          this.state._mappingOptions[0] &&\n                          this.state._mappingOptions[0].label}\n                        {selectedField &&\n                          (selectedField.type === \"text\" || selectedField.type === \"date\") && (\n                            <GRAXRestoreMappingSFField\n                              options={this.state._mappingOptions}\n                              filterOptionsHandler={options => {\n                                return this.state._mappingOptions;\n                              }}\n                              selection={sfDefaultValue.mapping}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                sfDefaultValue.isOverride = false;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"35vw\" }}>\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"DEFAULT\" &&\n                          (((selectedField.type === \"text\" || selectedField.type === \"number\") && (\n                            <Input\n                              defaultValue={sfDefaultValue.value}\n                              assistiveText={{ label: selectedField.label }}\n                              id={selectedField.id}\n                              onBlur={event => {\n                                sfDefaultValue.value = event.target.value;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )) ||\n                            (selectedField.type === \"date\" && (\n                              <Datepicker\n                                value={sfDefaultValue.value}\n                                onChange={(event, data) => {\n                                  sfDefaultValue.value = data.date;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                              />\n                            )) ||\n                            (selectedField.type === \"boolean\" && (\n                              <Checkbox\n                                defaultChecked={sfDefaultValue.value}\n                                onChange={e => {\n                                  e.persist();\n\n                                  sfDefaultValue.value = e.target.checked;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                              />\n                            )))}\n\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"MASK\" &&\n                          (\"sfType:\" + selectedField && (\n                            <GRAXRestoreMappingSFField\n                              /*options={this.state._maskOptions}*/\n                              options={\n                                selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString\n                              }\n                              filterOptionsHandler={options => {\n                                return selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString;\n                              }}\n                              selection={sfDefaultValue.masking}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          ))}\n                      </td>\n                      <td data-label={IS_OVERRIDE} style={{ width: \"10vw\" }}>\n                        {(sfDefaultValue.mapping && sfDefaultValue.mapping[0] == null) ||\n                        sfDefaultValue.mapping[0].id !== \"MASK\" ? (\n                          <Checkbox\n                            key=\"checkbox_enabled\"\n                            defaultChecked={sfDefaultValue.isOverride}\n                            onChange={e => {\n                              e.persist();\n\n                              sfDefaultValue.isOverride = e.target.checked;\n\n                              this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                sfDefaultValue.selectedField\n                              ]);\n                            }}\n                          />\n                        ) : (\n                          <Checkbox key=\"checkbox_disabled\" value={false} disabled={true} />\n                        )}\n                      </td>\n                      <td data-label={\"Actions\"} style={{ width: \"10vw\" }}>\n                        <Button\n                          label=\"Remove Field\"\n                          variant=\"base\"\n                          onClick={() => {\n                            this.removeFieldHandler(i);\n                          }}\n                        />\n                      </td>\n                    </tr>\n                  );\n                }.bind(this)\n              )}\n            </tbody>\n          </table>\n          {/*</div>*/}\n\n          <div className=\"slds-p-top_medium\">\n            <Button\n              label=\"Add Field\"\n              variant=\"brand\"\n              onClick={() => {\n                this.addAnotherFieldHandler();\n              }}\n            />\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport React from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXSObjectCombobox from './GRAXSObjectCombobox';\n\nimport {Spinner, Button, Checkbox, Modal} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams, pageParams} from '../lib/grax-data-lake';\n\nimport GRAXOrgCombobox from './GRAXOrgCombobox';\nimport GRAXRestoreMappingFields from './GRAXRestoreMappingFields';\nimport GRAXRestoreMappingDefaults from './GRAXRestoreMappingDefaults';\n\nfunction normalizeFieldType(typeName) {\n    var nft;\n\n    switch (typeName) {\n        case 'date':\n        case 'datetime':\n            nft = 'date';\n            break;\n        case 'boolean':\n            nft = 'boolean';\n            break;\n        case 'double':\n        case 'long':\n        case 'percent':\n        case 'currency':\n            nft = 'number';\n            break;\n        default:\n            nft = 'text';\n            break;\n    }\n\n    return nft;\n}\n\n\nconst HAS_CHANGES_MESSAGE = 'Some changes have not been saved, do you want to continue?';\n\nconst DEFAULT_VALUES_KEY = '__defaultValues__';\n\nexport default class GRAXRestoreMapping extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedSObject: null,\n            _graxFieldOptions: null,\n            _sfFieldOptions: null,\n            _sfMappedFields: {},\n            _sfDefaultValues: {}, // to null\n            _error: null,\n            isLoading: true,\n            _isCustomOrg: false,\n            _customOrg: null,\n            customMapping: null,\n            hasChanges: false,\n            isSaving: false,\n            resetConfirmIsOpen: false,\n            resetConfirmIsChecked: false,\n            resetConfirmCallback: () => ({}),\n            renderCounter: 0\n        }\n    }\n\n    _onMappingChangeHandler(fieldName, mappedValues) {\n        console.log(fieldName, mappedValues);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        _sfMappedFields[fieldName] = mappedValues;\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            hasChanges: true\n        });\n    }\n\n    _onOrgSelectionChangeHandler(selection) {\n        console.log(selection);\n\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n            });\n            // this.state._customOrg = _customOrg;\n\n            this.onMappingSettingsChange(this.state.selectedSObject, this.state.customMapping);\n        }\n    }\n\n    _onOrgSelectionRemoveHandler(selection) {\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n                _sfMappedFields: {},\n                _sfDefaultValues: {}\n            });\n        }\n    }\n\n    isMapLoaded() {\n        return this.state._error || (\n            this.state.customMapping != null\n            && this.state._graxFieldOptions != null\n            && this.state._sfFieldOptions != null\n            && this.state._sfDefaultValues != null\n        );\n    }\n\n    componentDidMount() {\n        this.setState({\n            customMapping: this.props.customMapping\n        });\n    }\n\n    onMappingSettingsChange(selectedSObject, data) {\n        var customMapping = this.state.customMapping[selectedSObject] || {};\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = customMapping[this.state._customOrg] || {};\n        }\n\n        var fieldMap = customMapping.fieldMap || {};\n\n        this.setState({\n            _sfFieldOptions: _.map(data, (item, i) => ({\n                id: item.name,\n                label: item.name,\n                type: normalizeFieldType(item.type),\n                sfType: item.type\n            })),\n            _sfMappedFields: _.omit(fieldMap, [DEFAULT_VALUES_KEY]) || {},\n            _sfDefaultValues: fieldMap[DEFAULT_VALUES_KEY] || {}\n        });\n    }\n\n    sObjectChangeHandler(selectedSObject) {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + selectedSObject + '/fields' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable',\n                _select: 'name,type'\n            },\n            success: function(data) {\n                this.onMappingSettingsChange(selectedSObject, data);\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/grax' + selectedSObject.toLowerCase() + 'index' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    _graxFieldOptions: _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: normalizeFieldType(val)\n                    }))\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    getCustomMappingToSave() {\n        console.log('this.state.customMapping', this.state.customMapping);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        var customMapping = {\n            fieldMap: _.reduce(_sfMappedFields, (customMapping, mappedFields, fieldName) => {\n                if(!(_.isArray(mappedFields) && mappedFields.length === 1 && mappedFields[0] === fieldName)) {\n                    customMapping[fieldName] = mappedFields;\n                }\n\n                return customMapping;\n            }, {})\n        };\n\n        if(!_.isEmpty(this.state._sfDefaultValues)) {\n            customMapping.fieldMap[DEFAULT_VALUES_KEY] = this.state._sfDefaultValues;\n        }\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = _.assign({}, this.state.customMapping[this.state.selectedSObject.id] || {}, {\n                [this.state._customOrg]: customMapping\n            });\n        }\n\n        console.log('customMapping', customMapping);\n\n        return _.assign({}, this.state.customMapping, {\n            [this.state.selectedSObject.id]: customMapping\n        });\n    }\n\n    saveCustomMapping(customMappingToSave) {\n        console.log('customMappingToSave', customMappingToSave);\n\n        this.setState({\n            isSaving: true\n        });\n\n        $.ajax({\n            type: 'POST',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/saveCustomMapping' + GetParams({action:'save'}),\n            contentType: \"application/json; charset=utf-8\",\n            data: JSON.stringify(customMappingToSave),\n            success: function(data) {\n                console.log(data);\n\n                this.setState({\n                    customMapping: customMappingToSave,\n                    hasChanges: false,\n                    isSaving: false\n                });\n\n                if(this.props.onMappingChange) {\n                    this.props.onMappingChange(customMappingToSave);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString(),\n                    isSaving: false\n                });\n            }.bind(this)\n        });\n\n        //alert('Save in progress...');\n    }\n\n    render() {\n        return (\n            // <div style={{position: 'relative'}}>\n            <div>\n                {this.state.isSaving && <Spinner size=\"large\" variant=\"brand\" />}\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select your Salesforce Object\">\n                    {this.state._error || <GRAXSObjectCombobox\n                        menuItem={(props) => {\n                            if(this.state.customMapping[props.option.id]) {\n                                return <b>{props.option.id}</b>;\n                            }\n\n                            return props.option.id;\n                        }}\n                        onSelect={(event, data) => {\n                            var selectedSObject = data[0];\n\n                            this.setState({\n                                selectedSObject: selectedSObject\n                            });\n\n                            this.sObjectChangeHandler(selectedSObject.id);\n                        }}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            if(!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE)) {\n                                this.setState({\n                                    selectedSObject: null,\n                                    _graxFieldOptions: null,\n                                    _sfFieldOptions: null,\n                                    //_sfDefaultValues: null,\n                                    hasChanges: false\n                                });\n\n                                return true;\n                            }\n\n                            return false;\n                        }}\n                        onLoad={(success, err) => {\n                            this.setState({\n                                isLoading: false,\n                                _error: err ? err.toString : null\n                            })\n                        }}\n                        selectionKeys={pageParams.datalakeIndex != null ? [pageParams.datalakeIndex] : null}\n                    />}\n\n                    {!this.state.isLoading && <Checkbox\n                        className=\"slds-p-top_medium\"\n                        labels={{\n                            label: 'Would you like to define a custom field Mapping for a source Organization?',\n                        }}\n                        onChange={(e) => {\n                            e.persist();\n\n                            this.setState({\n                                _isCustomOrg: e.target.checked\n                            })\n                        }}\n                    />}\n\n                    {this.state._isCustomOrg && (\n                        <div style={{maxWidth: '50vw'}}>\n                            <GRAXOrgCombobox\n                                onSelect={(event, selection) => this._onOrgSelectionChangeHandler(selection)}\n                                onRequestRemoveSelectedOption={(event, selection) => this._onOrgSelectionRemoveHandler(selection)}\n                            />\n                        </div>\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Map the fields to the appropriate Salesforce field\">\n                    {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingFields\n                                key={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                graxFieldOptions={this.state._graxFieldOptions}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfMappedFields={this.state._sfMappedFields}\n                                onMappingChange={this._onMappingChangeHandler.bind(this)}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Set a default field value for fields on this object\">\n                {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingDefaults\n                                key={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfDefaultValues={this.state._sfDefaultValues}\n                                onDefaultValueChangeHandler={(_sfDefaultValues) => {\n                                    console.log(_sfDefaultValues);\n\n                                    this.setState({\n                                        _sfDefaultValues: _sfDefaultValues,\n                                        hasChanges: true\n                                    });\n                                }}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <div style={{\n                  \"margin-bottom\": \"25rem\"\n                }}>\n                    {this.state.selectedSObject && this.isMapLoaded() && (\n                        <React.Fragment>\n                            <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                this.saveCustomMapping(customMappingToSave);\n                            }}/>\n\n                            {this.state.customMapping && this.state.customMapping[this.state.selectedSObject.id] && (\n                                <Button label=\"Reset Mapping\" variant=\"destructive\" onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: true,\n                                        resetConfirmIsChecked: false,\n                                        resetConfirmCallback: (() => {\n                                            if(this.state.resetConfirmIsChecked && confirm('Are you sure that you want to reset the selected mapping?')) {\n                                                this.setState({\n                                                    _sfMappedFields: {},\n                                                    _sfDefaultValues: {},\n\n                                                    renderCounter: this.state.renderCounter + 1,\n\n                                                    resetConfirmIsOpen: false,\n                                                    resetConfirmCallback: (() => {}),\n                                                });\n\n                                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                                if(customMappingToSave[this.state.selectedSObject.id]) {\n                                                    delete customMappingToSave[this.state.selectedSObject.id];\n                                                }\n\n                                                this.saveCustomMapping(customMappingToSave);\n                                            }\n                                        })\n                                    });\n                                }} />\n                            )}\n                        </React.Fragment>\n                    )}\n                </div>\n\n                {this.state.selectedSObject && this.isMapLoaded() && (\n                    <Modal\n                        dismissible={true}\n                        footer={[\n                            <div key=\"resetCheck\" className=\"slds-p-bottom_small\">\n                                <Checkbox\n                                    assistiveText={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    id=\"reset-confirm\"\n                                    labels={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    onChange={(e) => {\n                                        e.persist();\n\n                                        this.setState({\n                                            resetConfirmIsChecked: e.target.checked\n                                        });\n                                    }}\n                                />\n                            </div>,\n                            <Button\n                                key=\"cancelBtn\"\n                                label=\"Cancel\"\n                                onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: false,\n                                        resetConfirmIsChecked: false\n                                    });\n                                }}\n                            />,\n                            <Button\n                                key=\"resetBtn\"\n                                label=\"Reset\"\n                                onClick={this.state.resetConfirmCallback}\n                                variant=\"destructive\"\n                                disabled={!this.state.resetConfirmIsChecked}\n                            />,\n                        ]}\n                        isOpen={this.state.resetConfirmIsOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                resetConfirmIsOpen: false,\n                                resetConfirmIsChecked: false\n                            });\n                        }}\n                        prompt=\"error\"\n                        size=\"medium\"\n                        title={<span>Reset <b>{this.state.selectedSObject.id}</b> mapping?</span>}\n                    >\n                        <div className=\"slds-m-around_medium\">\n                            Removing the mapping will set the mapping back to the default values.\n                            <br />\n                            Once a mapping has been reset, it cannot be restored.\n                        </div>\n                    </Modal>\n                )}\n            </div>\n        );\n    }\n}"],"sourceRoot":""}