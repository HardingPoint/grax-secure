{"version":3,"sources":["components/SLDSSection.jsx","public/js/jquery.sldsTree.js","../node_modules/@babel/runtime/helpers/esm/construct.js","components/GRAXSummaryChartsChart.jsx","components/GRAXSummaryChartsSimple.jsx","components/GRAXSummaryChartsAdvanced.jsx","components/GRAXSummaryCharts.jsx"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","$","svgns","fn","sldsTree","options","settings","extend","data","items","childs","attrs","root","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","item","onDiv","$div","append","onButton","$button","onFinish","$root","getTreeItemContent","level","attr","disabled","toggleClass","icon","document","createElementNS","setAttribute","class","icon_use","setAttributeNS","path","appendChild","on","i","getTreeItemButton","length","getTreeItem","getTree","each","html","jQuery","Parent","args","Class","Reflect","construct","sham","Proxy","Date","prototype","toString","call","isNativeReflectConstruct","a","push","apply","instance","Function","setPrototypeOf","arguments","GRAXSummaryChartsChart","google","charts","load","setOnLoadCallback","drawChart","fromDate","toDate","setHours","setMinutes","isLoading","summaryData","defaultChartSettings","width","left","showChartAttr","showRecords","showInserted","showUpdated","showArchived","chartFromDate","chartToDate","showAttributeFilter","hideChartOptions","chartObjectTopTen","sortedNames","otherSum","objIndexes","chartDataIndexes","chartData","counter","nameSet","Set","forEach","summary","summaryMap","add","Array","sort","b","obj","smyIndex","n","records","tempN","top10BackedUpObjects","rec","visualization","arrayToDataTable","JSON","parse","stringify","sliceVisibilityThreshold","PieChart","chartObjectByDate","DataTable","addColumn","fromDateAxis","toDateAxis","objectsTotalValue","startTime","smyDate","smyDateFormated","formatStartTime","getHours","fill","v","f","addRows","interpolateNulls","pointSize","explorer","hAxis","format","viewWindow","min","max","viewWindowMode","vAxis","LineChart","chartSummaryTopTen","summaryIndexes","spName","summaryResults","top10BackedUpSummaries","chartSummaryByDate","sumRes","chartAttributeProgressByDate","attIndexes","attrNames","attrName","summarysTotalValue","selectedSummaries","containsSelectedObjects","setSeconds","getFullYear","getMonth","padStart","getDate","getMinutes","getSeconds","isStacked","ColumnChart","ret","chartSelection","isBlank","chartEl","draw","selectChart","selection","chartInput","setDateFilter","formatDate","dt","chartOptions","variant","events","onChange","event","value","onRequestRemoveSelectedOption","onSelect","onChartSelect","labels","placeholder","comboboxFilterAndLimit","inputValue","limit","defaultChecked","isChecked","toggleDisabled","toggleEnabled","ref","nextProps","prevState","GRAXSummaryChartsSimple","chart","createRef","summaryDataResults","_currentOrgRecords","objectInput","objectSelection","objectOptions","chartSelected","loadSummaries","query","orgid","ajax","type","url","baseUrl","GetParams","action","dataIndex","_index","_select","_q","_limit","_from","_sort","_sortType","_ignore_unavailable","success","results","loadSummaryData","error","xhr","status","err","console","summaryNames","refreshChart","selectedObjects","option","selectedObject","tempData","current","date","CustomDataTableCell","href","spId","encodeURI","executionUniqueKey","_target","displayName","DataTableCell","GRAXSummaryChartsAdvanced","summaryDataSelected","itemsObjectsByDataRange","itemsObjectsByDataRangeSelection","summaryBreadownDTItems","summaryBreadownDTSelection","summaryDTItems","summaryDTSelection","summaryBDDTFromDate","summaryBDDTToDate","summaryDTFilters","checked","currentChartSelected","fromDT","toDT","loadSummaryDataTable","loadSummaryBreakdownTable","loadObjectDataTable","getSelectedSummary","summaries4chart","index","summaryList","dtSummaries","includeArchived","includeInserted","includeUpdated","archived","inserted","updated","existIndex","filter","createdDate","CreatedDate","startTimeFormated","CreatedDateFormatted","startTimeFormmated","summaryToShow","dtSummary","Id","allSummaries","objName","_allSumaries","startTimes","dateIndex","indexOf","dateData","summartDataResults","summaryIds","objNames","update","endTime","summaryDTHandleChanged","summaryBreadownDTHandleChanged","itemsObjectsByDataRangeHandleChanged","dataTableHandleSort","dtName","sortColumn","sortProperty","property","sortDirection","newState","val","style","height","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedHeader","fixedLayout","selectRows","onRowChange","onSort","sortable","primaryColumn","target","renderAggregatedScheduleProcessSection","renderScheduleProcessBreakdownSection","renderObjectsSection","minHeight","renderFilterCriteriaSection","renderFilterSections","GRAXSummaryCharts","padding"],"mappings":"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","file":"static/js/15.684fb009.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","/* eslint-disable no-undef */\n/* global google */\nimport React from 'react';\n\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox } from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSummaryChartsChart extends React.Component {\n    constructor(props) {\n        super(props);\n\n        google.charts.load('current', {'packages':['corechart']}); // Move to componentDidMount\n        google.charts.setOnLoadCallback( this.drawChart ); // Move to componentDidMount\n\n        let fromDate = this.props.fromDate?this.props.fromDate:new Date();\n        let toDate = this.props.toDate?this.props.toDate:new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            summaryData: this.props.summaryData,\n            defaultChartSettings: {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } },\n            showChartAttr: {\n                showRecords: true,\n                showInserted: true,\n                showUpdated: true,\n                showArchived: true\n            },\n\n            chartFromDate: fromDate,\n            chartToDate: toDate,\n            showAttributeFilter: true,\n            hideChartOptions: false\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState){\n        return nextProps;\n    }\n\n    componentDidMount() {\n        this.chartObjectTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let objIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n                    let smyIndex = chartDataIndexes[key];\n\n                    let n = (obj.records?obj.records:0);\n\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[key] = counter;\n                        chartData.push( [ key + ' ['+n+']', n] );\n                        counter++;\n                    }else{\n                        let tempN = chartData[smyIndex][1] + n;\n\n                        chartData[smyIndex] = [ key + ' ['+tempN+']', tempN];\n                    }\n\n                    otherSum += n;\n                };\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpObjects = [[\"Object\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpObjects.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpObjects.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpObjects);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartObjectByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n\n                    if(!obj.startTime) {\n                      continue;\n                    }\n\n                    let n = (obj.records?obj.records:0);\n                    let smyDate = new Date(obj.startTime);\n                    let smyDateFormated = this.formatStartTime(smyDate);\n                    let smyIndex = chartDataIndexes[smyDate];\n\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                    if( !chartData[smyIndex][objIndexes[key]+1] ){\n                        chartData[smyIndex][objIndexes[key]+1] = 0;\n                    }\n                    chartData[smyIndex][objIndexes[key]+1] += n;\n                    if( !objectsTotalValue[key] ){\n                        objectsTotalValue[key] = 0;\n                    }\n                    objectsTotalValue[key] += n\n                };\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.pointSize = 5;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let summaryIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                summaryIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                let smyIndex = chartDataIndexes[summary.spName];\n                let n = (summary.summaryResults.records?summary.summaryResults.records:0);\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    chartData.push( [ summary.spName + ' ['+n+']', n] );\n                }else{\n                    let tempN = chartData[smyIndex][1] + n;\n\n                    chartData[smyIndex] = [ summary.spName + ' ['+tempN+']', tempN];\n                }\n                otherSum += n;\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpSummaries = [[\"Summary\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpSummaries.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpSummaries.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpSummaries);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                let sumRes = summary.summaryResults;\n\n                if(!sumRes.startTime) {\n                  return;\n                }\n\n                let n = (sumRes.records?sumRes.records:0);\n                let smyDate = new Date(sumRes.startTime);\n                let smyDateFormated = this.formatStartTime(smyDate);\n                let smyIndex = chartDataIndexes[smyDate];\n\n                if( !fromDateAxis || fromDateAxis >= smyDate ){\n                    fromDateAxis = new Date(smyDate);\n                    fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                }\n\n                if( !toDateAxis || toDateAxis <= smyDate ){\n                    toDateAxis = new Date(smyDate);\n                    toDateAxis.setHours(toDateAxis.getHours()+1);\n                }\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    smyIndex = counter;\n                    chartDataIndexes[smyDate] = counter;\n                    chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                    counter++;\n                }\n\n                chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                if( !chartData[smyIndex][objIndexes[summary.spName]+1] ){\n                    chartData[smyIndex][objIndexes[summary.spName]+1] = 0;\n                }\n                chartData[smyIndex][objIndexes[summary.spName]+1] += n;\n                if( !objectsTotalValue[summary.spName] ){\n                    objectsTotalValue[summary.spName] = 0;\n                }\n                objectsTotalValue[summary.spName] += n\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartAttributeProgressByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let attIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let sortedNames = [];\n            let attrNames = [];\n\n            if( this.state.showChartAttr.showRecords ){ attrNames.push( \"records\" ); }\n            if( this.state.showChartAttr.showInserted ){ attrNames.push( \"inserted\" ); }\n            if( this.state.showChartAttr.showUpdated ){ attrNames.push( \"updated\" ); }\n            if( this.state.showChartAttr.showArchived ){ attrNames.push( \"archived\" ); }\n\n            attrNames.forEach(function(attrName){\n                sortedNames.push( attrName );\n            });\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                attIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n            let summarysTotalValue = {};\n            let selectedSummaries = new Set();\n\n            summaryData.forEach(function(summary){\n                let attr = {};\n                let summaryMap = summary.summaryMap;\n                let containsSelectedObjects = false;\n\n                for( let key in summaryMap ){\n                    let obj = summaryMap[key];\n                    if( obj ){\n                        attrNames.forEach( function(attrName){\n                            attr[attrName] = attr[attrName]?attr[attrName]:0;\n                            attr[attrName] += (obj[attrName]?obj[attrName]:0);\n                        } );\n                        containsSelectedObjects = true;\n                    }\n                };\n\n                if( containsSelectedObjects && summary.summaryResults.startTime ){\n                    let startTime = new Date(summary.summaryResults.startTime);\n                    startTime.setSeconds(0);\n\n                    let smyDate = startTime;\n                    let smyDateFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n                    let smyIndex = chartDataIndexes[smyDate];\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( attrNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated + \"\\n\" + summary.spName };\n\n                    attrNames.forEach(function(attrName){\n                        if( !chartData[smyIndex][attIndexes[attrName]+1] ){\n                            chartData[smyIndex][attIndexes[attrName]+1] = 0;\n                        }\n                        chartData[smyIndex][attIndexes[attrName]+1] += attr[attrName];\n\n                        if( !summarysTotalValue[attrName] ){\n                            summarysTotalValue[attrName] = 0;\n                        }\n                        summarysTotalValue[attrName] += attr[attrName];\n                    });\n\n                    selectedSummaries.add( summary.spName );\n                }\n            });\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in attIndexes ){\n                if( summarysTotalValue[key] !== undefined ){\n                    data.addColumn('number', key + \" [\" + summarysTotalValue[key] + \"]\");\n                }\n            };\n\n            chartData.sort(function(a,b){\n                return a[0] > b[0]?1:a[0] < b[0]?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.isStacked = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Date',\n                format: 'YYYY-dd-MM\\n hh:mm:ss',\n                viewWindowMode: 'pretty',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                }\n            };\n            options.vAxis = {\n                title: 'Attributes'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.ColumnChart, data, options ];\n        }.bind(this);\n\n        this.drawChart = function(){\n            let ret = this.state.chartSelection[0].call();\n\n            this.setState({\n                isLoading: false,\n                isBlank: ret == null\n            }, function(){\n                if( ret ){\n                    var chart = new ret[0]( this.chartEl );\n                    chart.draw(ret[1],ret[2]);\n                }\n            });\n        }.bind(this);\n\n        this.selectChart = function( selection ){\n            this.setState( {\n                chartInput : '',\n                chartSelection : selection\n            }, this.drawChart );\n        }.bind(this);\n\n        this.setDateFilter = function( fromDate, toDate ){\n            this.setState({\n                chartFromDate: fromDate,\n                chartToDate: toDate\n            });\n        }.bind(this);\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        let chartOptions = [{label: \"Object Top Ten\", id: \"chartObjectTopTen\", call : this.chartObjectTopTen },\n                    {label: \"Objects By Date\", id: \"chartObjectByDate\", call : this.chartObjectByDate},\n                    {label: \"Top Ten Processes\", id: \"chartSummaryTopTen\", call : this.chartSummaryTopTen},\n                    {label: \"Processes By Date\", id: \"chartSummaryByDate\", call : this.chartSummaryByDate},\n                    {label: \"Results by Date\", id: \"chartAttributeProgressByDate\", call : this.chartAttributeProgressByDate}\n        ];\n\n        this.setState({\n            isLoading: false,\n            chartOptions: chartOptions,\n            chartSelection: [chartOptions[0]]\n        });\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        if(this.state.isBlank) return null;\n\n        return (\n            <div>\n                <div>\n                    { !this.state.hideChartOptions &&\n                    (<div className=\"slds-grid slds-wrap\">\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                            <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n                                <div className=\"slds-grid slds-wrap\">\n\n                                    <div className={(this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter)?\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\":\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\"}>\n                                        <Combobox\n                                            events={{\n                                                onChange: (event, { value }) => {\n                                                    this.chartInput = value;\n                                                    this.setState( {\n                                                        chartInput : value\n                                                    }, this.drawChart );\n                                                },\n                                                onRequestRemoveSelectedOption: (event, data) => {\n                                                    this.setState( {\n                                                        chartInput : '',\n                                                        chartSelection : data.selection\n                                                    } );\n                                                },\n                                                onSelect: (event, data) => {\n                                                    this.selectChart( data.selection );\n\n                                                    if (this.props.onChartSelect) {\n                                                        this.props.onChartSelect(event, data.selection);\n                                                    }\n                                                },\n                                            }}\n\n                                            labels={{\n                                                label: 'Chart Type',\n                                                placeholder: '-- SELECT CHART TYPE --',\n                                            }}\n\n                                            options={comboboxFilterAndLimit({\n                                                inputValue: this.state.chartInput,\n                                                limit: 1000,\n                                                options: this.state.chartOptions,\n                                                selection: this.state.chartSelection\n                                            })}\n\n                                            selection={this.state.chartSelection}\n                                            value={this.state.chartInput}\n                                            variant=\"readonly\"\n                                        />\n                                    </div>\n\n                                    {this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter && (\n                                    <div className=\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\">\n                                        <SLDSSection title=\"Display Values\" className=\"slds-p-left_small slds-m-top_none\" >\n                                            <div className=\"slds-grid slds-wrap\">\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showRecords}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showRecords = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Records',\n                                                            toggleEnabled: 'Records'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showInserted}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showInserted = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Inserted',\n                                                            toggleEnabled: 'Inserted'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showUpdated}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showUpdated = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Updated',\n                                                            toggleEnabled: 'Updated'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showArchived}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showArchived = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Archived',\n                                                            toggleEnabled: 'Archived'\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </SLDSSection>\n                                    </div>\n                                    )}\n                                </div>\n                            </SLDSSection>\n                        </div>\n                    </div>)}\n\n                    <div  ref={chartEl => this.chartEl = chartEl} />\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox, Datepicker, Button } from '@salesforce/design-system-react';\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport $ from 'jquery';\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nexport default class GRAXSummaryChartsSimple extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chart = React.createRef();\n\n        this.summaryDataResults = [];\n        let fromDate = new Date();\n        let toDate = new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            fromDate: fromDate,\n            toDate: toDate,\n            _currentOrgRecords: true,\n\n            objectInput: '',\n            objectSelection: [],\n            objectOptions: [],\n\n            chartData: [],\n            chartSelected: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadSummaries =  function(){\n            this.setState({\n                isLoading: true\n            });\n\n            let fromDate = this.state.fromDate;\n            fromDate = fromDate.getFullYear() + '-' + (fromDate.getMonth()+1).toString().padStart(2,0) + '-' + fromDate.getDate().toString().padStart(2,0);\n            let toDate = this.state.toDate;\n            toDate = toDate.getFullYear() + '-' + (toDate.getMonth()+1).toString().padStart(2,0) + '-' + toDate.getDate().toString().padStart(2,0);\n\n            let query = '(doc.summaryResults.startTime:>='+fromDate+') AND (doc.summaryResults.startTime:<='+toDate+')';\n\n            if(this.state._currentOrgRecords) {\n                query += ' AND (doc.graxorgid.keyword: \"' + orgid + '\")';\n            }\n\n            $.ajax({\n                type: 'GET',\n\n                url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                    action:'load',\n                    dataIndex: 'graxgrax_backup_summaryindex',\n                    _index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n                    _select: 'summaryMap,spName,CreatedDate,summaryResults',\n                    _q: query,\n                    _limit: 1000,\n                    _from: 0,\n                    _sort: '',\n                    _sortType: '',\n                    _ignore_unavailable: true\n                }),\n\n                success: function(data) {\n                    // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n                    if( data.results ){\n                        this.summaryDataResults = data.results;\n                    }\n\n                    this.setState({\n                        isLoading: false\n                    }, function(){\n                        this.loadSummaryData();\n                    });\n                }.bind(this),\n                error: function(xhr, status, err) {\n                    console.error(xhr, status, err);\n\n                    this.setState({\n                        isLoading: false,\n                    });\n                }.bind(this)\n            });\n        };\n\n        this.loadSummaryData = function(){\n            let summaryData = this.summaryDataResults;\n            let summaryNames = new Set();\n            let sortedNames = [];\n\n            summaryData.forEach(function(summary){\n                for( let key in summary.summaryMap ){\n                    summaryNames.add( key );\n                }\n            });\n\n            sortedNames = new Array(...summaryNames);\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            let objectOptions = [{label:\"All\", id:\"ALL\"}];\n            sortedNames.forEach(function(name){\n                objectOptions.push( {label: name, id: name} );\n            });\n\n            this.setState({\n                isLoading: false,\n                objectOptions: objectOptions,\n                objectSelection: [objectOptions[0]]\n            }, this.refreshChart );\n        };\n\n        this.refreshChart = function(){\n            let summaryData = this.summaryDataResults;\n            let selectedObjects = [];\n            let chartData = [];\n\n            if( this.state.objectSelection && this.state.objectSelection[0].id !== \"ALL\" ){\n                selectedObjects.push( this.state.objectSelection[0].id );\n            }else{\n                this.state.objectOptions.forEach( function(option){\n                    selectedObjects.push( option.id );\n                } );\n            }\n\n\n            summaryData.forEach(function(summary){\n                selectedObjects.forEach( function( selectedObject ){\n                    if( summary.summaryMap[selectedObject] ){\n                        let tempData = {\n                            summaryMap: {\n                                [selectedObject]: {...summary.summaryMap[selectedObject]}\n                            },\n                            spName: summary.spName,\n                            summaryResults:{\n                                ...summary.summaryMap[selectedObject]\n                            }\n                        };\n\n                        chartData.push( tempData );\n                    }\n                });\n            });\n\n            this.setState({\n                isLoading: false,\n                chartData: chartData\n            },function(){\n                this.chart.current.drawChart();\n            }.bind(this));\n        }\n\n        this.chartSelection = function(selection){\n            this.setState( {\n                chartSelected: selection\n            } );\n        };\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        this.setState({\n            isLoading: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLoading && (<Spinner size=\"large\" variant=\"brand\" />\n\t\t\t\t)}\n                <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Filter Criteria\" >\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n\n                                <dl class=\"slds-list_stacked\">\n                                    <dt class=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                                        <label class=\"slds-form-element__label\" >From</label>\n                                    </dt>\n                                    <dd class=\"slds-item_detail\" >\n                                        <Datepicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    fromDate: data.date\n                                                });\n                                            }}\n\n                                            value={ this.state.fromDate }\n                                        />\n                                    </dd>\n                                    <dt class=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                                        <label class=\"slds-form-element__label\" >To</label>\n                                    </dt>\n                                    <dd class=\"slds-item_detail\" >\n                                        <Datepicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    toDate: data.date\n                                                });\n                                            }}\n\n                                            value={ this.state.toDate }\n                                        />\n                                    </dd>\n                                </dl>\n                            </div>\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _currentOrgRecords: !isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n\n                                <div class=\"slds-float_right\">\n                                    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                                        this.loadSummaries();\n                                        this.chart.current.setDateFilter( this.state.fromDate, this.state.toDate );\n                                        this.setState( {\n                                            chartSelected: this.chart.current.state.chartSelection\n                                        } );\n                                    }} />\n                                </div>\n                            </div>\n                        </SLDSSection>\n                    </div>\n                    { this.state.objectOptions && (\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                                <Combobox\n                                    events={{\n                                        onChange: (event, { value }) => {\n                                            this.setState( {\n                                                objectInput : value\n                                            }, this.refreshChart );\n                                        },\n                                        onRequestRemoveSelectedOption: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            } );\n                                        },\n                                        onSelect: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            }, this.refreshChart );\n                                        },\n                                    }}\n\n                                    labels={{\n                                        label: 'Salesforce Object',\n                                        placeholder: '-- SELECT SALESFORCE OBJECT --',\n                                    }}\n\n                                    options={comboboxFilterAndLimit({\n                                        inputValue: this.state.objectInput,\n                                        limit: 1000,\n                                        options: this.state.objectOptions,\n                                        selection: this.state.objectSelection\n                                    })}\n\n                                    selection={this.state.objectSelection}\n                                    value={this.state.objectInput}\n                                    variant=\"readonly\"\n                                />\n                            </div>\n\n                            {this.chart.current &&\n                            (<Combobox\n                                events={{\n                                    onChange: (event, { value }) => {\n                                        this.chart.current.chartInput = value;\n                                        this.chart.current.setState( {\n                                            chartInput : value\n                                        } );\n                                    },\n                                    onRequestRemoveSelectedOption: (event, data) => {\n                                        this.chart.current.selectChart(data.selection)\n                                    },\n                                    onSelect: (event, data) => {\n                                        if( data.selection.length > 0 ){\n                                            this.chart.current.selectChart(data.selection);\n\n                                            this.setState( {\n                                                chartSelected: data.selection\n                                            } );\n                                        }\n                                    },\n                                }}\n\n                                labels={{\n                                    label: 'Chart Type',\n                                    placeholder: '-- SELECT CHART TYPE --',\n                                }}\n\n                                options={comboboxFilterAndLimit({\n                                    inputValue: this.chart.current.state.chartInput,\n                                    limit: 1000,\n                                    options: this.chart.current.state.chartOptions,\n                                    selection: this.state.chartSelected?this.state.chartSelected:this.chart.current.state.chartSelection\n                                })}\n\n                                selection={this.state.chartSelected}\n                                value={this.chart.current.state.chartInput}\n                                variant=\"readonly\"\n                            />)}\n                        </SLDSSection>\n                    </div>) }\n                </div>\n\n                <GRAXSummaryChartsChart\n                    ref={this.chart}\n                    summaryData={this.state.chartData}\n                    showAttributeFilter={false}\n                    hideChartOptions={true}\n                    onChartSelect={(event, selection)=>{\n                        this.chartSelection( selection );\n                    }}\n                />\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Datepicker, Button, DataTable, DataTableColumn, DataTableCell } from '@salesforce/design-system-react';\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport $ from 'jquery';\n\nimport '../public/js/jquery.sldsTree.js';\n\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nconst CustomDataTableCell = ({ children, ...props }) => (\n\t<DataTableCell {...props}>\n\t\t<a\n\t\t\thref = {baseUrl + \"/grax-app/grax-data-lake/generateBackupSummary/\" + props.item.spId + \"/\" + encodeURI(props.item.executionUniqueKey) + \"?orgid=\" + orgid }\n\t\t\t_target=\"_blank\"\n\t\t>\n\t\t\t{children}\n\t\t</a>\n\t</DataTableCell>\n);\nCustomDataTableCell.displayName = DataTableCell.displayName;\n\nexport default class GRAXSummaryChartsAdvanced extends React.Component {\n    constructor(props) {\n        super(props);\n\n\t\tthis.chart = React.createRef();\n\n\t\tthis.summaryDataResults = [];\n\t\tthis.summaryDataSelected = [];\n\t\tthis.itemsObjectsByDataRange = [];\n\t\tthis.itemsObjectsByDataRangeSelection = [];\n\t\tthis.summaryBreadownDTItems = [];\n\t\tthis.summaryBreadownDTSelection = [];\n\t\tthis.summaryDTItems = [];\n\t\tthis.summaryDTSelection = [];\n\t\tthis.chartOptions = [];\n\t\tthis.defaultChartSettings = {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } };\n\t\tthis.summaryBDDTFromDate = new Date();\n\t\tthis.summaryBDDTToDate = new Date();\n\n\t\tthis.state = {\n\t\t\tisLoading: true,\n\n\t\t\tchartData: [],\n\n\t\t\tchartSelection: [],\n\t\t\tchartInput: '',\n\t\t\tfromDate: new Date(),\n\t\t\ttoDate: new Date(),\n\t\t\t_currentOrgRecords: true,\n\n\t\t\tsummaryDTFilters: {\n\t\t\t\tshowRecords: true, showInserted: true, showUpdated: true, showArchived: true\n\t\t\t},\n\n\t\t\tinputValue: 'Select an option',\n\t\t\tselection: [],\n\t\t\tchecked: [],\n\n\t\t\terror: null\n        };\n    }\n\n    componentDidMount() {\n\t\ttry{\n\t\t\tthis.loadSummaries = function(){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t});\n\n\t\t\t\tlet currentChartSelected = this.state.chartSelected;\n\n\t\t\t\tlet fromDT = this.state.fromDate;\n\t\t\t\tfromDT = fromDT.getFullYear() + '-' + (fromDT.getMonth()+1).toString().padStart(2,0) + '-' + fromDT.getDate().toString().padStart(2,0);\n\t\t\t\tlet toDT = this.state.toDate;\n\t\t\t\ttoDT = toDT.getFullYear() + '-' + (toDT.getMonth()+1).toString().padStart(2,0) + '-' + toDT.getDate().toString().padStart(2,0);\n\n\t\t\t\tlet query = '(doc.summaryResults.startTime:>='+fromDT+') AND (doc.summaryResults.startTime:<='+toDT+')';\n\n\t\t\t\tif(this.state._currentOrgRecords) {\n\t\t\t\t\tquery += ' AND (doc.graxorgid.keyword: \"' + orgid + '\")';\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBDDTFromDate = this.state.fromDate;\n\t\t\t\tthis.summaryBDDTToDate = this.state.toDate;\n\n\t\t\t\t$.ajax({\n\t\t\t\t\ttype: 'GET',\n\n\t\t\t\t\turl: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n            action: 'load',\n            dataIndex: 'graxgrax_backup_summaryindex',\n\t\t\t\t\t\t_index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n\t\t\t\t\t\t_select: 'summaryMap,spName,spId,CreatedDate,summaryResults,executionUniqueKey',\n\t\t\t\t\t\t_q: query,\n\t\t\t\t\t\t_limit: 1000,\n\t\t\t\t\t\t_from: 0,\n\t\t\t\t\t\t_sort: '',\n            _sortType: '',\n            _ignore_unavailable: true\n\t\t\t\t\t}),\n\n\t\t\t\t\tsuccess: function(data) {\n\t\t\t\t\t\t// IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n\t\t\t\t\t\tif( data.results ){\n\t\t\t\t\t\t\tthis.summaryDataResults = data.results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t\tchartSelected: currentChartSelected\n\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\tthis.loadSummaryDataTable(); this.loadSummaryBreakdownTable(); this.loadObjectDataTable();\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\terror: function(xhr, status, err) {\n\t\t\t\t\t\tconsole.error(xhr, status, err);\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tthis.getSelectedSummary = function(){\n\t\t\t\tlet selectedSummaries = this.summaryBreadownDTSelection;\n\t\t\t\tlet summaryDataResults = this.summaryDataResults;\n\n\t\t\t\tlet summaries4chart = [];\n\n\t\t\t\tselectedSummaries.forEach(function(summary){\n\t\t\t\t\tsummaries4chart.push( summaryDataResults[summary.index] );\n\t\t\t\t\t/*summary.index.forEach(function(index){\n\t\t\t\t\t\tsummaries4chart.push( summaryDataResults[index] );\n\t\t\t\t\t});*/\n\t\t\t\t});\n\t\t\t\treturn summaries4chart;\n\t\t\t};\n\n\t\t\tthis.loadSummaryDataTable = function(){\n\t\t\t\tlet summaryList = this.summaryDataResults;\n\t\t\t\tlet dtSummaries = [];\n\t\t\t\tlet i=0;\n\n\t\t\t\tif( summaryList ){\n\t\t\t\t\tlet includeArchived = this.state.summaryDTFilters.showArchived;\n\t\t\t\t\t//let includeRecords = this.state.summaryDTFilters.showRecords;\n\t\t\t\t\tlet includeInserted = this.state.summaryDTFilters.showInserted;\n\t\t\t\t\tlet includeUpdated = this.state.summaryDTFilters.showUpdated;\n\n\t\t\t\t\tsummaryList.forEach(function( summary ){\n\n\t\t\t\t\t\tif( !( (includeArchived && summary.summaryResults.archived !== 0) ||\n\t\t\t\t\t\t\t//(includeRecords && summary.summaryResults.showRecords !== 0) ||\n\t\t\t\t\t\t\t(includeInserted && summary.summaryResults.inserted !== 0) ||\n\t\t\t\t\t\t\t(includeUpdated && summary.summaryResults.updated !== 0)) ){\n\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tlet existIndex = dtSummaries.filter( function(e){return e.name === summary.spName;} );\n\n\t\t\t\t\t\t\tlet archived = summary.summaryResults.archived;\n\t\t\t\t\t\t\tlet records = summary.summaryResults.records;\n\t\t\t\t\t\t\tlet inserted = summary.summaryResults.inserted;\n\t\t\t\t\t\t\tlet updated = summary.summaryResults.updated;\n\n\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\tif( existIndex && existIndex.length > 0 ){\n\t\t\t\t\t\t\t\texistIndex[0].index.push( i );\n\n\t\t\t\t\t\t\t\texistIndex[0].records += records;\n\t\t\t\t\t\t\t\texistIndex[0].inserted += inserted;\n\t\t\t\t\t\t\t\texistIndex[0].updated += updated;\n\t\t\t\t\t\t\t\texistIndex[0].archived += archived;\n\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tlet createdDate = new Date(summary.CreatedDate);\n\t\t\t\t\t\t\t\tlet startTime = new Date(summary.summaryResults.startTime);\n\t\t\t\t\t\t\t\tlet startTimeFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\n\t\t\t\t\t\t\t\tdtSummaries.push(\n\t\t\t\t\t\t\t\t\t{\tname: summary.spName,\n\t\t\t\t\t\t\t\t\t\tid: summary.spName,\n\t\t\t\t\t\t\t\t\t\tspId: summary.spId,\n\t\t\t\t\t\t\t\t\t\texecutionUniqueKey: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\t\t\tCreatedDate: summary.CreatedDate,\n\t\t\t\t\t\t\t\t\t\tCreatedDateFormatted: createdDate.getFullYear()+\"-\"+(createdDate.getMonth()+1)+\"-\"+createdDate.getDate(),\n\t\t\t\t\t\t\t\t\t\tstartTime: startTime,\n\t\t\t\t\t\t\t\t\t\tstartTimeFormmated: startTimeFormated,\n\t\t\t\t\t\t\t\t\t\trecords: records,\n\t\t\t\t\t\t\t\t\t\tinserted: inserted,\n\t\t\t\t\t\t\t\t\t\tupdated: updated,\n\t\t\t\t\t\t\t\t\t\tarchived: archived,\n\t\t\t\t\t\t\t\t\t\tindex: [i]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t});\n\n\t\t\t\t\tdtSummaries.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryDTItems = dtSummaries;\n\t\t\t}\n\n\t\t\tthis.loadSummaryBreakdownTable = function(){\n\t\t\t\tlet summaryToShow = this.summaryDTSelection;\n\t\t\t\tlet summaryDataResults = this.summaryDataResults;\n\t\t\t\tlet summaryBreadownDTItems = [];\n\n\t\t\t\tif( summaryToShow ){\n\n\t\t\t\t\tsummaryToShow.forEach(function(dtSummary){\n\t\t\t\t\t\tdtSummary.index.forEach(function(index){\n\t\t\t\t\t\t\tlet summary = summaryDataResults[index];\n\n\t\t\t\t\t\t\tlet archived = summary.summaryResults.archived;\n\t\t\t\t\t\t\tlet records = summary.summaryResults.records;\n\t\t\t\t\t\t\tlet inserted = summary.summaryResults.inserted;\n\t\t\t\t\t\t\tlet updated = summary.summaryResults.updated;\n\n\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\tlet createdDate = new Date(summary.CreatedDate);\n\t\t\t\t\t\t\tlet startTime = new Date(summary.summaryResults.startTime);\n\t\t\t\t\t\t\tlet startTimeFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\n\t\t\t\t\t\t\tsummaryBreadownDTItems.push({\n\t\t\t\t\t\t\t\tname: summary.spName,\n\t\t\t\t\t\t\t\tid: summary.Id,\n\t\t\t\t\t\t\t\texecutionUniqueKey: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\t\tCreatedDate: summary.CreatedDate,\n\t\t\t\t\t\t\t\tCreatedDateFormatted: createdDate.getFullYear()+\"-\"+(createdDate.getMonth()+1)+\"-\"+createdDate.getDate(),\n\t\t\t\t\t\t\t\tstartTime: summary.startTime,\n\t\t\t\t\t\t\t\tstartTimeFormmated: startTimeFormated,\n\t\t\t\t\t\t\t\trecords: records,\n\t\t\t\t\t\t\t\tinserted: inserted,\n\t\t\t\t\t\t\t\tupdated: updated,\n\t\t\t\t\t\t\t\tarchived: archived\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBreadownDTItems = summaryBreadownDTItems;\n\t\t\t}\n\n\t\t\tthis.loadObjectDataTable = function(){\n\t\t\t\tlet summaryToShow = this.getSelectedSummary();\n\t\t\t\tlet itemsObjectsByDataRange = [];\n\t\t\t\tlet itemsObjectsByDataRangeSelection = [];\n\n\t\t\t\tif( summaryToShow ){\n\t\t\t\t\tlet allSummaries = {};\n\n\t\t\t\t\tsummaryToShow.forEach( function( summaryData ){\n\t\t\t\t\t\tvar summaryMap = summaryData.summaryMap;\n\n\t\t\t\t\t\tlet smyDate = new Date(summaryData.summaryResults.startTime );\n\n\t\t\t\t\t\tfor( var objName in summaryMap ){\n\t\t\t\t\t\t\tif( typeof summaryMap[objName] == \"object\" ){\n\t\t\t\t\t\t\t\tlet archived = summaryMap[objName].archived;\n\t\t\t\t\t\t\t\tlet records = summaryMap[objName].records;\n\t\t\t\t\t\t\t\tlet inserted = summaryMap[objName].inserted;\n\t\t\t\t\t\t\t\tlet updated = summaryMap[objName].updated;\n\n\t\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet _allSumaries = allSummaries[objName];\n\n\t\t\t\t\t\t\t\tif( !_allSumaries ){\n\t\t\t\t\t\t\t\t\t_allSumaries = {};\n\t\t\t\t\t\t\t\t\t_allSumaries.name = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.id = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.archived = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.records = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.inserted = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.updated = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_allSumaries.archived += archived?archived:0;\n\t\t\t\t\t\t\t\t_allSumaries.records += records?records:0;\n\t\t\t\t\t\t\t\t_allSumaries.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\t_allSumaries.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet dateIndex = _allSumaries.startTimes.indexOf( smyDate );\n\n\t\t\t\t\t\t\t\tif( dateIndex < 0 ){\n\t\t\t\t\t\t\t\t\tdateIndex = _allSumaries.startTimes.length;\n\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes.push({\n\t\t\t\t\t\t\t\t\t\tstartTime: smyDate,\n\t\t\t\t\t\t\t\t\t\tarchived : 0,\n\t\t\t\t\t\t\t\t\t\trecords : 0,\n\t\t\t\t\t\t\t\t\t\tinserted : 0,\n\t\t\t\t\t\t\t\t\t\tupdated : 0\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet dateData = _allSumaries.startTimes[dateIndex];\n\t\t\t\t\t\t\t\tdateData.archived += archived?archived:0;\n\t\t\t\t\t\t\t\tdateData.records += records?records:0;\n\t\t\t\t\t\t\t\tdateData.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\tdateData.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tallSummaries[objName] = _allSumaries;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Top Ten Data\n\t\t\t\t\tfor( var objName in allSummaries ){\n\t\t\t\t\t\titemsObjectsByDataRange.push( allSummaries[objName] );\n\t\t\t\t\t}\n\n\t\t\t\t\titemsObjectsByDataRange.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\n\t\t\t\t\t// itemsObjectsByDataRangeSelection = itemsObjectsByDataRange;\n\t\t\t\t}\n\n\t\t\t\tthis.itemsObjectsByDataRange = itemsObjectsByDataRange;\n\t\t\t\t// this.itemsObjectsByDataRangeSelection = itemsObjectsByDataRangeSelection;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t}, this.refreshChart );\n\t\t\t}.bind(this);\n\n\t\t\tthis.refreshChart = function(){\n\t\t\t\tlet chartData = [];\n\n\t\t\t\tlet summartDataResults = this.summaryDataResults;\n\t\t\t\t//let summaryDTSelection = this.summaryDTSelection;\n\t\t\t\tlet summaryBreadownDTSelection = this.summaryBreadownDTSelection;\n\t\t\t\tlet itemsObjectsByDataRangeSelection = this.itemsObjectsByDataRangeSelection;\n\n\t\t\t\tlet summaryIds = {};\n\t\t\t\tsummaryBreadownDTSelection.forEach( function(summary){\n\t\t\t\t\tsummaryIds[summary.id] = summary.id;\n\t\t\t\t});\n\n\t\t\t\tlet objNames = {};\n\t\t\t\titemsObjectsByDataRangeSelection.forEach(function(obj){\n\t\t\t\t\tobjNames[obj.name] = obj.name;\n\t\t\t\t});\n\n\t\t\t\tsummartDataResults.forEach( function(summary){\n\t\t\t\t\tlet tempData = {};\n\t\t\t\t\tif( summaryIds[summary.Id] ){\n\t\t\t\t\t\ttempData.summaryMap = {};\n\t\t\t\t\t\ttempData.spName = summary.spName;\n                        tempData.summaryResults= {\n\t\t\t\t\t\t\tarchived: 0,\n\t\t\t\t\t\t\trecords: 0,\n\t\t\t\t\t\t\tinserted: 0,\n\t\t\t\t\t\t\tupdate: 0,\n\t\t\t\t\t\t\tstartTime: summary.summaryResults.startTime,\n\t\t\t\t\t\t\tendTime: summary.summaryResults.endTime\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor( let key in summary.summaryMap ){\n\t\t\t\t\t\t\tif( objNames[key] ){\n\t\t\t\t\t\t\t\tlet summaryMap = summary.summaryMap;\n\t\t\t\t\t\t\t\ttempData.summaryMap[key] = summaryMap[key];\n\t\t\t\t\t\t\t\ttempData.summaryResults.archived = summaryMap[key].archived?summaryMap[key].archived:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.records = summaryMap[key].records?summaryMap[key].records:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.inserted = summaryMap[key].inserted?summaryMap[key].inserted:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.update = summaryMap[key].update?summaryMap[key].update:0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchartData.push( tempData );\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tchartData: chartData\n\t\t\t\t}, function(){\n\t\t\t\t\tthis.chart.current.drawChart();\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryDTHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState( {\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){ */\n\t\t\t\t\tthis.summaryDTSelection = data.selection;\n\t\t\t\t\tthis.loadSummaryBreakdownTable();\n\t\t\t\t\tthis.loadObjectDataTable();\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//} );\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryBreadownDTHandleChanged = function(event, data){\n\t\t\t\tthis.summaryBreadownDTSelection = data.selection;\n\t\t\t\tthis.loadObjectDataTable();\n\t\t\t\t//this.drawChart();\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.itemsObjectsByDataRangeHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){*/\n\t\t\t\t\tthis.itemsObjectsByDataRangeSelection = data.selection;\n\n\t\t\t\t\tthis.refreshChart();\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//});\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.dataTableHandleSort = ( dtName, items, sortColumn, ...rest) => {\n\t\t\t\tconst sortProperty = sortColumn.property;\n\t\t\t\tconst sortDirection = sortColumn.sortDirection;\n\t\t\t\tconst newState = {\n\t\t\t\t\t[dtName+\"Column\"]: sortProperty,\n\t\t\t\t\t[dtName+\"Direction\"]: {\n\t\t\t\t\t\t[sortProperty]: sortDirection,\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// needs to work in both directions\n\t\t\t\titems = items.sort((a, b) => {\n\t\t\t\t\tlet val = 0;\n\n\t\t\t\t\tif (a[sortProperty] > b[sortProperty]) {\n\t\t\t\t\t\tval = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a[sortProperty] < b[sortProperty]) {\n\t\t\t\t\t\tval = -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sortDirection === 'desc') {\n\t\t\t\t\t\tval *= -1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn val;\n\t\t\t\t});\n\n\t\t\t\tthis.setState(newState);\n\t\t\t};\n\n\t\t\tthis.formatStartTime = function( startTime ){\n\t\t\t\treturn startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\t\t\t};\n\n\t\t\tthis.formatDate = function( dt ){\n\t\t\t\treturn dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false\n\t\t\t});\n\n\t\t}catch(e){}\n\n    }\n\n    renderAggregatedScheduleProcessSection() {\n      return (\n        <SLDSSection\n          title=\"Step 1: Aggregated GRAX Schedule Process\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.summaryDTItems}\n                  id=\"DataTable_Summaries\"\n                  selection={this.summaryDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryDTHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\"DataTable_Summaries\", this.summaryDTItems, sortColumn);\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  >\n                    <CustomDataTableCell />\n                  </DataTableColumn>\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n\n            <div className=\"slds-col slds-size_2-of-12 slds-medium-size_2-of-12 slds-large-size_2-of-12\">\n              <div>\n                <SLDSSection title=\"Display Values\" className=\"slds-p-left_small slds-m-top_none\">\n                  <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showInserted}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showInserted = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Inserted\",\n                          toggleEnabled: \"Inserted\"\n                        }}\n                      />\n                    </div>\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showUpdated}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showUpdated = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Updated\",\n                          toggleEnabled: \"Updated\"\n                        }}\n                      />\n                    </div>\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showArchived}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showArchived = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Archived\",\n                          toggleEnabled: \"Archived\"\n                        }}\n                      />\n                    </div>\n                  </div>\n                </SLDSSection>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderScheduleProcessBreakdownSection() {\n      return (\n        <SLDSSection\n          title=\"Step 2: GRAX Schedule Process Breakdown\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.summaryBreadownDTItems}\n                  id=\"DataTable_SummaryBreakdown\"\n                  selection={this.summaryBreadownDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryBreadownDTHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_SummaryBreakdown\",\n                      this.summaryBreadownDTItems,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  />\n                  <DataTableColumn\n                    label=\"Execution Unique Key\"\n                    sortable\n                    property=\"executionUniqueKey\"\n                  />\n                  <DataTableColumn label=\"Start Time\" sortable property=\"startTimeFormmated\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderObjectsSection() {\n      return (\n        <SLDSSection\n          title=\"Step 3: Objects\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.itemsObjectsByDataRange}\n                  id=\"DataTable_ObjectsInSummary\"\n                  selection={this.itemsObjectsByDataRangeSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.itemsObjectsByDataRangeHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_ObjectsInSummary\",\n                      this.itemsObjectsByDataRange,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn label=\"Object Name\" sortable primaryColumn property=\"name\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterCriteriaSection() {\n      return (\n        <SLDSSection title=\"Filter Criteria\">\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n            <dl class=\"slds-list_stacked\">\n              <dt class=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                <label class=\"slds-form-element__label\">From</label>\n              </dt>\n              <dd class=\"slds-item_detail\">\n                <Datepicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      fromDate: data.date\n                    });\n                  }}\n                  value={this.state.fromDate}\n                />\n              </dd>\n              <dt class=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                <label class=\"slds-form-element__label\">To</label>\n              </dt>\n              <dd class=\"slds-item_detail\">\n                <Datepicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      toDate: data.date\n                    });\n                  }}\n                  value={this.state.toDate}\n                />\n              </dd>\n            </dl>\n          </div>\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n            <Checkbox\n              className=\"inline-block\"\n              defaultChecked={!this.state._currentOrgRecords}\n              onChange={isChecked => {\n                this.setState({\n                  _currentOrgRecords: !isChecked\n                });\n              }}\n              assistiveText={{\n                label: \"Show records from all environments?\"\n              }}\n              variant=\"toggle\"\n              labels={{\n                toggleDisabled: \"Current Environment\",\n                toggleEnabled: \"All connected SF environments\"\n              }}\n            />\n            <div class=\"slds-float_right\">\n              <Button\n                label=\"Retrieve\"\n                variant=\"brand\"\n                onClick={() => {\n                  this.loadSummaries();\n                  this.chart.current.setDateFilter(this.state.fromDate, this.state.toDate);\n                }}\n              />\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterSections() {\n      if (!this.itemsObjectsByDataRange) return null;\n\n      return (\n        <div>\n          {this.summaryDataResults.length > 0 ? this.renderAggregatedScheduleProcessSection() : null}\n          {this.summaryDTSelection.length > 0 ? this.renderScheduleProcessBreakdownSection() : null}\n          {this.summaryBreadownDTSelection.length > 0 ? this.renderObjectsSection() : null}\n        </div>\n      );\n    }\n\n    render() {\n      return (\n        <div style={{ minHeight: 2000 }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n\n          {this.renderFilterCriteriaSection()}\n          {this.renderFilterSections()}\n\n          <GRAXSummaryChartsChart ref={this.chart} summaryData={this.state.chartData} />\n        </div>\n      );\n    }\n}\n","import React from 'react';\n\nimport { Tabs, TabsPanel, Spinner } from '@salesforce/design-system-react';\n\n// import '../public/js/jquery.sldsTree.js';\n\n// import '../public/js/googlecharts.js';\nimport GRAXSummaryChartsSimple from './GRAXSummaryChartsSimple';\nimport GRAXSummaryChartsAdvanced from './GRAXSummaryChartsAdvanced';\n\nexport default class GRAXSummaryCharts extends React.Component {\n    constructor(props) {\n        super(props);\n\t\t\n\t\tthis.state = {\n            isLoading: true\n        };\n    }\n\n    componentDidMount() {\n\t\tthis.setState({\n\t\t\tisLoading: false\n\t\t});\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n\t\t\t<div style={{ minHeight: 1000 }} >\n\t\t\t\t<Tabs variant={this.props.variant} id=\"tabs-simple-advanced\" >\n\t\t\t\t\t<TabsPanel label=\"Simple\">\n\t\t\t\t\t\t<GRAXSummaryChartsSimple />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t\t<TabsPanel label=\"Advanced\" style={{padding:0}} >\n\t\t\t\t\t\t<GRAXSummaryChartsAdvanced />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t</Tabs>\n\t\t\t</div>\n        )\n    }\n}\n"],"sourceRoot":""}