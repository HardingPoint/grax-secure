{"version":3,"sources":["components/GRAXHistoryDataTable.jsx","components/GRAXHistory.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/SLDSPaginator.jsx","components/GRAXDatePicker.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXCSVExportButton.jsx","components/GRAXFieldsCombobox.jsx"],"names":["GRAXHistoryDataTable","props","state","items","extraInfo","page","isLoaded","isLoading","filterValues","nextProps","nextState","this","renderKey","setState","$","ajax","type","url","baseUrl","GetParams","contentType","data","JSON","stringify","objectType","objectId","orgid","_select","_","union","columns","hiddenColumns","join","_limit","_from","_filterValues","success","results","filterFunction","map","item","i","forEach","val","key","startsWith","SF_DATETIME_REGEXP","test","m","moment","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","id","toString","total","size","totalRetrieved","bind","error","xhr","status","err","console","getDataHandler","style","position","variant","assistiveText","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","columnName","label","property","sortable","className","SLDSPaginator","totalItems","length","pageSize","onChangePage","isInitialLoad","GRAXCSVExportButton","params","source","objecttype","objectid","height","React","Component","GRAXHistory","paramsCompleted","_extraFields","_graxFields","_filterFunction","_filterValuesFields","retrieved","retrievedCounter","pageParams","window","location","search","match","SLDSSection","isCollapsible","isOpen","title","GRAXFieldsCombobox","dataIndex","toLowerCase","onLoad","e","_graxFieldsSelection","_graxFieldsSelectionList","log","onChange","GRAXFilterGeneration","SObjectType","filterableFieldOptions","onFilterValueChangeHandler","_getFilterQuery","extraOperators","isNegated","onClick","token","__grax__","_csrf","userid","undefined","action","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","authorization","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","handleToggle","onToggle","prevState","preventDefault","helpText","children","titleElement","category","name","pager","currentPage","setPage","totalPages","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","getPager","iconCategory","iconName","iconPosition","disabled","index","Date","now","align","content","defaultProps","GRAXDatePicker","useState","isValidDate","setIsValidDate","formatter","datePickerFormatter","parser","datePickerParser","event","formattedDate","date","GRAXSFieldCombobox","options","inputValue","selection","SObjectName","fieldName","picklistValues","value","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onRequestRemoveSelectedOption","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","multiple","required","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","GRAXFilterableCombobox","_isMounted","isOpened","filterOptionsHandler","onOpen","onClose","_error","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","Object","_filterValuesList","getFilterValuesList","getFilterFunction","getFilterQuery","push","splice","dataList","isReturned","filterOperator","filterVal","isArray","split","filterIsNegated","isFilterMatch","itemVal","Boolean","String","includes","operatorByName","queryConditions","_filterVal","condition","inConditions","each","parseFloat","reduce","selectionIds","scope","data-label","width","find","defaultChecked","target","checked","getSelectionValues","defaultValue","onBlur","isPicklist","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","portalsRoot","document","getElementById","GRAXCSVExportForm","ReactDOM","createPortal","formId","encType","margin","padding","border","display","form","selectedDataIndex","cookieSubfix","getMappedFieldList","selectedFieldList","setCookie","selectedFieldsCookie","getCookie","selectedFields","parse","sortBy","_selection","onLoadHandler","onChangeHandler"],"mappings":"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","file":"static/js/7.bc4854ca.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Spinner, DataTable, DataTableColumn } from \"@salesforce/design-system-react\";\nimport SLDSPaginator from \"./SLDSPaginator\";\nimport GRAXCSVExportButton from \"./GRAXCSVExportButton\";\n\nimport { $, baseUrl, GetParams } from \"../lib/grax-data-lake\";\nimport { moment, SF_DATETIME_REGEXP, DATE_FORMAT, DATETIME_FORMAT, TZ } from \"../lib/utils\";\n\nimport _ from \"lodash\";\n\nconst ROWSXPAGE = 25;\n\nexport default class GRAXHistoryDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      extraInfo: {},\n      page: 0,\n      isLoaded: false,\n      isLoading: false,\n\n      filterValues: []\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.renderKey !== nextProps.renderKey ||\n      this.state.items !== nextState.items ||\n      this.state.isLoaded !== nextState.isLoaded ||\n      this.state.isLoading !== nextState.isLoading\n    );\n  }\n\n  getDataHandler(page, filterValues) {\n    this.setState({\n      isLoading: true,\n      page: page,\n\n      filterValues: filterValues\n    });\n\n    $.ajax({\n      type: \"POST\",\n      //dataType: 'jsonp',\n      url: baseUrl + \"/grax-app/grax-data-lake/getTimeMachineVersions\" + GetParams({}),\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify({\n        objectType: this.props.objectType,\n        objectId: this.props.objectId,\n        orgid: this.props.orgid,\n        _select: _.union(this.props.columns, this.props.hiddenColumns).join(\",\") || \"Id\",\n        _limit: ROWSXPAGE,\n        _from: ROWSXPAGE * page,\n        _filterValues: filterValues\n      }),\n      success: function(data) {\n        var results = data.results;\n\n        if (this.props.filterFunction) {\n          results = this.props.filterFunction(results);\n        }\n\n        results = _.map(results, (item, i) => {\n          _.forEach(item, (val, key) => {\n            if (key.startsWith(\"_\")) {\n              if (typeof val == \"string\") {\n                if (SF_DATETIME_REGEXP.test(val)) {\n                  var m = moment(val);\n\n                  if (m.isValid()) {\n                    item[key] = m\n                      .tz(TZ)\n                      .format(m._i.indexOf(\":\") !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                  }\n                }\n              }\n\n              if (typeof val == \"boolean\") {\n                item[key] = val ? \"true\" : \"false\";\n              }\n            }\n          });\n\n          return {\n            ...item,\n            ...{ id: i.toString() }\n          };\n        });\n\n        this.setState({\n          page: 0,\n          data: results,\n          extraInfo: data.extraInfo || { total: 0, size: ROWSXPAGE, totalRetrieved: 0 },\n          items: results,\n          isLoaded: true,\n          isLoading: false\n        });\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoaded: true,\n          isLoading: false,\n          items: [],\n          error: err.toString()\n        });\n      }.bind(this)\n    });\n  }\n\n  componentDidMount() {\n    this.getDataHandler(0, this.props.filterValues);\n  }\n\n  render() {\n    return this.state.isLoaded ? (\n      <div>\n        <div style={{ position: \"relative\" }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n          <DataTable\n            assistiveText={{\n              actionsHeader: \"actions\",\n              columnSort: \"sort this column\",\n              columnSortedAscending: \"asc\",\n              columnSortedDescending: \"desc\",\n              selectAllRows: \"all rows\",\n              selectRow: \"select this row\"\n            }}\n            fixedLayout\n            items={this.state.items}\n            id=\"GRAXHistoryDataTable\"\n          >\n            {this.props.columns.map(columnName => (\n              <DataTableColumn\n                key={\"col\" + columnName}\n                id={columnName}\n                label={columnName} // TODO\n                property={columnName}\n                sortable={false}\n              />\n            ))}\n          </DataTable>\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n          <SLDSPaginator\n            totalItems={this.state.items.length > 0 ? this.state.extraInfo.total : 0}\n            pageSize={ROWSXPAGE}\n            onChangePage={(page, isInitialLoad) => {\n              if (!isInitialLoad) {\n                this.getDataHandler(page - 1, this.props.filterValues);\n              }\n            }}\n          />\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n          <GRAXCSVExportButton\n            params={{\n              source: \"s3\",\n              objecttype: this.props.objectType,\n              objectid: this.props.objectId,\n              orgid: this.props.orgid,\n              _select: _.union(this.props.columns, this.props.hiddenColumns).join(\",\"),\n              _filterValues: this.state.filterValues,\n              columns: this.props.columns\n            }}\n          />\n        </div>\n      </div>\n    ) : (\n      <div style={{ position: \"relative\", height: \"2rem\" }}>\n        <Spinner size=\"medium\" variant=\"brand\" />\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-useless-escape */\nimport React from \"react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport GRAXFieldsCombobox from \"./GRAXFieldsCombobox\";\nimport GRAXHistoryDataTable from \"./GRAXHistoryDataTable\"; // TODO\nimport GRAXFilterGeneration from \"./GRAXFilterGeneration\";\n\nimport { Button } from \"@salesforce/design-system-react\";\n\nimport { orgid, pageParams } from \"../lib/grax-data-lake\";\n\nexport default class GRAXHistory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      paramsCompleted: false,\n      orgid: null,\n      objectType: null,\n      objectId: null,\n      _extraFields: [],\n\n      _graxFields: null,\n      _filterFunction: null,\n      _filterValuesFields: null,\n      _filterValues: null,\n\n      retrieved: false,\n      retrievedCounter: 0\n    };\n  }\n\n  componentDidMount() {\n    var objectType =\n      pageParams.objectType || window.location.search.match(/[\\?&]objecttype\\=([^&]+)/)[1];\n    var objectId = pageParams.objectId || window.location.search.match(/[\\?&]objectid\\=([^&]+)/)[1];\n\n    if (orgid && objectType && objectId) {\n      this.setState({\n        paramsCompleted: true,\n        orgid: orgid,\n        objectType: objectType,\n        objectId: objectId\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.paramsCompleted) return \"Bad params.\";\n\n    return (\n      <div>\n        <SLDSSection isCollapsible={true} isOpen={true} title=\"Select Fields\">\n          <GRAXFieldsCombobox\n            dataIndex={\"grax\" + this.state.objectType.toLowerCase() + \"index\"}\n            onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n              console.log(\"onLoad\", _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n              this.setState({\n                _graxFields: _graxFields,\n                _extraFields: _graxFieldsSelectionList\n              });\n            }}\n            onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n              console.log(\"onChange\", _graxFieldsSelection, _graxFieldsSelectionList);\n\n              this.setState({\n                _extraFields: _graxFieldsSelectionList\n              });\n            }}\n          />\n\n          <div className=\"slds-m-bottom_large\" />\n        </SLDSSection>\n\n        <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Backups\">\n          <GRAXFilterGeneration\n            SObjectType={this.state.objectType}\n            filterableFieldOptions={this.state._graxFields}\n            onFilterValueChangeHandler={(\n              _filterFunction,\n              _filterValuesFields,\n              _getFilterQuery,\n              _filterValues\n            ) => {\n              this.setState({\n                _filterFunction: _filterFunction,\n                _filterValuesFields: _filterValuesFields,\n                _filterValues: _filterValues\n              });\n            }}\n            extraOperators={[{ id: \"_fieldChanged\", label: \"Field Changed\", isNegated: false }]}\n          />\n\n          <div className=\"slds-m-bottom_large\" />\n        </SLDSSection>\n\n        <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n          <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n            <Button\n              label=\"Retrieve\"\n              variant=\"brand\"\n              onClick={() => {\n                this.setState({\n                  retrieved: true,\n                  retrievedCounter: this.state.retrievedCounter + 1\n                });\n              }}\n            />\n          </div>\n\n          {this.state.retrieved && (\n            <GRAXHistoryDataTable\n              key={\"GRAXHistoryDataTable\" + this.state.retrievedCounter}\n              renderKey={\"GRAXHistoryDataTable\" + this.state.retrievedCounter}\n              columns={this.state._extraFields || \"LastModified\"}\n              hiddenColumns={this.state._filterValuesFields}\n              objectType={this.state.objectType}\n              objectId={this.state.objectId}\n              orgid={this.state.orgid}\n              filterFunction={this.state._filterFunction}\n              filterValues={this.state._filterValues}\n            />\n          )}\n        </SLDSSection>\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      // load token\n      // anticipates that the API token is in the referrer\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","/* eslint-disable */\nimport React from \"react\";\nimport { Icon } from \"@salesforce/design-system-react\";\n\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool,\n  isCollapsible: PropTypes.bool,\n  onToggle: PropTypes.func,\n  title: PropTypes.string.isRequired,\n  helpText: PropTypes.any,\n  id: PropTypes.string,\n  key: PropTypes.string,\n  children: PropTypes.any.isRequired\n};\n\nclass SLDSSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { isOpen, isCollapsible } = props;\n\n    this.state = {\n      isOpen: isOpen === true ? true : false || isCollapsible === undefined\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(e) {\n    const { onToggle } = this.props;\n\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n\n    if (onToggle) {\n      onToggle(isOpen);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { id, key, isCollapsible, title, helpText, className, children } = this.props;\n    const { isOpen } = this.state;\n\n    const titleElement = (\n      <span\n        className={`slds-truncate${isCollapsible ? \"\" : \" slds-p-horizontal_small\"}`}\n        title={title}\n      >\n        {title}\n        {helpText}\n      </span>\n    );\n\n    return (\n      <div\n        id={id || key}\n        className={[\"slds-section\", isOpen && \"slds-is-open\", className].join(\n          \" \"\n        )}\n      >\n        <h3 className=\"slds-section__title slds-theme_shade\">\n          {isCollapsible ? (\n            <button type=\"button\" className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n              <Icon\n                assistiveText={{ label: title }}\n                category=\"utility\"\n                name=\"switch\"\n                size=\"x-small\"\n                className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n              />\n              {titleElement}\n            </button>\n          ) : (\n            titleElement\n          )}\n        </h3>\n        {isOpen && <div className=\"slds-section__content\">{children}</div>}\n      </div>\n    );\n  }\n}\n\nSLDSSection.propTypes = propTypes;\n\nexport default SLDSSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ButtonGroup, Button, Tooltip } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\n\nconst defaultProps = {\n  currentPage: 1,\n  pageSize: 10\n};\n\nconst getPager = (totalItems, currentPage, pageSize) => {\n  // default to first page\n  // eslint-disable-next-line no-param-reassign\n  currentPage = currentPage || 1;\n\n  // default page size is 10\n  // eslint-disable-next-line no-param-reassign\n  pageSize = pageSize || 10;\n\n  let isNarrow = false;\n\n  if (totalItems > 10000) {\n    // eslint-disable-next-line no-param-reassign\n    totalItems = 10000;\n    isNarrow = true;\n  }\n\n  // calculate total pages\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  let startPage;\n  let endPage;\n  if (totalPages <= 10) {\n    // less than 10 total pages so show all\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // more than 10 total pages so calculate start and end pages\n    // eslint-disable-next-line no-lonely-if\n    if (currentPage <= 6) {\n      startPage = 1;\n      endPage = 10;\n    } else if (isNarrow && currentPage + 3 >= totalPages) {\n      startPage = totalPages - 8;\n      endPage = totalPages;\n    } else if (currentPage + 4 >= totalPages) {\n      startPage = totalPages - 9;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - 5;\n      endPage = currentPage + 4;\n    }\n  }\n\n  // calculate start and end item indexes\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n  // create an array of pages to ng-repeat in the pager control\n  const pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n\n  // return object with all pager properties required by the view\n  return {\n    totalItems,\n    currentPage,\n    pageSize,\n    totalPages,\n    startPage,\n    endPage,\n    startIndex,\n    endIndex,\n    pages,\n    isNarrow\n  };\n};\n\nclass SLDSPaginator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pager: {}\n    };\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillMount() {\n    // set page if items array isn't empty\n    const { totalItems, currentPage } = this.props;\n    if (totalItems) {\n      this.setPage(currentPage, true);\n    }\n  }\n\n  setPage(page, isInitialLoad) {\n    const { totalItems, pageSize } = this.props;\n    let { pager } = this.state;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    pager = getPager(totalItems, page, pageSize);\n\n    // update state\n    this.setState({ pager });\n\n    // call change page function in parent component\n    // eslint-disable-next-line react/destructuring-assignment\n    this.props.onChangePage(page, false || isInitialLoad);\n  }\n\n  render() {\n    const { pager } = this.state;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return (\n      <ButtonGroup>\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"left\"\n          iconPosition=\"left\"\n          label=\"First\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(1)}\n          disabled={pager.currentPage === 1}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronleft\"\n          iconPosition=\"left\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage - 1)}\n          disabled={pager.currentPage === 1}\n        />\n        {pager.pages.map((page, index) => {\n          return (\n            <Button\n              // eslint-disable-next-line react/no-array-index-key\n              key={`SLDSPaginator${Date.now()}${index}`}\n              label={page}\n              variant={pager.currentPage === page ? \"brand\" : \"neutral\"}\n              onClick={() => this.setPage(page)}\n            />\n          );\n        })}\n        {pager.isNarrow && pager.currentPage >= pager.totalPages - 3 && (\n          <Tooltip\n            align=\"top right\"\n            content=\"The list is too long, try adding more filters to optimize the results.\"\n          >\n            <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n          </Tooltip>\n        )}\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronright\"\n          iconPosition=\"right\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage + 1)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"right\"\n          iconPosition=\"right\"\n          label=\"Last\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.totalPages)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n      </ButtonGroup>\n    );\n  }\n}\n\nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;\n","/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\";\n\nimport { Datepicker } from \"@salesforce/design-system-react\";\n\nimport { moment, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst GRAXDatePicker = props => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  return (\n    <div className=\"slds-is-relative\">\n      <Datepicker\n        formatter={datePickerFormatter}\n        parser={datePickerParser}\n        // eslint-disable-next-line\n        {...props}\n        onChange={(event, data) => {\n          setIsValidDate(data.formattedDate === \"\" || moment(data.date).isValid());\n\n          if (props.onChange != null) {\n            props.onChange(event, data);\n          }\n        }}\n      />\n      {isValidDate === false ? (\n        <div className=\"slds-text-color_error\">\n          The date is invalid. Please select/write a valid date.\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GRAXDatePicker;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {\n  Spinner,\n  Combobox,\n  Input,\n  Button,\n  Checkbox,\n  comboboxFilterAndLimit\n} from \"@salesforce/design-system-react\";\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport { datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <GRAXDatePicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams, token, orgid } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\",\n            token,\n            orgid\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}