{"version":3,"sources":["lib/grax-data-lake.js","components/SLDSSection.jsx","public/js/jquery.sldsTree.js","../node_modules/@babel/runtime/helpers/esm/construct.js","components/GRAXSummaryChartsChart.jsx","components/GRAXSummaryChartsSimple.jsx","components/GRAXSummaryChartsAdvanced.jsx","components/GRAXSummaryCharts.jsx"],"names":["isDev","baseUrl","token","window","__grax__","_csrf","orgid","pageParams","userid","GetParams","params","undefined","action","$","param","ajaxSetup","beforeSend","xhr","settings","method","setRequestHeader","authorization","type","test","this","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","console","error","status","showError","statusText","responseText","SLDSSection","props","state","isOpen","isCollapsible","handleToggle","bind","e","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","svgns","fn","sldsTree","options","extend","data","items","childs","attrs","root","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","item","onDiv","$div","append","onButton","$button","onFinish","$root","getTreeItemContent","level","attr","disabled","toggleClass","icon","document","createElementNS","setAttribute","class","icon_use","setAttributeNS","path","appendChild","on","i","getTreeItemButton","length","getTreeItem","getTree","each","html","jQuery","Parent","args","Class","Reflect","construct","sham","Proxy","Date","prototype","toString","call","isNativeReflectConstruct","a","push","apply","instance","Function","setPrototypeOf","arguments","GRAXSummaryChartsChart","google","charts","load","setOnLoadCallback","drawChart","fromDate","toDate","setHours","setMinutes","isLoading","summaryData","defaultChartSettings","width","left","showChartAttr","showRecords","showInserted","showUpdated","showArchived","chartFromDate","chartToDate","showAttributeFilter","hideChartOptions","chartObjectTopTen","sortedNames","otherSum","objIndexes","chartDataIndexes","chartData","counter","nameSet","Set","forEach","summary","summaryMap","add","Array","sort","b","obj","smyIndex","n","records","tempN","top10BackedUpObjects","rec","visualization","arrayToDataTable","JSON","parse","stringify","sliceVisibilityThreshold","PieChart","chartObjectByDate","DataTable","addColumn","fromDateAxis","toDateAxis","objectsTotalValue","startTime","smyDate","smyDateFormated","formatStartTime","getHours","fill","v","f","addRows","interpolateNulls","pointSize","explorer","hAxis","format","viewWindow","min","max","viewWindowMode","vAxis","LineChart","chartSummaryTopTen","summaryIndexes","spName","summaryResults","top10BackedUpSummaries","chartSummaryByDate","sumRes","chartAttributeProgressByDate","attIndexes","attrNames","attrName","summarysTotalValue","selectedSummaries","containsSelectedObjects","setSeconds","getFullYear","getMonth","padStart","getDate","getMinutes","getSeconds","isStacked","ColumnChart","ret","chartSelection","isBlank","chartEl","draw","selectChart","selection","chartInput","setDateFilter","formatDate","dt","chartOptions","variant","events","onChange","event","value","onRequestRemoveSelectedOption","onSelect","onChartSelect","labels","placeholder","comboboxFilterAndLimit","inputValue","limit","defaultChecked","isChecked","toggleDisabled","toggleEnabled","ref","nextProps","prevState","GRAXSummaryChartsSimple","chart","createRef","summaryDataResults","_currentOrgRecords","objectInput","objectSelection","objectOptions","chartSelected","loadSummaries","query","getUTCTimeRangeFromUserDate","date","AND","ajax","url","dataIndex","_index","_select","_q","_limit","_from","_sort","_sortType","_ignore_unavailable","success","results","loadSummaryData","err","summaryNames","refreshChart","selectedObjects","option","selectedObject","tempData","current","target","checked","CustomDataTableCell","href","spId","encodeURI","executionUniqueKey","_target","displayName","DataTableCell","GRAXSummaryChartsAdvanced","summaryDataSelected","itemsObjectsByDataRange","itemsObjectsByDataRangeSelection","summaryBreadownDTItems","summaryBreadownDTSelection","summaryDTItems","summaryDTSelection","summaryBDDTFromDate","summaryBDDTToDate","summaryDTFilters","currentChartSelected","fromDT","toDT","loadSummaryDataTable","loadSummaryBreakdownTable","loadObjectDataTable","getSelectedSummary","summaries4chart","index","summaryList","dtSummaries","includeArchived","includeInserted","includeUpdated","archived","inserted","updated","existIndex","filter","createdDate","CreatedDate","startTimeFormated","CreatedDateFormatted","startTimeFormmated","summaryToShow","dtSummary","Id","allSummaries","objName","_allSumaries","startTimes","dateIndex","indexOf","dateData","summartDataResults","summaryIds","objNames","update","endTime","summaryDTHandleChanged","summaryBreadownDTHandleChanged","itemsObjectsByDataRangeHandleChanged","dataTableHandleSort","dtName","sortColumn","sortProperty","property","sortDirection","newState","val","style","height","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedHeader","fixedLayout","selectRows","onRowChange","onSort","sortable","primaryColumn","renderAggregatedScheduleProcessSection","renderScheduleProcessBreakdownSection","renderObjectsSection","minHeight","renderFilterCriteriaSection","renderFilterSections","GRAXSummaryCharts","padding"],"mappings":"yGAAA,sQAmBO,IAAMA,GAAQ,EAIRC,EAAUD,EAFJ,4CAEyB,GAE/BE,EAAQC,OAAOC,SAASF,MACxBG,EAAQF,OAAOC,SAASC,MACxBC,EAAQH,OAAOC,SAASE,MAIxBC,GAHSJ,OAAOC,SAASI,OAGZL,OAAOC,SAASG,YAAc,IAEjD,SAASE,EAAUC,GAMxB,OALe,OAAXA,QAA8BC,IAAXD,IAAsBA,EAAS,IAEhC,OAAlBA,EAAOE,aAAqCD,IAAlBD,EAAOE,QAA0C,KAAlBF,EAAOE,SAClEF,EAAOE,OAAS,QAEX,IAAMC,IAAEC,MAAMJ,GAOvBG,IAAEE,UAAU,CACVC,WAAY,SAASC,EAAKC,GAL5B,IAAwBC,EAMpBF,EAAIG,iBAAiB,YAAad,GAEF,MAA5BC,EAAWc,cACbJ,EAAIG,iBAAiB,gBAAiBb,EAAWc,eAEjDJ,EAAIG,iBAAiB,gBAAiB,UAAYlB,GAXhCiB,EAcAD,EAASI,KAZxB,6BAA6BC,KAAKJ,IAYAK,KAAKC,aAC1CR,EAAIG,iBAAiB,cAAef,GAGtCY,EAAIS,iBAAkB,GAEI,IAAtBR,EAASS,UACXV,EAAIW,MAAK,SAACC,EAAOC,EAAYC,GAC3BC,QAAQC,MAAMJ,GAEO,MAAjBA,EAAMK,QAAkC,cAAhBH,GAC1B5B,OAAOgC,UAAUN,EAAMO,WAAa,KAAOP,EAAMQ,qB,8IChEtCC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,QAAyB,IAAjBF,EAAME,aAA0D9B,IAAxB4B,EAAMG,eAG1D,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPL,E,0EAUNC,GACT,IAAIJ,GAAUjB,KAAKgB,MAAMC,OAEzBjB,KAAKsB,SAAS,CACVL,OAAQA,IAGTjB,KAAKe,MAAMQ,UACVvB,KAAKe,MAAMQ,SAASN,GAGxBI,EAAEG,mB,+BAIF,IAAIC,EAAQ,0BAAMC,UAAW,iBAAoB1B,KAAKe,MAAMG,cAA6C,GAA7B,4BAAkCO,MAAOzB,KAAKe,MAAMU,OAAQzB,KAAKe,MAAMU,OAEnJ,OACI,yBAAKE,GAAI3B,KAAKe,MAAMY,IAAM3B,KAAKe,MAAMa,IAAKF,UAAW,CAAC,eAAgB1B,KAAKgB,MAAMC,QAAU,eAAgBjB,KAAKe,MAAMW,WAAWG,KAAK,MAClI,wBAAIH,UAAU,wCACT1B,KAAKe,MAAMG,cAAgB,4BAAQQ,UAAU,yCAAyCI,QAAS9B,KAAKmB,cACjG,kBAAC,IAAD,CACIY,cAAe,CAAEC,MAAOhC,KAAKe,MAAMU,OACnCQ,SAAS,UACTC,KAAK,SACLC,KAAK,UACLT,UAAU,6EAEbD,GACOA,GAEfzB,KAAKgB,MAAMC,QAAU,yBAAKS,UAAU,yBAChC1B,KAAKe,MAAMqB,e,GA3CSC,IAAMC,Y,iCCH/C,cAEC,SAASjD,GACT,IAAIkD,EAAQ,6BAGTlD,EAAEmD,GAAGC,SAAW,SAASC,GACxB,IAEIhD,EAAWL,EAAEsD,QAAO,EAAM,CAC1BC,KAAM,GACNC,MAAO,CACNlB,GAAI,KACJK,MAAO,QACPc,OAAQ,UAETC,MAAO,CACZC,KAAM,CAAC,MAAS,uBAChBC,GAAI,CAAC,MAAS,aACdC,GAAI,CACH,KAAQ,WACR,aAAc,IACd,gBAAiB,SAElBC,IAAK,CAAC,MAAS,mBACfC,OAAQ,CACP,MAAS,oDACT,cAAe,OACf,SAAY,OAGdC,aAAc,CACb,SAAY,oBAEbC,WAAY,CACX,MAAS,4CACT,KAAQ,8DAEHC,KAAM,SAASC,EAAKX,EAAOnD,KAC3B+D,KAAM,SAASC,EAAKC,EAAMjE,KAC1BkE,MAAO,SAASC,EAAMF,EAAMjE,GAC3BmE,EAAKC,OAAOH,EAAKjE,EAASmD,MAAMb,SAEjC+B,SAAU,SAASC,EAASL,EAAMjE,KAC/BuE,SAAU,SAASC,EAAOrB,EAAOnD,MAClCgD,GA6BCyB,EAAqB,SAASR,EAAMS,EAAOZ,EAAKE,GACnD,IAAIG,EAAOxE,EAAE,SAASgF,KAAK3E,EAASqD,MAAMI,KAM1C,OAJNU,EAAKC,OA9BwB,SAASH,EAAMW,EAAUZ,GAChD,IAAIM,EAAU3E,EAAE,YAAYgF,KAAK3E,EAASqD,MAAMK,QAAQmB,YAAY7E,EAAS2D,aAAaiB,SAAUA,GAEhGE,EAAOC,SAASC,gBAAgBnC,EAAO,OAC3CiC,EAAKG,aAAa,QAASjF,EAAS4D,WAAWsB,OAC/CJ,EAAKG,aAAa,cAAe,QAEjC,IAAIE,EAAWJ,SAASC,gBAAgBnC,EAAO,OAiB/C,OAhBAsC,EAASC,eAnDH,+BAmD2B,aAAcpF,EAAS4D,WAAWyB,MAEnEP,EAAKQ,YAAYH,GAEpBb,EAAQF,OAAOU,GAEZR,EAAQiB,GAAG,SAAS,SAAS5D,GAC5BqC,EAAIW,KAAK,iBAAiB,SAASa,EAAGb,GAClC,QAAkB,SAATA,MAGbhD,EAAEG,oBAGH9B,EAASqE,SAASC,EAASL,EAAMjE,GAE1BsE,EAMDmB,CAAkBxB,GAAOA,EAAKjE,EAASmD,MAAMC,SAAWa,EAAKjE,EAASmD,MAAMC,QAAQsC,OAAS,EAAG1B,IAEtGhE,EAASkE,MAAMC,EAAMF,EAAMjE,GAEpBmE,GAGJwB,EAAc,SAAS1B,EAAMS,EAAOZ,GACvC,IAAIE,EAAMrE,EAAE,QAAQgF,KAAK3E,EAASqD,MAAMG,IASxC,OAPAQ,EAAIW,KAAK,CAAC,aAAcD,IAAQN,OAAOK,EAAmBR,EAAMS,EAAOZ,EAAKE,IACzEC,EAAKjE,EAASmD,MAAMC,SACtBY,EAAII,OAAOwB,EAAQ3B,EAAKjE,EAASmD,MAAMC,QAASsB,EAAM,IAGvD1E,EAAS+D,KAAKC,EAAKC,EAAMjE,GAElBgE,GAGJ4B,EAAU,SAASzC,EAAOuB,GAC7B,IAAIZ,EAAMnE,EAAE,QAAQgF,KAAK3E,EAASqD,MAAME,IAUxC,OARGmB,EAAQ,GAAGZ,EAAIa,KAAK,CAAC,KAAQ,UAEhChF,EAAEkG,KAAK1C,GAAO,SAASqC,EAAGvB,GACzBH,EAAIM,OAAOuB,EAAY1B,EAAMS,OAG9B1E,EAAS6D,KAAKC,EAAKX,EAAOnD,GAEnB8D,GAOR,OA5GSxD,KAwGHqE,KAAK3E,EAASqD,MAAMC,MAAMwC,KAAKF,EAAQ5F,EAASkD,KAAM,IAE5DlD,EAASuE,SA1GAjE,KA0GgBN,EAASkD,KAAMlD,GA1G/BM,MALhB,CAFD,OAsHEyF,I,sJCvGa,SAAS,EAAWC,EAAQC,EAAMC,GAc/C,OAVE,EAjBJ,WACE,GAAuB,qBAAZC,UAA4BA,QAAQC,UAAW,OAAO,EACjE,GAAID,QAAQC,UAAUC,KAAM,OAAO,EACnC,GAAqB,oBAAVC,MAAsB,OAAO,EAExC,IAEE,OADAC,KAAKC,UAAUC,SAASC,KAAKP,QAAQC,UAAUG,KAAM,IAAI,iBAClD,EACP,MAAO5E,GACP,OAAO,GAKLgF,GACWR,QAAQC,UAER,SAAoBJ,EAAQC,EAAMC,GAC7C,IAAIU,EAAI,CAAC,MACTA,EAAEC,KAAKC,MAAMF,EAAGX,GAChB,IACIc,EAAW,IADGC,SAAStF,KAAKoF,MAAMd,EAAQY,IAG9C,OADIV,GAAO,OAAAe,EAAA,GAAeF,EAAUb,EAAMM,WACnCO,IAIOD,MAAM,KAAMI,W,0FClBXC,E,YACjB,WAAY9F,GAAQ,IAAD,sBACf,4CAAMA,IAEN+F,OAAOC,OAAOC,KAAK,UAAW,CAAC,SAAW,CAAC,eAC3CF,OAAOC,OAAOE,kBAAmB,EAAKC,WAEtC,IAAIC,EAAW,EAAKpG,MAAMoG,SAAS,EAAKpG,MAAMoG,SAAS,IAAIlB,KACvDmB,EAAS,EAAKrG,MAAMqG,OAAO,EAAKrG,MAAMqG,OAAO,IAAInB,KAPtC,OASfkB,EAASE,SAAS,GAClBF,EAASG,WAAW,GACpBF,EAAOC,SAAS,IAChBD,EAAOE,WAAW,IAElB,EAAKtG,MAAQ,CACTuG,WAAW,EACXC,YAAa,EAAKzG,MAAMyG,YACxBC,qBAAsB,CAAC,MAAQ,OAAQ,OAAS,IAAK,UAAY,CAAEC,MAAO,MAAOC,KAAM,OACvFC,cAAe,CACXC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,cAAc,GAGlBC,cAAed,EACfe,YAAad,EACbe,qBAAqB,EACrBC,kBAAkB,GA5BP,E,iFAqCfpI,KAAKqI,kBAAoB,WACrB,IAQIC,EARAd,EAAcxH,KAAKgB,MAAMwG,YACzBe,EAAW,EACXC,EAAa,GACbC,EAAmB,GACnBC,EAAY,GAEZC,EAAU,EACVC,EAAU,IAAIC,IAGlBrB,EAAYsB,SAAQ,SAAUC,GAC1B,IAAK,IAAInH,KAAOmH,EAAQC,WACpBJ,EAAQK,IAAIrH,OAIpB0G,EAAW,EAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAAS7C,EAAG8C,GACzB,OAAQ9C,EAAI8C,GAAG,EAAE9C,EAAI8C,EAAE,EAAE,KAG7Bd,EAAYQ,SAAQ,SAASnF,GACzB6E,EAAW7E,GAAQgF,EACnBA,OAGJA,EAAU,EAEVnB,EAAYsB,SAAQ,SAAUC,GAC1B,IAAK,IAAInH,KAAOmH,EAAQC,WAAY,CAChC,IAAIK,EAAMN,EAAQC,WAAWpH,GACzB0H,EAAWb,EAAiB7G,GAE5B2H,EAAKF,EAAIG,QAAQH,EAAIG,QAAQ,EAGjC,GAAKF,GAAyB,IAAbA,EAKZ,CACD,IAAIG,EAAQf,EAAUY,GAAU,GAAKC,EAErCb,EAAUY,GAAY,CAAE1H,EAAM,KAAK6H,EAAM,IAAKA,QAP9CH,EAAWX,EACXF,EAAiB7G,GAAO+G,EACxBD,EAAUnC,KAAM,CAAE3E,EAAM,KAAK2H,EAAE,IAAKA,IACpCZ,IAOJJ,GAAYgB,MAIpBb,EAAUS,MAAK,SAAS7C,EAAG8C,GACvB,OAAS9C,EAAE,GAAK8C,EAAE,MAKtB,IAFA,IAAIM,EAAuB,CAAC,CAAC,SAAU,cAE9BxE,EAAE,EAAGA,EAAE,IAAMA,EAAEwD,EAAUtD,OAAQF,IAAI,CAC1C,IAAIyE,EAAMjB,EAAWxD,GACrBwE,EAAqBnD,KAAMoD,GAC3BpB,GAAYoB,EAAI,GAGhBpB,EAAW,GACXmB,EAAqBnD,KAAM,CAAC,WAAagC,EAAW,IAAKA,IAG7D,IAAI3F,EAAOkE,OAAO8C,cAAcC,iBAAiBH,GAG7ChH,EAAUoH,KAAKC,MAAMD,KAAKE,UAAUhK,KAAKgB,MAAMyG,uBAInD,OAHA/E,EAAQuH,yBAA2B,EAG5B,CAAEnD,OAAO8C,cAAcM,SAAUtH,EAAMF,IAChDtB,KAAKpB,MAEPA,KAAKmK,kBAAoB,WACrB,IAAI3C,EAAcxH,KAAKgB,MAAMwG,YACzBkB,EAAY,GACZD,EAAmB,GACnBD,EAAa,GAEb5F,EAAO,IAAIkE,OAAO8C,cAAcQ,UACpCxH,EAAKyH,UAAU,OAAQ,cAEvB,IAEI/B,EAoBAgC,EACAC,EAvBA5B,EAAU,EACVC,EAAU,IAAIC,IAGlBrB,EAAYsB,SAAQ,SAAUC,GAC1B,IAAK,IAAInH,KAAOmH,EAAQC,WACpBJ,EAAQK,IAAIrH,OAIpB0G,EAAW,EAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAAS7C,EAAG8C,GACzB,OAAQ9C,EAAI8C,GAAG,EAAE9C,EAAI8C,EAAE,EAAE,KAG7Bd,EAAYQ,SAAQ,SAASnF,GACzB6E,EAAW7E,GAAQgF,EACnBA,OAGJA,EAAU,EAIV,IAAI6B,EAAoB,GAuDxB,GA3CAhD,EAAYsB,QAAQ,SAASC,GACzB,IAAK,IAAInH,KAAOmH,EAAQC,WAAY,CAChC,IAAIK,EAAMN,EAAQC,WAAWpH,GAE7B,GAAIyH,EAAIoB,UAAR,CAIA,IAAIlB,EAAKF,EAAIG,QAAQH,EAAIG,QAAQ,EAC7BkB,EAAU,IAAIzE,KAAKoD,EAAIoB,WACvBE,EAAkB3K,KAAK4K,gBAAgBF,GACvCpB,EAAWb,EAAiBiC,KAG3BJ,GAAgBA,GAAgBI,KACjCJ,EAAe,IAAIrE,KAAKyE,IACXrD,SAASiD,EAAaO,WAAW,KAG7CN,GAAcA,GAAcG,KAC7BH,EAAa,IAAItE,KAAKyE,IACXrD,SAASkD,EAAWM,WAAW,GAGzCvB,GAAyB,IAAbA,IACbA,EAAWX,EACXF,EAAiBiC,GAAW/B,EAC5BD,EAAUnC,KAAM,IAAI2C,MAAOZ,EAAYlD,OAAS,GAAI0F,UAAK3L,IACzDwJ,KAGJD,EAAUY,GAAU,GAAK,CAACyB,EAAGL,EAASM,EAAGL,GACpCjC,EAAUY,GAAUd,EAAW5G,GAAK,KACrC8G,EAAUY,GAAUd,EAAW5G,GAAK,GAAK,GAE7C8G,EAAUY,GAAUd,EAAW5G,GAAK,IAAM2H,EACrCiB,EAAkB5I,KACnB4I,EAAkB5I,GAAO,GAE7B4I,EAAkB5I,IAAQ2H,KAEhCnI,KAAKpB,OAEkB,IAArB0I,EAAUtD,OAAe,OAAO,KAEpC,IAAK,IAAIxD,KAAO4G,EACZ5F,EAAKyH,UAAU,SAAUzI,EAAM,KAAO4I,EAAkB5I,GAAO,KAGnE8G,EAAUS,MAAK,SAAS7C,EAAE8C,GACtB,OAAO9C,EAAE,GAAGyE,EAAI3B,EAAE,GAAG2B,EAAE,EAAEzE,EAAE,GAAGyE,EAAI3B,EAAE,GAAG2B,GAAG,EAAE,KAGhDnI,EAAKqI,QAASvC,GAGd,IAAIhG,EAAUoH,KAAKC,MAAMD,KAAKE,UAAUhK,KAAKgB,MAAMyG,uBAkBnD,OAjBA/E,EAAQwI,kBAAmB,EAC3BxI,EAAQyI,UAAY,EACpBzI,EAAQ0I,SAAW,GACnB1I,EAAQ2I,MAAQ,CACZ5J,MAAO,aACP6J,OAAQ,uBACRC,WAAY,CACRC,IAAKlB,EACLmB,IAAKlB,GAETmB,eAAgB,aAEpBhJ,EAAQiJ,MAAQ,CACZlK,MAAO,qBAIJ,CAAEqF,OAAO8C,cAAcgC,UAAWhJ,EAAMF,IACjDtB,KAAKpB,MAEPA,KAAK6L,mBAAqB,WACtB,IAQIvD,EARAd,EAAcxH,KAAKgB,MAAMwG,YACzBe,EAAW,EACXuD,EAAiB,GACjBrD,EAAmB,GACnBC,EAAY,GAEZC,EAAU,EACVC,EAAU,IAAIC,IAGlBrB,EAAYsB,SAAQ,SAAUC,GAC1BH,EAAQK,IAAKF,EAAQgD,YAGzBzD,EAAW,EAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAAS7C,EAAG8C,GACzB,OAAQ9C,EAAI8C,GAAG,EAAE9C,EAAI8C,EAAE,EAAE,KAG7Bd,EAAYQ,SAAQ,SAASnF,GACzBmI,EAAenI,GAAQgF,EACvBA,OAGJA,EAAU,EAEVnB,EAAYsB,SAAQ,SAAUC,GAC1B,IAAIO,EAAWb,EAAiBM,EAAQgD,QACpCxC,EAAKR,EAAQiD,eAAexC,QAAQT,EAAQiD,eAAexC,QAAQ,EAEvE,GAAKF,GAAyB,IAAbA,EAEZ,CACD,IAAIG,EAAQf,EAAUY,GAAU,GAAKC,EAErCb,EAAUY,GAAY,CAAEP,EAAQgD,OAAS,KAAKtC,EAAM,IAAKA,QAJzDf,EAAUnC,KAAM,CAAEwC,EAAQgD,OAAS,KAAKxC,EAAE,IAAKA,IAMnDhB,GAAYgB,KAGhBb,EAAUS,MAAK,SAAS7C,EAAG8C,GACvB,OAAS9C,EAAE,GAAK8C,EAAE,MAKtB,IAFA,IAAI6C,EAAyB,CAAC,CAAC,UAAW,cAEjC/G,EAAE,EAAGA,EAAE,IAAMA,EAAEwD,EAAUtD,OAAQF,IAAI,CAC1C,IAAIyE,EAAMjB,EAAWxD,GACrB+G,EAAuB1F,KAAMoD,GAC7BpB,GAAYoB,EAAI,GAGhBpB,EAAW,GACX0D,EAAuB1F,KAAM,CAAC,WAAagC,EAAW,IAAKA,IAG/D,IAAI3F,EAAOkE,OAAO8C,cAAcC,iBAAiBoC,GAG7CvJ,EAAUoH,KAAKC,MAAMD,KAAKE,UAAUhK,KAAKgB,MAAMyG,uBAInD,OAHA/E,EAAQuH,yBAA2B,EAG5B,CAAEnD,OAAO8C,cAAcM,SAAUtH,EAAMF,IAChDtB,KAAKpB,MAEPA,KAAKkM,mBAAqB,WACtB,IAAI1E,EAAcxH,KAAKgB,MAAMwG,YACzBkB,EAAY,GACZD,EAAmB,GACnBD,EAAa,GAEb5F,EAAO,IAAIkE,OAAO8C,cAAcQ,UACpCxH,EAAKyH,UAAU,OAAQ,cAEvB,IAEI/B,EAkBAgC,EACAC,EArBA5B,EAAU,EACVC,EAAU,IAAIC,IAGlBrB,EAAYsB,SAAQ,SAAUC,GAC1BH,EAAQK,IAAKF,EAAQgD,YAGzBzD,EAAW,EAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAAS7C,EAAG8C,GACzB,OAAQ9C,EAAI8C,GAAG,EAAE9C,EAAI8C,EAAE,EAAE,KAG7Bd,EAAYQ,SAAQ,SAASnF,GACzB6E,EAAW7E,GAAQgF,EACnBA,OAGJA,EAAU,EAIV,IAAI6B,EAAoB,GAoDxB,GAxCAhD,EAAYsB,QAAQ,SAASC,GACzB,IAAIoD,EAASpD,EAAQiD,eAErB,GAAIG,EAAO1B,UAAX,CAIA,IAAIlB,EAAK4C,EAAO3C,QAAQ2C,EAAO3C,QAAQ,EACnCkB,EAAU,IAAIzE,KAAKkG,EAAO1B,WAC1BE,EAAkB3K,KAAK4K,gBAAgBF,GACvCpB,EAAWb,EAAiBiC,KAE3BJ,GAAgBA,GAAgBI,KACjCJ,EAAe,IAAIrE,KAAKyE,IACXrD,SAASiD,EAAaO,WAAW,KAG7CN,GAAcA,GAAcG,KAC7BH,EAAa,IAAItE,KAAKyE,IACXrD,SAASkD,EAAWM,WAAW,GAGzCvB,GAAyB,IAAbA,IACbA,EAAWX,EACXF,EAAiBiC,GAAW/B,EAC5BD,EAAUnC,KAAM,IAAI2C,MAAOZ,EAAYlD,OAAS,GAAI0F,UAAK3L,IACzDwJ,KAGJD,EAAUY,GAAU,GAAK,CAACyB,EAAGL,EAASM,EAAGL,GACpCjC,EAAUY,GAAUd,EAAWO,EAAQgD,QAAQ,KAChDrD,EAAUY,GAAUd,EAAWO,EAAQgD,QAAQ,GAAK,GAExDrD,EAAUY,GAAUd,EAAWO,EAAQgD,QAAQ,IAAMxC,EAChDiB,EAAkBzB,EAAQgD,UAC3BvB,EAAkBzB,EAAQgD,QAAU,GAExCvB,EAAkBzB,EAAQgD,SAAWxC,IACvCnI,KAAKpB,OAEkB,IAArB0I,EAAUtD,OAAe,OAAO,KAEpC,IAAK,IAAIxD,KAAO4G,EACZ5F,EAAKyH,UAAU,SAAUzI,EAAM,KAAO4I,EAAkB5I,GAAO,KAGnE8G,EAAUS,MAAK,SAAS7C,EAAE8C,GACtB,OAAO9C,EAAE,GAAGyE,EAAI3B,EAAE,GAAG2B,EAAE,EAAEzE,EAAE,GAAGyE,EAAI3B,EAAE,GAAG2B,GAAG,EAAE,KAGhDnI,EAAKqI,QAASvC,GAGd,IAAIhG,EAAUoH,KAAKC,MAAMD,KAAKE,UAAUhK,KAAKgB,MAAMyG,uBAiBnD,OAhBA/E,EAAQwI,kBAAmB,EAC3BxI,EAAQ0I,SAAW,GACnB1I,EAAQ2I,MAAQ,CACZ5J,MAAO,aACP6J,OAAQ,uBACRC,WAAY,CACRC,IAAKlB,EACLmB,IAAKlB,GAETmB,eAAgB,aAEpBhJ,EAAQiJ,MAAQ,CACZlK,MAAO,qBAIJ,CAAEqF,OAAO8C,cAAcgC,UAAWhJ,EAAMF,IACjDtB,KAAKpB,MAEPA,KAAKoM,6BAA+B,WAChC,IAAI5E,EAAcxH,KAAKgB,MAAMwG,YACzBkB,EAAY,GACZD,EAAmB,GACnB4D,EAAa,GAEbzJ,EAAO,IAAIkE,OAAO8C,cAAcQ,UACpCxH,EAAKyH,UAAU,OAAQ,cAEvB,IAuBIC,EACAC,EAxBA5B,EAAU,EACVL,EAAc,GACdgE,EAAY,GAEZtM,KAAKgB,MAAM4G,cAAcC,aAAeyE,EAAU/F,KAAM,WACxDvG,KAAKgB,MAAM4G,cAAcE,cAAgBwE,EAAU/F,KAAM,YACzDvG,KAAKgB,MAAM4G,cAAcG,aAAeuE,EAAU/F,KAAM,WACxDvG,KAAKgB,MAAM4G,cAAcI,cAAgBsE,EAAU/F,KAAM,YAE7D+F,EAAUxD,SAAQ,SAASyD,GACvBjE,EAAY/B,KAAMgG,MAGtBjE,EAAYa,MAAK,SAAS7C,EAAG8C,GACzB,OAAQ9C,EAAI8C,GAAG,EAAE9C,EAAI8C,EAAE,EAAE,KAG7Bd,EAAYQ,SAAQ,SAASnF,GACzB0I,EAAW1I,GAAQgF,EACnBA,OAGJA,EAAU,EAGV,IAAI6D,EAAqB,GACrBC,EAAoB,IAAI5D,IA6D5B,GA3DArB,EAAYsB,SAAQ,SAASC,GACzB,IAAI1E,EAAO,GACP2E,EAAaD,EAAQC,WACrB0D,GAA0B,EAHG,WAKxB9K,GACL,IAAIyH,EAAML,EAAWpH,GACjByH,IACAiD,EAAUxD,SAAS,SAASyD,GACxBlI,EAAKkI,GAAYlI,EAAKkI,GAAUlI,EAAKkI,GAAU,EAC/ClI,EAAKkI,IAAclD,EAAIkD,GAAUlD,EAAIkD,GAAU,KAEnDG,GAA0B,IAPlC,IAAK,IAAI9K,KAAOoH,EAAa,EAApBpH,GAWT,GAAI8K,GAA2B3D,EAAQiD,eAAevB,UAAW,CAC7D,IAAIA,EAAY,IAAIxE,KAAK8C,EAAQiD,eAAevB,WAChDA,EAAUkC,WAAW,GAErB,IAAIjC,EAAUD,EACVE,EAAkBF,EAAUmC,cAAc,KAAKnC,EAAUoC,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUsC,UAAU5G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUI,WAAW1E,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUuC,aAAa7G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUwC,aAAa9G,WAAW2G,SAAS,EAAE,KAChTxD,EAAWb,EAAiBiC,KAE3BJ,GAAgBA,GAAgBI,KACjCJ,EAAe,IAAIrE,KAAKyE,IACXrD,SAASiD,EAAaO,WAAW,KAG7CN,GAAcA,GAAcG,KAC7BH,EAAa,IAAItE,KAAKyE,IACXrD,SAASkD,EAAWM,WAAW,GAGzCvB,GAAyB,IAAbA,IACbA,EAAWX,EACXF,EAAiBiC,GAAW/B,EAC5BD,EAAUnC,KAAM,IAAI2C,MAAOoD,EAAUlH,OAAS,GAAI0F,UAAK3L,IACvDwJ,KAGJD,EAAUY,GAAU,GAAK,CAACyB,EAAGL,EAASM,EAAGL,EAAkB,KAAO5B,EAAQgD,QAE1EO,EAAUxD,SAAQ,SAASyD,GAClB7D,EAAUY,GAAU+C,EAAWE,GAAU,KAC1C7D,EAAUY,GAAU+C,EAAWE,GAAU,GAAK,GAElD7D,EAAUY,GAAU+C,EAAWE,GAAU,IAAMlI,EAAKkI,GAE/CC,EAAmBD,KACpBC,EAAmBD,GAAY,GAEnCC,EAAmBD,IAAalI,EAAKkI,MAGzCE,EAAkBxD,IAAKF,EAAQgD,YAId,IAArBrD,EAAUtD,OAAe,OAAO,KAEpC,IAAK,IAAIxD,KAAOyK,OACoBlN,IAA5BqN,EAAmB5K,IACnBgB,EAAKyH,UAAU,SAAUzI,EAAM,KAAO4K,EAAmB5K,GAAO,KAIxE8G,EAAUS,MAAK,SAAS7C,EAAE8C,GACtB,OAAO9C,EAAE,GAAK8C,EAAE,GAAG,EAAE9C,EAAE,GAAK8C,EAAE,IAAI,EAAE,KAGxCxG,EAAKqI,QAASvC,GAGd,IAAIhG,EAAUoH,KAAKC,MAAMD,KAAKE,UAAUhK,KAAKgB,MAAMyG,uBAkBnD,OAjBA/E,EAAQwI,kBAAmB,EAC3BxI,EAAQwK,WAAY,EACpBxK,EAAQ0I,SAAW,GACnB1I,EAAQ2I,MAAQ,CACZ5J,MAAO,aACP6J,OAAQ,wBACRI,eAAgB,SAChBH,WAAY,CACRC,IAAKlB,EACLmB,IAAKlB,IAGb7H,EAAQiJ,MAAQ,CACZlK,MAAO,cAIJ,CAAEqF,OAAO8C,cAAcuD,YAAavK,EAAMF,IACnDtB,KAAKpB,MAEPA,KAAKkH,UAAY,WACb,IAAIkG,EAAMpN,KAAKgB,MAAMqM,eAAe,GAAGjH,OAEvCpG,KAAKsB,SAAS,CACViG,WAAW,EACX+F,QAAgB,MAAPF,IACV,WACKA,GACY,IAAIA,EAAI,GAAIpN,KAAKuN,SACvBC,KAAKJ,EAAI,GAAGA,EAAI,QAGhChM,KAAKpB,MAEPA,KAAKyN,YAAc,SAAUC,GACzB1N,KAAKsB,SAAU,CACXqM,WAAa,GACbN,eAAiBK,GAClB1N,KAAKkH,YACV9F,KAAKpB,MAEPA,KAAK4N,cAAgB,SAAUzG,EAAUC,GACrCpH,KAAKsB,SAAS,CACV2G,cAAed,EACfe,YAAad,KAEnBhG,KAAKpB,MAEPA,KAAK4K,gBAAkB,SAAUH,GAC7B,OAAOA,EAAUmC,cAAc,KAAKnC,EAAUoC,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUsC,UAAU5G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUI,WAAW1E,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUuC,aAAa7G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUwC,aAAa9G,WAAW2G,SAAS,EAAE,MAGzS9M,KAAK6N,WAAa,SAAUC,GACxB,OAAOA,EAAGjB,WAAW,EAAE,IAAIiB,EAAGf,UAAU,IAAIe,EAAGlB,eAGnD,IAAImB,EAAe,CAAC,CAAC/L,MAAO,iBAAkBL,GAAI,oBAAqByE,KAAOpG,KAAKqI,mBACvE,CAACrG,MAAO,kBAAmBL,GAAI,oBAAqByE,KAAOpG,KAAKmK,mBAChE,CAACnI,MAAO,oBAAqBL,GAAI,qBAAsByE,KAAOpG,KAAK6L,oBACnE,CAAC7J,MAAO,oBAAqBL,GAAI,qBAAsByE,KAAOpG,KAAKkM,oBACnE,CAAClK,MAAO,kBAAmBL,GAAI,+BAAgCyE,KAAOpG,KAAKoM,+BAGvFpM,KAAKsB,SAAS,CACViG,WAAW,EACXwG,aAAcA,EACdV,eAAgB,CAACU,EAAa,Q,+BAI5B,IAAD,OACL,OAAG/N,KAAKgB,MAAMuG,UAEN,kBAAC,IAAD,CAASpF,KAAK,QAAQ6L,QAAQ,UAInChO,KAAKgB,MAAMsM,QAAgB,KAG1B,6BACI,8BACOtN,KAAKgB,MAAMoH,kBACb,yBAAK1G,UAAU,uBACZ,yBAAKA,UAAU,4EACX,kBAACZ,EAAA,EAAD,CAAaW,MAAM,gBAAgBP,cAAc,QAC7C,yBAAKQ,UAAU,uBAEX,yBAAKA,UAAgD,iCAApC1B,KAAKgB,MAAMqM,eAAe,GAAG1L,IAAyC3B,KAAKgB,MAAMmH,oBAAqB,2EAA2E,4EAC9L,kBAAC,IAAD,CACI8F,OAAQ,CACJC,SAAU,SAACC,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MAChB,EAAKT,WAAaS,EAClB,EAAK9M,SAAU,CACXqM,WAAaS,GACd,EAAKlH,YAEZmH,8BAA+B,SAACF,EAAOvL,GACnC,EAAKtB,SAAU,CACXqM,WAAa,GACbN,eAAiBzK,EAAK8K,aAG9BY,SAAU,SAACH,EAAOvL,GACd,EAAK6K,YAAa7K,EAAK8K,WAEnB,EAAK3M,MAAMwN,eACX,EAAKxN,MAAMwN,cAAcJ,EAAOvL,EAAK8K,aAKjDc,OAAQ,CACJxM,MAAO,aACPyM,YAAa,2BAGjB/L,QAASgM,YAAuB,CAC5BC,WAAY3O,KAAKgB,MAAM2M,WACvBiB,MAAO,IACPlM,QAAS1C,KAAKgB,MAAM+M,aACpBL,UAAW1N,KAAKgB,MAAMqM,iBAG1BK,UAAW1N,KAAKgB,MAAMqM,eACtBe,MAAOpO,KAAKgB,MAAM2M,WAClBK,QAAQ,cAIqB,iCAApChO,KAAKgB,MAAMqM,eAAe,GAAG1L,IAAyC3B,KAAKgB,MAAMmH,qBAClF,yBAAKzG,UAAU,4EACX,kBAACZ,EAAA,EAAD,CAAaW,MAAM,iBAAiBC,UAAU,qCAC1C,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oJACX,kBAAC,IAAD,CACIA,UAAU,eACVmN,eAAgB7O,KAAKgB,MAAM4G,cAAcC,YACzCqG,SAAU,SAACY,GACP,IAAIlH,EAAgB,EAAK5G,MAAM4G,cAC/BA,EAAcC,YAAciH,EAC5B,EAAKxN,SAAS,CACVsG,cAAeA,EACfL,WAAY,IACb,WAAYvH,KAAKkH,gBAExBnF,cAAe,CACXC,MAAO,iBAEXgM,QAAQ,SACRQ,OAAQ,CACJO,eAAgB,UAChBC,cAAe,cAI3B,yBAAKtN,UAAU,oJACX,kBAAC,IAAD,CACIA,UAAU,eACVmN,eAAgB7O,KAAKgB,MAAM4G,cAAcE,aACzCoG,SAAU,SAACY,GACP,IAAIlH,EAAgB,EAAK5G,MAAM4G,cAC/BA,EAAcE,aAAegH,EAC7B,EAAKxN,SAAS,CACVsG,cAAeA,EACfL,WAAY,IACb,WAAYvH,KAAKkH,gBAExBnF,cAAe,CACXC,MAAO,iBAEXgM,QAAQ,SACRQ,OAAQ,CACJO,eAAgB,WAChBC,cAAe,eAI3B,yBAAKtN,UAAU,oJACX,kBAAC,IAAD,CACIA,UAAU,eACVmN,eAAgB7O,KAAKgB,MAAM4G,cAAcG,YACzCmG,SAAU,SAACY,GACP,IAAIlH,EAAgB,EAAK5G,MAAM4G,cAC/BA,EAAcG,YAAc+G,EAC5B,EAAKxN,SAAS,CACVsG,cAAeA,EACfL,WAAY,IACb,WAAYvH,KAAKkH,gBAExBnF,cAAe,CACXC,MAAO,iBAEXgM,QAAQ,SACRQ,OAAQ,CACJO,eAAgB,UAChBC,cAAe,cAI3B,yBAAKtN,UAAU,oJACX,kBAAC,IAAD,CACIA,UAAU,eACVmN,eAAgB7O,KAAKgB,MAAM4G,cAAcI,aACzCkG,SAAU,SAACY,GACP,IAAIlH,EAAgB,EAAK5G,MAAM4G,cAC/BA,EAAcI,aAAe8G,EAC7B,EAAKxN,SAAS,CACVsG,cAAeA,EACfL,WAAY,IACb,WAAYvH,KAAKkH,gBAExBnF,cAAe,CACXC,MAAO,iBAEXgM,QAAQ,SACRQ,OAAQ,CACJO,eAAgB,WAChBC,cAAe,sBAavD,yBAAMC,IAAK,SAAA1B,GAAO,OAAI,EAAKA,QAAUA,U,gDA/tBrB2B,EAAWC,GACvC,OAAOD,M,GAlCqC7M,IAAMC,WCCrC8M,E,YACjB,WAAYrO,GAAQ,IAAD,uBACf,4CAAMA,KACDsO,MAAQhN,IAAMiN,YAEnB,EAAKC,mBAAqB,GAC1B,IAAIpI,EAAW,IAAIlB,KACfmB,EAAS,IAAInB,KANF,OAQfkB,EAASE,SAAS,GAClBF,EAASG,WAAW,GACpBF,EAAOC,SAAS,IAChBD,EAAOE,WAAW,IAElB,EAAKtG,MAAQ,CACTuG,WAAW,EACXJ,SAAUA,EACVC,OAAQA,EACRoI,oBAAoB,EAEpBC,YAAa,GACbC,gBAAiB,GACjBC,cAAe,GAEfjH,UAAW,GACXkH,cAAe,IAxBJ,E,iFA6Bf5P,KAAK6P,cAAiB,WAClB7P,KAAKsB,SAAS,CACViG,WAAW,IAGf,IAAIJ,EAAWnH,KAAKgB,MAAMmG,SAC1BA,EAAWA,EAASyF,cAAgB,KAAOzF,EAAS0F,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,GAAK,IAAM3F,EAAS4F,UAAU5G,WAAW2G,SAAS,EAAE,GAC5I,IAAI1F,EAASpH,KAAKgB,MAAMoG,OACxBA,EAASA,EAAOwF,cAAgB,KAAOxF,EAAOyF,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,GAAK,IAAM1F,EAAO2F,UAAU5G,WAAW2G,SAAS,EAAE,GAKpI,IAAIgD,EAAQ,CAAC,IAAO,CAClB,CAAC,IAAO,CAAC,2BAJX3I,EAAW4I,YAA4B,CAAEC,KAAM7I,IAAY,KAKzD,CAAC,IAAO,CAAC,2BAJXC,EAAS2I,YAA4B,CAAEC,KAAM5I,IAAU,OAOpDpH,KAAKgB,MAAMwO,oBACZM,EAAMG,IAAI1J,KAAK,CAAC,IAAO,CAAC,UAAazH,OAGvCO,IAAE6Q,KAAK,CACHpQ,KAAM,MAENqQ,IAAK1R,IAAU,2BAA6BQ,YAAU,CAClDG,OAAO,OACPgR,UAAW,+BACXC,OAAQ,qDACRC,QAAS,+CACTC,GAAIzG,KAAKE,UAAU8F,GACnBU,OAAQ,IACRC,MAAO,EACPC,MAAO,GACPC,UAAW,GACXC,qBAAqB,IAGzBC,QAAS,SAASjO,GAEVA,EAAKkO,UACL9Q,KAAKuP,mBAAqB3M,EAAKkO,SAGnC9Q,KAAKsB,SAAS,CACViG,WAAW,IACZ,WACCvH,KAAK+Q,sBAEX3P,KAAKpB,MACPS,MAAO,SAAShB,EAAKiB,EAAQsQ,GACzBxQ,QAAQC,MAAMhB,EAAKiB,EAAQsQ,GAE3BhR,KAAKsB,SAAS,CACViG,WAAW,KAEjBnG,KAAKpB,SAIfA,KAAK+Q,gBAAkB,WACnB,IAAIvJ,EAAcxH,KAAKuP,mBACnB0B,EAAe,IAAIpI,IACnBP,EAAc,GAElBd,EAAYsB,SAAQ,SAASC,GACzB,IAAK,IAAInH,KAAOmH,EAAQC,WACpBiI,EAAahI,IAAKrH,OAI1B0G,EAAW,EAAOY,MAAP,YAAgB+H,KAEf9H,MAAK,SAAS7C,EAAG8C,GACzB,OAAQ9C,EAAI8C,GAAG,EAAE9C,EAAI8C,EAAE,EAAE,KAG7B,IAAIuG,EAAgB,CAAC,CAAC3N,MAAM,MAAOL,GAAG,QACtC2G,EAAYQ,SAAQ,SAAS5G,GACzByN,EAAcpJ,KAAM,CAACvE,MAAOE,EAAMP,GAAIO,OAG1ClC,KAAKsB,SAAS,CACViG,WAAW,EACXoI,cAAeA,EACfD,gBAAiB,CAACC,EAAc,KACjC3P,KAAKkR,eAGZlR,KAAKkR,aAAe,WAChB,IAAI1J,EAAcxH,KAAKuP,mBACnB4B,EAAkB,GAClBzI,EAAY,GAEZ1I,KAAKgB,MAAM0O,iBAAwD,QAArC1P,KAAKgB,MAAM0O,gBAAgB,GAAG/N,GAC5DwP,EAAgB5K,KAAMvG,KAAKgB,MAAM0O,gBAAgB,GAAG/N,IAEpD3B,KAAKgB,MAAM2O,cAAc7G,SAAS,SAASsI,GACvCD,EAAgB5K,KAAM6K,EAAOzP,OAKrC6F,EAAYsB,SAAQ,SAASC,GACzBoI,EAAgBrI,SAAS,SAAUuI,GAC/B,GAAItI,EAAQC,WAAWqI,GAAiB,CACpC,IAAIC,EAAW,CACXtI,WAAW,eACNqI,EADK,eACgBtI,EAAQC,WAAWqI,KAE7CtF,OAAQhD,EAAQgD,OAChBC,eAAe,eACRjD,EAAQC,WAAWqI,KAI9B3I,EAAUnC,KAAM+K,UAK5BtR,KAAKsB,SAAS,CACViG,WAAW,EACXmB,UAAWA,GACb,WACE1I,KAAKqP,MAAMkC,QAAQrK,aACrB9F,KAAKpB,QAGXA,KAAKqN,eAAiB,SAASK,GAC3B1N,KAAKsB,SAAU,CACXsO,cAAelC,KAIvB1N,KAAK4K,gBAAkB,SAAUH,GAC7B,OAAOA,EAAUmC,cAAc,KAAKnC,EAAUoC,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUsC,UAAU5G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUI,WAAW1E,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUuC,aAAa7G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUwC,aAAa9G,WAAW2G,SAAS,EAAE,MAGzS9M,KAAK6N,WAAa,SAAUC,GACxB,OAAOA,EAAGjB,WAAW,EAAE,IAAIiB,EAAGf,UAAU,IAAIe,EAAGlB,eAGnD5M,KAAKsB,SAAS,CACViG,WAAW,M,+BAIT,IAAD,OACL,OACI,6BACKvH,KAAKgB,MAAMuG,WAAc,kBAAC,IAAD,CAASpF,KAAK,QAAQ6L,QAAQ,UAExD,yBAAKtM,UAAU,uBACX,yBAAKA,UAAU,6BACX,kBAACZ,EAAA,EAAD,CAAaW,MAAM,mBACf,yBAAKC,UAAU,4EAEX,wBAAIA,UAAU,qBACV,wBAAIA,UAAU,qDAAqDD,MAAM,QACrE,2BAAOC,UAAU,4BAAjB,SAEJ,wBAAIA,UAAU,oBACV,kBAAC,IAAD,CACIwM,SAAU,SAACC,EAAOvL,GACd,EAAKtB,SAAS,CACV6F,SAAUvE,EAAKoN,QAIvB5B,MAAQpO,KAAKgB,MAAMmG,YAG3B,wBAAIzF,UAAU,qDAAqDD,MAAM,MACrE,2BAAOC,UAAU,4BAAjB,OAEJ,wBAAIA,UAAU,oBACV,kBAAC,IAAD,CACIwM,SAAU,SAACC,EAAOvL,GACd,EAAKtB,SAAS,CACV8F,OAAQxE,EAAKoN,QAIrB5B,MAAQpO,KAAKgB,MAAMoG,YAKnC,yBAAK1F,UAAU,6FACX,kBAAC,IAAD,CACIA,UAAU,eACVmN,gBAAiB7O,KAAKgB,MAAMwO,mBAC5BtB,SAAU,SAAC7M,GACP,EAAKC,SAAS,CACVkO,oBAAqBnO,EAAEmQ,OAAOC,WAGtC1P,cAAe,CACXC,MAAO,uCAEXgM,QAAQ,SACRQ,OAAQ,CACJO,eAAgB,sBAChBC,cAAe,mCAIvB,yBAAKtN,UAAU,oBACX,kBAAC,IAAD,CAAQM,MAAM,WAAWgM,QAAQ,QAAQlM,QAAS,WAC9C,EAAK+N,gBACL,EAAKR,MAAMkC,QAAQ3D,cAAe,EAAK5M,MAAMmG,SAAU,EAAKnG,MAAMoG,QAClE,EAAK9F,SAAU,CACXsO,cAAe,EAAKP,MAAMkC,QAAQvQ,MAAMqM,wBAO9DrN,KAAKgB,MAAM2O,eACb,yBAAKjO,UAAU,6BACX,kBAACZ,EAAA,EAAD,CAAaW,MAAM,gBAAgBP,cAAc,QAE7C,yBAAKQ,UAAU,4EACX,kBAAC,IAAD,CACIuM,OAAQ,CACJC,SAAU,SAACC,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MAChB,EAAK9M,SAAU,CACXmO,YAAcrB,GACf,EAAK8C,eAEZ7C,8BAA+B,SAACF,EAAOvL,GACnC,EAAKtB,SAAU,CACXmO,YAAc,GACdC,gBAAkB9M,EAAK8K,aAG/BY,SAAU,SAACH,EAAOvL,GACd,EAAKtB,SAAU,CACXmO,YAAc,GACdC,gBAAkB9M,EAAK8K,WACxB,EAAKwD,gBAIhB1C,OAAQ,CACJxM,MAAO,oBACPyM,YAAa,kCAGjB/L,QAASgM,YAAuB,CAC5BC,WAAY3O,KAAKgB,MAAMyO,YACvBb,MAAO,IACPlM,QAAS1C,KAAKgB,MAAM2O,cACpBjC,UAAW1N,KAAKgB,MAAM0O,kBAG1BhC,UAAW1N,KAAKgB,MAAM0O,gBACtBtB,MAAOpO,KAAKgB,MAAMyO,YAClBzB,QAAQ,cAIfhO,KAAKqP,MAAMkC,SACX,kBAAC,IAAD,CACGtD,OAAQ,CACJC,SAAU,SAACC,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MAChB,EAAKiB,MAAMkC,QAAQ5D,WAAaS,EAChC,EAAKiB,MAAMkC,QAAQjQ,SAAU,CACzBqM,WAAaS,KAGrBC,8BAA+B,SAACF,EAAOvL,GACnC,EAAKyM,MAAMkC,QAAQ9D,YAAY7K,EAAK8K,YAExCY,SAAU,SAACH,EAAOvL,GACVA,EAAK8K,UAAUtI,OAAS,IACxB,EAAKiK,MAAMkC,QAAQ9D,YAAY7K,EAAK8K,WAEpC,EAAKpM,SAAU,CACXsO,cAAehN,EAAK8K,eAMpCc,OAAQ,CACJxM,MAAO,aACPyM,YAAa,2BAGjB/L,QAASgM,YAAuB,CAC5BC,WAAY3O,KAAKqP,MAAMkC,QAAQvQ,MAAM2M,WACrCiB,MAAO,IACPlM,QAAS1C,KAAKqP,MAAMkC,QAAQvQ,MAAM+M,aAClCL,UAAW1N,KAAKgB,MAAM4O,cAAc5P,KAAKgB,MAAM4O,cAAc5P,KAAKqP,MAAMkC,QAAQvQ,MAAMqM,iBAG1FK,UAAW1N,KAAKgB,MAAM4O,cACtBxB,MAAOpO,KAAKqP,MAAMkC,QAAQvQ,MAAM2M,WAChCK,QAAQ,gBAMxB,kBAAC,EAAD,CACIiB,IAAKjP,KAAKqP,MACV7H,YAAaxH,KAAKgB,MAAM0H,UACxBP,qBAAqB,EACrBC,kBAAkB,EAClBmG,cAAe,SAACJ,EAAOT,GACnB,EAAKL,eAAgBK,W,GAvVQrL,IAAMC,W,iCCGrDoP,G,OAAsB,SAAC,GAAD,IAAGtP,EAAH,EAAGA,SAAarB,EAAhB,mCAC3B,kBAAC,IAAkBA,EAClB,uBACC4Q,KAAQlT,IAAU,kDAAoDsC,EAAM4C,KAAKiO,KAAO,IAAMC,UAAU9Q,EAAM4C,KAAKmO,oBAAsB,UAAYhT,IACrJiT,QAAQ,UAEP3P,MAIJsP,EAAoBM,YAAcC,IAAcD,Y,IAE3BE,E,YACjB,WAAYnR,GAAQ,IAAD,8BACf,4CAAMA,KAEPsO,MAAQhN,IAAMiN,YAEnB,EAAKC,mBAAqB,GAC1B,EAAK4C,oBAAsB,GAC3B,EAAKC,wBAA0B,GAC/B,EAAKC,iCAAmC,GACxC,EAAKC,uBAAyB,GAC9B,EAAKC,2BAA6B,GAClC,EAAKC,eAAiB,GACtB,EAAKC,mBAAqB,GAC1B,EAAK1E,aAAe,GACpB,EAAKtG,qBAAuB,CAAC,MAAQ,OAAQ,OAAS,IAAK,UAAY,CAAEC,MAAO,MAAOC,KAAM,OAC7F,EAAK+K,oBAAsB,IAAIzM,KAC/B,EAAK0M,kBAAoB,IAAI1M,KAE7B,EAAKjF,MAAQ,CACZuG,WAAW,EAEXmB,UAAW,GAEX2E,eAAgB,GAChBM,WAAY,GACZxG,SAAU,IAAIlB,KACdmB,OAAQ,IAAInB,KACZuJ,oBAAoB,EAEpBoD,iBAAkB,CACjB/K,aAAa,EAAMC,cAAc,EAAMC,aAAa,EAAMC,cAAc,GAGzE2G,WAAY,mBACZjB,UAAW,GACX+D,QAAS,GAEThR,MAAO,MArCa,E,iFAyCE,IAAD,OACtB,IACCT,KAAK6P,cAAgB,WACpB7P,KAAKsB,SAAS,CACbiG,WAAW,IAGZ,IAAIsL,EAAuB7S,KAAKgB,MAAM4O,cAElCkD,EAAS9S,KAAKgB,MAAMmG,SACxB2L,EAASA,EAAOlG,cAAgB,KAAOkG,EAAOjG,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,GAAK,IAAMgG,EAAO/F,UAAU5G,WAAW2G,SAAS,EAAE,GACpI,IAAIiG,EAAO/S,KAAKgB,MAAMoG,OACtB2L,EAAOA,EAAKnG,cAAgB,KAAOmG,EAAKlG,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,GAAK,IAAMiG,EAAKhG,UAAU5G,WAAW2G,SAAS,EAAE,GAKxH,IAAIgD,EAAQ,CAAC,IAAO,CAClB,CAAC,IAAO,CAAC,2BAJXgD,EAAS/C,YAA4B,CAAEC,KAAM8C,IAAU,KAKrD,CAAC,IAAO,CAAC,2BAJXC,EAAOhD,YAA4B,CAAEC,KAAM+C,IAAQ,OAOpD/S,KAAKgB,MAAMwO,oBACRM,EAAMG,IAAI1J,KAAK,CAAC,IAAO,CAAC,UAAazH,OAG3CkB,KAAK0S,oBAAsB1S,KAAKgB,MAAMmG,SACtCnH,KAAK2S,kBAAoB3S,KAAKgB,MAAMoG,OAEpC/H,IAAE6Q,KAAK,CACNpQ,KAAM,MAENqQ,IAAK1R,IAAU,2BAA6BQ,YAAU,CAC/CG,OAAQ,OACRgR,UAAW,+BACjBC,OAAQ,qDACRC,QAAS,uEACTC,GAAIzG,KAAKE,UAAU8F,GACnBU,OAAQ,IACRC,MAAO,EACPC,MAAO,GACDC,UAAW,GACXC,qBAAqB,IAG5BC,QAAS,SAASjO,GAEbA,EAAKkO,UACR9Q,KAAKuP,mBAAqB3M,EAAKkO,SAGhC9Q,KAAKsB,SAAS,CACbiG,WAAW,EACXqI,cAAeiD,IACb,WACF7S,KAAKgT,uBAAwBhT,KAAKiT,4BAA6BjT,KAAKkT,0BAEpE9R,KAAKpB,MACPS,MAAO,SAAShB,EAAKiB,EAAQsQ,GAC5BxQ,QAAQC,MAAMhB,EAAKiB,EAAQsQ,GAE3BhR,KAAKsB,SAAS,CACbiG,WAAW,KAEXnG,KAAKpB,SAITA,KAAKmT,mBAAqB,WACzB,IAAI1G,EAAoBzM,KAAKuS,2BACzBhD,EAAqBvP,KAAKuP,mBAE1B6D,EAAkB,GAQtB,OANA3G,EAAkB3D,SAAQ,SAASC,GAClCqK,EAAgB7M,KAAMgJ,EAAmBxG,EAAQsK,WAK3CD,GAGRpT,KAAKgT,qBAAuB,WAC3B,IAAIM,EAActT,KAAKuP,mBACnBgE,EAAc,GACdrO,EAAE,EAEN,GAAIoO,EAAa,CAChB,IAAIE,EAAkBxT,KAAKgB,MAAM4R,iBAAiB5K,aAE9CyL,EAAkBzT,KAAKgB,MAAM4R,iBAAiB9K,aAC9C4L,EAAiB1T,KAAKgB,MAAM4R,iBAAiB7K,YAEjDuL,EAAYxK,SAAQ,SAAUC,GAE7B,GAAQyK,GAAuD,IAApCzK,EAAQiD,eAAe2H,UAEhDF,GAAuD,IAApC1K,EAAQiD,eAAe4H,UAC1CF,GAAqD,IAAnC3K,EAAQiD,eAAe6H,QAEtC,CACJ,IAAIC,EAAaP,EAAYQ,QAAQ,SAAS1S,GAAG,OAAOA,EAAEa,OAAS6G,EAAQgD,UAEvE4H,EAAW5K,EAAQiD,eAAe2H,SAClCnK,EAAUT,EAAQiD,eAAexC,QACjCoK,EAAW7K,EAAQiD,eAAe4H,SAClCC,EAAU9K,EAAQiD,eAAe6H,QAOrC,GALAF,EAAWA,GAAkB,EAC7BnK,EAAUA,GAAgB,EAC1BoK,EAAWA,GAAkB,EAC7BC,EAAUA,GAAgB,EAEtBC,GAAcA,EAAW1O,OAAS,EACrC0O,EAAW,GAAGT,MAAM9M,KAAMrB,GAE1B4O,EAAW,GAAGtK,SAAWA,EACzBsK,EAAW,GAAGF,UAAYA,EAC1BE,EAAW,GAAGD,SAAWA,EACzBC,EAAW,GAAGH,UAAYA,MAEtB,CACJ,IAAIK,EAAc,IAAI/N,KAAK8C,EAAQkL,aAC/BxJ,EAAY,IAAIxE,KAAK8C,EAAQiD,eAAevB,WAC5CyJ,EAAoBzJ,EAAUmC,cAAc,KAAKnC,EAAUoC,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUsC,UAAU5G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUI,WAAW1E,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUuC,aAAa7G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUwC,aAAa9G,WAAW2G,SAAS,EAAE,KAEtTyG,EAAYhN,KACX,CAAErE,KAAM6G,EAAQgD,OACfpK,GAAIoH,EAAQgD,OACZ6F,KAAM7I,EAAQ6I,KACdE,mBAAoB/I,EAAQ+I,mBAC5BmC,YAAalL,EAAQkL,YACrBE,qBAAsBH,EAAYpH,cAAc,KAAKoH,EAAYnH,WAAW,GAAG,IAAImH,EAAYjH,UAC/FtC,UAAWA,EACX2J,mBAAoBF,EACpB1K,QAASA,EACToK,SAAUA,EACVC,QAASA,EACTF,SAAUA,EACVN,MAAO,CAACnO,WAKZA,OAGDqO,EAAYpK,MAAK,SAAU7C,EAAG8C,GAC7B,OAAI9C,EAAEpE,KAAOkH,EAAElH,KACP,EAGJoE,EAAEpE,KAAOkH,EAAElH,MACN,EAGF,KAITlC,KAAKwS,eAAiBe,GAGvBvT,KAAKiT,0BAA4B,WAChC,IAAIoB,EAAgBrU,KAAKyS,mBACrBlD,EAAqBvP,KAAKuP,mBAC1B+C,EAAyB,GAEzB+B,GAEHA,EAAcvL,SAAQ,SAASwL,GAC9BA,EAAUjB,MAAMvK,SAAQ,SAASuK,GAChC,IAAItK,EAAUwG,EAAmB8D,GAE7BM,EAAW5K,EAAQiD,eAAe2H,SAClCnK,EAAUT,EAAQiD,eAAexC,QACjCoK,EAAW7K,EAAQiD,eAAe4H,SAClCC,EAAU9K,EAAQiD,eAAe6H,QAErCF,EAAWA,GAAkB,EAC7BnK,EAAUA,GAAgB,EAC1BoK,EAAWA,GAAkB,EAC7BC,EAAUA,GAAgB,EAE1B,IAAIG,EAAc,IAAI/N,KAAK8C,EAAQkL,aAC/BxJ,EAAY,IAAIxE,KAAK8C,EAAQiD,eAAevB,WAC5CyJ,EAAoBzJ,EAAUmC,cAAc,KAAKnC,EAAUoC,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUsC,UAAU5G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUI,WAAW1E,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUuC,aAAa7G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUwC,aAAa9G,WAAW2G,SAAS,EAAE,KAEtTwF,EAAuB/L,KAAK,CAC3BrE,KAAM6G,EAAQgD,OACdpK,GAAIoH,EAAQwL,GACZzC,mBAAoB/I,EAAQ+I,mBAC5BuB,MAAOA,EACPY,YAAalL,EAAQkL,YACrBE,qBAAsBH,EAAYpH,cAAc,KAAKoH,EAAYnH,WAAW,GAAG,IAAImH,EAAYjH,UAC/FtC,UAAW1B,EAAQ0B,UACnB2J,mBAAoBF,EACpB1K,QAASA,EACToK,SAAUA,EACVC,QAASA,EACTF,SAAUA,UAMd3T,KAAKsS,uBAAyBA,GAG/BtS,KAAKkT,oBAAsB,WAC1B,IAAImB,EAAgBrU,KAAKmT,qBACrBf,EAA0B,GAE9B,GAAIiC,EAAe,CAClB,IAAIG,EAAe,GA8DnB,IAAK,IAAIC,KA5DTJ,EAAcvL,SAAS,SAAUtB,GAChC,IAAIwB,EAAaxB,EAAYwB,WAEzB0B,EAAU,IAAIzE,KAAKuB,EAAYwE,eAAevB,WAElD,IAAK,IAAIgK,KAAWzL,EACnB,GAAkC,iBAAvBA,EAAWyL,GAAsB,CAC3C,IAAId,EAAW3K,EAAWyL,GAASd,SAC/BnK,EAAUR,EAAWyL,GAASjL,QAC9BoK,EAAW5K,EAAWyL,GAASb,SAC/BC,EAAU7K,EAAWyL,GAASZ,QAElCF,EAAWA,GAAkB,EAC7BnK,EAAUA,GAAgB,EAC1BoK,EAAWA,GAAkB,EAC7BC,EAAUA,GAAgB,EAE1B,IAAIa,EAAeF,EAAaC,GAE3BC,KACJA,EAAe,IACFxS,KAAOuS,EACpBC,EAAa/S,GAAK8S,EAClBC,EAAaf,SAAW,EACxBe,EAAalL,QAAU,EACvBkL,EAAad,SAAW,EACxBc,EAAab,QAAU,EACvBa,EAAaC,WAAa,IAE3BD,EAAaf,UAAYA,GAAkB,EAC3Ce,EAAalL,SAAWA,GAAgB,EACxCkL,EAAad,UAAYA,GAAkB,EAC3Cc,EAAab,SAAWA,GAAgB,EAExC,IAAIe,EAAYF,EAAaC,WAAWE,QAASnK,GAE7CkK,EAAY,IACfA,EAAYF,EAAaC,WAAWvP,OAEpCsP,EAAaC,WAAWpO,KAAK,CAC5BkE,UAAWC,EACXiJ,SAAW,EACXnK,QAAU,EACVoK,SAAW,EACXC,QAAU,KAIZ,IAAIiB,EAAWJ,EAAaC,WAAWC,GACvCE,EAASnB,UAAYA,GAAkB,EACvCmB,EAAStL,SAAWA,GAAgB,EACpCsL,EAASlB,UAAYA,GAAkB,EACvCkB,EAASjB,SAAWA,GAAgB,EAEpCW,EAAaC,GAAWC,MAMPF,EACnBpC,EAAwB7L,KAAMiO,EAAaC,IAG5CrC,EAAwBjJ,MAAK,SAAU7C,EAAG8C,GACzC,OAAI9C,EAAEpE,KAAOkH,EAAElH,KACP,EAGJoE,EAAEpE,KAAOkH,EAAElH,MACN,EAGF,KAMTlC,KAAKoS,wBAA0BA,EAG/BpS,KAAKsB,SAAS,CACbiG,WAAW,GACTvH,KAAKkR,eACP9P,KAAKpB,MAEPA,KAAKkR,aAAe,WACnB,IAAIxI,EAAY,GAEZqM,EAAqB/U,KAAKuP,mBAE1BgD,EAA6BvS,KAAKuS,2BAClCF,EAAmCrS,KAAKqS,iCAExC2C,EAAa,GACjBzC,EAA2BzJ,SAAS,SAASC,GAC5CiM,EAAWjM,EAAQpH,IAAMoH,EAAQpH,MAGlC,IAAIsT,EAAW,GACf5C,EAAiCvJ,SAAQ,SAASO,GACjD4L,EAAS5L,EAAInH,MAAQmH,EAAInH,QAG1B6S,EAAmBjM,SAAS,SAASC,GACpC,IAAIuI,EAAW,GACf,GAAI0D,EAAWjM,EAAQwL,IAAK,CAY3B,IAAK,IAAI3S,KAXT0P,EAAStI,WAAa,GACtBsI,EAASvF,OAAShD,EAAQgD,OACRuF,EAAStF,eAAgB,CAC1C2H,SAAU,EACVnK,QAAS,EACToK,SAAU,EACVsB,OAAQ,EACRzK,UAAW1B,EAAQiD,eAAevB,UAClC0K,QAASpM,EAAQiD,eAAemJ,SAGjBpM,EAAQC,WACvB,GAAIiM,EAASrT,GAAM,CAClB,IAAIoH,EAAaD,EAAQC,WACzBsI,EAAStI,WAAWpH,GAAOoH,EAAWpH,GACtC0P,EAAStF,eAAe2H,SAAW3K,EAAWpH,GAAK+R,SAAS3K,EAAWpH,GAAK+R,SAAS,EACrFrC,EAAStF,eAAexC,QAAUR,EAAWpH,GAAK4H,QAAQR,EAAWpH,GAAK4H,QAAQ,EAClF8H,EAAStF,eAAe4H,SAAW5K,EAAWpH,GAAKgS,SAAS5K,EAAWpH,GAAKgS,SAAS,EACrFtC,EAAStF,eAAekJ,OAASlM,EAAWpH,GAAKsT,OAAOlM,EAAWpH,GAAKsT,OAAO,EAIjFxM,EAAUnC,KAAM+K,OAIlBtR,KAAKsB,SAAS,CACbiG,WAAW,EACXmB,UAAWA,IACT,WACF1I,KAAKqP,MAAMkC,QAAQrK,gBAEnB9F,KAAKpB,MAEPA,KAAKoV,uBAAyB,SAAUjH,EAAOvL,GAI7C5C,KAAKyS,mBAAqB7P,EAAK8K,UAC/B1N,KAAKiT,4BACLjT,KAAKkT,sBAINlT,KAAKsB,SAAS,CACbiG,WAAW,KAEXnG,KAAKpB,MAEPA,KAAKqV,+BAAiC,SAASlH,EAAOvL,GACrD5C,KAAKuS,2BAA6B3P,EAAK8K,UACvC1N,KAAKkT,sBAGLlT,KAAKsB,SAAS,CACbiG,WAAW,KAEXnG,KAAKpB,MAEPA,KAAKsV,qCAAuC,SAAUnH,EAAOvL,GAI3D5C,KAAKqS,iCAAmCzP,EAAK8K,UAE7C1N,KAAKkR,eAGNlR,KAAKsB,SAAS,CACbiG,WAAW,KAEXnG,KAAKpB,MAEPA,KAAKuV,oBAAsB,SAAEC,EAAQ3S,EAAO4S,GAAyB,IAAD,EAC7DC,EAAeD,EAAWE,SAC1BC,EAAgBH,EAAWG,cAC3BC,GAAQ,mBACZL,EAAO,SAAWE,GADN,cAEZF,EAAO,YAFK,eAGXE,EAAeE,IAHJ,GAQd/S,EAAQA,EAAMsG,MAAK,SAAC7C,EAAG8C,GACtB,IAAI0M,EAAM,EAaV,OAXIxP,EAAEoP,GAAgBtM,EAAEsM,KACvBI,EAAM,GAEHxP,EAAEoP,GAAgBtM,EAAEsM,KACvBI,GAAO,GAGc,SAAlBF,IACHE,IAAQ,GAGFA,KAGR,EAAKxU,SAASuU,IAGf7V,KAAK4K,gBAAkB,SAAUH,GAChC,OAAOA,EAAUmC,cAAc,KAAKnC,EAAUoC,WAAW,GAAG1G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUsC,UAAU5G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUI,WAAW1E,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUuC,aAAa7G,WAAW2G,SAAS,EAAE,KAAK,IAAIrC,EAAUwC,aAAa9G,WAAW2G,SAAS,EAAE,MAGtS9M,KAAK6N,WAAa,SAAUC,GAC3B,OAAOA,EAAGjB,WAAW,EAAE,IAAIiB,EAAGf,UAAU,IAAIe,EAAGlB,eAGhD5M,KAAKsB,SAAS,CACbiG,WAAW,IAGZ,MAAMlG,O,+DAIqC,IAAD,OACvC,OACE,kBAACP,EAAA,EAAD,CACEW,MAAM,2CACNC,UAAU,mBACVR,eAAe,EACfD,QAAQ,GAER,yBAAKS,UAAU,uBACb,yBAAKA,UAAU,kFACb,yBAAKqU,MAAO,CAAEC,OAAQ,MACpB,kBAAC,IAAD,CACEjU,cAAe,CACbkU,cAAe,UACfC,WAAY,mBACZC,sBAAuB,MACvBC,uBAAwB,OACxBC,cAAe,WACfC,UAAW,mBAEbC,aAAW,EACXC,aAAW,EACX3T,MAAO7C,KAAKwS,eACZ7Q,GAAG,sBACH+L,UAAW1N,KAAKyS,mBAChBgE,WAAW,WACXC,YAAa1W,KAAKoV,uBAClBuB,OAAQ,SAAClB,GACP,EAAKF,oBAAoB,sBAAuB,EAAK/C,eAAgBiD,KAGvE,kBAAC,IAAD,CACEzT,MAAM,wBACN4U,UAAQ,EACRC,eAAa,EACblB,SAAS,QAET,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAiB3T,MAAM,UAAU4U,UAAQ,EAACjB,SAAS,YAEnD,kBAAC,IAAD,CAAiB3T,MAAM,WAAW4U,UAAQ,EAACjB,SAAS,aAEpD,kBAAC,IAAD,CAAiB3T,MAAM,UAAU4U,UAAQ,EAACjB,SAAS,YAEnD,kBAAC,IAAD,CAAiB3T,MAAM,WAAW4U,UAAQ,EAACjB,SAAS,gBAK1D,yBAAKjU,UAAU,+EACb,6BACE,kBAACZ,EAAA,EAAD,CAAaW,MAAM,iBAAiBC,UAAU,qCAC5C,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oJACb,kBAAC,IAAD,CACEA,UAAU,eACVmN,eAAgB7O,KAAKgB,MAAM4R,iBAAiB9K,aAC5CoG,SAAU,SAAA7M,GACR,IAAIuR,EAAmB,EAAK5R,MAAM4R,iBAClCA,EAAiB9K,aAAezG,EAAEmQ,OAAOC,QACzC,EAAKnQ,SACH,CACEsR,iBAAkBA,EAClBrL,WAAW,IAEb,WACE,EAAKyL,uBACL,EAAKC,4BACL,EAAKC,0BAIXnR,cAAe,CACbC,MAAO,iBAETgM,QAAQ,SACRQ,OAAQ,CACNO,eAAgB,WAChBC,cAAe,eAIrB,yBAAKtN,UAAU,oJACb,kBAAC,IAAD,CACEA,UAAU,eACVmN,eAAgB7O,KAAKgB,MAAM4R,iBAAiB7K,YAC5CmG,SAAU,SAAA7M,GACR,IAAIuR,EAAmB,EAAK5R,MAAM4R,iBAClCA,EAAiB7K,YAAc1G,EAAEmQ,OAAOC,QACxC,EAAKnQ,SACH,CACEsR,iBAAkBA,EAClBrL,WAAW,IAEb,WACE,EAAKyL,uBACL,EAAKC,4BACL,EAAKC,0BAIXnR,cAAe,CACbC,MAAO,iBAETgM,QAAQ,SACRQ,OAAQ,CACNO,eAAgB,UAChBC,cAAe,cAIrB,yBAAKtN,UAAU,oJACb,kBAAC,IAAD,CACEA,UAAU,eACVmN,eAAgB7O,KAAKgB,MAAM4R,iBAAiB5K,aAC5CkG,SAAU,SAAA7M,GACR,IAAIuR,EAAmB,EAAK5R,MAAM4R,iBAClCA,EAAiB5K,aAAe3G,EAAEmQ,OAAOC,QACzC,EAAKnQ,SACH,CACEsR,iBAAkBA,EAClBrL,WAAW,IAEb,WACE,EAAKyL,uBACL,EAAKC,4BACL,EAAKC,0BAIXnR,cAAe,CACbC,MAAO,iBAETgM,QAAQ,SACRQ,OAAQ,CACNO,eAAgB,WAChBC,cAAe,uB,8DAaI,IAAD,OACtC,OACE,kBAAClO,EAAA,EAAD,CACEW,MAAM,0CACNC,UAAU,mBACVR,eAAe,EACfD,QAAQ,GAER,yBAAKS,UAAU,uBACb,yBAAKA,UAAU,kFACb,yBAAKqU,MAAO,CAAEC,OAAQ,MACpB,kBAAC,IAAD,CACEjU,cAAe,CACbkU,cAAe,UACfC,WAAY,mBACZC,sBAAuB,MACvBC,uBAAwB,OACxBC,cAAe,WACfC,UAAW,mBAEbC,aAAW,EACXC,aAAW,EACX3T,MAAO7C,KAAKsS,uBACZ3Q,GAAG,6BACH+L,UAAW1N,KAAKuS,2BAChBkE,WAAW,WACXC,YAAa1W,KAAKqV,+BAClBsB,OAAQ,SAAClB,GACP,EAAKF,oBACH,6BACA,EAAKjD,uBACLmD,KAIJ,kBAAC,IAAD,CACEzT,MAAM,wBACN4U,UAAQ,EACRC,eAAa,EACblB,SAAS,SAEX,kBAAC,IAAD,CACE3T,MAAM,uBACN4U,UAAQ,EACRjB,SAAS,uBAEX,kBAAC,IAAD,CAAiB3T,MAAM,aAAa4U,UAAQ,EAACjB,SAAS,uBAEtD,kBAAC,IAAD,CAAiB3T,MAAM,UAAU4U,UAAQ,EAACjB,SAAS,YAEnD,kBAAC,IAAD,CAAiB3T,MAAM,WAAW4U,UAAQ,EAACjB,SAAS,aAEpD,kBAAC,IAAD,CAAiB3T,MAAM,UAAU4U,UAAQ,EAACjB,SAAS,YAEnD,kBAAC,IAAD,CAAiB3T,MAAM,WAAW4U,UAAQ,EAACjB,SAAS,oB,6CAS1C,IAAD,OACrB,OACE,kBAAC7U,EAAA,EAAD,CACEW,MAAM,kBACNC,UAAU,mBACVR,eAAe,EACfD,QAAQ,GAER,yBAAKS,UAAU,uBACb,yBAAKA,UAAU,kFACb,yBAAKqU,MAAO,CAAEC,OAAQ,MACpB,kBAAC,IAAD,CACEjU,cAAe,CACbkU,cAAe,UACfC,WAAY,mBACZC,sBAAuB,MACvBC,uBAAwB,OACxBC,cAAe,WACfC,UAAW,mBAEbC,aAAW,EACXC,aAAW,EACX3T,MAAO7C,KAAKoS,wBACZzQ,GAAG,6BACH+L,UAAW1N,KAAKqS,iCAChBoE,WAAW,WACXC,YAAa1W,KAAKsV,qCAClBqB,OAAQ,SAAClB,GACP,EAAKF,oBACH,6BACA,EAAKnD,wBACLqD,KAIJ,kBAAC,IAAD,CAAiBzT,MAAM,cAAc4U,UAAQ,EAACC,eAAa,EAAClB,SAAS,SAErE,kBAAC,IAAD,CAAiB3T,MAAM,UAAU4U,UAAQ,EAACjB,SAAS,YAEnD,kBAAC,IAAD,CAAiB3T,MAAM,WAAW4U,UAAQ,EAACjB,SAAS,aAEpD,kBAAC,IAAD,CAAiB3T,MAAM,UAAU4U,UAAQ,EAACjB,SAAS,YAEnD,kBAAC,IAAD,CAAiB3T,MAAM,WAAW4U,UAAQ,EAACjB,SAAS,oB,oDASnC,IAAD,OAC5B,OACE,kBAAC7U,EAAA,EAAD,CAAaW,MAAM,mBACjB,yBAAKC,UAAU,4EACb,wBAAIA,UAAU,qBACZ,wBAAIA,UAAU,qDAAqDD,MAAM,QACvE,2BAAOC,UAAU,4BAAjB,SAEF,wBAAIA,UAAU,oBACZ,kBAAC,IAAD,CACEwM,SAAU,SAACC,EAAOvL,GAChB,EAAKtB,SAAS,CACZ6F,SAAUvE,EAAKoN,QAGnB5B,MAAOpO,KAAKgB,MAAMmG,YAGtB,wBAAIzF,UAAU,qDAAqDD,MAAM,MACvE,2BAAOC,UAAU,4BAAjB,OAEF,wBAAIA,UAAU,oBACZ,kBAAC,IAAD,CACEwM,SAAU,SAACC,EAAOvL,GAChB,EAAKtB,SAAS,CACZ8F,OAAQxE,EAAKoN,QAGjB5B,MAAOpO,KAAKgB,MAAMoG,YAK1B,yBAAK1F,UAAU,6FACb,kBAAC,IAAD,CACEA,UAAU,eACVmN,gBAAiB7O,KAAKgB,MAAMwO,mBAC5BtB,SAAU,SAAA7M,GACR,EAAKC,SAAS,CACZkO,oBAAqBnO,EAAEmQ,OAAOC,WAGlC1P,cAAe,CACbC,MAAO,uCAETgM,QAAQ,SACRQ,OAAQ,CACNO,eAAgB,sBAChBC,cAAe,mCAGnB,yBAAKtN,UAAU,oBACb,kBAAC,IAAD,CACEM,MAAM,WACNgM,QAAQ,QACRlM,QAAS,WACP,EAAK+N,gBACL,EAAKR,MAAMkC,QAAQ3D,cAAc,EAAK5M,MAAMmG,SAAU,EAAKnG,MAAMoG,gB,6CAU7E,OAAKpH,KAAKoS,wBAGR,6BACGpS,KAAKuP,mBAAmBnK,OAAS,EAAIpF,KAAK8W,yCAA2C,KACrF9W,KAAKyS,mBAAmBrN,OAAS,EAAIpF,KAAK+W,wCAA0C,KACpF/W,KAAKuS,2BAA2BnN,OAAS,EAAIpF,KAAKgX,uBAAyB,MANtC,O,+BAY1C,OACE,yBAAKjB,MAAO,CAAEkB,UAAW,MACtBjX,KAAKgB,MAAMuG,WAAa,kBAAC,IAAD,CAASpF,KAAK,QAAQ6L,QAAQ,UAEtDhO,KAAKkX,8BACLlX,KAAKmX,uBAEN,kBAAC,EAAD,CAAwBlI,IAAKjP,KAAKqP,MAAO7H,YAAaxH,KAAKgB,MAAM0H,iB,GAv0BpBrG,IAAMC,W,4CCjBxC8U,E,YACjB,WAAYrW,GAAQ,IAAD,8BACf,4CAAMA,KAEPC,MAAQ,CACHuG,WAAW,GAJA,E,iFASrBvH,KAAKsB,SAAS,CACbiG,WAAW,M,+BAKN,OAAGvH,KAAKgB,MAAMuG,UAEN,kBAAC,IAAD,CAASpF,KAAK,QAAQ6L,QAAQ,UAK3C,yBAAK+H,MAAO,CAAEkB,UAAW,MACxB,kBAAC,IAAD,CAAMjJ,QAAShO,KAAKe,MAAMiN,QAASrM,GAAG,wBACrC,kBAAC,IAAD,CAAWK,MAAM,UAChB,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAWA,MAAM,WAAW+T,MAAO,CAACsB,QAAQ,IAC3C,kBAAC,EAAD,a,GA7ByChV,IAAMC","file":"static/js/14.d5a6431a.chunk.js","sourcesContent":["/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nconst devBaseUrl = \"https://grax-datalake-demo2.herokuapp.com\";\n\nexport const baseUrl = isDev ? devBaseUrl : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", pageParams.authorization);\n    } else {\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","/* eslint-disable no-undef */\n/* global google */\nimport React from 'react';\n\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox } from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSummaryChartsChart extends React.Component {\n    constructor(props) {\n        super(props);\n\n        google.charts.load('current', {'packages':['corechart']}); // Move to componentDidMount\n        google.charts.setOnLoadCallback( this.drawChart ); // Move to componentDidMount\n\n        let fromDate = this.props.fromDate?this.props.fromDate:new Date();\n        let toDate = this.props.toDate?this.props.toDate:new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            summaryData: this.props.summaryData,\n            defaultChartSettings: {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } },\n            showChartAttr: {\n                showRecords: true,\n                showInserted: true,\n                showUpdated: true,\n                showArchived: true\n            },\n\n            chartFromDate: fromDate,\n            chartToDate: toDate,\n            showAttributeFilter: true,\n            hideChartOptions: false\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState){\n        return nextProps;\n    }\n\n    componentDidMount() {\n        this.chartObjectTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let objIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n                    let smyIndex = chartDataIndexes[key];\n\n                    let n = (obj.records?obj.records:0);\n\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[key] = counter;\n                        chartData.push( [ key + ' ['+n+']', n] );\n                        counter++;\n                    }else{\n                        let tempN = chartData[smyIndex][1] + n;\n\n                        chartData[smyIndex] = [ key + ' ['+tempN+']', tempN];\n                    }\n\n                    otherSum += n;\n                };\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpObjects = [[\"Object\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpObjects.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpObjects.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpObjects);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartObjectByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n\n                    if(!obj.startTime) {\n                      continue;\n                    }\n\n                    let n = (obj.records?obj.records:0);\n                    let smyDate = new Date(obj.startTime);\n                    let smyDateFormated = this.formatStartTime(smyDate);\n                    let smyIndex = chartDataIndexes[smyDate];\n\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                    if( !chartData[smyIndex][objIndexes[key]+1] ){\n                        chartData[smyIndex][objIndexes[key]+1] = 0;\n                    }\n                    chartData[smyIndex][objIndexes[key]+1] += n;\n                    if( !objectsTotalValue[key] ){\n                        objectsTotalValue[key] = 0;\n                    }\n                    objectsTotalValue[key] += n\n                };\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.pointSize = 5;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let summaryIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                summaryIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                let smyIndex = chartDataIndexes[summary.spName];\n                let n = (summary.summaryResults.records?summary.summaryResults.records:0);\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    chartData.push( [ summary.spName + ' ['+n+']', n] );\n                }else{\n                    let tempN = chartData[smyIndex][1] + n;\n\n                    chartData[smyIndex] = [ summary.spName + ' ['+tempN+']', tempN];\n                }\n                otherSum += n;\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpSummaries = [[\"Summary\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpSummaries.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpSummaries.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpSummaries);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                let sumRes = summary.summaryResults;\n\n                if(!sumRes.startTime) {\n                  return;\n                }\n\n                let n = (sumRes.records?sumRes.records:0);\n                let smyDate = new Date(sumRes.startTime);\n                let smyDateFormated = this.formatStartTime(smyDate);\n                let smyIndex = chartDataIndexes[smyDate];\n\n                if( !fromDateAxis || fromDateAxis >= smyDate ){\n                    fromDateAxis = new Date(smyDate);\n                    fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                }\n\n                if( !toDateAxis || toDateAxis <= smyDate ){\n                    toDateAxis = new Date(smyDate);\n                    toDateAxis.setHours(toDateAxis.getHours()+1);\n                }\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    smyIndex = counter;\n                    chartDataIndexes[smyDate] = counter;\n                    chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                    counter++;\n                }\n\n                chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                if( !chartData[smyIndex][objIndexes[summary.spName]+1] ){\n                    chartData[smyIndex][objIndexes[summary.spName]+1] = 0;\n                }\n                chartData[smyIndex][objIndexes[summary.spName]+1] += n;\n                if( !objectsTotalValue[summary.spName] ){\n                    objectsTotalValue[summary.spName] = 0;\n                }\n                objectsTotalValue[summary.spName] += n\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartAttributeProgressByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let attIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let sortedNames = [];\n            let attrNames = [];\n\n            if( this.state.showChartAttr.showRecords ){ attrNames.push( \"records\" ); }\n            if( this.state.showChartAttr.showInserted ){ attrNames.push( \"inserted\" ); }\n            if( this.state.showChartAttr.showUpdated ){ attrNames.push( \"updated\" ); }\n            if( this.state.showChartAttr.showArchived ){ attrNames.push( \"archived\" ); }\n\n            attrNames.forEach(function(attrName){\n                sortedNames.push( attrName );\n            });\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                attIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n            let summarysTotalValue = {};\n            let selectedSummaries = new Set();\n\n            summaryData.forEach(function(summary){\n                let attr = {};\n                let summaryMap = summary.summaryMap;\n                let containsSelectedObjects = false;\n\n                for( let key in summaryMap ){\n                    let obj = summaryMap[key];\n                    if( obj ){\n                        attrNames.forEach( function(attrName){\n                            attr[attrName] = attr[attrName]?attr[attrName]:0;\n                            attr[attrName] += (obj[attrName]?obj[attrName]:0);\n                        } );\n                        containsSelectedObjects = true;\n                    }\n                };\n\n                if( containsSelectedObjects && summary.summaryResults.startTime ){\n                    let startTime = new Date(summary.summaryResults.startTime);\n                    startTime.setSeconds(0);\n\n                    let smyDate = startTime;\n                    let smyDateFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n                    let smyIndex = chartDataIndexes[smyDate];\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( attrNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated + \"\\n\" + summary.spName };\n\n                    attrNames.forEach(function(attrName){\n                        if( !chartData[smyIndex][attIndexes[attrName]+1] ){\n                            chartData[smyIndex][attIndexes[attrName]+1] = 0;\n                        }\n                        chartData[smyIndex][attIndexes[attrName]+1] += attr[attrName];\n\n                        if( !summarysTotalValue[attrName] ){\n                            summarysTotalValue[attrName] = 0;\n                        }\n                        summarysTotalValue[attrName] += attr[attrName];\n                    });\n\n                    selectedSummaries.add( summary.spName );\n                }\n            });\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in attIndexes ){\n                if( summarysTotalValue[key] !== undefined ){\n                    data.addColumn('number', key + \" [\" + summarysTotalValue[key] + \"]\");\n                }\n            };\n\n            chartData.sort(function(a,b){\n                return a[0] > b[0]?1:a[0] < b[0]?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.isStacked = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Date',\n                format: 'YYYY-dd-MM\\n hh:mm:ss',\n                viewWindowMode: 'pretty',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                }\n            };\n            options.vAxis = {\n                title: 'Attributes'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.ColumnChart, data, options ];\n        }.bind(this);\n\n        this.drawChart = function(){\n            let ret = this.state.chartSelection[0].call();\n\n            this.setState({\n                isLoading: false,\n                isBlank: ret == null\n            }, function(){\n                if( ret ){\n                    var chart = new ret[0]( this.chartEl );\n                    chart.draw(ret[1],ret[2]);\n                }\n            });\n        }.bind(this);\n\n        this.selectChart = function( selection ){\n            this.setState( {\n                chartInput : '',\n                chartSelection : selection\n            }, this.drawChart );\n        }.bind(this);\n\n        this.setDateFilter = function( fromDate, toDate ){\n            this.setState({\n                chartFromDate: fromDate,\n                chartToDate: toDate\n            });\n        }.bind(this);\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        let chartOptions = [{label: \"Object Top Ten\", id: \"chartObjectTopTen\", call : this.chartObjectTopTen },\n                    {label: \"Objects By Date\", id: \"chartObjectByDate\", call : this.chartObjectByDate},\n                    {label: \"Top Ten Processes\", id: \"chartSummaryTopTen\", call : this.chartSummaryTopTen},\n                    {label: \"Processes By Date\", id: \"chartSummaryByDate\", call : this.chartSummaryByDate},\n                    {label: \"Results by Date\", id: \"chartAttributeProgressByDate\", call : this.chartAttributeProgressByDate}\n        ];\n\n        this.setState({\n            isLoading: false,\n            chartOptions: chartOptions,\n            chartSelection: [chartOptions[0]]\n        });\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        if(this.state.isBlank) return null;\n\n        return (\n            <div>\n                <div>\n                    { !this.state.hideChartOptions &&\n                    (<div className=\"slds-grid slds-wrap\">\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                            <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n                                <div className=\"slds-grid slds-wrap\">\n\n                                    <div className={(this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter)?\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\":\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\"}>\n                                        <Combobox\n                                            events={{\n                                                onChange: (event, { value }) => {\n                                                    this.chartInput = value;\n                                                    this.setState( {\n                                                        chartInput : value\n                                                    }, this.drawChart );\n                                                },\n                                                onRequestRemoveSelectedOption: (event, data) => {\n                                                    this.setState( {\n                                                        chartInput : '',\n                                                        chartSelection : data.selection\n                                                    } );\n                                                },\n                                                onSelect: (event, data) => {\n                                                    this.selectChart( data.selection );\n\n                                                    if (this.props.onChartSelect) {\n                                                        this.props.onChartSelect(event, data.selection);\n                                                    }\n                                                },\n                                            }}\n\n                                            labels={{\n                                                label: 'Chart Type',\n                                                placeholder: '-- SELECT CHART TYPE --',\n                                            }}\n\n                                            options={comboboxFilterAndLimit({\n                                                inputValue: this.state.chartInput,\n                                                limit: 1000,\n                                                options: this.state.chartOptions,\n                                                selection: this.state.chartSelection\n                                            })}\n\n                                            selection={this.state.chartSelection}\n                                            value={this.state.chartInput}\n                                            variant=\"readonly\"\n                                        />\n                                    </div>\n\n                                    {this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter && (\n                                    <div className=\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\">\n                                        <SLDSSection title=\"Display Values\" className=\"slds-p-left_small slds-m-top_none\" >\n                                            <div className=\"slds-grid slds-wrap\">\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showRecords}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showRecords = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Records',\n                                                            toggleEnabled: 'Records'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showInserted}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showInserted = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Inserted',\n                                                            toggleEnabled: 'Inserted'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showUpdated}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showUpdated = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Updated',\n                                                            toggleEnabled: 'Updated'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showArchived}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showArchived = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Archived',\n                                                            toggleEnabled: 'Archived'\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </SLDSSection>\n                                    </div>\n                                    )}\n                                </div>\n                            </SLDSSection>\n                        </div>\n                    </div>)}\n\n                    <div  ref={chartEl => this.chartEl = chartEl} />\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox, Datepicker, Button } from '@salesforce/design-system-react';\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport $ from 'jquery';\nimport { comboboxFilterAndLimit, getUTCTimeRangeFromUserDate} from '../lib/utils';\n\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nexport default class GRAXSummaryChartsSimple extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chart = React.createRef();\n\n        this.summaryDataResults = [];\n        let fromDate = new Date();\n        let toDate = new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            fromDate: fromDate,\n            toDate: toDate,\n            _currentOrgRecords: true,\n\n            objectInput: '',\n            objectSelection: [],\n            objectOptions: [],\n\n            chartData: [],\n            chartSelected: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadSummaries =  function(){\n            this.setState({\n                isLoading: true\n            });\n\n            let fromDate = this.state.fromDate;\n            fromDate = fromDate.getFullYear() + '-' + (fromDate.getMonth()+1).toString().padStart(2,0) + '-' + fromDate.getDate().toString().padStart(2,0);\n            let toDate = this.state.toDate;\n            toDate = toDate.getFullYear() + '-' + (toDate.getMonth()+1).toString().padStart(2,0) + '-' + toDate.getDate().toString().padStart(2,0);\n\n            fromDate = getUTCTimeRangeFromUserDate({ date: fromDate })[0];\n            toDate = getUTCTimeRangeFromUserDate({ date: toDate })[1];\n\n            let query = {\"AND\": [\n              {\"GTE\": {\"summaryResults.startTime\": fromDate}},\n              {\"LTE\": {\"summaryResults.startTime\": toDate}}\n            ]};\n\n            if(this.state._currentOrgRecords) {\n              query.AND.push({\"KEQ\": {\"graxorgid\": orgid}});\n            }\n\n            $.ajax({\n                type: 'GET',\n\n                url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                    action:'load',\n                    dataIndex: 'graxgrax_backup_summaryindex',\n                    _index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n                    _select: 'summaryMap,spName,CreatedDate,summaryResults',\n                    _q: JSON.stringify(query),\n                    _limit: 1000,\n                    _from: 0,\n                    _sort: '',\n                    _sortType: '',\n                    _ignore_unavailable: true\n                }),\n\n                success: function(data) {\n                    // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n                    if( data.results ){\n                        this.summaryDataResults = data.results;\n                    }\n\n                    this.setState({\n                        isLoading: false\n                    }, function(){\n                        this.loadSummaryData();\n                    });\n                }.bind(this),\n                error: function(xhr, status, err) {\n                    console.error(xhr, status, err);\n\n                    this.setState({\n                        isLoading: false,\n                    });\n                }.bind(this)\n            });\n        };\n\n        this.loadSummaryData = function(){\n            let summaryData = this.summaryDataResults;\n            let summaryNames = new Set();\n            let sortedNames = [];\n\n            summaryData.forEach(function(summary){\n                for( let key in summary.summaryMap ){\n                    summaryNames.add( key );\n                }\n            });\n\n            sortedNames = new Array(...summaryNames);\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            let objectOptions = [{label:\"All\", id:\"ALL\"}];\n            sortedNames.forEach(function(name){\n                objectOptions.push( {label: name, id: name} );\n            });\n\n            this.setState({\n                isLoading: false,\n                objectOptions: objectOptions,\n                objectSelection: [objectOptions[0]]\n            }, this.refreshChart );\n        };\n\n        this.refreshChart = function(){\n            let summaryData = this.summaryDataResults;\n            let selectedObjects = [];\n            let chartData = [];\n\n            if( this.state.objectSelection && this.state.objectSelection[0].id !== \"ALL\" ){\n                selectedObjects.push( this.state.objectSelection[0].id );\n            }else{\n                this.state.objectOptions.forEach( function(option){\n                    selectedObjects.push( option.id );\n                } );\n            }\n\n\n            summaryData.forEach(function(summary){\n                selectedObjects.forEach( function( selectedObject ){\n                    if( summary.summaryMap[selectedObject] ){\n                        let tempData = {\n                            summaryMap: {\n                                [selectedObject]: {...summary.summaryMap[selectedObject]}\n                            },\n                            spName: summary.spName,\n                            summaryResults:{\n                                ...summary.summaryMap[selectedObject]\n                            }\n                        };\n\n                        chartData.push( tempData );\n                    }\n                });\n            });\n\n            this.setState({\n                isLoading: false,\n                chartData: chartData\n            },function(){\n                this.chart.current.drawChart();\n            }.bind(this));\n        }\n\n        this.chartSelection = function(selection){\n            this.setState( {\n                chartSelected: selection\n            } );\n        };\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        this.setState({\n            isLoading: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLoading && (<Spinner size=\"large\" variant=\"brand\" />\n\t\t\t\t)}\n                <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Filter Criteria\" >\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n\n                                <dl className=\"slds-list_stacked\">\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                                        <label className=\"slds-form-element__label\" >From</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <Datepicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    fromDate: data.date\n                                                });\n                                            }}\n\n                                            value={ this.state.fromDate }\n                                        />\n                                    </dd>\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                                        <label className=\"slds-form-element__label\" >To</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <Datepicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    toDate: data.date\n                                                });\n                                            }}\n\n                                            value={ this.state.toDate }\n                                        />\n                                    </dd>\n                                </dl>\n                            </div>\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(e) => {\n                                        this.setState({\n                                            _currentOrgRecords: !e.target.checked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n\n                                <div className=\"slds-float_right\">\n                                    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                                        this.loadSummaries();\n                                        this.chart.current.setDateFilter( this.state.fromDate, this.state.toDate );\n                                        this.setState( {\n                                            chartSelected: this.chart.current.state.chartSelection\n                                        } );\n                                    }} />\n                                </div>\n                            </div>\n                        </SLDSSection>\n                    </div>\n                    { this.state.objectOptions && (\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                                <Combobox\n                                    events={{\n                                        onChange: (event, { value }) => {\n                                            this.setState( {\n                                                objectInput : value\n                                            }, this.refreshChart );\n                                        },\n                                        onRequestRemoveSelectedOption: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            } );\n                                        },\n                                        onSelect: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            }, this.refreshChart );\n                                        },\n                                    }}\n\n                                    labels={{\n                                        label: 'Salesforce Object',\n                                        placeholder: '-- SELECT SALESFORCE OBJECT --',\n                                    }}\n\n                                    options={comboboxFilterAndLimit({\n                                        inputValue: this.state.objectInput,\n                                        limit: 1000,\n                                        options: this.state.objectOptions,\n                                        selection: this.state.objectSelection\n                                    })}\n\n                                    selection={this.state.objectSelection}\n                                    value={this.state.objectInput}\n                                    variant=\"readonly\"\n                                />\n                            </div>\n\n                            {this.chart.current &&\n                            (<Combobox\n                                events={{\n                                    onChange: (event, { value }) => {\n                                        this.chart.current.chartInput = value;\n                                        this.chart.current.setState( {\n                                            chartInput : value\n                                        } );\n                                    },\n                                    onRequestRemoveSelectedOption: (event, data) => {\n                                        this.chart.current.selectChart(data.selection)\n                                    },\n                                    onSelect: (event, data) => {\n                                        if( data.selection.length > 0 ){\n                                            this.chart.current.selectChart(data.selection);\n\n                                            this.setState( {\n                                                chartSelected: data.selection\n                                            } );\n                                        }\n                                    },\n                                }}\n\n                                labels={{\n                                    label: 'Chart Type',\n                                    placeholder: '-- SELECT CHART TYPE --',\n                                }}\n\n                                options={comboboxFilterAndLimit({\n                                    inputValue: this.chart.current.state.chartInput,\n                                    limit: 1000,\n                                    options: this.chart.current.state.chartOptions,\n                                    selection: this.state.chartSelected?this.state.chartSelected:this.chart.current.state.chartSelection\n                                })}\n\n                                selection={this.state.chartSelected}\n                                value={this.chart.current.state.chartInput}\n                                variant=\"readonly\"\n                            />)}\n                        </SLDSSection>\n                    </div>) }\n                </div>\n\n                <GRAXSummaryChartsChart\n                    ref={this.chart}\n                    summaryData={this.state.chartData}\n                    showAttributeFilter={false}\n                    hideChartOptions={true}\n                    onChartSelect={(event, selection)=>{\n                        this.chartSelection( selection );\n                    }}\n                />\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Datepicker, Button, DataTable, DataTableColumn, DataTableCell } from '@salesforce/design-system-react';\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport { getUTCTimeRangeFromUserDate } from '../lib/utils';\n\nimport $ from 'jquery';\n\nimport '../public/js/jquery.sldsTree.js';\n\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nconst CustomDataTableCell = ({ children, ...props }) => (\n\t<DataTableCell {...props}>\n\t\t<a\n\t\t\thref = {baseUrl + \"/grax-app/grax-data-lake/generateBackupSummary/\" + props.item.spId + \"/\" + encodeURI(props.item.executionUniqueKey) + \"?orgid=\" + orgid }\n\t\t\t_target=\"_blank\"\n\t\t>\n\t\t\t{children}\n\t\t</a>\n\t</DataTableCell>\n);\nCustomDataTableCell.displayName = DataTableCell.displayName;\n\nexport default class GRAXSummaryChartsAdvanced extends React.Component {\n    constructor(props) {\n        super(props);\n\n\t\tthis.chart = React.createRef();\n\n\t\tthis.summaryDataResults = [];\n\t\tthis.summaryDataSelected = [];\n\t\tthis.itemsObjectsByDataRange = [];\n\t\tthis.itemsObjectsByDataRangeSelection = [];\n\t\tthis.summaryBreadownDTItems = [];\n\t\tthis.summaryBreadownDTSelection = [];\n\t\tthis.summaryDTItems = [];\n\t\tthis.summaryDTSelection = [];\n\t\tthis.chartOptions = [];\n\t\tthis.defaultChartSettings = {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } };\n\t\tthis.summaryBDDTFromDate = new Date();\n\t\tthis.summaryBDDTToDate = new Date();\n\n\t\tthis.state = {\n\t\t\tisLoading: true,\n\n\t\t\tchartData: [],\n\n\t\t\tchartSelection: [],\n\t\t\tchartInput: '',\n\t\t\tfromDate: new Date(),\n\t\t\ttoDate: new Date(),\n\t\t\t_currentOrgRecords: true,\n\n\t\t\tsummaryDTFilters: {\n\t\t\t\tshowRecords: true, showInserted: true, showUpdated: true, showArchived: true\n\t\t\t},\n\n\t\t\tinputValue: 'Select an option',\n\t\t\tselection: [],\n\t\t\tchecked: [],\n\n\t\t\terror: null\n        };\n    }\n\n    componentDidMount() {\n\t\ttry{\n\t\t\tthis.loadSummaries = function(){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t});\n\n\t\t\t\tlet currentChartSelected = this.state.chartSelected;\n\n\t\t\t\tlet fromDT = this.state.fromDate;\n\t\t\t\tfromDT = fromDT.getFullYear() + '-' + (fromDT.getMonth()+1).toString().padStart(2,0) + '-' + fromDT.getDate().toString().padStart(2,0);\n\t\t\t\tlet toDT = this.state.toDate;\n\t\t\t\ttoDT = toDT.getFullYear() + '-' + (toDT.getMonth()+1).toString().padStart(2,0) + '-' + toDT.getDate().toString().padStart(2,0);\n\n        fromDT = getUTCTimeRangeFromUserDate({ date: fromDT })[0];\n        toDT = getUTCTimeRangeFromUserDate({ date: toDT })[1];\n\n        let query = {\"AND\": [\n          {\"GTE\": {\"summaryResults.startTime\": fromDT}},\n          {\"LTE\": {\"summaryResults.startTime\": toDT}}\n        ]};\n\n\t\t\t\tif(this.state._currentOrgRecords) {\n          query.AND.push({\"KEQ\": {\"graxorgid\": orgid}});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBDDTFromDate = this.state.fromDate;\n\t\t\t\tthis.summaryBDDTToDate = this.state.toDate;\n\n\t\t\t\t$.ajax({\n\t\t\t\t\ttype: 'GET',\n\n\t\t\t\t\turl: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n            action: 'load',\n            dataIndex: 'graxgrax_backup_summaryindex',\n\t\t\t\t\t\t_index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n\t\t\t\t\t\t_select: 'summaryMap,spName,spId,CreatedDate,summaryResults,executionUniqueKey',\n\t\t\t\t\t\t_q: JSON.stringify(query),\n\t\t\t\t\t\t_limit: 1000,\n\t\t\t\t\t\t_from: 0,\n\t\t\t\t\t\t_sort: '',\n            _sortType: '',\n            _ignore_unavailable: true\n\t\t\t\t\t}),\n\n\t\t\t\t\tsuccess: function(data) {\n\t\t\t\t\t\t// IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n\t\t\t\t\t\tif( data.results ){\n\t\t\t\t\t\t\tthis.summaryDataResults = data.results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t\tchartSelected: currentChartSelected\n\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\tthis.loadSummaryDataTable(); this.loadSummaryBreakdownTable(); this.loadObjectDataTable();\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\terror: function(xhr, status, err) {\n\t\t\t\t\t\tconsole.error(xhr, status, err);\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tthis.getSelectedSummary = function(){\n\t\t\t\tlet selectedSummaries = this.summaryBreadownDTSelection;\n\t\t\t\tlet summaryDataResults = this.summaryDataResults;\n\n\t\t\t\tlet summaries4chart = [];\n\n\t\t\t\tselectedSummaries.forEach(function(summary){\n\t\t\t\t\tsummaries4chart.push( summaryDataResults[summary.index] );\n\t\t\t\t\t/*summary.index.forEach(function(index){\n\t\t\t\t\t\tsummaries4chart.push( summaryDataResults[index] );\n\t\t\t\t\t});*/\n\t\t\t\t});\n\t\t\t\treturn summaries4chart;\n\t\t\t};\n\n\t\t\tthis.loadSummaryDataTable = function(){\n\t\t\t\tlet summaryList = this.summaryDataResults;\n\t\t\t\tlet dtSummaries = [];\n\t\t\t\tlet i=0;\n\n\t\t\t\tif( summaryList ){\n\t\t\t\t\tlet includeArchived = this.state.summaryDTFilters.showArchived;\n\t\t\t\t\t//let includeRecords = this.state.summaryDTFilters.showRecords;\n\t\t\t\t\tlet includeInserted = this.state.summaryDTFilters.showInserted;\n\t\t\t\t\tlet includeUpdated = this.state.summaryDTFilters.showUpdated;\n\n\t\t\t\t\tsummaryList.forEach(function( summary ){\n\n\t\t\t\t\t\tif( !( (includeArchived && summary.summaryResults.archived !== 0) ||\n\t\t\t\t\t\t\t//(includeRecords && summary.summaryResults.showRecords !== 0) ||\n\t\t\t\t\t\t\t(includeInserted && summary.summaryResults.inserted !== 0) ||\n\t\t\t\t\t\t\t(includeUpdated && summary.summaryResults.updated !== 0)) ){\n\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tlet existIndex = dtSummaries.filter( function(e){return e.name === summary.spName;} );\n\n\t\t\t\t\t\t\tlet archived = summary.summaryResults.archived;\n\t\t\t\t\t\t\tlet records = summary.summaryResults.records;\n\t\t\t\t\t\t\tlet inserted = summary.summaryResults.inserted;\n\t\t\t\t\t\t\tlet updated = summary.summaryResults.updated;\n\n\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\tif( existIndex && existIndex.length > 0 ){\n\t\t\t\t\t\t\t\texistIndex[0].index.push( i );\n\n\t\t\t\t\t\t\t\texistIndex[0].records += records;\n\t\t\t\t\t\t\t\texistIndex[0].inserted += inserted;\n\t\t\t\t\t\t\t\texistIndex[0].updated += updated;\n\t\t\t\t\t\t\t\texistIndex[0].archived += archived;\n\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tlet createdDate = new Date(summary.CreatedDate);\n\t\t\t\t\t\t\t\tlet startTime = new Date(summary.summaryResults.startTime);\n\t\t\t\t\t\t\t\tlet startTimeFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\n\t\t\t\t\t\t\t\tdtSummaries.push(\n\t\t\t\t\t\t\t\t\t{\tname: summary.spName,\n\t\t\t\t\t\t\t\t\t\tid: summary.spName,\n\t\t\t\t\t\t\t\t\t\tspId: summary.spId,\n\t\t\t\t\t\t\t\t\t\texecutionUniqueKey: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\t\t\tCreatedDate: summary.CreatedDate,\n\t\t\t\t\t\t\t\t\t\tCreatedDateFormatted: createdDate.getFullYear()+\"-\"+(createdDate.getMonth()+1)+\"-\"+createdDate.getDate(),\n\t\t\t\t\t\t\t\t\t\tstartTime: startTime,\n\t\t\t\t\t\t\t\t\t\tstartTimeFormmated: startTimeFormated,\n\t\t\t\t\t\t\t\t\t\trecords: records,\n\t\t\t\t\t\t\t\t\t\tinserted: inserted,\n\t\t\t\t\t\t\t\t\t\tupdated: updated,\n\t\t\t\t\t\t\t\t\t\tarchived: archived,\n\t\t\t\t\t\t\t\t\t\tindex: [i]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t});\n\n\t\t\t\t\tdtSummaries.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryDTItems = dtSummaries;\n\t\t\t}\n\n\t\t\tthis.loadSummaryBreakdownTable = function(){\n\t\t\t\tlet summaryToShow = this.summaryDTSelection;\n\t\t\t\tlet summaryDataResults = this.summaryDataResults;\n\t\t\t\tlet summaryBreadownDTItems = [];\n\n\t\t\t\tif( summaryToShow ){\n\n\t\t\t\t\tsummaryToShow.forEach(function(dtSummary){\n\t\t\t\t\t\tdtSummary.index.forEach(function(index){\n\t\t\t\t\t\t\tlet summary = summaryDataResults[index];\n\n\t\t\t\t\t\t\tlet archived = summary.summaryResults.archived;\n\t\t\t\t\t\t\tlet records = summary.summaryResults.records;\n\t\t\t\t\t\t\tlet inserted = summary.summaryResults.inserted;\n\t\t\t\t\t\t\tlet updated = summary.summaryResults.updated;\n\n\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\tlet createdDate = new Date(summary.CreatedDate);\n\t\t\t\t\t\t\tlet startTime = new Date(summary.summaryResults.startTime);\n\t\t\t\t\t\t\tlet startTimeFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\n\t\t\t\t\t\t\tsummaryBreadownDTItems.push({\n\t\t\t\t\t\t\t\tname: summary.spName,\n\t\t\t\t\t\t\t\tid: summary.Id,\n\t\t\t\t\t\t\t\texecutionUniqueKey: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\t\tCreatedDate: summary.CreatedDate,\n\t\t\t\t\t\t\t\tCreatedDateFormatted: createdDate.getFullYear()+\"-\"+(createdDate.getMonth()+1)+\"-\"+createdDate.getDate(),\n\t\t\t\t\t\t\t\tstartTime: summary.startTime,\n\t\t\t\t\t\t\t\tstartTimeFormmated: startTimeFormated,\n\t\t\t\t\t\t\t\trecords: records,\n\t\t\t\t\t\t\t\tinserted: inserted,\n\t\t\t\t\t\t\t\tupdated: updated,\n\t\t\t\t\t\t\t\tarchived: archived\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBreadownDTItems = summaryBreadownDTItems;\n\t\t\t}\n\n\t\t\tthis.loadObjectDataTable = function(){\n\t\t\t\tlet summaryToShow = this.getSelectedSummary();\n\t\t\t\tlet itemsObjectsByDataRange = [];\n\n\t\t\t\tif( summaryToShow ){\n\t\t\t\t\tlet allSummaries = {};\n\n\t\t\t\t\tsummaryToShow.forEach( function( summaryData ){\n\t\t\t\t\t\tvar summaryMap = summaryData.summaryMap;\n\n\t\t\t\t\t\tlet smyDate = new Date(summaryData.summaryResults.startTime );\n\n\t\t\t\t\t\tfor( var objName in summaryMap ){\n\t\t\t\t\t\t\tif( typeof summaryMap[objName] == \"object\" ){\n\t\t\t\t\t\t\t\tlet archived = summaryMap[objName].archived;\n\t\t\t\t\t\t\t\tlet records = summaryMap[objName].records;\n\t\t\t\t\t\t\t\tlet inserted = summaryMap[objName].inserted;\n\t\t\t\t\t\t\t\tlet updated = summaryMap[objName].updated;\n\n\t\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet _allSumaries = allSummaries[objName];\n\n\t\t\t\t\t\t\t\tif( !_allSumaries ){\n\t\t\t\t\t\t\t\t\t_allSumaries = {};\n\t\t\t\t\t\t\t\t\t_allSumaries.name = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.id = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.archived = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.records = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.inserted = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.updated = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_allSumaries.archived += archived?archived:0;\n\t\t\t\t\t\t\t\t_allSumaries.records += records?records:0;\n\t\t\t\t\t\t\t\t_allSumaries.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\t_allSumaries.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet dateIndex = _allSumaries.startTimes.indexOf( smyDate );\n\n\t\t\t\t\t\t\t\tif( dateIndex < 0 ){\n\t\t\t\t\t\t\t\t\tdateIndex = _allSumaries.startTimes.length;\n\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes.push({\n\t\t\t\t\t\t\t\t\t\tstartTime: smyDate,\n\t\t\t\t\t\t\t\t\t\tarchived : 0,\n\t\t\t\t\t\t\t\t\t\trecords : 0,\n\t\t\t\t\t\t\t\t\t\tinserted : 0,\n\t\t\t\t\t\t\t\t\t\tupdated : 0\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet dateData = _allSumaries.startTimes[dateIndex];\n\t\t\t\t\t\t\t\tdateData.archived += archived?archived:0;\n\t\t\t\t\t\t\t\tdateData.records += records?records:0;\n\t\t\t\t\t\t\t\tdateData.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\tdateData.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tallSummaries[objName] = _allSumaries;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Top Ten Data\n\t\t\t\t\tfor( var objName in allSummaries ){\n\t\t\t\t\t\titemsObjectsByDataRange.push( allSummaries[objName] );\n\t\t\t\t\t}\n\n\t\t\t\t\titemsObjectsByDataRange.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\n\t\t\t\t\t// itemsObjectsByDataRangeSelection = itemsObjectsByDataRange;\n\t\t\t\t}\n\n\t\t\t\tthis.itemsObjectsByDataRange = itemsObjectsByDataRange;\n\t\t\t\t// this.itemsObjectsByDataRangeSelection = itemsObjectsByDataRangeSelection;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t}, this.refreshChart );\n\t\t\t}.bind(this);\n\n\t\t\tthis.refreshChart = function(){\n\t\t\t\tlet chartData = [];\n\n\t\t\t\tlet summartDataResults = this.summaryDataResults;\n\t\t\t\t//let summaryDTSelection = this.summaryDTSelection;\n\t\t\t\tlet summaryBreadownDTSelection = this.summaryBreadownDTSelection;\n\t\t\t\tlet itemsObjectsByDataRangeSelection = this.itemsObjectsByDataRangeSelection;\n\n\t\t\t\tlet summaryIds = {};\n\t\t\t\tsummaryBreadownDTSelection.forEach( function(summary){\n\t\t\t\t\tsummaryIds[summary.id] = summary.id;\n\t\t\t\t});\n\n\t\t\t\tlet objNames = {};\n\t\t\t\titemsObjectsByDataRangeSelection.forEach(function(obj){\n\t\t\t\t\tobjNames[obj.name] = obj.name;\n\t\t\t\t});\n\n\t\t\t\tsummartDataResults.forEach( function(summary){\n\t\t\t\t\tlet tempData = {};\n\t\t\t\t\tif( summaryIds[summary.Id] ){\n\t\t\t\t\t\ttempData.summaryMap = {};\n\t\t\t\t\t\ttempData.spName = summary.spName;\n                        tempData.summaryResults= {\n\t\t\t\t\t\t\tarchived: 0,\n\t\t\t\t\t\t\trecords: 0,\n\t\t\t\t\t\t\tinserted: 0,\n\t\t\t\t\t\t\tupdate: 0,\n\t\t\t\t\t\t\tstartTime: summary.summaryResults.startTime,\n\t\t\t\t\t\t\tendTime: summary.summaryResults.endTime\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor( let key in summary.summaryMap ){\n\t\t\t\t\t\t\tif( objNames[key] ){\n\t\t\t\t\t\t\t\tlet summaryMap = summary.summaryMap;\n\t\t\t\t\t\t\t\ttempData.summaryMap[key] = summaryMap[key];\n\t\t\t\t\t\t\t\ttempData.summaryResults.archived = summaryMap[key].archived?summaryMap[key].archived:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.records = summaryMap[key].records?summaryMap[key].records:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.inserted = summaryMap[key].inserted?summaryMap[key].inserted:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.update = summaryMap[key].update?summaryMap[key].update:0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchartData.push( tempData );\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tchartData: chartData\n\t\t\t\t}, function(){\n\t\t\t\t\tthis.chart.current.drawChart();\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryDTHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState( {\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){ */\n\t\t\t\t\tthis.summaryDTSelection = data.selection;\n\t\t\t\t\tthis.loadSummaryBreakdownTable();\n\t\t\t\t\tthis.loadObjectDataTable();\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//} );\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryBreadownDTHandleChanged = function(event, data){\n\t\t\t\tthis.summaryBreadownDTSelection = data.selection;\n\t\t\t\tthis.loadObjectDataTable();\n\t\t\t\t//this.drawChart();\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.itemsObjectsByDataRangeHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){*/\n\t\t\t\t\tthis.itemsObjectsByDataRangeSelection = data.selection;\n\n\t\t\t\t\tthis.refreshChart();\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//});\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.dataTableHandleSort = ( dtName, items, sortColumn, ...rest) => {\n\t\t\t\tconst sortProperty = sortColumn.property;\n\t\t\t\tconst sortDirection = sortColumn.sortDirection;\n\t\t\t\tconst newState = {\n\t\t\t\t\t[dtName+\"Column\"]: sortProperty,\n\t\t\t\t\t[dtName+\"Direction\"]: {\n\t\t\t\t\t\t[sortProperty]: sortDirection,\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// needs to work in both directions\n\t\t\t\titems = items.sort((a, b) => {\n\t\t\t\t\tlet val = 0;\n\n\t\t\t\t\tif (a[sortProperty] > b[sortProperty]) {\n\t\t\t\t\t\tval = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a[sortProperty] < b[sortProperty]) {\n\t\t\t\t\t\tval = -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sortDirection === 'desc') {\n\t\t\t\t\t\tval *= -1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn val;\n\t\t\t\t});\n\n\t\t\t\tthis.setState(newState);\n\t\t\t};\n\n\t\t\tthis.formatStartTime = function( startTime ){\n\t\t\t\treturn startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\t\t\t};\n\n\t\t\tthis.formatDate = function( dt ){\n\t\t\t\treturn dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false\n\t\t\t});\n\n\t\t}catch(e){}\n\n    }\n\n    renderAggregatedScheduleProcessSection() {\n      return (\n        <SLDSSection\n          title=\"Step 1: Aggregated GRAX Schedule Process\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.summaryDTItems}\n                  id=\"DataTable_Summaries\"\n                  selection={this.summaryDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryDTHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\"DataTable_Summaries\", this.summaryDTItems, sortColumn);\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  >\n                    <CustomDataTableCell />\n                  </DataTableColumn>\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n\n            <div className=\"slds-col slds-size_2-of-12 slds-medium-size_2-of-12 slds-large-size_2-of-12\">\n              <div>\n                <SLDSSection title=\"Display Values\" className=\"slds-p-left_small slds-m-top_none\">\n                  <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showInserted}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showInserted = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Inserted\",\n                          toggleEnabled: \"Inserted\"\n                        }}\n                      />\n                    </div>\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showUpdated}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showUpdated = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Updated\",\n                          toggleEnabled: \"Updated\"\n                        }}\n                      />\n                    </div>\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showArchived}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showArchived = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Archived\",\n                          toggleEnabled: \"Archived\"\n                        }}\n                      />\n                    </div>\n                  </div>\n                </SLDSSection>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderScheduleProcessBreakdownSection() {\n      return (\n        <SLDSSection\n          title=\"Step 2: GRAX Schedule Process Breakdown\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.summaryBreadownDTItems}\n                  id=\"DataTable_SummaryBreakdown\"\n                  selection={this.summaryBreadownDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryBreadownDTHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_SummaryBreakdown\",\n                      this.summaryBreadownDTItems,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  />\n                  <DataTableColumn\n                    label=\"Execution Unique Key\"\n                    sortable\n                    property=\"executionUniqueKey\"\n                  />\n                  <DataTableColumn label=\"Start Time\" sortable property=\"startTimeFormmated\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderObjectsSection() {\n      return (\n        <SLDSSection\n          title=\"Step 3: Objects\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.itemsObjectsByDataRange}\n                  id=\"DataTable_ObjectsInSummary\"\n                  selection={this.itemsObjectsByDataRangeSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.itemsObjectsByDataRangeHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_ObjectsInSummary\",\n                      this.itemsObjectsByDataRange,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn label=\"Object Name\" sortable primaryColumn property=\"name\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterCriteriaSection() {\n      return (\n        <SLDSSection title=\"Filter Criteria\">\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n            <dl className=\"slds-list_stacked\">\n              <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                <label className=\"slds-form-element__label\">From</label>\n              </dt>\n              <dd className=\"slds-item_detail\">\n                <Datepicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      fromDate: data.date\n                    });\n                  }}\n                  value={this.state.fromDate}\n                />\n              </dd>\n              <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                <label className=\"slds-form-element__label\">To</label>\n              </dt>\n              <dd className=\"slds-item_detail\">\n                <Datepicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      toDate: data.date\n                    });\n                  }}\n                  value={this.state.toDate}\n                />\n              </dd>\n            </dl>\n          </div>\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n            <Checkbox\n              className=\"inline-block\"\n              defaultChecked={!this.state._currentOrgRecords}\n              onChange={e => {\n                this.setState({\n                  _currentOrgRecords: !e.target.checked\n                });\n              }}\n              assistiveText={{\n                label: \"Show records from all environments?\"\n              }}\n              variant=\"toggle\"\n              labels={{\n                toggleDisabled: \"Current Environment\",\n                toggleEnabled: \"All connected SF environments\"\n              }}\n            />\n            <div className=\"slds-float_right\">\n              <Button\n                label=\"Retrieve\"\n                variant=\"brand\"\n                onClick={() => {\n                  this.loadSummaries();\n                  this.chart.current.setDateFilter(this.state.fromDate, this.state.toDate);\n                }}\n              />\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterSections() {\n      if (!this.itemsObjectsByDataRange) return null;\n\n      return (\n        <div>\n          {this.summaryDataResults.length > 0 ? this.renderAggregatedScheduleProcessSection() : null}\n          {this.summaryDTSelection.length > 0 ? this.renderScheduleProcessBreakdownSection() : null}\n          {this.summaryBreadownDTSelection.length > 0 ? this.renderObjectsSection() : null}\n        </div>\n      );\n    }\n\n    render() {\n      return (\n        <div style={{ minHeight: 2000 }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n\n          {this.renderFilterCriteriaSection()}\n          {this.renderFilterSections()}\n\n          <GRAXSummaryChartsChart ref={this.chart} summaryData={this.state.chartData} />\n        </div>\n      );\n    }\n}\n","import React from 'react';\n\nimport { Tabs, TabsPanel, Spinner } from '@salesforce/design-system-react';\n\n// import '../public/js/jquery.sldsTree.js';\n\n// import '../public/js/googlecharts.js';\nimport GRAXSummaryChartsSimple from './GRAXSummaryChartsSimple';\nimport GRAXSummaryChartsAdvanced from './GRAXSummaryChartsAdvanced';\n\nexport default class GRAXSummaryCharts extends React.Component {\n    constructor(props) {\n        super(props);\n\t\t\n\t\tthis.state = {\n            isLoading: true\n        };\n    }\n\n    componentDidMount() {\n\t\tthis.setState({\n\t\t\tisLoading: false\n\t\t});\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n\t\t\t<div style={{ minHeight: 1000 }} >\n\t\t\t\t<Tabs variant={this.props.variant} id=\"tabs-simple-advanced\" >\n\t\t\t\t\t<TabsPanel label=\"Simple\">\n\t\t\t\t\t\t<GRAXSummaryChartsSimple />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t\t<TabsPanel label=\"Advanced\" style={{padding:0}} >\n\t\t\t\t\t\t<GRAXSummaryChartsAdvanced />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t</Tabs>\n\t\t\t</div>\n        )\n    }\n}\n"],"sourceRoot":""}