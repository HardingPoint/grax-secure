{"version":3,"sources":["components/GRAXCloudSFLoginForm.jsx","components/SLDSSection.jsx"],"names":["GRAXCloudSFLoginForm","props","getSFConnectionInfoHandler","dataSource","state","configuration","dataSources","dataSourceIndex","length","alert","provider","userName","password","url","setState","isLoading","$","ajax","type","baseUrl","contentType","data","JSON","stringify","skipFail","success","console","log","accessToken","userInfo","instanceUrl","organizationId","this","triggerConfigurationChange","bind","error","xhr","status","err","onGetConfig","path","f","defaultValue","_","get","onChangeConfig","targetKey","e","hasOwnProperty","persist","set","target","isMetadataBackupEnabled","loginHandler","cloneDeep","name","onChange","onLogin","Fragment","size","variant","className","title","id","label","onBlur","labels","value","checked","readOnly","onClick","React","Component","SLDSSection","isOpen","undefined","isCollapsible","handleToggle","onToggle","preventDefault","key","join","assistiveText","category","children"],"mappings":"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","file":"static/js/26.385bb1e8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spinner, Button, Input, RadioButtonGroup, Radio } from \"@salesforce/design-system-react\";\n\nimport SLDSSection from \"./SLDSSection\";\n\nimport { $, baseUrl } from \"../lib/grax-data-lake\";\n\nimport _ from \"lodash\";\n\n/*const METADATA_BACKUP_SETTINGS = [\n    {\n        name: 'RETRIEVE_SALESFORCE_METADATA',\n        type: 'boolean'\n    }\n];*/\n\nconst NEW_DATASOURCE = \"New Data Source\";\n\nexport default class GRAXCloudSFLoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n\n      configuration: {},\n      dataSourceIndex: 0,\n\n      isMetadataBackupEnabled: false\n    };\n\n    this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n\n    this.loginHandler = this.loginHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const configuration = this.props.configuration ? _.cloneDeep(this.props.configuration) : {};\n\n    if (!configuration.dataSources) {\n      configuration.dataSources = [];\n    }\n\n    let dataSource = {\n      name: NEW_DATASOURCE,\n      provider: \"salesforce\"\n    };\n\n    if (configuration.dataSources[this.props.dataSourceIndex]) {\n      dataSource = {\n        ...dataSource,\n        ...configuration.dataSources[this.props.dataSourceIndex]\n      };\n    }\n\n    configuration.dataSources[this.props.dataSourceIndex] = dataSource;\n\n    this.triggerConfigurationChange(configuration);\n\n    this.setState({\n      isLoading: false,\n      configuration\n    });\n  }\n\n  triggerConfigurationChange(configuration = this.state.configuration) {\n    if (this.props.onChange) {\n      this.props.onChange(\n        configuration,\n        _.get(configuration, [\"dataSources\", this.props.dataSourceIndex])\n      );\n    }\n  }\n\n  loginHandler() {\n    if (this.props.onLogin) {\n      const configuration = this.state.configuration;\n      const dataSource = configuration.dataSources[this.props.dataSourceIndex];\n\n      this.props.onLogin(configuration, dataSource);\n    }\n  }\n\n  getSFConnectionInfoHandler = () => {\n    const configuration = this.state.configuration;\n    const dataSource = configuration.dataSources[this.props.dataSourceIndex];\n\n    if (dataSource == null || dataSource.length === 0) {\n      return alert(\"Incomplete data\");\n    }\n\n    if (dataSource.provider == null) {\n      // return alert('Provider required');\n      dataSource.provider = \"salesforce\";\n    }\n\n    if (dataSource.userName == null) {\n      return alert(\"User Name required\");\n    }\n\n    if (dataSource.password == null) {\n      return alert(\"Password required\");\n    }\n\n    if (dataSource.url == null) {\n      return alert(\"Url required\");\n    }\n\n    this.setState({\n      isLoading: true\n    });\n\n    $.ajax({\n      type: \"POST\",\n      url: baseUrl + \"/grax-app/grax-cloud/salesforce/login\",\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify(dataSource),\n      skipFail: true,\n      success: function(data) {\n        console.log(data);\n\n        dataSource[\"instanceUrl\"] = null;\n        dataSource[\"organizationId\"] = null;\n\n        if (data.accessToken != null) {\n          dataSource[\"instanceUrl\"] = data.userInfo.instanceUrl;\n          dataSource[\"organizationId\"] = data.userInfo.organizationId;\n\n          alert(\"Success!\");\n        } else {\n          alert(\"Invalid Login\");\n        }\n\n        this.setState({\n          dataSource,\n          isLoading: false\n        });\n\n        this.triggerConfigurationChange();\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoading: false\n        });\n\n        alert(\"Error!\");\n\n        return false;\n      }.bind(this)\n    });\n  };\n\n  onGetConfig = (...path) => {\n    return (f, defaultValue = null) => {\n      return _.get(this.state.configuration, [...path, f], defaultValue);\n    };\n  };\n\n  onChangeConfig = (...path) => {\n    return (f, targetKey = \"value\") => {\n      return e => {\n        if (e != null && e.hasOwnProperty(\"originalEvent\")) e.persist();\n\n        const configuration = this.state.configuration;\n\n        _.set(configuration, [...path, f], e.target[targetKey]);\n\n        this.setState({\n          configuration\n        });\n\n        this.triggerConfigurationChange();\n      };\n    };\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.isLoading ? <Spinner size=\"large\" variant=\"brand\" /> : null}\n\n        <div className=\"slds-p-around_medium\">\n          <SLDSSection title=\"Salesforce Connection\">\n            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center slds-p-bottom_medium\">\n              <div className=\"slds-col\">\n                <Input\n                  id=\"sf-connection-name\"\n                  label=\"Conection Name\"\n                  defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"name\")}\n                  onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\"name\")}\n                />\n\n                <RadioButtonGroup\n                  labels={{\n                    label: \"Authentication Type\"\n                  }}\n                  onChange={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                    \"provider\"\n                  )}\n                  className=\"slds-m-top_small\"\n                >\n                  <Radio\n                    id=\"authentication-type-username-password\"\n                    label=\"Username / Password\"\n                    value=\"salesforce\"\n                    checked={\n                      this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") ===\n                      \"salesforce\"\n                    }\n                    variant=\"button-group\"\n                  />\n\n                  <Radio\n                    id=\"authentication-type-oauth\"\n                    label=\"OAuth\"\n                    value=\"oauth\"\n                    checked={\n                      this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") ===\n                      \"oauth\"\n                    }\n                    variant=\"button-group\"\n                  />\n                </RadioButtonGroup>\n              </div>\n            </div>\n\n            {this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") === \"oauth\" ? (\n              <React.Fragment>\n                <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                  <div className=\"slds-col\">\n                    {/*<Input id=\"sf-connection-name\" label=\"Conection Name\" defaultValue={this.state.dataSource.name} onBlur={(e) => {\n                                        var dataSource = this.state.dataSource;\n                                        \n                                        dataSource.name = e.target.value;\n                                        \n                                        this.setState({\n                                            dataSource: dataSource\n                                        });\n\n                                        this.triggerDataSourceChange();\n                                    }} />*/}\n\n                    {/*<div className=\"slds-form-element\">\n                      <label className=\"slds-form-element__label\" htmlFor=\"sf-environment-type\">\n                        Environment Type\n                      </label>\n                      <div className=\"slds-form-element__control\">\n                        <div className=\"slds-select_container\">\n                          <select className=\"slds-select\" id=\"sf-environment-type\">\n                            <option value=\"Production\">Production</option>\n                            <option value=\"Developer\">Developer</option>\n                            <option value=\"Sandbox\">Sandbox</option>\n                          </select>\n                        </div>\n                      </div>\n\n                                  </div>*/}\n\n                    <Input\n                      id=\"oauth-client-id\"\n                      label=\"Client Id\"\n                      defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientId\"\n                      )}\n                      onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientId\"\n                      )}\n                    />\n\n                    <Input\n                      id=\"oauth-client-secret\"\n                      label=\"Client Secret\"\n                      defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientSecret\"\n                      )}\n                      onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"clientSecret\"\n                      )}\n                    />\n\n                    <Input\n                      id=\"oauth-token-url\"\n                      label=\"Token URL\"\n                      defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"tokenUrl\"\n                      )}\n                      onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                        \"tokenUrl\"\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/*<div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                  <div className=\"slds-col\">\n                    <div className=\"slds-p-top_medium\">\n                      <Button\n                        label=\"Login with SalesForce\"\n                        variant=\"brand\"\n                        onClick={e => {\n                          this.loginHandler();\n                        }}\n                      />\n                    </div>\n                  </div>\n                      </div>*/}\n              </React.Fragment>\n            ) : null}\n          </SLDSSection>\n\n          {this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\"provider\") ===\n          \"salesforce\" ? (\n            <SLDSSection title=\"Login Details\">\n              <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                <div className=\"slds-col\">\n                  <Input\n                    id=\"sfdc-username\"\n                    label=\"SFDC Username\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"userName\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"userName\"\n                    )}\n                  />\n                  <Input\n                    id=\"sfdc-password\"\n                    type=\"password\"\n                    label=\"SFDC Password\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"password\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"password\"\n                    )}\n                  />\n                  <Input\n                    id=\"sfdc-url\"\n                    label=\"SFDC URL\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"url\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\"url\")}\n                  />\n                </div>\n\n                <div className=\"slds-col\">\n                  <Input\n                    id=\"sfdc-token\"\n                    label=\"SFDC Security Token\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"token\"\n                    )}\n                    onBlur={this.onChangeConfig(\"dataSources\", this.props.dataSourceIndex)(\"token\")}\n                  />\n                  <Input\n                    id=\"sfdc-org-id\"\n                    label=\"SFDC Organization ID (18 Digit)\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"organizationId\"\n                    )}\n                    readOnly\n                  />\n                  <Input\n                    id=\"sfdc-org-title\"\n                    label=\"SFDC Organization Title\"\n                    defaultValue={this.onGetConfig(\"dataSources\", this.props.dataSourceIndex)(\n                      \"name\"\n                    )}\n                    readOnly\n                  />\n                </div>\n              </div>\n\n              <div className=\"slds-p-top_medium\">\n                <Button\n                  label=\"Connect to SFDC\"\n                  variant=\"brand\"\n                  onClick={this.getSFConnectionInfoHandler}\n                />\n              </div>\n            </SLDSSection>\n          ) : null}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}"],"sourceRoot":""}