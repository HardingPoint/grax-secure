{"version":3,"sources":["components/SLDSSection.jsx","components/GRAXDatePicker.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXObjectCombobox.jsx"],"names":["SLDSSection","props","isOpen","isCollapsible","state","undefined","handleToggle","bind","e","onToggle","this","setState","prevState","preventDefault","id","key","title","helpText","className","children","titleElement","join","type","onClick","assistiveText","label","category","name","size","React","Component","GRAXDatePicker","useState","isValidDate","setIsValidDate","formatter","datePickerFormatter","parser","datePickerParser","onChange","event","data","formattedDate","moment","date","isValid","GRAXSFieldCombobox","options","inputValue","selection","isLoaded","error","$","ajax","url","baseUrl","SObjectName","fieldName","GetParams","action","_select","success","_","map","picklistValues","item","i","value","onLoad","xhr","status","err","console","toString","length","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onRequestRemoveSelectedOption","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","variant","multiple","required","style","position","height","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","_isMounted","isOpened","log","filterOptionsHandler","onOpen","onClose","GRAXFilterGeneration","_filterValues","_error","_filterValuesFields","filterableFieldOptions","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","keys","_filterValuesList","getFilterValuesList","onFilterValueChangeHandler","getFilterFunction","getFilterQuery","push","splice","dataList","isReturned","forEach","filterOperator","filterVal","Array","isArray","split","filterIsNegated","isFilterMatch","itemVal","Boolean","format","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","reduce","selectionIds","scope","data-label","width","indexOf","find","defaultChecked","target","checked","SObjectType","getSelectionValues","defaultValue","onBlur","isPicklist","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","disabled","GRAXObjectCombobox","excludeIds"],"mappings":"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","file":"static/js/2.fbefbccf.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from \"react\";\nimport { Icon } from \"@salesforce/design-system-react\";\n\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool,\n  isCollapsible: PropTypes.bool,\n  onToggle: PropTypes.func,\n  title: PropTypes.string.isRequired,\n  helpText: PropTypes.any,\n  id: PropTypes.string,\n  key: PropTypes.string,\n  children: PropTypes.any.isRequired\n};\n\nclass SLDSSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { isOpen, isCollapsible } = props;\n\n    this.state = {\n      isOpen: isOpen === true ? true : false || isCollapsible === undefined\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(e) {\n    const { onToggle } = this.props;\n\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n\n    if (onToggle) {\n      onToggle(isOpen);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { id, key, isCollapsible, title, helpText, className, children } = this.props;\n    const { isOpen } = this.state;\n\n    const titleElement = (\n      <span\n        className={`slds-truncate${isCollapsible ? \"\" : \" slds-p-horizontal_small\"}`}\n        title={title}\n      >\n        {title}\n        {helpText}\n      </span>\n    );\n\n    return (\n      <div\n        id={id || key}\n        className={[\"slds-section\", isOpen && \"slds-is-open\", className].join(\n          \" \"\n        )}\n      >\n        <h3 className=\"slds-section__title slds-theme_shade\">\n          {isCollapsible ? (\n            <button type=\"button\" className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n              <Icon\n                assistiveText={{ label: title }}\n                category=\"utility\"\n                name=\"switch\"\n                size=\"x-small\"\n                className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n              />\n              {titleElement}\n            </button>\n          ) : (\n            titleElement\n          )}\n        </h3>\n        {isOpen && <div className=\"slds-section__content\">{children}</div>}\n      </div>\n    );\n  }\n}\n\nSLDSSection.propTypes = propTypes;\n\nexport default SLDSSection;\n","/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\";\n\nimport { Datepicker } from \"@salesforce/design-system-react\";\n\nimport { moment, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst GRAXDatePicker = props => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  return (\n    <div className=\"slds-is-relative\">\n      <Datepicker\n        formatter={datePickerFormatter}\n        parser={datePickerParser}\n        // eslint-disable-next-line\n        {...props}\n        onChange={(event, data) => {\n          setIsValidDate(data.formattedDate === \"\" || moment(data.date).isValid());\n\n          if (props.onChange != null) {\n            props.onChange(event, data);\n          }\n        }}\n      />\n      {isValidDate === false ? (\n        <div className=\"slds-text-color_error\">\n          The date is invalid. Please select/write a valid date.\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GRAXDatePicker;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {\n  Spinner,\n  Combobox,\n  Input,\n  Button,\n  Checkbox,\n  comboboxFilterAndLimit\n} from \"@salesforce/design-system-react\";\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport { datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <GRAXDatePicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypes' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this.props.excludeIds) {\n                    data = _.filter(data, (item) => {\n                        return this.props.excludeIds.indexOf(item.id) === -1;\n                    });\n                }\n\n                this.setState({\n                    options: data,\n                    isLoaded: true\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>                    \n                    <Combobox\n                        classNameMenu={'scrollable-GRAXObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Search GRAX Table',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}