{"version":3,"sources":["components/GRAXCloudSFLoginForm.jsx"],"names":["SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS","name","type","GRAXCloudSFLoginForm","props","_this","Object","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","isLoading","error","configuration","dataSourceIndex","isMetadataBackupEnabled","triggerConfigurationChange","bind","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","loginHandler","_","cloneDeep","setState","dataSource","get","onChange","onLogin","length","alert","provider","userName","password","url","$","ajax","baseUrl","contentType","data","JSON","stringify","success","console","log","set","accessToken","userInfo","instanceUrl","organizationId","parse","xhr","status","err","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_7__","size","variant","className","_SLDSSection__WEBPACK_IMPORTED_MODULE_12__","title","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_8__","id","label","defaultValue","onBlur","e","target","value","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_9__","labels","disabled","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_10__","checked","Fragment","htmlFor","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_11__","onClick","readOnly","getSFConnectionInfoHandler","map","setting","i","key","_GRAXCloudConfigurationForm__WEBPACK_IMPORTED_MODULE_13__","React","Component"],"mappings":"gSAUMA,EAA8C,CAChD,CACIC,KAAM,uBACNC,KAAM,UAEV,CACID,KAAM,uBACNC,KAAM,QAEV,CACID,KAAM,UACNC,KAAM,QAEV,CACID,KAAM,cACNC,KAAM,YAEV,CACID,KAAM,UACNC,KAAM,QAEV,CACID,KAAM,cACNC,KAAM,SAaOC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,WAAW,EACXC,MAAO,KAEPC,cAAe,GACfC,gBAAiB,EAEjBC,yBAAyB,GAG7BZ,EAAKa,2BAA6Bb,EAAKa,2BAA2BC,KAAhCb,OAAAc,EAAA,EAAAd,CAAAD,IAElCA,EAAKgB,aAAehB,EAAKgB,aAAaF,KAAlBb,OAAAc,EAAA,EAAAd,CAAAD,IAfLA,mFAmBf,IAAIU,EAAgBP,KAAKJ,MAAMW,cAAgBO,IAAEC,UAAUf,KAAKJ,MAAMW,eAAiB,GAEvFP,KAAKgB,SAAS,CACVR,gBAAiBR,KAAKJ,MAAMY,gBAC5BD,cAAeA,EACfF,WAAW,yDAKf,IAAIY,EAAaH,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,kBAEzER,KAAKJ,MAAMuB,UACVnB,KAAKJ,MAAMuB,SAASnB,KAAKI,MAAMG,cAAeU,0CAK/CjB,KAAKJ,MAAMwB,SACVpB,KAAKJ,MAAMwB,QAAQpB,KAAKI,MAAMG,cAAeP,KAAKI,MAAMa,iEAK5D,IAAIA,EAAaH,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,kBAE5E,OAAiB,MAAdS,GAA4C,IAAtBA,EAAWI,OACzBC,MAAM,mBAGS,MAAvBL,EAAWM,SACHD,MAAM,qBAGS,MAAvBL,EAAWO,SACHF,MAAM,sBAGS,MAAvBL,EAAWQ,SACHH,MAAM,qBAGI,MAAlBL,EAAWS,IACHJ,MAAM,iBAGjBtB,KAAKgB,SAAS,CACVX,WAAW,SAGfsB,IAAEC,KAAK,CACHlC,KAAM,OACNgC,IAAKG,IAAU,wCACfC,YAAa,kCACbC,KAAMC,KAAKC,UAAUhB,GACrBiB,QAAS,SAASH,GACdI,QAAQC,IAAIL,GAEZd,EAAU,YAAkB,KAC5BA,EAAU,eAAqB,KAE/B,IAAIV,EAAgBP,KAAKI,MAAMG,cAE/BO,IAAEuB,IAAI9B,EAAe,CAAC,cAAeP,KAAKI,MAAMI,iBAAkBS,GAE3C,MAApBc,EAAKO,aACJrB,EAAU,YAAkBc,EAAKQ,SAASC,YAC1CvB,EAAU,eAAqBc,EAAKQ,SAASE,gBAE7CnB,MAAMU,KAAKU,MAAMX,IAGrB/B,KAAKgB,SAAS,CACVT,cAAeA,EACfF,WAAW,KAEjBM,KAAKX,MACPM,MAAO,SAASqC,EAAKC,EAAQC,GASzB,OARAV,QAAQ7B,MAAMqC,EAAKC,EAAQC,GAE3B7C,KAAKgB,SAAS,CACVX,WAAW,IAGfiB,MAAM,WAEC,GACTX,KAAKX,0CAIN,IAAA8C,EAAA9C,KACL,OAAGA,KAAKI,MAAMC,UAEN0C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,QAAQC,QAAQ,UAKlCL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,wBACXN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,MAAM,yBACfR,EAAAC,EAAAC,cAAA,OAAKI,UAAU,sFACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACXN,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,GAAG,qBAAqBC,MAAM,iBAAiBC,aAAc7C,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,QA7HrJ,mBA6H+KoD,OAAQ,SAACC,GAC/K,IAAItD,EAAgBuC,EAAK1C,MAAMG,cAE/BO,IAAEuB,IAAI9B,EAAe,CAAC,cAAeuC,EAAK1C,MAAMI,gBAAiB,QAASqD,EAAEC,OAAOC,OAEnFjB,EAAK9B,SAAS,CACVT,cAAeA,IAGnBuC,EAAKpC,gCAGTqC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACIC,OAAQ,CACJP,MAAO,uBAEXvC,SAAU,SAAC0C,GACP,IAAItD,EAAgBuC,EAAK1C,MAAMG,cAE/B4B,QAAQC,IAAIyB,EAAEC,QAEdhD,IAAEuB,IAAI9B,EAAe,CAAC,cAAeuC,EAAK1C,MAAMI,gBAAiB,YAAaqD,EAAEC,OAAOC,OAEvFjB,EAAK9B,SAAS,CACVT,cAAeA,IAGnBuC,EAAKpC,8BAET2C,UAAU,mBACVa,UAAU,GAEVnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACIV,GAAG,wCACHC,MAAM,sBACNK,MAAM,aACNK,QAAoH,eAA3GtD,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,YAAa,cAClG4C,QAAQ,iBAGZL,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACIV,GAAG,4BACHC,MAAM,QACNK,MAAM,QACNK,QAAsG,UAA7FtD,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,aACrF4C,QAAQ,oBAMsE,UAA7FtC,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,aACzEuC,EAAAC,EAAAC,cAACF,EAAAC,EAAMqB,SAAP,KACItB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iEACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YAaXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,qBACXN,EAAAC,EAAAC,cAAA,SAAOI,UAAU,2BAA2BiB,QAAQ,uBAApD,oBACAvB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,8BACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBACXN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAAcI,GAAG,uBAC/BV,EAAAC,EAAAC,cAAA,UAAQc,MAAM,cAAd,cACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAM,aAAd,aACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAM,WAAd,iBAQxBhB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iEACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,qBACXN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQb,MAAM,wBAAwBN,QAAQ,QAAQoB,QAAS,SAACX,GAC5Df,EAAKjC,sBAMzB,MAGoG,eAA3GC,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,YAAa,cACtFuC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,MAAM,iBACfR,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iEACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACXN,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,GAAG,gBAAgBC,MAAM,gBAAgBC,aAAc7C,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,aAAcoD,OAAQ,SAACC,GAC7J,IAAItD,EAAgBuC,EAAK1C,MAAMG,cAE/BO,IAAEuB,IAAI9B,EAAe,CAAC,cAAeuC,EAAK1C,MAAMI,gBAAiB,YAAaqD,EAAEC,OAAOC,OAEvFjB,EAAK9B,SAAS,CACVT,cAAeA,IAGnBuC,EAAKpC,gCAETqC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,GAAG,gBAAgB/D,KAAK,WAAWgE,MAAM,gBAAgBC,aAAc7C,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,aAAcoD,OAAQ,SAACC,GAC7K,IAAItD,EAAgBuC,EAAK1C,MAAMG,cAE/BO,IAAEuB,IAAI9B,EAAe,CAAC,cAAeuC,EAAK1C,MAAMI,gBAAiB,YAAaqD,EAAEC,OAAOC,OAEvFjB,EAAK9B,SAAS,CACVT,cAAeA,IAGnBuC,EAAKpC,gCAETqC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,GAAG,WAAWC,MAAM,WAAWC,aAAc7C,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,QAASoD,OAAQ,SAACC,GAC9I,IAAItD,EAAgBuC,EAAK1C,MAAMG,cAE/BO,IAAEuB,IAAI9B,EAAe,CAAC,cAAeuC,EAAK1C,MAAMI,gBAAiB,OAAQqD,EAAEC,OAAOC,OAElFjB,EAAK9B,SAAS,CACVT,cAAeA,IAGnBuC,EAAKpC,iCAIbqC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACXN,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,GAAG,aAAaC,MAAM,sBAAsBC,aAAc7C,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,UAAWoD,OAAQ,SAACC,GAC7J,IAAItD,EAAgBuC,EAAK1C,MAAMG,cAE/BO,IAAEuB,IAAI9B,EAAe,CAAC,cAAeuC,EAAK1C,MAAMI,gBAAiB,SAAUqD,EAAEC,OAAOC,OAEpFjB,EAAK9B,SAAS,CACVT,cAAeA,IAGnBuC,EAAKpC,gCAETqC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,GAAG,cAAcC,MAAM,kCAAkCC,aAAc7C,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,mBAAoBiE,UAAQ,IACtL1B,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,GAAG,iBAAiBC,MAAM,0BAA0BC,aAAc7C,IAAEI,IAAIlB,KAAKI,MAAMG,cAAe,CAAC,cAAeP,KAAKI,MAAMI,gBAAiB,SAAUiE,UAAQ,MAI/K1B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,qBACXN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQb,MAAM,kBAAkBN,QAAQ,QAAQoB,QAAS,WACrD1B,EAAK4B,kCAIjB,KAEJ3B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,MAAM,mCAAmCF,UAAU,oBAC3DvC,IAAE6D,IAAInF,EAA6C,SAACoF,EAASC,GAC1D,IAAIC,EAAM,qBAAuBF,EAAQnB,IAAMmB,EAAQnF,MAEvD,OACIsD,EAAAC,EAAAC,cAAC8B,EAAA,eAAD,CAAgBtB,GAAIqB,EAAKA,IAAKA,EAAKF,QAASA,EAAShB,OAAQ,SAACC,GAC1D1B,QAAQC,IAAIyB,iBAhSMmB,IAAMC","file":"static/js/22.6bd57963.chunk.js","sourcesContent":["import React from 'react';\nimport { Spinner, Button, Input, RadioButtonGroup, Radio} from '@salesforce/design-system-react';\n\nimport SLDSSection from './SLDSSection';\nimport { GRAXEnvSetting } from './GRAXCloudConfigurationForm';\n\nimport {$, baseUrl} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nconst SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS = [\n    {\n        name: 'ANALYTICS_BATCH_SIZE',\n        type: 'number'\n    },\n    {\n        name: 'ANALYTICS_QUERY_FILE',\n        type: 'text'\n    },\n    {\n        name: 'MC_HOST',\n        type: 'text'\n    },\n    {\n        name: 'MC_PASSWORD', // NEED ENCRYPTATION\n        type: 'password'\n    },\n    {\n        name: 'MC_PORT',\n        type: 'text'\n    },\n    {\n        name: 'MC_USERNAME',\n        type: 'text'\n    }\n];\n\n/*const METADATA_BACKUP_SETTINGS = [\n    {\n        name: 'RETRIEVE_SALESFORCE_METADATA',\n        type: 'boolean'\n    }\n];*/\n\nconst NEW_DATASOURCE = 'New Data Source';\n\nexport default class GRAXCloudSFLoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            error: null,\n\n            configuration: {},\n            dataSourceIndex: 0,\n\n            isMetadataBackupEnabled: false\n        };\n\n        this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n\n        this.loginHandler = this.loginHandler.bind(this);\n    }\n\n    componentDidMount() {\n        var configuration = this.props.configuration ? _.cloneDeep(this.props.configuration) : {};\n\n        this.setState({\n            dataSourceIndex: this.props.dataSourceIndex,\n            configuration: configuration,\n            isLoading: false\n        });\n    }\n\n    triggerConfigurationChange() {\n        var dataSource = _.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex]);\n\n        if(this.props.onChange) {\n            this.props.onChange(this.state.configuration, dataSource);\n        }\n    }\n\n    loginHandler() {\n        if(this.props.onLogin) {\n            this.props.onLogin(this.state.configuration, this.state.dataSource);\n        }\n    }\n\n    getSFConnectionInfoHandler() {\n        var dataSource = _.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex]);\n\n        if(dataSource == null || dataSource.length === 0) {\n            return alert('Incomplete data');\n        }\n\n        if(dataSource.provider == null) {\n            return alert('Provider required');\n        }\n\n        if(dataSource.userName == null) {\n            return alert('User Name required');\n        }\n\n        if(dataSource.password == null) {\n            return alert('Password required');\n        }\n\n        if(dataSource.url == null) {\n            return alert('Url required');\n        } \n\n        this.setState({\n            isLoading: true\n        });\n\n        $.ajax({\n            type: 'POST',\n            url: baseUrl + '/grax-app/grax-cloud/salesforce/login',\n            contentType: \"application/json; charset=utf-8\",\n            data: JSON.stringify(dataSource),\n            success: function(data) {\n                console.log(data);\n\n                dataSource['instanceUrl'] = null;\n                dataSource['organizationId'] = null;\n\n                var configuration = this.state.configuration;\n\n                _.set(configuration, ['dataSources', this.state.dataSourceIndex], dataSource);\n\n                if(data.accessToken != null) {\n                    dataSource['instanceUrl'] = data.userInfo.instanceUrl;\n                    dataSource['organizationId'] = data.userInfo.organizationId;\n                } else {\n                    alert(JSON.parse(data));\n                }\n\n                this.setState({\n                    configuration: configuration,\n                    isLoading: false\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoading: false\n                });\n\n                alert('Error!');\n\n                return false;\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n            <div className=\"slds-p-around_medium\">\n                <SLDSSection title=\"Salesforce Connection\">\n                    <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center slds-p-bottom_medium\">\n                        <div className=\"slds-col\">\n                            <Input id=\"sf-connection-name\" label=\"Conection Name\" defaultValue={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'name'], NEW_DATASOURCE)} onBlur={(e) => {\n                                var configuration = this.state.configuration;\n                                \n                                _.set(configuration, ['dataSources', this.state.dataSourceIndex, 'name'], e.target.value);\n\n                                this.setState({\n                                    configuration: configuration\n                                });\n\n                                this.triggerConfigurationChange();\n                            }} />\n\n                            <RadioButtonGroup\n                                labels={{\n                                    label: 'Authentication Type'\n                                }}\n                                onChange={(e) => {\n                                    var configuration = this.state.configuration;\n\n                                    console.log(e.target);\n                                \n                                    _.set(configuration, ['dataSources', this.state.dataSourceIndex, 'provider'], e.target.value);\n\n                                    this.setState({\n                                        configuration: configuration\n                                    });\n\n                                    this.triggerConfigurationChange();\n                                }}\n                                className=\"slds-m-top_small\"\n                                disabled={true}\n                            >\n                                <Radio\n                                    id=\"authentication-type-username-password\"\n                                    label=\"Username / Password\"\n                                    value=\"salesforce\"\n                                    checked={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'provider'], 'salesforce') === 'salesforce'}\n                                    variant=\"button-group\"\n                                />\n\n                                <Radio\n                                    id=\"authentication-type-oauth\"\n                                    label=\"OAuth\"\n                                    value=\"oauth\"\n                                    checked={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'provider']) === 'oauth'}\n                                    variant=\"button-group\"\n                                />\n                            </RadioButtonGroup>\n                        </div>\n                    </div>\n\n                    {_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'provider']) === 'oauth' ? (\n                        <React.Fragment>\n                            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                                <div className=\"slds-col\">\n                                    {/*<Input id=\"sf-connection-name\" label=\"Conection Name\" defaultValue={this.state.dataSource.name} onBlur={(e) => {\n                                        var dataSource = this.state.dataSource;\n                                        \n                                        dataSource.name = e.target.value;\n                                        \n                                        this.setState({\n                                            dataSource: dataSource\n                                        });\n\n                                        this.triggerDataSourceChange();\n                                    }} />*/}\n\n                                    <div className=\"slds-form-element\">\n                                        <label className=\"slds-form-element__label\" htmlFor=\"sf-environment-type\">Environment Type</label>\n                                        <div className=\"slds-form-element__control\">\n                                            <div className=\"slds-select_container\">\n                                                <select className=\"slds-select\" id=\"sf-environment-type\">\n                                                    <option value=\"Production\">Production</option>\n                                                    <option value=\"Developer\">Developer</option>\n                                                    <option value=\"Sandbox\">Sandbox</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                                <div className=\"slds-col\">\n                                    <div className=\"slds-p-top_medium\">\n                                        <Button label=\"Login with SalesForce\" variant=\"brand\" onClick={(e) => {\n                                            this.loginHandler();\n                                        }} />\n                                    </div>\n                                </div>\n                            </div>\n                        </React.Fragment>\n                    ) : null}\n                </SLDSSection>\n\n                {_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'provider'], 'salesforce') === 'salesforce' ? (\n                    <SLDSSection title=\"Login Details\">\n                        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                            <div className=\"slds-col\">\n                                <Input id=\"sfdc-username\" label=\"SFDC Username\" defaultValue={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'userName'])} onBlur={(e) => {\n                                    var configuration = this.state.configuration;\n                                \n                                    _.set(configuration, ['dataSources', this.state.dataSourceIndex, 'userName'], e.target.value);\n\n                                    this.setState({\n                                        configuration: configuration\n                                    });\n\n                                    this.triggerConfigurationChange();\n                                }} />\n                                <Input id=\"sfdc-password\" type=\"password\" label=\"SFDC Password\" defaultValue={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'password'])} onBlur={(e) => {\n                                    var configuration = this.state.configuration;\n                                \n                                    _.set(configuration, ['dataSources', this.state.dataSourceIndex, 'password'], e.target.value);\n\n                                    this.setState({\n                                        configuration: configuration\n                                    });\n\n                                    this.triggerConfigurationChange();\n                                }} />\n                                <Input id=\"sfdc-url\" label=\"SFDC URL\" defaultValue={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'url'])} onBlur={(e) => {\n                                    var configuration = this.state.configuration;\n                                \n                                    _.set(configuration, ['dataSources', this.state.dataSourceIndex, 'url'], e.target.value);\n\n                                    this.setState({\n                                        configuration: configuration\n                                    });\n\n                                    this.triggerConfigurationChange();\n                                }} />\n                            </div>\n\n                            <div className=\"slds-col\">\n                                <Input id=\"sfdc-token\" label=\"SFDC Security Token\" defaultValue={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'token'])} onBlur={(e) => {\n                                    var configuration = this.state.configuration;\n                                \n                                    _.set(configuration, ['dataSources', this.state.dataSourceIndex, 'token'], e.target.value);\n\n                                    this.setState({\n                                        configuration: configuration\n                                    });\n\n                                    this.triggerConfigurationChange();\n                                }} />\n                                <Input id=\"sfdc-org-id\" label=\"SFDC Organization ID (18 Digit)\" defaultValue={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'organizationId'])} readOnly />\n                                <Input id=\"sfdc-org-title\" label=\"SFDC Organization Title\" defaultValue={_.get(this.state.configuration, ['dataSources', this.state.dataSourceIndex, 'name'])} readOnly />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-p-top_medium\">\n                            <Button label=\"Connect to SFDC\" variant=\"brand\" onClick={() => {\n                                this.getSFConnectionInfoHandler();\n                            }} />\n                        </div>\n                    </SLDSSection>\n                ) : null}\n\n                <SLDSSection title=\"Sync Analytics & Marketing Cloud\" className=\"slds-p-top_large\">\n                    {_.map(SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS, (setting, i) => {\n                        var key = 'grax-env-setting-' + (setting.id || setting.name)\n\n                        return (\n                            <GRAXEnvSetting id={key} key={key} setting={setting} onBlur={(e) => {\n                                console.log(e);\n                            }} />\n                        );\n                    })}\n                </SLDSSection>\n            </div>\n        )\n    }\n}"],"sourceRoot":""}