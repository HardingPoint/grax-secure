{"version":3,"sources":["components/GRAXSummaryChartsSimple.jsx","components/GRAXSummaryCharts.jsx"],"names":["GRAXSummaryChartsSimple","props","chart","React","createRef","summaryDataResults","fromDate","Date","toDate","setHours","setMinutes","state","isLoading","_currentOrgRecords","objectInput","objectSelection","objectOptions","chartData","chartSelected","this","loadSummaries","setState","summaryChartData","orgid","success","data","loadSummaryData","bind","summaryData","summaryNames","Set","sortedNames","forEach","summary","key","summaryMap","isObjectExcludedFromSummary","add","Array","sort","a","b","label","id","name","push","refreshChart","selectedObjects","option","selectedObject","tempData","spName","summaryResults","current","drawChart","chartSelection","selection","formatStartTime","startTime","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","getSeconds","formatDate","dt","size","variant","className","SLDSSection","title","GRAXDatePicker","onChange","event","date","value","defaultChecked","e","target","checked","assistiveText","labels","toggleDisabled","toggleEnabled","onClick","setDateFilter","isCollapsible","events","onRequestRemoveSelectedOption","onSelect","placeholder","options","comboboxFilterAndLimit","inputValue","limit","chartInput","selectChart","length","chartOptions","GRAXSummaryChartsChart","ref","showAttributeFilter","hideChartOptions","onChartSelect","Component","GRAXSummaryCharts","style","minHeight","padding","GRAXSummaryChartsAdvanced"],"mappings":"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","file":"static/js/17.789ad0bd.chunk.js","sourcesContent":["import { Button, Checkbox, Combobox, Spinner } from '@salesforce/design-system-react';\nimport React from 'react';\n\nimport { orgid } from '../lib/grax-data-lake';\nimport summaryChartData from '../lib/summaryChartData';\nimport { isObjectExcludedFromSummary } from '../lib/summaryChartsUtils';\nimport { comboboxFilterAndLimit } from '../lib/utils';\nimport GRAXDatePicker from './GRAXDatePicker';\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\nimport SLDSSection from './SLDSSection';\n\nexport default class GRAXSummaryChartsSimple extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chart = React.createRef();\n\n        this.summaryDataResults = [];\n        const fromDate = new Date();\n        const toDate = new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            fromDate: fromDate,\n            toDate: toDate,\n            _currentOrgRecords: true,\n\n            objectInput: '',\n            objectSelection: [],\n            objectOptions: [],\n\n            chartData: [],\n            chartSelected: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadSummaries = function(){\n            this.setState({\n                isLoading: true\n            });\n            summaryChartData({\n                orgid: this.state._currentOrgRecords ? orgid : null,\n                fromDate: this.state.fromDate,\n                toDate:this.state.toDate,\n            }, (success, data) => {\n                if (success){\n                    this.summaryDataResults = data\n                    this.setState({\n                        isLoading: false\n                    }, function(){\n                        this.loadSummaryData();\n                    });\n                } else {\n                   this.setState({\n                        isLoading: false,\n                    });\n                }\n            })\n        }.bind(this)\n\n        this.loadSummaryData = function(){\n            let summaryData = this.summaryDataResults;\n            let summaryNames = new Set();\n            let sortedNames = [];\n\n            summaryData.forEach(summary => {\n              for (let key in summary.summaryMap) {\n                if (!isObjectExcludedFromSummary(key)) {\n                  summaryNames.add(key);\n                }\n              }\n            });\n\n            sortedNames = new Array(...summaryNames);\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            let objectOptions = [{label:\"All\", id:\"ALL\"}];\n            sortedNames.forEach(function(name){\n                objectOptions.push( {label: name, id: name} );\n            });\n\n            this.setState({\n                isLoading: false,\n                objectOptions: objectOptions,\n                objectSelection: [objectOptions[0]]\n            }, this.refreshChart );\n        };\n\n        this.refreshChart = function(){\n            let summaryData = this.summaryDataResults;\n            let selectedObjects = [];\n            let chartData = [];\n\n            if( this.state.objectSelection && this.state.objectSelection[0].id !== \"ALL\" ){\n                selectedObjects.push( this.state.objectSelection[0].id );\n            }else{\n                this.state.objectOptions.forEach( function(option){\n                    selectedObjects.push( option.id );\n                } );\n            }\n\n\n            summaryData.forEach(summary => {\n              selectedObjects.forEach(selectedObject => {\n                if (\n                  !isObjectExcludedFromSummary(selectedObject) &&\n                  summary.summaryMap[selectedObject]\n                ) {\n                  const tempData = {\n                    summaryMap: {\n                      [selectedObject]: { ...summary.summaryMap[selectedObject] }\n                    },\n                    spName: summary.spName,\n                    summaryResults: {\n                      ...summary.summaryMap[selectedObject]\n                    }\n                  };\n\n                  chartData.push(tempData);\n                }\n              });\n            });\n\n            this.setState({\n                isLoading: false,\n                chartData: chartData\n            },function(){\n                this.chart.current.drawChart();\n            }.bind(this));\n        }\n\n        this.chartSelection = function(selection){\n            this.setState( {\n                chartSelected: selection\n            } );\n        };\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        this.setState({\n            isLoading: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLoading && (<Spinner size=\"large\" variant=\"brand\" />\n\t\t\t\t)}\n                <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Filter Criteria\" >\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n\n                                <dl className=\"slds-list_stacked\">\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                                        <label className=\"slds-form-element__label\" >From</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    fromDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.fromDate }\n                                        />\n                                    </dd>\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                                        <label className=\"slds-form-element__label\" >To</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    toDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.toDate }\n                                        />\n                                    </dd>\n                                </dl>\n                            </div>\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(e) => {\n                                        this.setState({\n                                            _currentOrgRecords: !e.target.checked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n\n                                <div className=\"slds-float_right\">\n                                    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                                        this.loadSummaries();\n                                        this.chart.current.setDateFilter( this.state.fromDate, this.state.toDate );\n                                        this.setState( {\n                                            chartSelected: this.chart.current.state.chartSelection\n                                        } );\n                                    }} />\n                                </div>\n                            </div>\n                        </SLDSSection>\n                    </div>\n                    { this.state.objectOptions && (\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                                <Combobox\n                                    events={{\n                                        onChange: (event, { value }) => {\n                                            this.setState( {\n                                                objectInput : value\n                                            }, this.refreshChart );\n                                        },\n                                        onRequestRemoveSelectedOption: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            } );\n                                        },\n                                        onSelect: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            }, this.refreshChart );\n                                        },\n                                    }}\n\n                                    labels={{\n                                        label: 'Salesforce Object',\n                                        placeholder: '-- SELECT SALESFORCE OBJECT --',\n                                    }}\n\n                                    options={comboboxFilterAndLimit({\n                                        inputValue: this.state.objectInput,\n                                        limit: 1000,\n                                        options: this.state.objectOptions,\n                                        selection: this.state.objectSelection\n                                    })}\n\n                                    selection={this.state.objectSelection}\n                                    value={this.state.objectInput}\n                                    variant=\"readonly\"\n                                />\n                            </div>\n\n                            {this.chart.current &&\n                            (<Combobox\n                                events={{\n                                    onChange: (event, { value }) => {\n                                        this.chart.current.chartInput = value;\n                                        this.chart.current.setState( {\n                                            chartInput : value\n                                        } );\n                                    },\n                                    onRequestRemoveSelectedOption: (event, data) => {\n                                        this.chart.current.selectChart(data.selection)\n                                    },\n                                    onSelect: (event, data) => {\n                                        if( data.selection.length > 0 ){\n                                            this.chart.current.selectChart(data.selection);\n\n                                            this.setState( {\n                                                chartSelected: data.selection\n                                            } );\n                                        }\n                                    },\n                                }}\n\n                                labels={{\n                                    label: 'Chart Type',\n                                    placeholder: '-- SELECT CHART TYPE --',\n                                }}\n\n                                options={comboboxFilterAndLimit({\n                                    inputValue: this.chart.current.state.chartInput,\n                                    limit: 1000,\n                                    options: this.chart.current.state.chartOptions,\n                                    selection: this.state.chartSelected?this.state.chartSelected:this.chart.current.state.chartSelection\n                                })}\n\n                                selection={this.state.chartSelected}\n                                value={this.chart.current.state.chartInput}\n                                variant=\"readonly\"\n                            />)}\n                        </SLDSSection>\n                    </div>) }\n                </div>\n\n                <GRAXSummaryChartsChart\n                    ref={this.chart}\n                    summaryData={this.state.chartData}\n                    showAttributeFilter={false}\n                    hideChartOptions={true}\n                    onChartSelect={(event, selection)=>{\n                        this.chartSelection( selection );\n                    }}\n                />\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { Tabs, TabsPanel, Spinner } from '@salesforce/design-system-react';\n\n// import '../public/js/jquery.sldsTree.js';\n\n// import '../public/js/googlecharts.js';\nimport GRAXSummaryChartsSimple from './GRAXSummaryChartsSimple';\nimport GRAXSummaryChartsAdvanced from './GRAXSummaryChartsAdvanced';\n\nexport default class GRAXSummaryCharts extends React.Component {\n    constructor(props) {\n        super(props);\n\t\t\n\t\tthis.state = {\n            isLoading: true\n        };\n    }\n\n    componentDidMount() {\n\t\tthis.setState({\n\t\t\tisLoading: false\n\t\t});\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n\t\t\t<div style={{ minHeight: 1000 }} >\n\t\t\t\t<Tabs variant={this.props.variant} id=\"tabs-simple-advanced\" >\n\t\t\t\t\t<TabsPanel label=\"Simple\">\n\t\t\t\t\t\t<GRAXSummaryChartsSimple />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t\t<TabsPanel label=\"Advanced\" style={{padding:0}} >\n\t\t\t\t\t\t<GRAXSummaryChartsAdvanced />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t</Tabs>\n\t\t\t</div>\n        )\n    }\n}\n"],"sourceRoot":""}