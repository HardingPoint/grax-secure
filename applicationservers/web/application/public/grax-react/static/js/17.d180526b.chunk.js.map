{"version":3,"sources":["components/GRAXSummaryChartsSimple.jsx","components/GRAXSummaryCharts.jsx"],"names":["GRAXSummaryChartsSimple","props","chart","React","createRef","summaryDataResults","fromDate","Date","toDate","setHours","setMinutes","state","isLoading","_currentOrgRecords","objectInput","objectSelection","objectOptions","chartData","chartSelected","this","loadSummaries","setState","getFullYear","getMonth","toString","padStart","getDate","query","getUTCTimeRangeFromUserDate","date","AND","push","orgid","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_index","_select","_q","JSON","stringify","_limit","_from","_sort","_sortType","_ignore_unavailable","success","data","results","loadSummaryData","bind","error","xhr","status","err","console","summaryData","summaryNames","Set","sortedNames","forEach","summary","key","summaryMap","isObjectExcludedFromSummary","add","Array","sort","a","b","label","id","name","refreshChart","selectedObjects","option","selectedObject","tempData","spName","summaryResults","current","drawChart","chartSelection","selection","formatStartTime","startTime","getHours","getMinutes","getSeconds","formatDate","dt","size","variant","className","SLDSSection","title","GRAXDatePicker","onChange","event","value","defaultChecked","e","target","checked","assistiveText","labels","toggleDisabled","toggleEnabled","onClick","setDateFilter","isCollapsible","events","onRequestRemoveSelectedOption","onSelect","placeholder","options","comboboxFilterAndLimit","inputValue","limit","chartInput","selectChart","length","chartOptions","GRAXSummaryChartsChart","ref","showAttributeFilter","hideChartOptions","onChartSelect","Component","GRAXSummaryCharts","style","minHeight","padding","GRAXSummaryChartsAdvanced"],"mappings":"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","file":"static/js/17.d180526b.chunk.js","sourcesContent":["import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox, Button } from \"@salesforce/design-system-react\";\n\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport $ from 'jquery';\nimport { comboboxFilterAndLimit, getUTCTimeRangeFromUserDate } from \"../lib/utils\";\n\nimport { isObjectExcludedFromSummary } from \"../lib/summaryChartsUtils\";\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nexport default class GRAXSummaryChartsSimple extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chart = React.createRef();\n\n        this.summaryDataResults = [];\n        let fromDate = new Date();\n        let toDate = new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            fromDate: fromDate,\n            toDate: toDate,\n            _currentOrgRecords: true,\n\n            objectInput: '',\n            objectSelection: [],\n            objectOptions: [],\n\n            chartData: [],\n            chartSelected: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadSummaries =  function(){\n            this.setState({\n                isLoading: true\n            });\n\n            let fromDate = this.state.fromDate;\n            fromDate = fromDate.getFullYear() + '-' + (fromDate.getMonth()+1).toString().padStart(2,0) + '-' + fromDate.getDate().toString().padStart(2,0);\n            let toDate = this.state.toDate;\n            toDate = toDate.getFullYear() + '-' + (toDate.getMonth()+1).toString().padStart(2,0) + '-' + toDate.getDate().toString().padStart(2,0);\n\n            fromDate = getUTCTimeRangeFromUserDate({ date: fromDate })[0];\n            toDate = getUTCTimeRangeFromUserDate({ date: toDate })[1];\n\n            let query = {\"AND\": [\n              {\"GTE\": {\"summaryResults.startTime\": fromDate}},\n              {\"LTE\": {\"summaryResults.startTime\": toDate}}\n            ]};\n\n            if(this.state._currentOrgRecords) {\n              query.AND.push({\"KEQ\": {\"graxorgid\": orgid}});\n            }\n\n            $.ajax({\n                type: 'GET',\n\n                url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                    action:'load',\n                    dataIndex: 'graxgrax_backup_summaryindex',\n                    _index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n                    _select: 'summaryMap,spName,CreatedDate,summaryResults',\n                    _q: JSON.stringify(query),\n                    _limit: 1000,\n                    _from: 0,\n                    _sort: '',\n                    _sortType: '',\n                    _ignore_unavailable: true\n                }),\n\n                success: function(data) {\n                    // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n                    if( data.results ){\n                        this.summaryDataResults = data.results;\n                    }\n\n                    this.setState({\n                        isLoading: false\n                    }, function(){\n                        this.loadSummaryData();\n                    });\n                }.bind(this),\n                error: function(xhr, status, err) {\n                    console.error(xhr, status, err);\n\n                    this.setState({\n                        isLoading: false,\n                    });\n                }.bind(this)\n            });\n        };\n\n        this.loadSummaryData = function(){\n            let summaryData = this.summaryDataResults;\n            let summaryNames = new Set();\n            let sortedNames = [];\n\n            summaryData.forEach(summary => {\n              for (let key in summary.summaryMap) {\n                if (!isObjectExcludedFromSummary(key)) {\n                  summaryNames.add(key);\n                }\n              }\n            });\n\n            sortedNames = new Array(...summaryNames);\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            let objectOptions = [{label:\"All\", id:\"ALL\"}];\n            sortedNames.forEach(function(name){\n                objectOptions.push( {label: name, id: name} );\n            });\n\n            this.setState({\n                isLoading: false,\n                objectOptions: objectOptions,\n                objectSelection: [objectOptions[0]]\n            }, this.refreshChart );\n        };\n\n        this.refreshChart = function(){\n            let summaryData = this.summaryDataResults;\n            let selectedObjects = [];\n            let chartData = [];\n\n            if( this.state.objectSelection && this.state.objectSelection[0].id !== \"ALL\" ){\n                selectedObjects.push( this.state.objectSelection[0].id );\n            }else{\n                this.state.objectOptions.forEach( function(option){\n                    selectedObjects.push( option.id );\n                } );\n            }\n\n\n            summaryData.forEach(summary => {\n              selectedObjects.forEach(selectedObject => {\n                if (\n                  !isObjectExcludedFromSummary(selectedObject) &&\n                  summary.summaryMap[selectedObject]\n                ) {\n                  const tempData = {\n                    summaryMap: {\n                      [selectedObject]: { ...summary.summaryMap[selectedObject] }\n                    },\n                    spName: summary.spName,\n                    summaryResults: {\n                      ...summary.summaryMap[selectedObject]\n                    }\n                  };\n\n                  chartData.push(tempData);\n                }\n              });\n            });\n\n            this.setState({\n                isLoading: false,\n                chartData: chartData\n            },function(){\n                this.chart.current.drawChart();\n            }.bind(this));\n        }\n\n        this.chartSelection = function(selection){\n            this.setState( {\n                chartSelected: selection\n            } );\n        };\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        this.setState({\n            isLoading: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLoading && (<Spinner size=\"large\" variant=\"brand\" />\n\t\t\t\t)}\n                <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Filter Criteria\" >\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n\n                                <dl className=\"slds-list_stacked\">\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                                        <label className=\"slds-form-element__label\" >From</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    fromDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.fromDate }\n                                        />\n                                    </dd>\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                                        <label className=\"slds-form-element__label\" >To</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    toDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.toDate }\n                                        />\n                                    </dd>\n                                </dl>\n                            </div>\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(e) => {\n                                        this.setState({\n                                            _currentOrgRecords: !e.target.checked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n\n                                <div className=\"slds-float_right\">\n                                    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                                        this.loadSummaries();\n                                        this.chart.current.setDateFilter( this.state.fromDate, this.state.toDate );\n                                        this.setState( {\n                                            chartSelected: this.chart.current.state.chartSelection\n                                        } );\n                                    }} />\n                                </div>\n                            </div>\n                        </SLDSSection>\n                    </div>\n                    { this.state.objectOptions && (\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                                <Combobox\n                                    events={{\n                                        onChange: (event, { value }) => {\n                                            this.setState( {\n                                                objectInput : value\n                                            }, this.refreshChart );\n                                        },\n                                        onRequestRemoveSelectedOption: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            } );\n                                        },\n                                        onSelect: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            }, this.refreshChart );\n                                        },\n                                    }}\n\n                                    labels={{\n                                        label: 'Salesforce Object',\n                                        placeholder: '-- SELECT SALESFORCE OBJECT --',\n                                    }}\n\n                                    options={comboboxFilterAndLimit({\n                                        inputValue: this.state.objectInput,\n                                        limit: 1000,\n                                        options: this.state.objectOptions,\n                                        selection: this.state.objectSelection\n                                    })}\n\n                                    selection={this.state.objectSelection}\n                                    value={this.state.objectInput}\n                                    variant=\"readonly\"\n                                />\n                            </div>\n\n                            {this.chart.current &&\n                            (<Combobox\n                                events={{\n                                    onChange: (event, { value }) => {\n                                        this.chart.current.chartInput = value;\n                                        this.chart.current.setState( {\n                                            chartInput : value\n                                        } );\n                                    },\n                                    onRequestRemoveSelectedOption: (event, data) => {\n                                        this.chart.current.selectChart(data.selection)\n                                    },\n                                    onSelect: (event, data) => {\n                                        if( data.selection.length > 0 ){\n                                            this.chart.current.selectChart(data.selection);\n\n                                            this.setState( {\n                                                chartSelected: data.selection\n                                            } );\n                                        }\n                                    },\n                                }}\n\n                                labels={{\n                                    label: 'Chart Type',\n                                    placeholder: '-- SELECT CHART TYPE --',\n                                }}\n\n                                options={comboboxFilterAndLimit({\n                                    inputValue: this.chart.current.state.chartInput,\n                                    limit: 1000,\n                                    options: this.chart.current.state.chartOptions,\n                                    selection: this.state.chartSelected?this.state.chartSelected:this.chart.current.state.chartSelection\n                                })}\n\n                                selection={this.state.chartSelected}\n                                value={this.chart.current.state.chartInput}\n                                variant=\"readonly\"\n                            />)}\n                        </SLDSSection>\n                    </div>) }\n                </div>\n\n                <GRAXSummaryChartsChart\n                    ref={this.chart}\n                    summaryData={this.state.chartData}\n                    showAttributeFilter={false}\n                    hideChartOptions={true}\n                    onChartSelect={(event, selection)=>{\n                        this.chartSelection( selection );\n                    }}\n                />\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { Tabs, TabsPanel, Spinner } from '@salesforce/design-system-react';\n\n// import '../public/js/jquery.sldsTree.js';\n\n// import '../public/js/googlecharts.js';\nimport GRAXSummaryChartsSimple from './GRAXSummaryChartsSimple';\nimport GRAXSummaryChartsAdvanced from './GRAXSummaryChartsAdvanced';\n\nexport default class GRAXSummaryCharts extends React.Component {\n    constructor(props) {\n        super(props);\n\t\t\n\t\tthis.state = {\n            isLoading: true\n        };\n    }\n\n    componentDidMount() {\n\t\tthis.setState({\n\t\t\tisLoading: false\n\t\t});\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n\t\t\t<div style={{ minHeight: 1000 }} >\n\t\t\t\t<Tabs variant={this.props.variant} id=\"tabs-simple-advanced\" >\n\t\t\t\t\t<TabsPanel label=\"Simple\">\n\t\t\t\t\t\t<GRAXSummaryChartsSimple />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t\t<TabsPanel label=\"Advanced\" style={{padding:0}} >\n\t\t\t\t\t\t<GRAXSummaryChartsAdvanced />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t</Tabs>\n\t\t\t</div>\n        )\n    }\n}\n"],"sourceRoot":""}