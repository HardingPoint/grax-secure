{"version":3,"sources":["components/SLDSSection.jsx","components/GRAXSObjectCombobox.jsx","components/GRAXOrgCombobox.jsx","components/GRAXRestoreMappingFields.jsx","components/GRAXRestoreMappingDefaults.jsx","components/GRAXRestoreMapping.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","GRAXSObjectCombobox","options","inputValue","selection","isLoaded","error","$","ajax","type","url","baseUrl","GetParams","action","data","_bools","_select","success","_","map","item","i","index","toLowerCase","selectionKeys","filter","indexOf","onLoad","onSelect","length","xhr","status","err","console","toString","Fragment","classNameMenu","events","onChange","event","value","onRequestRemoveSelectedOption","labels","placeholder","comboboxFilterAndLimit","limit","variant","required","menuItem","style","position","height","GRAXOrgCombobox","GRAXRestoreMappingFilter","checked","val","log","onChangeHandler","target","disabled","errorId","option","deselectable","GRAXRestoreMappingDataLakeField","isOpened","filterOptionsHandler","onOpen","onClose","hasStaticAlignment","multiple","GRAXRestoreMappingFields","_graxFieldOptions","_graxFieldOptionsList","_sfFieldOptions","_sfFieldOptionsList","_sfMappedFields","_error","_filterSelection","isPreviouslyMapped","graxFieldOptions","sfMappedFields","sfFieldOptions","forEach","sfField","mappedFields","reduce","_selection","graxFieldName","push","sfMappedFieldsList","Object","keys","graxMappedFieldsList","flatten","values","nextProps","nextState","objectName","renderKey","fieldName","mappedValues","onMappingChange","sortBy","maxHeight","scope","data-label","width","color","onMappingChangeHandler","GRAXRestoreMappingSFField","_isMounted","onRequestOpen","onRequestClose","menuPosition","GRAXRestoreMappingDefaults","_sfDefaultValues","_mappingOptions","_maskOptionsString","_maskOptionsPhone","_maskOptionsEmail","_maskOptionsDate","mapping","masking","isOverride","selectedField","defaultValue","defaultValueStruct","getDefaultValueStruct","tempMsk","mskOpt","override","sfDefaultValues","_sfDefaultValuesFields","_sfDefaultValuesList","getDefaultValuesList","sfDefaultValue","onDefaultValueChangeHandler","splice","texttransform","display","align","content","marginRight","cursor","sfFieldName","find","onBlur","date","formatter","datePickerFormatter","parser","datePickerParser","defaultChecked","persist","sfType","removeFieldHandler","addAnotherFieldHandler","normalizeFieldType","typeName","nft","HAS_CHANGES_MESSAGE","GRAXRestoreMapping","selectedSObject","isLoading","_isCustomOrg","_customOrg","customMapping","hasChanges","isSaving","resetConfirmIsOpen","resetConfirmIsChecked","resetConfirmCallback","renderCounter","confirm","onMappingSettingsChange","fieldMap","omit","isArray","isEmpty","assign","customMappingToSave","contentType","JSON","stringify","sObjectChangeHandler","pageParams","datalakeIndex","maxWidth","_onOrgSelectionChangeHandler","_onOrgSelectionRemoveHandler","isMapLoaded","_onMappingChangeHandler","getCustomMappingToSave","saveCustomMapping","dismissible","footer","prompt","propTypes","PropTypes","string","defaultProps","RadioGroup","shortid","classNames","RadioButtonGroup","rest"],"mappings":"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","file":"static/js/12.61bfd36f.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/describeGlobal/sobjects' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable,layoutable,triggerable',\n                _select: 'name,label'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.name,\n                        label: item.label,\n                        index: 'grax' + item.name.toLowerCase() + 'index'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.selectionKeys != null) {\n                    this.setState({\n                        selection: _.filter(this.state.options, (item) => this.props.selectionKeys.indexOf(item.index) !== -1 || this.props.selectionKeys.indexOf(item.id) !== -1)\n                    });\n                }\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n\n                if(this.props.onSelect && this.state.selection != null && this.state.selection.length > 0) {\n                    this.props.onSelect(null, this.state.selection);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                if (this.props.onRequestRemoveSelectedOption && this.props.onRequestRemoveSelectedOption(event, data.selection)) {\n                                    this.setState({\n                                        inputValue: '',\n                                        selection: data.selection,\n                                    });\n\n                                    return true;\n                                }\n\n                                return false;\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Object',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                        menuItem={this.props.menuItem}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXOrgCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getOrgList' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.id,\n                        label: item.id + ' (' + item.label + ')'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXOrgCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Org',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox, Icon, RadioButtonGroup, Radio} from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nconst IS_MAPPED_FIELD = 'Is Mapped?'\nconst DATALAKE_FIELD = 'Datalake Field';\nconst SALESFORCE_FIELD = 'Salesforce Field';\n\n\nconst MAPPED_FIELDS = 'Mapped Fields';\nconst UNMAPPED_FIELDS = 'Un-mapped fields';\nconst ALL_FIELDS = 'All fields';\n\n\nclass GRAXRestoreMappingFilter extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n\t\tthis.state = {\n            checked: ALL_FIELDS\n        };\n    }\n\n    onChangeHandler(val) {\n        console.log(\"onChangeHandler\");\n        console.log(val);\n        this.setState({\n            checked: val\n        });\n\n        if(this.props.onChange) {\n            this.props.onChange(val);\n        }\n    }\n\n    render() {\n        const options = [MAPPED_FIELDS, UNMAPPED_FIELDS, ALL_FIELDS];\n\n\t\treturn (\n            <div className=\"slds-p-bottom_medium\">\n                <RadioButtonGroup\n                    onChange={(event) => this.onChangeHandler(event.target.value)}\n\n                    disabled={this.props.disabled}\n                    required={this.props.required}\n                    name={this.props.name}\n                    errorId={this.props.errorId}\n                >\n                    {_.map(options, function(option, i) {\n                        return (\n                            <Radio\n                                key={'option' + i}\n                                id={option}\n                                label={option}\n                                value={option}\n                                checked={this.state.checked === option}\n                                variant=\"button-group\"\n                                deselectable={true}\n                            />\n                        );\n                    }.bind(this))}\n                </RadioButtonGroup>\n            </div>\n\t\t);\n\t}\n}\n\n\nclass GRAXRestoreMappingDataLakeField extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        if(this.props.selection) {\n            this.setState({\n                selection: this.props.selection\n            })\n        }\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options;\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXRestoreMappingDataLakeField'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            this.setState({\n                                isOpened: true\n                            });\n                        },\n                        onClose: (event, data) => {\n                            this.setState({\n                                isOpened: false\n                            });\n                        }\n                    }}\n                    labels={{\n                        placeholder: 'Select DataLake Field',\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant=\"readonly\"\n                    hasStaticAlignment={true}\n                    multiple={true}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXRestoreMappingFields extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _graxFieldOptions: null,\n            _graxFieldOptionsList: null,\n            _sfFieldOptions: null,\n            _sfFieldOptionsList: null,\n            _sfMappedFields: null,\n            _error: null,\n\n            _filterSelection: ALL_FIELDS,\n            isPreviouslyMapped: false\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.state._graxFieldOptions != null && this.state._sfFieldOptions != null);\n    }\n\n    componentDidMount() {\n\n        var _graxFieldOptionsList = _.map(this.props.graxFieldOptions, function(item, i) {\n            return item.id;\n        });\n\n        /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n        var _sfMappedFields = this.props.sfMappedFields || {};\n\n        var _sfFieldOptions = this.props.sfFieldOptions;\n\n        // Map selection\n        _.forEach(_sfFieldOptions, (sfField, i) => {\n            var mappedFields = _.reduce(_sfMappedFields[sfField.id] || [sfField.id], (_selection, graxFieldName) => {\n                if (_graxFieldOptionsList.indexOf(graxFieldName) !== -1) {\n                    _selection.push(graxFieldName);\n                }\n\n                return _selection;\n            }, []);\n\n            if(mappedFields.length > 0) {\n                _sfMappedFields[sfField.id] = mappedFields;\n            }\n        });\n\n        this.setState({\n            _graxFieldOptions: this.props.graxFieldOptions,\n            _graxFieldOptionsList: _graxFieldOptionsList,\n            _sfFieldOptions: _sfFieldOptions,\n            //_sfFieldOptionsList: _sfFieldOptionsList,\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.state._filterSelection !== nextState._filterSelection\n            || this.props.objectName !== nextProps.objectName\n            || this.state._graxFieldOptions !== nextState._graxFieldOptions\n            || this.state._sfFieldOptions !== nextState._sfFieldOptions\n            || this.props.graxFieldOptions !== nextProps.graxFieldOptions\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfMappedFields !== nextProps.sfMappedFields\n            || this.props.renderKey !== nextProps.renderKey\n        );\n    }\n\n    onMappingChangeHandler(fieldName, selection) {\n        var mappedValues = _.map(selection, function(item, i) {\n            return item.id;\n        });\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        if(selection) {\n            _sfMappedFields[fieldName] = mappedValues;\n        } else {\n            delete _sfMappedFields[fieldName];\n        }\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n\n        if(this.props.onMappingChange) {\n            this.props.onMappingChange(fieldName, mappedValues);\n        }\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            var sfFieldOptions = this.state._sfFieldOptions;\n\n            if(this.state._filterSelection === MAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state._sfMappedFields != null\n                        && this.state.sfMappedFieldsList.indexOf(item.id) !== -1\n                        && this.state._sfMappedFields[item.id].length !== 0\n                    );\n                });\n            }\n\n            if(this.state._filterSelection === UNMAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state.sfMappedFieldsList.indexOf(item.id) === -1\n                        || this.state._sfMappedFields[item.id] == null\n                        || this.state._sfMappedFields[item.id].length === 0\n                    );\n                });\n            }\n\n            sfFieldOptions = _.sortBy(sfFieldOptions, ['id']);\n\n            return (\n                <React.Fragment>\n                    <GRAXRestoreMappingFilter onChange={(val) => this.setState({_filterSelection: val})} />\n\n                    <div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    {this.state._filterSelection === ALL_FIELDS && (\n                                        <th className=\"slds-text-title_caps\" scope=\"col\">\n                                            <div className=\"slds-truncate\" title={IS_MAPPED_FIELD}>{IS_MAPPED_FIELD}</div>\n                                        </th>\n                                    )}\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={DATALAKE_FIELD}>{DATALAKE_FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>{SALESFORCE_FIELD}</div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(sfFieldOptions, function(sfField, i) {\n                                    var fieldName = sfField.id;\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={fieldName}>\n                                            {this.state._filterSelection === ALL_FIELDS && (\n                                                <td data-label={IS_MAPPED_FIELD} style={{width: '10vw'}}>\n                                                    {this.state._sfMappedFields[fieldName] != null && this.state._sfMappedFields[fieldName].length > 0 && (\n                                                        <Icon\n                                                            category=\"utility\"\n                                                            color=\"warning\"\n                                                            name=\"check\"\n                                                            size=\"x-small\"\n                                                        />\n                                                    )}\n                                                </td>\n                                            )}\n                                            <td data-label={SALESFORCE_FIELD} style={{width: '60vw'}}>\n                                                <GRAXRestoreMappingDataLakeField\n                                                    options={this.state._graxFieldOptions}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return this.state.graxMappedFieldsList.indexOf(option.id) === -1 && sfField.type === option.type;\n                                                        });\n                                                    }}\n                                                    selection={_.map(this.state._sfMappedFields[fieldName], (graxFieldName, i) => {\n                                                        return {\n                                                            id: graxFieldName,\n                                                            label: graxFieldName\n                                                        };\n                                                    })}\n                                                    onSelect={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                />\n                                            </td>\n                                            <td data-label={DATALAKE_FIELD} style={{width: '30vw'}}>\n                                                <div className=\"slds-truncate\" title={sfField.id}>{sfField.id}</div>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from \"react\";\nimport _ from \"lodash\";\n\nimport {\n  Spinner,\n  Combobox,\n  Input,\n  Datepicker,\n  Button,\n  Checkbox,\n  Tooltip,\n  Icon\n} from \"@salesforce/design-system-react\";\n\nimport { comboboxFilterAndLimit, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst SALESFORCE_FIELD = \"Salesforce Field\";\nconst MAPPING = \"Option\";\nconst DEFAULT_VALUE = \"Value\";\nconst IS_OVERRIDE = \"Is Override?\";\n\nclass GRAXRestoreMappingSFField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._isMounted = false;\n\n    this.state = {\n      inputValue: \"\",\n      selection: [],\n      isOpened: false\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this.props.selection) {\n      this.setState({\n        selection: this.props.selection\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  filterOptionsHandler() {\n    var options = this.props.options;\n\n    if (this.props.filterOptionsHandler && this.state.isOpened) {\n      options = this.props.filterOptionsHandler(options);\n    }\n\n    return comboboxFilterAndLimit({\n      inputValue: this.state.inputValue,\n      limit: 1000,\n      options: options,\n      selection: this.state.selection\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Combobox\n          classNameMenu={\"scrollable-GRAXRestoreMappingSFField\"}\n          events={{\n            onChange: (event, { value }) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: value\n                });\n              }\n\n              if (this.props.onChange) {\n                this.props.onChange(event, value);\n              }\n            },\n            onRequestRemoveSelectedOption: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onRequestRemoveSelectedOption) {\n                this.props.onRequestRemoveSelectedOption(event, data.selection);\n              }\n            },\n            onSelect: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onSelect) {\n                this.props.onSelect(event, data.selection);\n              }\n            },\n            onRequestOpen: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: true\n                });\n              }\n            },\n            onRequestClose: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: false\n                });\n              }\n            },\n            onClose: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: false\n                });\n              }\n            }\n          }}\n          labels={{\n            placeholder: \"Select SalesForce Field\"\n          }}\n          options={this.filterOptionsHandler()}\n          selection={this.state.selection}\n          value={this.state.inputValue}\n          variant=\"readonly\"\n          menuPosition=\"overflowBoundaryElement\"\n          hasStaticAlignment={true}\n          isOpen={this.state.isOpened}\n          hasStaticAlignment={true}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default class GRAXRestoreMappingDefaults extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _sfFieldOptions: null,\n      _sfFieldOptionsList: null,\n      _sfDefaultValues: null,\n      _mappingOptions: [{ id: \"DEFAULT\", label: \"Default To\" }, { id: \"MASK\", label: \"Mask\" }],\n      _maskOptionsString: [\n        { id: \"STRING\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"STRINGRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsPhone: [\n        { id: \"PHONE\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"PHONERND\", label: \"Randomize\" }\n      ],\n      _maskOptionsEmail: [\n        { id: \"EMAIL\", label: \"Mask the domain with @maskeddomain.com\" },\n        { id: \"EMAILRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsDate: [\n        { id: \"DATE\", label: \"Mask the year with 2000\" },\n        { id: \"DATERND\", label: \"Randomize\" }\n      ],\n      _error: null\n    };\n  }\n\n  isLoaded() {\n    return this.state._error || this.state._sfFieldOptions != null;\n  }\n\n  getDefaultValueStruct() {\n    return {\n      id: null,\n      mapping: [this.state._mappingOptions[0]],\n      masking: null,\n      value: null,\n      isOverride: false,\n      selectedField: null\n    };\n  }\n\n  getDefaultValuesList(_sfDefaultValues) {\n    return _.map(_sfDefaultValues, (defaultValue, fieldName) => {\n      var defaultValueStruct = this.getDefaultValueStruct();\n\n      defaultValueStruct.id = fieldName;\n      defaultValueStruct.mapping = _.filter(this.state._mappingOptions, (option, i) => {\n        return option.id === defaultValue.mapping;\n      });\n      if (!defaultValueStruct.mapping) {\n        defaultValueStruct.mapping = [this.state._mappingOptions[0]];\n      }\n      let tempMsk = [];\n      this.state._maskOptionsString.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsPhone.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsEmail.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsDate.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n\n      defaultValueStruct.masking = _.filter(tempMsk, (option, i) => {\n        return option.id === defaultValue.masking;\n      });\n      defaultValueStruct.value = defaultValue.value;\n      defaultValueStruct.isOverride = defaultValue.override;\n      defaultValueStruct.selectedField =\n        _.filter(this.state._sfFieldOptions || this.props.sfFieldOptions, (option, i) => {\n          return option.id === fieldName;\n        })[0] || null;\n\n      return defaultValueStruct;\n    });\n  }\n\n  componentDidMount() {\n    /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n    var _sfDefaultValues = this.props.sfDefaultValues || {};\n\n    this.setState({\n      _sfFieldOptions: this.props.sfFieldOptions,\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.getDefaultValuesList(_sfDefaultValues)\n    });\n  }\n\n  /*shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.props.objectName !== nextProps.objectName\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfDefaultValues !== nextProps.sfDefaultValues\n            || this.props.renderKey != nextProps.renderKey\n        );\n    }*/\n\n  onDefaultValueChangeHandler(sfDefaultValue, selection) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n\n    if (selection) {\n      var defaultValue = selection[0];\n\n      sfDefaultValue.id = defaultValue.id;\n      sfDefaultValue.selectedField = defaultValue;\n\n      _sfDefaultValues[sfDefaultValue.id] = {\n        mapping:\n          sfDefaultValue.mapping && sfDefaultValue.mapping.length > 0\n            ? sfDefaultValue.mapping[0].id\n            : \"\",\n        masking:\n          sfDefaultValue.masking && sfDefaultValue.masking.length > 0\n            ? sfDefaultValue.masking[0].id\n            : \"\",\n        value: sfDefaultValue.value,\n        override: sfDefaultValue.isOverride\n      };\n    } else {\n      delete _sfDefaultValues[sfDefaultValue.id];\n      sfDefaultValue.id = null;\n      sfDefaultValue.selectedField = null;\n    }\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.state._sfDefaultValuesList\n    });\n\n    if (this.props.onDefaultValueChangeHandler) {\n      this.props.onDefaultValueChangeHandler(_sfDefaultValues);\n    }\n  }\n\n  addAnotherFieldHandler() {\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    if (\n      _sfDefaultValuesList.length === 0 ||\n      _sfDefaultValuesList[_sfDefaultValuesList.length - 1].id != null\n    ) {\n      _sfDefaultValuesList.push(this.getDefaultValueStruct());\n\n      this.setState({\n        _sfDefaultValuesList: _sfDefaultValuesList\n      });\n    }\n  }\n\n  removeFieldHandler(i) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    delete _sfDefaultValues[_sfDefaultValuesList[i].id];\n    _sfDefaultValuesList.splice(i, 1);\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: _sfDefaultValuesList\n    });\n  }\n\n  render() {\n    if (this.state._error) {\n      return <div>Error: {this.state._error}</div>;\n    } else if (!this.isLoaded()) {\n      return (\n        <div style={{ position: \"relative\", height: \"5rem\" }}>\n          <Spinner size=\"small\" variant=\"base\" />\n        </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n          <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n            <thead>\n              <tr className=\"slds-line-height_reset\">\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>\n                    {SALESFORCE_FIELD}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={MAPPING}>\n                    {MAPPING}\n                    <div style={{ texttransform: \"none\", display: \"inline\" }}>\n                      <Tooltip\n                        align=\"top left\"\n                        position=\"overflowBoundaryElement\"\n                        content='Default To - Set a value which will be used for this field on all records. Mask - Select one of the options from the \"Value\" picklist'\n                      >\n                        <div style={{ marginRight: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Icon\n                            assistiveText={{ label: \"MAPPING\" }}\n                            category=\"utility\"\n                            name=\"info\"\n                            size=\"x-small\"\n                          />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={DEFAULT_VALUE}>\n                    {DEFAULT_VALUE}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={IS_OVERRIDE}>\n                    {IS_OVERRIDE}\n                    <div style={{ texttransform: \"none\", display: \"inline\" }}>\n                      <Tooltip\n                        align=\"top right\"\n                        position=\"overflowBoundaryElement\"\n                        content='If this checkbox is FALSE, the default value set here will only override blank fields. If this checkbox is TRUE, the default value set will override even populated fields.'\n                      >\n                        <div style={{ marginRight: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Icon\n                            assistiveText={{ label: IS_OVERRIDE }}\n                            category=\"utility\"\n                            name=\"info\"\n                            size=\"x-small\"\n                          />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" />\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* Iterate over fields */}\n              {_.map(\n                this.state._sfDefaultValuesList,\n                function(sfDefaultValue, i) {\n                  console.log(sfDefaultValue, i);\n\n                  var sfFieldName = sfDefaultValue.id;\n\n                  var selectedField = sfDefaultValue.selectedField;\n\n                  return (\n                    <tr className=\"slds-hint-parent\" key={\"sfFieldName: \" + (sfFieldName || \"\")}>\n                      <td data-label={SALESFORCE_FIELD} style={{ width: \"35vw\" }}>\n                        {sfFieldName || (\n                          <GRAXRestoreMappingSFField\n                            options={this.state._sfFieldOptions}\n                            filterOptionsHandler={options => {\n                              return _.filter(options, (option, i) => {\n                                return this.state._sfDefaultValuesFields.indexOf(option.id) === -1;\n                              });\n                            }}\n                            selection={[\n                              _.find(this.state._sfFieldOptions, option => {\n                                return option.id === sfFieldName;\n                              })\n                            ]}\n                            onSelect={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                            onRequestRemoveSelectedOption={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                          />\n                        )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"20vw\" }}>\n                        {selectedField &&\n                          selectedField.type !== \"text\" &&\n                          selectedField.type !== \"date\" &&\n                          this.state._mappingOptions[0] &&\n                          this.state._mappingOptions[0].label}\n                        {selectedField &&\n                          (selectedField.type === \"text\" || selectedField.type === \"date\") && (\n                            <GRAXRestoreMappingSFField\n                              options={this.state._mappingOptions}\n                              filterOptionsHandler={options => {\n                                return this.state._mappingOptions;\n                              }}\n                              selection={sfDefaultValue.mapping}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                sfDefaultValue.isOverride = false;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"35vw\" }}>\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"DEFAULT\" &&\n                          (((selectedField.type === \"text\" || selectedField.type === \"number\") && (\n                            <Input\n                              defaultValue={sfDefaultValue.value}\n                              assistiveText={{ label: selectedField.label }}\n                              id={selectedField.id}\n                              onBlur={event => {\n                                sfDefaultValue.value = event.target.value;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )) ||\n                            (selectedField.type === \"date\" && (\n                              <Datepicker\n                                value={sfDefaultValue.value}\n                                onChange={(event, data) => {\n                                  sfDefaultValue.value = data.date;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                                formatter={datePickerFormatter}\n                                parser={datePickerParser}\n                              />\n                            )) ||\n                            (selectedField.type === \"boolean\" && (\n                              <Checkbox\n                                defaultChecked={sfDefaultValue.value}\n                                onChange={e => {\n                                  e.persist();\n\n                                  sfDefaultValue.value = e.target.checked;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                              />\n                            )))}\n\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"MASK\" &&\n                          (\"sfType:\" + selectedField && (\n                            <GRAXRestoreMappingSFField\n                              /*options={this.state._maskOptions}*/\n                              options={\n                                selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString\n                              }\n                              filterOptionsHandler={options => {\n                                return selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString;\n                              }}\n                              selection={sfDefaultValue.masking}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          ))}\n                      </td>\n                      <td data-label={IS_OVERRIDE} style={{ width: \"10vw\" }}>\n                        {(sfDefaultValue.mapping && sfDefaultValue.mapping[0] == null) ||\n                        sfDefaultValue.mapping[0].id !== \"MASK\" ? (\n                          <Checkbox\n                            key=\"checkbox_enabled\"\n                            defaultChecked={sfDefaultValue.isOverride}\n                            onChange={e => {\n                              e.persist();\n\n                              sfDefaultValue.isOverride = e.target.checked;\n\n                              this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                sfDefaultValue.selectedField\n                              ]);\n                            }}\n                          />\n                        ) : (\n                          <Checkbox key=\"checkbox_disabled\" value={false} disabled={true} />\n                        )}\n                      </td>\n                      <td data-label={\"Actions\"} style={{ width: \"10vw\" }}>\n                        <Button\n                          label=\"Remove Field\"\n                          variant=\"base\"\n                          onClick={() => {\n                            this.removeFieldHandler(i);\n                          }}\n                        />\n                      </td>\n                    </tr>\n                  );\n                }.bind(this)\n              )}\n            </tbody>\n          </table>\n          {/*</div>*/}\n\n          <div className=\"slds-p-top_medium\">\n            <Button\n              label=\"Add Field\"\n              variant=\"brand\"\n              onClick={() => {\n                this.addAnotherFieldHandler();\n              }}\n            />\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport React from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXSObjectCombobox from './GRAXSObjectCombobox';\n\nimport {Spinner, Button, Checkbox, Modal} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams, pageParams} from '../lib/grax-data-lake';\n\nimport GRAXOrgCombobox from './GRAXOrgCombobox';\nimport GRAXRestoreMappingFields from './GRAXRestoreMappingFields';\nimport GRAXRestoreMappingDefaults from './GRAXRestoreMappingDefaults';\n\nfunction normalizeFieldType(typeName) {\n    var nft;\n\n    switch (typeName) {\n        case 'date':\n        case 'datetime':\n            nft = 'date';\n            break;\n        case 'boolean':\n            nft = 'boolean';\n            break;\n        case 'double':\n        case 'long':\n        case 'percent':\n        case 'currency':\n            nft = 'number';\n            break;\n        default:\n            nft = 'text';\n            break;\n    }\n\n    return nft;\n}\n\n\nconst HAS_CHANGES_MESSAGE = 'Some changes have not been saved, do you want to continue?';\n\nconst DEFAULT_VALUES_KEY = '__defaultValues__';\n\nexport default class GRAXRestoreMapping extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedSObject: null,\n            _graxFieldOptions: null,\n            _sfFieldOptions: null,\n            _sfMappedFields: {},\n            _sfDefaultValues: {}, // to null\n            _error: null,\n            isLoading: true,\n            _isCustomOrg: false,\n            _customOrg: null,\n            customMapping: null,\n            hasChanges: false,\n            isSaving: false,\n            resetConfirmIsOpen: false,\n            resetConfirmIsChecked: false,\n            resetConfirmCallback: () => ({}),\n            renderCounter: 0\n        }\n    }\n\n    _onMappingChangeHandler(fieldName, mappedValues) {\n        console.log(fieldName, mappedValues);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        _sfMappedFields[fieldName] = mappedValues;\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            hasChanges: true\n        });\n    }\n\n    _onOrgSelectionChangeHandler(selection) {\n        console.log(selection);\n\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n            });\n            // this.state._customOrg = _customOrg;\n\n            this.onMappingSettingsChange(this.state.selectedSObject, this.state.customMapping);\n        }\n    }\n\n    _onOrgSelectionRemoveHandler(selection) {\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n                _sfMappedFields: {},\n                _sfDefaultValues: {}\n            });\n        }\n    }\n\n    isMapLoaded() {\n        return this.state._error || (\n            this.state.customMapping != null\n            && this.state._graxFieldOptions != null\n            && this.state._sfFieldOptions != null\n            && this.state._sfDefaultValues != null\n        );\n    }\n\n    componentDidMount() {\n        this.setState({\n            customMapping: this.props.customMapping\n        });\n    }\n\n    onMappingSettingsChange(selectedSObject, data) {\n        var customMapping = this.state.customMapping[selectedSObject] || {};\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = customMapping[this.state._customOrg] || {};\n        }\n\n        var fieldMap = customMapping.fieldMap || {};\n\n        this.setState({\n            _sfFieldOptions: _.map(data, (item, i) => ({\n                id: item.name,\n                label: item.name,\n                type: normalizeFieldType(item.type),\n                sfType: item.type\n            })),\n            _sfMappedFields: _.omit(fieldMap, [DEFAULT_VALUES_KEY]) || {},\n            _sfDefaultValues: fieldMap[DEFAULT_VALUES_KEY] || {}\n        });\n    }\n\n    sObjectChangeHandler(selectedSObject) {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + selectedSObject + '/fields' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable',\n                _select: 'name,type'\n            },\n            success: function(data) {\n                this.onMappingSettingsChange(selectedSObject, data);\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/grax' + selectedSObject.toLowerCase() + 'index' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    _graxFieldOptions: _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: normalizeFieldType(val)\n                    }))\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    getCustomMappingToSave() {\n        console.log('this.state.customMapping', this.state.customMapping);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        var customMapping = {\n            fieldMap: _.reduce(_sfMappedFields, (customMapping, mappedFields, fieldName) => {\n                if(!(_.isArray(mappedFields) && mappedFields.length === 1 && mappedFields[0] === fieldName)) {\n                    customMapping[fieldName] = mappedFields;\n                }\n\n                return customMapping;\n            }, {})\n        };\n\n        if(!_.isEmpty(this.state._sfDefaultValues)) {\n            customMapping.fieldMap[DEFAULT_VALUES_KEY] = this.state._sfDefaultValues;\n        }\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = _.assign({}, this.state.customMapping[this.state.selectedSObject.id] || {}, {\n                [this.state._customOrg]: customMapping\n            });\n        }\n\n        console.log('customMapping', customMapping);\n\n        return _.assign({}, this.state.customMapping, {\n            [this.state.selectedSObject.id]: customMapping\n        });\n    }\n\n    saveCustomMapping(customMappingToSave) {\n        console.log('customMappingToSave', customMappingToSave);\n\n        this.setState({\n            isSaving: true\n        });\n\n        $.ajax({\n            type: 'POST',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/saveCustomMapping' + GetParams({action:'save'}),\n            contentType: \"application/json; charset=utf-8\",\n            data: JSON.stringify(customMappingToSave),\n            success: function(data) {\n                console.log(data);\n\n                this.setState({\n                    customMapping: customMappingToSave,\n                    hasChanges: false,\n                    isSaving: false\n                });\n\n                if(this.props.onMappingChange) {\n                    this.props.onMappingChange(customMappingToSave);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString(),\n                    isSaving: false\n                });\n            }.bind(this)\n        });\n\n        //alert('Save in progress...');\n    }\n\n    render() {\n        return (\n            // <div style={{position: 'relative'}}>\n            <div>\n                {this.state.isSaving && <Spinner size=\"large\" variant=\"brand\" />}\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select your Salesforce Object\">\n                    {this.state._error || <GRAXSObjectCombobox\n                        menuItem={(props) => {\n                            if(this.state.customMapping[props.option.id]) {\n                                return <b>{props.option.id}</b>;\n                            }\n\n                            return props.option.id;\n                        }}\n                        onSelect={(event, data) => {\n                            var selectedSObject = data[0];\n\n                            this.setState({\n                                selectedSObject: selectedSObject\n                            });\n\n                            this.sObjectChangeHandler(selectedSObject.id);\n                        }}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            if(!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE)) {\n                                this.setState({\n                                    selectedSObject: null,\n                                    _graxFieldOptions: null,\n                                    _sfFieldOptions: null,\n                                    //_sfDefaultValues: null,\n                                    hasChanges: false\n                                });\n\n                                return true;\n                            }\n\n                            return false;\n                        }}\n                        onLoad={(success, err) => {\n                            this.setState({\n                                isLoading: false,\n                                _error: err ? err.toString : null\n                            })\n                        }}\n                        selectionKeys={pageParams.datalakeIndex != null ? [pageParams.datalakeIndex] : null}\n                    />}\n\n                    {!this.state.isLoading && <Checkbox\n                        className=\"slds-p-top_medium\"\n                        labels={{\n                            label: 'Would you like to define a custom field Mapping for a source Organization?',\n                        }}\n                        onChange={(e) => {\n                            e.persist();\n\n                            this.setState({\n                                _isCustomOrg: e.target.checked\n                            })\n                        }}\n                    />}\n\n                    {this.state._isCustomOrg && (\n                        <div style={{maxWidth: '50vw'}}>\n                            <GRAXOrgCombobox\n                                onSelect={(event, selection) => this._onOrgSelectionChangeHandler(selection)}\n                                onRequestRemoveSelectedOption={(event, selection) => this._onOrgSelectionRemoveHandler(selection)}\n                            />\n                        </div>\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Map the fields to the appropriate Salesforce field\">\n                    {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingFields\n                                key={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                graxFieldOptions={this.state._graxFieldOptions}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfMappedFields={this.state._sfMappedFields}\n                                onMappingChange={this._onMappingChangeHandler.bind(this)}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Set a default field value for fields on this object\">\n                {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingDefaults\n                                key={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfDefaultValues={this.state._sfDefaultValues}\n                                onDefaultValueChangeHandler={(_sfDefaultValues) => {\n                                    console.log(_sfDefaultValues);\n\n                                    this.setState({\n                                        _sfDefaultValues: _sfDefaultValues,\n                                        hasChanges: true\n                                    });\n                                }}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <div style={{\n                  \"margin-bottom\": \"25rem\"\n                }}>\n                    {this.state.selectedSObject && this.isMapLoaded() && (\n                        <React.Fragment>\n                            <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                this.saveCustomMapping(customMappingToSave);\n                            }}/>\n\n                            {this.state.customMapping && this.state.customMapping[this.state.selectedSObject.id] && (\n                                <Button label=\"Reset Mapping\" variant=\"destructive\" onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: true,\n                                        resetConfirmIsChecked: false,\n                                        resetConfirmCallback: (() => {\n                                            if(this.state.resetConfirmIsChecked && confirm('Are you sure that you want to reset the selected mapping?')) {\n                                                this.setState({\n                                                    _sfMappedFields: {},\n                                                    _sfDefaultValues: {},\n\n                                                    renderCounter: this.state.renderCounter + 1,\n\n                                                    resetConfirmIsOpen: false,\n                                                    resetConfirmCallback: (() => {}),\n                                                });\n\n                                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                                if(customMappingToSave[this.state.selectedSObject.id]) {\n                                                    delete customMappingToSave[this.state.selectedSObject.id];\n                                                }\n\n                                                this.saveCustomMapping(customMappingToSave);\n                                            }\n                                        })\n                                    });\n                                }} />\n                            )}\n                        </React.Fragment>\n                    )}\n                </div>\n\n                {this.state.selectedSObject && this.isMapLoaded() && (\n                    <Modal\n                        dismissible={true}\n                        footer={[\n                            <div key=\"resetCheck\" className=\"slds-p-bottom_small\">\n                                <Checkbox\n                                    assistiveText={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    id=\"reset-confirm\"\n                                    labels={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    onChange={(e) => {\n                                        e.persist();\n\n                                        this.setState({\n                                            resetConfirmIsChecked: e.target.checked\n                                        });\n                                    }}\n                                />\n                            </div>,\n                            <Button\n                                key=\"cancelBtn\"\n                                label=\"Cancel\"\n                                onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: false,\n                                        resetConfirmIsChecked: false\n                                    });\n                                }}\n                            />,\n                            <Button\n                                key=\"resetBtn\"\n                                label=\"Reset\"\n                                onClick={this.state.resetConfirmCallback}\n                                variant=\"destructive\"\n                                disabled={!this.state.resetConfirmIsChecked}\n                            />,\n                        ]}\n                        isOpen={this.state.resetConfirmIsOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                resetConfirmIsOpen: false,\n                                resetConfirmIsChecked: false\n                            });\n                        }}\n                        prompt=\"error\"\n                        size=\"medium\"\n                        title={<span>Reset <b>{this.state.selectedSObject.id}</b> mapping?</span>}\n                    >\n                        <div className=\"slds-m-around_medium\">\n                            Removing the mapping will set the mapping back to the default values.\n                            <br />\n                            Once a mapping has been reset, it cannot be restored.\n                        </div>\n                    </Modal>\n                )}\n            </div>\n        );\n    }\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n"],"sourceRoot":""}