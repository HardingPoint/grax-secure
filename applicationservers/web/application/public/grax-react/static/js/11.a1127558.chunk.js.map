{"version":3,"sources":["components/SLDSSection.jsx","components/GRAXEnvSetting.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx","components/GRAXCloudConfigurationForm.jsx","settings/GRAXCloudConfigurationFormSettings.js"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","GRAXEnvSettingCombobox","lazy","GRAXEnvSettingSwitch","GRAXEnvSettingInput","GRAXEnvSetting","getComponentToRender","type","defaultValue","setting","onChange","v","onChangeTrigger","helpTextTooltip","getHelpTextTooltip","Date","now","toString","inputValue","selection","selectedOption","_","startCase","camelCase","value","onBlur","getLabelFromName","helpText","align","content","fallback","variant","getLabel","getType","getDefaultValue","PureComponent","propTypes","PropTypes","required","string","labels","error","disabled","errorId","defaultProps","RadioGroup","shortid","assign","classNames","style","RadioButtonGroup","rest","BonsaiElasticProvider","onGetConfig","onChangeConfig","readOnly","onTest","AWSElasticProvider","htmlFor","hidden","selected","ElasticCoProvider","AzureStorageProvider","AWSStorageProvider","defaultChecked","GoogleStorageProvider","MinioStorageProvider","GRAXCloudConfigurationForm","testElasticHandler","configuration","isTesting","$","ajax","url","baseUrl","contentType","data","JSON","stringify","elasticEnvConfig","elastic","skipFail","success","res","console","log","alert","ElasticSearch","xhr","status","err","testStorageHandler","storage","length","envConfig","aws","onNameChangeHandler","persist","target","triggerConfigurationChange","onElasticProviderChangeHander","set","provider","onStorageProviderChangeHandler","currentValue","get","newValue","onElasticUrlChangeHandler","f","targetKey","hasOwnProperty","onSourceControlChangeHandler","sourceControlEnabled","checked","sourceControlProvider","isLoading","metadataBackupIndex","cloneDeep","Fragment","startsWith","map","METADATA_BACKUP_SETTINGS_BY_PROVIDER","i","SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS","TIME_MACHINE_SETTINGS","module","exports","github","gitlab"],"mappings":"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","file":"static/js/11.a1127558.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React, { Suspense, lazy } from \"react\";\nimport _ from \"lodash\";\nimport { Tooltip, Spinner } from \"@salesforce/design-system-react\";\n\nconst GRAXEnvSettingCombobox = lazy(() => import(\"./GRAXEnvSettingCombobox\"));\nconst GRAXEnvSettingSwitch = lazy(() => import(\"./GRAXEnvSettingSwitch\"));\nconst GRAXEnvSettingInput = lazy(() => import(\"./GRAXEnvSettingInput\"));\n\nexport default class GRAXEnvSetting extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    if (this.props.id) {\n      this.id = this.props.id;\n    } else {\n      this.id = Date.now().toString();\n    }\n\n    this.state = {\n      inputValue: \"\",\n      selection: null,\n      selectedOption: null\n    };\n  }\n\n  getLabelFromName(name) {\n    return _.startCase(_.camelCase(name));\n  }\n\n  onChangeTrigger(value) {\n    const onChange = this.props.onChange || this.props.onBlur || (() => {});\n\n    onChange(value);\n  }\n\n  getType() {\n    return this.props.setting.type || \"text\";\n  }\n\n  getLabel() {\n    if (this.props.setting.label) {\n      return this.props.setting.label;\n    }\n\n    return this.getLabelFromName(this.props.setting.name);\n  }\n\n  getDefaultValue() {\n    return this.props.setting.defaultValue || this.props.defaultValue;\n  }\n\n  getHelpTextTooltip() {\n    if (this.props.setting.helpText) {\n      return (\n        <Tooltip\n          key={this.id + \"-helptext\"}\n          id={this.id + \"-helptext\"}\n          align=\"top left\"\n          content={this.props.setting.helpText}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  getComponentToRender = ({ label, type, defaultValue }) => {\n    if (type === \"combobox\") {\n      return (\n        <GRAXEnvSettingCombobox\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    if (type === \"boolean\") {\n      return (\n        <GRAXEnvSettingSwitch\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          helpTextTooltip={this.getHelpTextTooltip()}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    return (\n      <GRAXEnvSettingInput\n        key={this.id}\n        id={this.id}\n        type={type}\n        label={label}\n        setting={this.props.setting}\n        helpTextTooltip={this.getHelpTextTooltip()}\n        onChange={v => this.onChangeTrigger(v)}\n        defaultValue={defaultValue}\n      />\n    );\n  };\n\n  render() {\n    if (this.props.setting == null || this.props.id == null) return null;\n\n    return (\n      <Suspense fallback={<Spinner size=\"small\" variant=\"brand\" />}>\n        {this.getComponentToRender({\n          label: this.getLabel(),\n          type: this.getType(),\n          defaultValue: this.getDefaultValue()\n        })}\n      </Suspense>\n    );\n  }\n}\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport {\n  Spinner,\n  Button,\n  Input,\n  Checkbox,\n  Radio,\n  RadioButtonGroup\n} from \"@salesforce/design-system-react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport GRAXEnvSetting from \"./GRAXEnvSetting\";\nimport { $, baseUrl } from \"../lib/grax-data-lake\";\n\nimport {\n  METADATA_BACKUP_SETTINGS_BY_PROVIDER,\n  SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS,\n  TIME_MACHINE_SETTINGS\n} from \"../settings/GRAXCloudConfigurationFormSettings\";\n\nclass BonsaiElasticProvider extends React.Component {\n  render() {\n    return (\n      <SLDSSection title=\"Bonsai Elastic Information\" className=\"slds-p-top_large\">\n        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n          <div className=\"slds-col\">\n            <Input\n              id=\"bonsai-url\"\n              label=\"Bonsai URL\"\n              defaultValue={this.props.onGetConfig(\"url\")}\n              onBlur={this.props.onChangeConfig(\"url\")}\n            />\n          </div>\n\n          <div className=\"slds-col\">\n            <Input id=\"bonsai-plan\" label=\"Bonsai Plan\" readOnly />\n          </div>\n        </div>\n\n        <div className=\"slds-p-top_medium\">\n          <Button label=\"Test\" variant=\"brand\" onClick={this.props.onTest} />\n        </div>\n      </SLDSSection>\n    );\n  }\n}\n\nclass AWSElasticProvider extends React.Component {\n  render() {\n    return (\n      <SLDSSection title=\"AWS Elastic Information\" className=\"slds-p-top_large\">\n        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n          <div className=\"slds-col\">\n            <Input id=\"aws-elastic-endpoint-name\" label=\"Endpoint Name\" />\n\n            <div className=\"slds-form-element\">\n              <label className=\"slds-form-element__label\" htmlFor=\"aws-elastic-s3-region\">\n                S3 Region\n              </label>\n              <div className=\"slds-form-element__control\">\n                <div className=\"slds-select_container\">\n                  <select\n                    className=\"slds-select\"\n                    id=\"aws-elastic-s3-region\"\n                    value={this.props.onGetConfig(\"region\", null)}\n                    onChange={this.props.onChangeConfig(\"region\")}\n                  >\n                    <option value=\"\" disabled hidden selected>\n                      -- Select --\n                    </option>\n                    <option value=\"us-east-1\">US East (Virginia) - us-east-1</option>\n                    <option value=\"us-east-2\">US East (Ohio) - us-east-2</option>\n                    <option value=\"us-west-1\">US West (N. California) - us-west-1</option>\n                    <option value=\"us-west-2\">US West (Oregon) - us-west-2</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"slds-col\">\n            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n              <div className=\"slds-col\">\n                <Input\n                  id=\"aws-elastic-accesskeyid\"\n                  label=\"Access Key ID\"\n                  defaultValue={this.props.onGetConfig(\"accessKey\")}\n                  onBlur={this.props.onChangeConfig(\"accessKey\")}\n                />\n              </div>\n\n              <div className=\"slds-col\">\n                <Input\n                  id=\"asw-elastic-s3-bucket-name\"\n                  label=\"S3 Bucket Name\"\n                  defaultValue={this.props.onGetConfig(\"bucket\")}\n                  onBlur={this.props.onChangeConfig(\"bucket\")}\n                />\n              </div>\n            </div>\n\n            <Input\n              id=\"asw-elastic-secret-accesskey\"\n              label=\"Secret Access Key\"\n              defaultValue={this.props.onGetConfig(\"secretAccessKey\")}\n              onBlur={this.props.onChangeConfig(\"secretAccessKey\")}\n            />\n          </div>\n        </div>\n\n        <div className=\"slds-p-top_medium\">\n          <Button label=\"Test\" variant=\"brand\" onClick={this.props.onTest} />\n        </div>\n      </SLDSSection>\n    );\n  }\n}\n\nclass ElasticCoProvider extends React.Component {\n  render() {\n    return (\n      <SLDSSection title=\"Elastic.co Information\" className=\"slds-p-top_large\">\n        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n          <div className=\"slds-col\">\n            <Input\n              id=\"elasticco-user\"\n              label=\"Elastic Username\"\n              defaultValue={this.props.onGetConfig(\"user\")}\n              onBlur={this.props.onChangeConfig(\"user\")}\n            />\n\n            <Input\n              id=\"elasticco-url\"\n              label=\"Elastic URL\"\n              defaultValue={this.props.onGetConfig(\"url\")}\n              onBlur={this.props.onChangeConfig(\"url\")}\n            />\n          </div>\n\n          <div className=\"slds-col\">\n            <Input\n              id=\"elasticco-password\"\n              label=\"Elastic Password\"\n              defaultValue={this.props.onGetConfig(\"password\")}\n              onBlur={this.props.onChangeConfig(\"password\")}\n            />\n\n            <Input\n              id=\"elasticco-port\"\n              type=\"number\"\n              label=\"Elastic Port\"\n              defaultValue={this.props.onGetConfig(\"port\")}\n              onBlur={this.props.onChangeConfig(\"port\")}\n            />\n          </div>\n        </div>\n\n        <div className=\"slds-p-top_medium\">\n          <Button label=\"Test\" variant=\"brand\" onClick={this.props.onTest} />\n        </div>\n      </SLDSSection>\n    );\n  }\n}\n\nclass AzureStorageProvider extends React.Component {\n  render() {\n    return (\n      <SLDSSection title=\"Azure Blob Storage\" className=\"slds-p-top_large\">\n        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-start\">\n          <div className=\"slds-col\">\n            <Input\n              id=\"azure-storage-account-name\"\n              label=\"Azure Storage Account Name\"\n              defaultValue={this.props.onGetConfig(\"storageAccountName\")}\n              onBlur={this.props.onChangeConfig(\"storageAccountName\")}\n            />\n            <Input\n              id=\"azure-container-name\"\n              label=\"Azure Container Name\"\n              defaultValue={this.props.onGetConfig(\"containerName\")}\n              onBlur={this.props.onChangeConfig(\"containerName\")}\n            />\n          </div>\n\n          <div className=\"slds-col\">\n            <Input\n              id=\"azure-storage-account-access-key\"\n              label=\"Storage Account Access Key\"\n              defaultValue={this.props.onGetConfig(\"accountAccessKey\")}\n              onBlur={this.props.onChangeConfig(\"accountAccessKey\")}\n            />\n          </div>\n        </div>\n\n        <div className=\"slds-p-top_medium\">\n          <Button label=\"Test\" variant=\"brand\" onClick={this.props.onTest} />\n        </div>\n      </SLDSSection>\n    );\n  }\n}\n\nclass AWSStorageProvider extends React.Component {\n  render() {\n    return (\n      <SLDSSection title=\"S3 Bucket\" className=\"slds-p-top_large\">\n        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-start\">\n          <div className=\"slds-col\">\n            <Input\n              id=\"storage-s3-bucket-name\"\n              label=\"S3 Bucket Name\"\n              defaultValue={this.props.onGetConfig(\"bucket\")}\n              onBlur={this.props.onChangeConfig(\"bucket\")}\n            />\n\n            <div className=\"slds-form-element\">\n              <label className=\"slds-form-element__label\" htmlFor=\"storage-s3-region\">\n                S3 Region\n              </label>\n              <div className=\"slds-form-element__control\">\n                <div className=\"slds-select_container\">\n                  <select\n                    className=\"slds-select\"\n                    id=\"storage-s3-region\"\n                    value={this.props.onGetConfig(\"region\", null)}\n                    onBlur={this.props.onChangeConfig(\"region\")}\n                  >\n                    <option value=\"\" disabled hidden selected>\n                      -- Select --\n                    </option>\n                    <option value=\"us-east-1\">US East (Virginia) - us-east-1</option>\n                    <option value=\"us-east-2\">US East (Ohio) - us-east-2</option>\n                    <option value=\"us-west-1\">US West (N. California) - us-west-1</option>\n                    <option value=\"us-west-2\">US West (Oregon) - us-west-2</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            <Input\n              id=\"storage-s3.assume-role-arn\"\n              label=\"Assume Role / ARN Name\"\n              defaultValue={this.props.onGetConfig(\"s3AssumeRoleArn\")}\n              onBlur={this.props.onChangeConfig(\"s3AssumeRoleArn\")}\n            />\n\n            <Checkbox\n              assistiveText={{\n                label: \"Assume Role Enabled\"\n              }}\n              id=\"checkbox-storage-s3-assume-role\"\n              labels={{\n                label: \"Assume Role Enabled\"\n              }}\n              defaultChecked={this.props.onGetConfig(\"s3AssumeRoleEnabled\")}\n              onChange={this.props.onChangeConfig(\"s3AssumeRoleEnabled\", \"checked\")}\n            />\n          </div>\n\n          <div className=\"slds-col\">\n            <Input\n              id=\"storage-s3-access-key\"\n              label=\"Access Key ID\"\n              defaultValue={this.props.onGetConfig(\"accessKey\")}\n              onBlur={this.props.onChangeConfig(\"accessKey\")}\n            />\n            <Input\n              id=\"storage-s3-secret-access-key\"\n              label=\"Secret Access Key\"\n              defaultValue={this.props.onGetConfig(\"secretAccessKey\")}\n              onBlur={this.props.onChangeConfig(\"secretAccessKey\")}\n            />\n            <Input\n              id=\"storage-s3-refresh-token\"\n              label=\"Refresh Token / Expiry Time (Hours)\"\n              defaultValue={this.props.onGetConfig(\"s3AssumeRoleRefreshCredsInHour\")}\n              onBlur={this.props.onChangeConfig(\"s3AssumeRoleRefreshCredsInHour\")}\n            />\n          </div>\n        </div>\n\n        {this.props.onGetConfig(\"provider\") === \"aws-ecs\" ? (\n          <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-start slds-p-top_medium\">\n            <div className=\"slds-col\">\n              <Input\n                id=\"aws-ecs-endpoint\"\n                label=\"Endpoint\"\n                defaultValue={this.props.onGetConfig(\"dellEmcEcsEndpoint\")}\n                onBlur={this.props.onChangeConfig(\"dellEmcEcsEndpoint\")}\n              />\n\n              <Checkbox\n                assistiveText={{\n                  label: \"Enabled\"\n                }}\n                id=\"checkbox-aws-ecs-enabled\"\n                labels={{\n                  label: \"Enabled\"\n                }}\n                defaultChecked={this.props.onGetConfig(\"dellEmcEcsEnabled\")}\n                onChange={this.props.onChangeConfig(\"dellEmcEcsEnabled\", \"checked\")}\n              />\n            </div>\n          </div>\n        ) : null}\n\n        <div className=\"slds-p-top_medium\">\n          <Button label=\"Test\" variant=\"brand\" onClick={this.props.onTest} />\n        </div>\n      </SLDSSection>\n    );\n  }\n}\n\nclass GoogleStorageProvider extends React.Component {\n  render() {\n    return (\n      <SLDSSection title=\"Google Cloud Provider\" className=\"slds-p-top_large\">\n        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-start\">\n          <div className=\"slds-col\">\n            <Input\n              id=\"google-client-email\"\n              type=\"email\"\n              label=\"Google Client E-Mail\"\n              defaultValue={this.props.onGetConfig(\"googleClienteMail\")}\n              onBlur={this.props.onChangeConfig(\"googleClienteMail\")}\n            />\n\n            <Input\n              id=\"google-storage-project-id\"\n              type=\"number\"\n              label=\"Google Project Id\"\n              defaultValue={this.props.onGetConfig(\"googleProjectId\")}\n              onBlur={this.props.onChangeConfig(\"googleProjectId\")}\n            />\n\n            <Input\n              id=\"google-private-key-id\"\n              label=\"Google Private Key Id\"\n              defaultValue={this.props.onGetConfig(\"googlePrivateKeyId\")}\n              onBlur={this.props.onChangeConfig(\"googlePrivateKeyId\")}\n            />\n          </div>\n\n          <div className=\"slds-col\">\n            <Input\n              id=\"google-client-id\"\n              label=\"Google Client Id\"\n              defaultValue={this.props.onGetConfig(\"googleClientId\")}\n              onBlur={this.props.onChangeConfig(\"googleClientId\")}\n            />\n\n            <Input\n              id=\"google-bucket-name\"\n              label=\"Google Bucket Name\"\n              defaultValue={this.props.onGetConfig(\"googleBucketName\")}\n              onBlur={this.props.onChangeConfig(\"googleBucketName\")}\n            />\n\n            <Input\n              id=\"google-private-key\"\n              label=\"Google Private Key\"\n              defaultValue={this.props.onGetConfig(\"googlePrivateKey\")}\n              onBlur={this.props.onChangeConfig(\"googlePrivateKey\")}\n            />\n          </div>\n        </div>\n\n        <div className=\"slds-p-top_medium\">\n          <Button label=\"Test\" variant=\"brand\" onClick={this.props.onTest} />\n        </div>\n      </SLDSSection>\n    );\n  }\n}\n\nclass MinioStorageProvider extends React.Component {\n  render() {\n    return (\n      <SLDSSection title=\"Minio Object Storage\" className=\"slds-p-top_large\">\n        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-start\">\n          <div className=\"slds-col\">\n            <Input\n              id=\"minio-endpoint\"\n              type=\"text\"\n              label=\"Minio Endpoint\"\n              defaultValue={this.props.onGetConfig(\"minioEndPoint\")}\n              onBlur={this.props.onChangeConfig(\"minioEndPoint\")}\n            />\n\n            <Input\n              id=\"minio-access-key\"\n              type=\"text\"\n              label=\"Minio Access Key\"\n              defaultValue={this.props.onGetConfig(\"minioAccessKey\")}\n              onBlur={this.props.onChangeConfig(\"minioAccessKey\")}\n            />\n\n            <Input\n              id=\"minio-bucket-name\"\n              label=\"Minio Bucket Name\"\n              defaultValue={this.props.onGetConfig(\"minioBucketName\")}\n              onBlur={this.props.onChangeConfig(\"minioBucketName\")}\n            />\n          </div>\n\n          <div className=\"slds-col\">\n            <Input\n              id=\"minio-port\"\n              label=\"Minio Port\"\n              type=\"number\"\n              defaultValue={this.props.onGetConfig(\"minioPort\")}\n              onBlur={this.props.onChangeConfig(\"minioPort\")}\n            />\n\n            <Input\n              id=\"minio-secret-key\"\n              label=\"Minio Secret Key\"\n              defaultValue={this.props.onGetConfig(\"minioSecretKey\")}\n              onBlur={this.props.onChangeConfig(\"miniminioSecretKeyoPort\")}\n            />\n          </div>\n        </div>\n\n        <div className=\"slds-p-top_medium\">\n          <Button label=\"Test\" variant=\"brand\" onClick={this.props.onTest} />\n        </div>\n      </SLDSSection>\n    );\n  }\n}\n\nexport default class GRAXCloudConfigurationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      isTesting: false,\n      error: null,\n      configuration: {},\n      metadataBackupIndex: 0\n    };\n\n    this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      title: this.props.title,\n      configuration: _.cloneDeep(this.props.configuration),\n      isLoading: false\n    });\n  }\n\n  triggerConfigurationChange() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state.title, this.state.configuration);\n    }\n  }\n\n  testElasticHandler = () => {\n    const configuration = this.state.configuration;\n\n    /*if (\n      configuration == null ||\n      configuration.elastic == null ||\n      configuration.elastic.length === 0\n    ) {\n      alert(\"Incomplete data\");\n    }*/\n\n    this.setState({\n      isTesting: true\n    });\n\n    $.ajax({\n      type: \"POST\",\n      url: baseUrl + \"/graxproxy/api/elastichealthcheck\",\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify({\n        elasticEnvConfig: configuration.elastic[0] || {}\n      }),\n      skipFail: true,\n      success: function(res) {\n        console.log(res);\n\n        this.setState({\n          isTesting: false\n        });\n\n        alert(res.data.ElasticSearch);\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isTesting: false\n        });\n\n        alert(\"Error!\");\n      }.bind(this)\n    });\n  };\n\n  testStorageHandler = () => {\n    const configuration = this.state.configuration;\n\n    if (\n      configuration == null ||\n      configuration.storage == null ||\n      configuration.storage.length === 0\n    ) {\n      alert(\"Incomplete data\");\n    }\n\n    this.setState({\n      isTesting: true\n    });\n\n    $.ajax({\n      type: \"POST\",\n      url: baseUrl + \"/graxproxy/api/storageproviderhealthcheck\",\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify({\n        envConfig: configuration || {}\n      }),\n      skipFail: true,\n      success: function(res) {\n        console.log(res);\n\n        this.setState({\n          isTesting: false\n        });\n\n        alert(res.data.aws); // TODO: check Azure storage\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isTesting: false\n        });\n\n        alert(\"Error! status: \" + status);\n      }.bind(this)\n    });\n  };\n\n  onNameChangeHandler = e => {\n    e.persist();\n\n    this.setState(\n      {\n        title: e.target.value\n      },\n      () => {\n        this.triggerConfigurationChange();\n      }\n    );\n  };\n\n  onElasticProviderChangeHander = e => {\n    e.persist();\n\n    const configuration = this.state.configuration;\n\n    _.set(configuration, \"elastic[0]\", {\n      provider: e.target.value\n    });\n\n    this.setState({\n      configuration\n    });\n\n    this.triggerConfigurationChange();\n  };\n\n  onStorageProviderChangeHandler = e => {\n    e.persist();\n\n    const configuration = this.state.configuration;\n\n    const currentValue = _.get(configuration, \"storage[0].provider\", \"\");\n    const newValue = e.target.value;\n\n    if (currentValue === \"aws\" && newValue === \"aws-ecs\") {\n      _.set(configuration, \"storage[0].provider\", newValue);\n    } else {\n      _.set(configuration, \"storage[0]\", {\n        provider: newValue\n      });\n    }\n\n    this.setState({\n      configuration\n    });\n\n    this.triggerConfigurationChange();\n  };\n\n  onElasticUrlChangeHandler = e => {\n    e.persist();\n\n    const configuration = this.state.configuration;\n\n    _.set(configuration, \"elastic[0].url\", e.target.value);\n\n    this.setState({\n      configuration\n    });\n\n    this.triggerConfigurationChange();\n  };\n\n  onGetConfig = type => {\n    return (key, defaultValue = null) => {\n      return _.get(this.state.configuration, [type, \"0\", key], defaultValue);\n    };\n  };\n\n  onChangeConfig = type => {\n    return (f, targetKey = \"value\") => {\n      return e => {\n        if (e != null && e.hasOwnProperty(\"originalEvent\")) e.persist();\n\n        const configuration = this.state.configuration;\n\n        _.set(configuration, [type, \"0\", f], e.target[targetKey]);\n\n        this.setState({\n          configuration\n        });\n\n        this.triggerConfigurationChange();\n      };\n    };\n  };\n\n  onSourceControlChangeHandler = sourceControlEnabled => {\n    this.onChangeConfig(\"metadataBackup\")(\"sourceControlEnabled\", \"checked\")({\n      target: { checked: sourceControlEnabled }\n    });\n\n    const sourceControlProvider = this.onGetConfig(\"metadataBackup\")(\"sourceControlProvider\");\n\n    if (sourceControlEnabled && !sourceControlProvider) {\n      this.onChangeConfig(\"metadataBackup\")(\"sourceControlProvider\")({\n        target: { value: \"github\" }\n      });\n    }\n  };\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <React.Fragment>\n        {this.state.isTesting ? <Spinner size=\"large\" variant=\"brand\" /> : null}\n\n        <div className=\"slds-p-around_medium\">\n          <SLDSSection title=\"General Information\">\n            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n              <div className=\"slds-col slds-size_1-of-2\">\n                <Input\n                  id=\"configuration-title\"\n                  label=\"Configuration Title\"\n                  defaultValue={this.state.title}\n                  onBlur={this.onNameChangeHandler}\n                />\n              </div>\n            </div>\n\n            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center slds-p-top_medium\">\n              <div className=\"slds-col\">\n                <div className=\"slds-form-element\">\n                  <label className=\"slds-form-element__label\" htmlFor=\"elastic-search-provider\">\n                    Elastic Search Provider\n                  </label>\n                  <div className=\"slds-form-element__control\">\n                    <div className=\"slds-select_container\">\n                      <select\n                        className=\"slds-select\"\n                        id=\"elastic-search-provider\"\n                        value={this.onGetConfig(\"elastic\")(\"provider\", null)}\n                        onChange={e => this.onElasticProviderChangeHander(e)}\n                      >\n                        <option value=\"\" disabled hidden selected>\n                          -- Select --\n                        </option>\n                        <option value=\"bonsai\">Bonsai Elastic Search</option>\n                        <option value=\"aws\">AWS Elastic Search</option>\n                        <option value=\"elastic.co\">Elastic.co</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"slds-col\">\n                <div className=\"slds-form-element\">\n                  <label className=\"slds-form-element__label\" htmlFor=\"cloud-storage-provider\">\n                    Cloud Storage Provider\n                  </label>\n                  <div className=\"slds-form-element__control\">\n                    <div className=\"slds-select_container\">\n                      <select\n                        className=\"slds-select\"\n                        id=\"cloud-storage-provider\"\n                        value={this.onGetConfig(\"storage\")(\"provider\", null)}\n                        onChange={this.onStorageProviderChangeHandler}\n                      >\n                        <option value=\"\" disabled hidden selected>\n                          -- Select --\n                        </option>\n                        <option value=\"aws\">AWS S3 Storage</option>\n                        <option value=\"aws-ecs\">AWS ECS</option>\n                        <option value=\"azure\">Azure BLOB Storage</option>\n                        <option value=\"google\">Google Cloud Provider</option>\n                        <option value=\"minio\">MinIO</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </SLDSSection>\n\n          {_.get(this.state.configuration, \"elastic[0].provider\") === \"bonsai\" ? (\n            <BonsaiElasticProvider\n              onChangeConfig={this.onChangeConfig(\"elastic\")}\n              onGetConfig={this.onGetConfig(\"elastic\")}\n              onTest={this.testElasticHandler}\n            />\n          ) : null}\n\n          {_.get(this.state.configuration, \"elastic[0].provider\") === \"aws\" ? (\n            <AWSElasticProvider\n              onChangeConfig={this.onChangeConfig(\"elastic\")}\n              onGetConfig={this.onGetConfig(\"elastic\")}\n              onTest={this.testElasticHandler}\n            />\n          ) : null}\n\n          {_.get(this.state.configuration, \"elastic[0].provider\") === \"elastic.co\" ? (\n            <ElasticCoProvider\n              onChangeConfig={this.onChangeConfig(\"elastic\")}\n              onGetConfig={this.onGetConfig(\"elastic\")}\n              onTest={this.testElasticHandler}\n            />\n          ) : null}\n\n          {_.get(this.state.configuration, \"storage[0].provider\") === \"azure\" ? (\n            <AzureStorageProvider\n              onChangeConfig={this.onChangeConfig(\"storage\")}\n              onGetConfig={this.onGetConfig(\"storage\")}\n              onTest={this.testStorageHandler}\n            />\n          ) : null}\n\n          {_.get(this.state.configuration, \"storage[0].provider\", \"\").startsWith(\"aws\") ? (\n            <AWSStorageProvider\n              onChangeConfig={this.onChangeConfig(\"storage\")}\n              onGetConfig={this.onGetConfig(\"storage\")}\n              onTest={this.testStorageHandler}\n            />\n          ) : null}\n\n          {_.get(this.state.configuration, \"storage[0].provider\") === \"google\" ? (\n            <GoogleStorageProvider\n              onChangeConfig={this.onChangeConfig(\"storage\")}\n              onGetConfig={this.onGetConfig(\"storage\")}\n              onTest={this.testStorageHandler}\n            />\n          ) : null}\n\n          {_.get(this.state.configuration, \"storage[0].provider\") === \"minio\" ? (\n            <MinioStorageProvider\n              onChangeConfig={this.onChangeConfig(\"storage\")}\n              onGetConfig={this.onGetConfig(\"storage\")}\n              onTest={this.testStorageHandler}\n            />\n          ) : null}\n\n          {/*<SLDSSection title=\"Marketing Cloud\" className=\"slds-p-top_large\">\n                        <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-start\">\n                            <div className=\"slds-col\">\n                                <Input id=\"marketing-cloud-sftp-username\" label=\"SFTP Username\" />\n                                <Input id=\"marketing-cloud-sftp-password\" label=\"SFTP Password\" />\n                            </div>\n\n                            <div className=\"slds-col\">\n                                <Input id=\"marketing-cloud-sftp-host\" label=\"SFTP Host\" />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-p-top_medium\">\n                            <Button label=\"Test\" variant=\"brand\" />\n                        </div>\n                    </SLDSSection>*/}\n\n          <SLDSSection title=\"Metadata Backup\" className=\"slds-p-top_large\">\n            <GRAXEnvSetting\n              id=\"SALESFORCE_GIT_INTEGRATION\"\n              setting={{\n                name: \"SALESFORCE_GIT_INTEGRATION\",\n                type: \"boolean\",\n                id: \"sourceControlEnabled\",\n                helpText: 'Set to \"true\" to backup SF metadata'\n              }}\n              defaultValue={this.onGetConfig(\"metadataBackup\")(\"sourceControlEnabled\")}\n              onChange={this.onSourceControlChangeHandler}\n            />\n\n            {this.onGetConfig(\"metadataBackup\")(\"sourceControlEnabled\") ? (\n              <React.Fragment>\n                <RadioButtonGroup\n                  labels={{\n                    label: \"Provider\"\n                  }}\n                  onChange={this.onChangeConfig(\"metadataBackup\")(\"sourceControlProvider\")}\n                  className=\"slds-m-top_small\"\n                >\n                  <Radio\n                    id=\"metadata-backup-sourceControlProvider-github\"\n                    label=\"Github\"\n                    value=\"github\"\n                    checked={\n                      this.onGetConfig(\"metadataBackup\")(\"sourceControlProvider\") === \"github\"\n                    }\n                    variant=\"button-group\"\n                  />\n\n                  <Radio\n                    id=\"metadata-backup-sourceControlProvider-gitlab\"\n                    label=\"GitLab\"\n                    value=\"gitlab\"\n                    checked={\n                      this.onGetConfig(\"metadataBackup\")(\"sourceControlProvider\") === \"gitlab\"\n                    }\n                    variant=\"button-group\"\n                  />\n                </RadioButtonGroup>\n\n                {_.map(\n                  METADATA_BACKUP_SETTINGS_BY_PROVIDER[\n                    this.onGetConfig(\"metadataBackup\")(\"sourceControlProvider\")\n                  ],\n                  (setting, i) => {\n                    const key = \"grax-env-setting-\" + setting.id;\n\n                    return (\n                      <GRAXEnvSetting\n                        id={key}\n                        key={key}\n                        setting={setting}\n                        defaultValue={this.onGetConfig(\"metadataBackup\")(setting.id)}\n                        onChange={value =>\n                          this.onChangeConfig(\"metadataBackup\")(setting.id)({ target: { value } })\n                        }\n                      />\n                    );\n                  }\n                )}\n              </React.Fragment>\n            ) : null}\n          </SLDSSection>\n\n          <SLDSSection title=\"Sync Analytics & Marketing Cloud\" className=\"slds-p-top_large\">\n            {_.map(SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS, (setting, i) => {\n              const key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n              return (\n                <GRAXEnvSetting\n                  id={key}\n                  key={key}\n                  setting={setting}\n                  defaultValue={this.onGetConfig(\"syncAnalytics\")(setting.id)}\n                  onChange={value =>\n                    this.onChangeConfig(\"syncAnalytics\")(setting.id)({ target: { value } })\n                  }\n                />\n              );\n            })}\n          </SLDSSection>\n\n          <SLDSSection title=\"Time Machine\" className=\"slds-p-top_large\">\n            {_.map(TIME_MACHINE_SETTINGS, (setting, i) => {\n              const key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n              return (\n                <GRAXEnvSetting\n                  id={key}\n                  key={key}\n                  setting={setting}\n                  defaultValue={this.onGetConfig(\"timemachine\")(setting.id)}\n                  onChange={value =>\n                    this.onChangeConfig(\"timemachine\")(setting.id)({ target: { value } })\n                  }\n                />\n              );\n            })}\n          </SLDSSection>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","module.exports = {\n  METADATA_BACKUP_SETTINGS_BY_PROVIDER: {\n    github: [\n      {\n        name: \"SALESFORCE_GIT_REPOSITORY_NAME\",\n        type: \"text\",\n        id: \"gitRepositoryName\",\n        helpText: \"Enter the name of your Github repository name\"\n      },\n      {\n        name: \"GIT_REPOSITORY_AUTHORIZATION_TOKEN\",\n        type: \"text\",\n        id: \"gitRepoAuthorizationToken\",\n        helpText: \"Enter the authorization token from your Github repository\"\n      },\n      {\n        name: \"GIT_USER_ID\",\n        type: \"text\",\n        id: \"gitUserId\",\n        helpText: \"Enter the your Github repository User ID\"\n      }\n    ],\n    gitlab: [\n      {\n        name: \"SALESFORCE_GIT_REPOSITORY_NAME\",\n        type: \"text\",\n        id: \"gitRepositoryName\"\n      },\n      {\n        name: \"GIT_REPOSITORY_AUTHORIZATION_TOKEN\",\n        type: \"text\",\n        id: \"gitRepoAuthorizationToken\",\n        helpText: \"Enter the authorization token from your GitLab repository\"\n      }\n    ]\n  },\n  SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS: [\n    {\n      id: \"marketingCloudHost\",\n      name: \"MC_HOST\",\n      type: \"text\"\n    },\n    {\n      id: \"marketingCloudUser\",\n      name: \"MC_USERNAME\",\n      type: \"text\"\n    },\n    {\n      id: \"marketingCloudPassword\",\n      name: \"MC_PASSWORD\", // NEED ENCRYPTATION\n      type: \"password\"\n    },\n    {\n      id: \"marketingCloudPort\",\n      name: \"MC_PORT\",\n      type: \"text\"\n    },\n    {\n      id: \"syncBatchSize\",\n      name: \"ANALYTICS_BATCH_SIZE\",\n      type: \"number\"\n    },\n    {\n      id: \"syncQueryFile\",\n      name: \"ANALYTICS_QUERY_FILE\",\n      type: \"text\"\n    }\n  ],\n  TIME_MACHINE_SETTINGS: [\n    {\n      id: \"queryFile\",\n      name: \"TIMEMACHINE_RESTORE_QUERY_FILE\",\n      type: \"text\"\n    }\n  ]\n};\n"],"sourceRoot":""}