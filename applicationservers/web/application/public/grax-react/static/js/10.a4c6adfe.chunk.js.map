{"version":3,"sources":["components/GRAXSummaryChartsChart.jsx","components/GRAXSummaryChartsSimple.jsx","components/GRAXSummaryChartsAdvanced.jsx","components/GRAXSummaryCharts.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/GRAXDatePicker.jsx","public/js/jquery.sldsTree.js","lib/summaryChartsUtils.js"],"names":["GRAXSummaryChartsChart","props","google","charts","load","setOnLoadCallback","drawChart","fromDate","Date","toDate","setHours","setMinutes","state","isLoading","summaryData","defaultChartSettings","width","left","showChartAttr","showRecords","showInserted","showUpdated","showArchived","chartFromDate","chartToDate","showAttributeFilter","hideChartOptions","this","chartObjectTopTen","sortedNames","otherSum","objIndexes","chartDataIndexes","chartData","counter","nameSet","Set","forEach","summary","key","summaryMap","add","Array","sort","a","b","item","obj","smyIndex","n","records","tempN","push","top10BackedUpObjects","i","length","rec","data","visualization","arrayToDataTable","options","JSON","parse","stringify","sliceVisibilityThreshold","PieChart","bind","chartObjectByDate","DataTable","addColumn","fromDateAxis","toDateAxis","objectsTotalValue","startTime","smyDate","smyDateFormated","formatStartTime","getHours","fill","undefined","v","f","addRows","interpolateNulls","pointSize","explorer","hAxis","title","format","viewWindow","min","max","viewWindowMode","vAxis","LineChart","chartSummaryTopTen","summaryIndexes","spName","summaryResults","top10BackedUpSummaries","chartSummaryByDate","sumRes","chartAttributeProgressByDate","attIndexes","attrNames","attrName","summarysTotalValue","selectedSummaries","attr","containsSelectedObjects","setSeconds","getFullYear","getMonth","toString","padStart","getDate","getMinutes","getSeconds","isStacked","ColumnChart","ret","chartSelection","call","setState","isBlank","chartEl","draw","selectChart","selection","chartInput","setDateFilter","formatDate","dt","chartOptions","label","id","size","variant","className","SLDSSection","isCollapsible","events","onChange","event","value","onRequestRemoveSelectedOption","onSelect","onChartSelect","labels","placeholder","comboboxFilterAndLimit","inputValue","limit","defaultChecked","isChecked","assistiveText","toggleDisabled","toggleEnabled","ref","nextProps","prevState","React","Component","GRAXSummaryChartsSimple","chart","createRef","summaryDataResults","_currentOrgRecords","objectInput","objectSelection","objectOptions","chartSelected","loadSummaries","query","getUTCTimeRangeFromUserDate","date","AND","orgid","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_index","_select","_q","_limit","_from","_sort","_sortType","_ignore_unavailable","success","results","loadSummaryData","error","xhr","status","err","console","summaryNames","isObjectExcludedFromSummary","name","refreshChart","selectedObjects","option","selectedObject","tempData","current","GRAXDatePicker","e","target","checked","onClick","CustomDataTableCell","children","href","spId","encodeURI","executionUniqueKey","rel","displayName","DataTableCell","GRAXSummaryChartsAdvanced","getsummaryBreakdownDTItems","loadSummaryBreakdownTable","parentStepSelection","summaryDTSelection","summaryBreakdownDTItems","reduce","accumulator","find","x","summaryDataSelected","itemsObjectsByDataRange","itemsObjectsByDataRangeSelection","summaryBreakdownDTSelection","summaryDTItems","summaryBDDTFromDate","summaryBDDTToDate","displayValuesOptions","displayValuesSelection","renderCounter","summaryDTFilters","currentChartSelected","fromDT","toDT","loadSummaryDataTable","loadObjectDataTable","getSelectedSummary","getScheduleProcessBreakdownSelection","summaries4chart","index","summaryList","dtSummaries","displayValuesOption","inserted","updated","archived","CreatedDate","existIndex","filter","createdDate","CreatedDateFormatted","moment","utc","tz","TZ","DATE_FORMAT","startTimeFormatted","DATETIME_FORMAT","summaryToShow","dtSummary","Id","objectsList","Object","keys","updateState","allSummaries","objName","_allSumaries","startTimes","dateIndex","indexOf","dateData","getItemsObjectsByDataRange","summartDataResults","summaryIds","objNames","update","endTime","summaryDTHandleChanged","summaryBreakdownDTHandleChanged","itemsObjectsByDataRangeHandleChanged","getObjectsSelection","dataTableHandleSort","dtName","items","sortColumn","sortProperty","property","sortDirection","newState","val","isOpen","displayValuesInput","style","height","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedHeader","fixedLayout","selectRows","onRowChange","onSort","sortable","primaryColumn","currentStepSelection","currentStepItems","renderAggregatedScheduleProcessSection","renderScheduleProcessBreakdownSection","renderObjectsSection","minHeight","renderFilterCriteriaSection","renderFilterSections","GRAXSummaryCharts","padding","token","window","__grax__","_csrf","pageParams","userid","params","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","authorization","test","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","handleToggle","onToggle","preventDefault","helpText","titleElement","join","category","useState","isValidDate","setIsValidDate","formatter","datePickerFormatter","parser","datePickerParser","formattedDate","isValid","svgns","fn","sldsTree","extend","childs","attrs","root","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","onDiv","$div","append","onButton","$button","onFinish","$root","getTreeItemContent","level","disabled","toggleClass","icon","document","createElementNS","setAttribute","class","icon_use","setAttributeNS","path","appendChild","on","getTreeItemButton","getTreeItem","getTree","each","html","jQuery","objectsToExcludeFromSummary","module","exports","objectName","toLowerCase"],"mappings":"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","file":"static/js/10.a4c6adfe.chunk.js","sourcesContent":["/* eslint-disable no-undef */\n/* global google */\nimport React from 'react';\n\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox } from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSummaryChartsChart extends React.Component {\n    constructor(props) {\n        super(props);\n\n        google.charts.load('current', {'packages':['corechart']}); // Move to componentDidMount\n        google.charts.setOnLoadCallback( this.drawChart ); // Move to componentDidMount\n\n        let fromDate = this.props.fromDate?this.props.fromDate:new Date();\n        let toDate = this.props.toDate?this.props.toDate:new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            summaryData: this.props.summaryData,\n            defaultChartSettings: {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } },\n            showChartAttr: {\n                showRecords: true,\n                showInserted: true,\n                showUpdated: true,\n                showArchived: true\n            },\n\n            chartFromDate: fromDate,\n            chartToDate: toDate,\n            showAttributeFilter: true,\n            hideChartOptions: false\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState){\n        return nextProps;\n    }\n\n    componentDidMount() {\n        this.chartObjectTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let objIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n                    let smyIndex = chartDataIndexes[key];\n\n                    let n = (obj.records?obj.records:0);\n\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[key] = counter;\n                        chartData.push( [ key + ' ['+n+']', n] );\n                        counter++;\n                    }else{\n                        let tempN = chartData[smyIndex][1] + n;\n\n                        chartData[smyIndex] = [ key + ' ['+tempN+']', tempN];\n                    }\n\n                    otherSum += n;\n                };\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpObjects = [[\"Object\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpObjects.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpObjects.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpObjects);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartObjectByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n\n                    if(!obj.startTime) {\n                      continue;\n                    }\n\n                    let n = (obj.records?obj.records:0);\n                    let smyDate = new Date(obj.startTime);\n                    let smyDateFormated = this.formatStartTime(smyDate);\n                    let smyIndex = chartDataIndexes[smyDate];\n\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                    if( !chartData[smyIndex][objIndexes[key]+1] ){\n                        chartData[smyIndex][objIndexes[key]+1] = 0;\n                    }\n                    chartData[smyIndex][objIndexes[key]+1] += n;\n                    if( !objectsTotalValue[key] ){\n                        objectsTotalValue[key] = 0;\n                    }\n                    objectsTotalValue[key] += n\n                };\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.pointSize = 5;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let summaryIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                summaryIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                let smyIndex = chartDataIndexes[summary.spName];\n                let n = (summary.summaryResults.records?summary.summaryResults.records:0);\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    chartData.push( [ summary.spName + ' ['+n+']', n] );\n                }else{\n                    let tempN = chartData[smyIndex][1] + n;\n\n                    chartData[smyIndex] = [ summary.spName + ' ['+tempN+']', tempN];\n                }\n                otherSum += n;\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpSummaries = [[\"Summary\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpSummaries.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpSummaries.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpSummaries);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                let sumRes = summary.summaryResults;\n\n                if(!sumRes.startTime) {\n                  return;\n                }\n\n                let n = (sumRes.records?sumRes.records:0);\n                let smyDate = new Date(sumRes.startTime);\n                let smyDateFormated = this.formatStartTime(smyDate);\n                let smyIndex = chartDataIndexes[smyDate];\n\n                if( !fromDateAxis || fromDateAxis >= smyDate ){\n                    fromDateAxis = new Date(smyDate);\n                    fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                }\n\n                if( !toDateAxis || toDateAxis <= smyDate ){\n                    toDateAxis = new Date(smyDate);\n                    toDateAxis.setHours(toDateAxis.getHours()+1);\n                }\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    smyIndex = counter;\n                    chartDataIndexes[smyDate] = counter;\n                    chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                    counter++;\n                }\n\n                chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                if( !chartData[smyIndex][objIndexes[summary.spName]+1] ){\n                    chartData[smyIndex][objIndexes[summary.spName]+1] = 0;\n                }\n                chartData[smyIndex][objIndexes[summary.spName]+1] += n;\n                if( !objectsTotalValue[summary.spName] ){\n                    objectsTotalValue[summary.spName] = 0;\n                }\n                objectsTotalValue[summary.spName] += n\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartAttributeProgressByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let attIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let sortedNames = [];\n            let attrNames = [];\n\n            if( this.state.showChartAttr.showRecords ){ attrNames.push( \"records\" ); }\n            if( this.state.showChartAttr.showInserted ){ attrNames.push( \"inserted\" ); }\n            if( this.state.showChartAttr.showUpdated ){ attrNames.push( \"updated\" ); }\n            if( this.state.showChartAttr.showArchived ){ attrNames.push( \"archived\" ); }\n\n            attrNames.forEach(function(attrName){\n                sortedNames.push( attrName );\n            });\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                attIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n            let summarysTotalValue = {};\n            let selectedSummaries = new Set();\n\n            summaryData.forEach(function(summary){\n                let attr = {};\n                let summaryMap = summary.summaryMap;\n                let containsSelectedObjects = false;\n\n                for( let key in summaryMap ){\n                    let obj = summaryMap[key];\n                    if( obj ){\n                        attrNames.forEach( function(attrName){\n                            attr[attrName] = attr[attrName]?attr[attrName]:0;\n                            attr[attrName] += (obj[attrName]?obj[attrName]:0);\n                        } );\n                        containsSelectedObjects = true;\n                    }\n                };\n\n                if( containsSelectedObjects && summary.summaryResults.startTime ){\n                    let startTime = new Date(summary.summaryResults.startTime);\n                    startTime.setSeconds(0);\n\n                    let smyDate = startTime;\n                    let smyDateFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n                    let smyIndex = chartDataIndexes[smyDate];\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( attrNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated + \"\\n\" + summary.spName };\n\n                    attrNames.forEach(function(attrName){\n                        if( !chartData[smyIndex][attIndexes[attrName]+1] ){\n                            chartData[smyIndex][attIndexes[attrName]+1] = 0;\n                        }\n                        chartData[smyIndex][attIndexes[attrName]+1] += attr[attrName];\n\n                        if( !summarysTotalValue[attrName] ){\n                            summarysTotalValue[attrName] = 0;\n                        }\n                        summarysTotalValue[attrName] += attr[attrName];\n                    });\n\n                    selectedSummaries.add( summary.spName );\n                }\n            });\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in attIndexes ){\n                if( summarysTotalValue[key] !== undefined ){\n                    data.addColumn('number', key + \" [\" + summarysTotalValue[key] + \"]\");\n                }\n            };\n\n            chartData.sort(function(a,b){\n                return a[0] > b[0]?1:a[0] < b[0]?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.isStacked = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Date',\n                format: 'YYYY-dd-MM\\n hh:mm:ss',\n                viewWindowMode: 'pretty',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                }\n            };\n            options.vAxis = {\n                title: 'Attributes'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.ColumnChart, data, options ];\n        }.bind(this);\n\n        this.drawChart = function(){\n            let ret = this.state.chartSelection[0].call();\n\n            this.setState({\n                isLoading: false,\n                isBlank: ret == null\n            }, function(){\n                if( ret ){\n                    var chart = new ret[0]( this.chartEl );\n                    chart.draw(ret[1],ret[2]);\n                }\n            });\n        }.bind(this);\n\n        this.selectChart = function( selection ){\n            this.setState( {\n                chartInput : '',\n                chartSelection : selection\n            }, this.drawChart );\n        }.bind(this);\n\n        this.setDateFilter = function( fromDate, toDate ){\n            this.setState({\n                chartFromDate: fromDate,\n                chartToDate: toDate\n            });\n        }.bind(this);\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        let chartOptions = [{label: \"Object Top Ten\", id: \"chartObjectTopTen\", call : this.chartObjectTopTen },\n                    {label: \"Objects By Date\", id: \"chartObjectByDate\", call : this.chartObjectByDate},\n                    {label: \"Top Ten Processes\", id: \"chartSummaryTopTen\", call : this.chartSummaryTopTen},\n                    {label: \"Processes By Date\", id: \"chartSummaryByDate\", call : this.chartSummaryByDate},\n                    {label: \"Results by Date\", id: \"chartAttributeProgressByDate\", call : this.chartAttributeProgressByDate}\n        ];\n\n        this.setState({\n            isLoading: false,\n            chartOptions: chartOptions,\n            chartSelection: [chartOptions[0]]\n        });\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n            <div>\n                <div>\n                    { !this.state.hideChartOptions &&\n                    (<div className=\"slds-grid slds-wrap\">\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                            <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n                                <div className=\"slds-grid slds-wrap\">\n\n                                    <div className={(this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter)?\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\":\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\"}>\n                                        <Combobox\n                                            events={{\n                                                onChange: (event, { value }) => {\n                                                    this.chartInput = value;\n                                                    this.setState( {\n                                                        chartInput : value\n                                                    }, this.drawChart );\n                                                },\n                                                onRequestRemoveSelectedOption: (event, data) => {\n                                                    this.setState( {\n                                                        chartInput : '',\n                                                        chartSelection : data.selection\n                                                    } );\n                                                },\n                                                onSelect: (event, data) => {\n                                                    this.selectChart( data.selection );\n\n                                                    if (this.props.onChartSelect) {\n                                                        this.props.onChartSelect(event, data.selection);\n                                                    }\n                                                },\n                                            }}\n\n                                            labels={{\n                                                label: 'Chart Type',\n                                                placeholder: '-- SELECT CHART TYPE --',\n                                            }}\n\n                                            options={comboboxFilterAndLimit({\n                                                inputValue: this.state.chartInput,\n                                                limit: 1000,\n                                                options: this.state.chartOptions,\n                                                selection: this.state.chartSelection\n                                            })}\n\n                                            selection={this.state.chartSelection}\n                                            value={this.state.chartInput}\n                                            variant=\"readonly\"\n                                        />\n                                    </div>\n\n                                    {this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter && (\n                                    <div className=\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\">\n                                        <SLDSSection title=\"Display Values\" className=\"slds-p-left_small slds-m-top_none\" >\n                                            <div className=\"slds-grid slds-wrap\">\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showRecords}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showRecords = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Records',\n                                                            toggleEnabled: 'Records'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showInserted}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showInserted = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Inserted',\n                                                            toggleEnabled: 'Inserted'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showUpdated}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showUpdated = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Updated',\n                                                            toggleEnabled: 'Updated'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showArchived}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showArchived = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Archived',\n                                                            toggleEnabled: 'Archived'\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </SLDSSection>\n                                    </div>\n                                    )}\n                                </div>\n                            </SLDSSection>\n                        </div>\n                    </div>)}\n\n                    {this.state.isBlank ? null : <div ref={chartEl => this.chartEl = chartEl} />}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox, Button } from \"@salesforce/design-system-react\";\n\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport $ from 'jquery';\nimport { comboboxFilterAndLimit, getUTCTimeRangeFromUserDate } from \"../lib/utils\";\n\nimport { isObjectExcludedFromSummary } from \"../lib/summaryChartsUtils\";\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nexport default class GRAXSummaryChartsSimple extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chart = React.createRef();\n\n        this.summaryDataResults = [];\n        let fromDate = new Date();\n        let toDate = new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            fromDate: fromDate,\n            toDate: toDate,\n            _currentOrgRecords: true,\n\n            objectInput: '',\n            objectSelection: [],\n            objectOptions: [],\n\n            chartData: [],\n            chartSelected: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadSummaries =  function(){\n            this.setState({\n                isLoading: true\n            });\n\n            let fromDate = this.state.fromDate;\n            fromDate = fromDate.getFullYear() + '-' + (fromDate.getMonth()+1).toString().padStart(2,0) + '-' + fromDate.getDate().toString().padStart(2,0);\n            let toDate = this.state.toDate;\n            toDate = toDate.getFullYear() + '-' + (toDate.getMonth()+1).toString().padStart(2,0) + '-' + toDate.getDate().toString().padStart(2,0);\n\n            fromDate = getUTCTimeRangeFromUserDate({ date: fromDate })[0];\n            toDate = getUTCTimeRangeFromUserDate({ date: toDate })[1];\n\n            let query = {\"AND\": [\n              {\"GTE\": {\"summaryResults.startTime\": fromDate}},\n              {\"LTE\": {\"summaryResults.startTime\": toDate}}\n            ]};\n\n            if(this.state._currentOrgRecords) {\n              query.AND.push({\"KEQ\": {\"graxorgid\": orgid}});\n            }\n\n            $.ajax({\n                type: 'GET',\n\n                url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                    action:'load',\n                    dataIndex: 'graxgrax_backup_summaryindex',\n                    _index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n                    _select: 'summaryMap,spName,CreatedDate,summaryResults',\n                    _q: JSON.stringify(query),\n                    _limit: 1000,\n                    _from: 0,\n                    _sort: '',\n                    _sortType: '',\n                    _ignore_unavailable: true\n                }),\n\n                success: function(data) {\n                    // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n                    if( data.results ){\n                        this.summaryDataResults = data.results;\n                    }\n\n                    this.setState({\n                        isLoading: false\n                    }, function(){\n                        this.loadSummaryData();\n                    });\n                }.bind(this),\n                error: function(xhr, status, err) {\n                    console.error(xhr, status, err);\n\n                    this.setState({\n                        isLoading: false,\n                    });\n                }.bind(this)\n            });\n        };\n\n        this.loadSummaryData = function(){\n            let summaryData = this.summaryDataResults;\n            let summaryNames = new Set();\n            let sortedNames = [];\n\n            summaryData.forEach(summary => {\n              for (let key in summary.summaryMap) {\n                if (!isObjectExcludedFromSummary(key)) {\n                  summaryNames.add(key);\n                }\n              }\n            });\n\n            sortedNames = new Array(...summaryNames);\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            let objectOptions = [{label:\"All\", id:\"ALL\"}];\n            sortedNames.forEach(function(name){\n                objectOptions.push( {label: name, id: name} );\n            });\n\n            this.setState({\n                isLoading: false,\n                objectOptions: objectOptions,\n                objectSelection: [objectOptions[0]]\n            }, this.refreshChart );\n        };\n\n        this.refreshChart = function(){\n            let summaryData = this.summaryDataResults;\n            let selectedObjects = [];\n            let chartData = [];\n\n            if( this.state.objectSelection && this.state.objectSelection[0].id !== \"ALL\" ){\n                selectedObjects.push( this.state.objectSelection[0].id );\n            }else{\n                this.state.objectOptions.forEach( function(option){\n                    selectedObjects.push( option.id );\n                } );\n            }\n\n\n            summaryData.forEach(summary => {\n              selectedObjects.forEach(selectedObject => {\n                if (\n                  !isObjectExcludedFromSummary(selectedObject) &&\n                  summary.summaryMap[selectedObject]\n                ) {\n                  const tempData = {\n                    summaryMap: {\n                      [selectedObject]: { ...summary.summaryMap[selectedObject] }\n                    },\n                    spName: summary.spName,\n                    summaryResults: {\n                      ...summary.summaryMap[selectedObject]\n                    }\n                  };\n\n                  chartData.push(tempData);\n                }\n              });\n            });\n\n            this.setState({\n                isLoading: false,\n                chartData: chartData\n            },function(){\n                this.chart.current.drawChart();\n            }.bind(this));\n        }\n\n        this.chartSelection = function(selection){\n            this.setState( {\n                chartSelected: selection\n            } );\n        };\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        this.setState({\n            isLoading: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLoading && (<Spinner size=\"large\" variant=\"brand\" />\n\t\t\t\t)}\n                <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Filter Criteria\" >\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n\n                                <dl className=\"slds-list_stacked\">\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                                        <label className=\"slds-form-element__label\" >From</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    fromDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.fromDate }\n                                        />\n                                    </dd>\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                                        <label className=\"slds-form-element__label\" >To</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    toDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.toDate }\n                                        />\n                                    </dd>\n                                </dl>\n                            </div>\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(e) => {\n                                        this.setState({\n                                            _currentOrgRecords: !e.target.checked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n\n                                <div className=\"slds-float_right\">\n                                    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                                        this.loadSummaries();\n                                        this.chart.current.setDateFilter( this.state.fromDate, this.state.toDate );\n                                        this.setState( {\n                                            chartSelected: this.chart.current.state.chartSelection\n                                        } );\n                                    }} />\n                                </div>\n                            </div>\n                        </SLDSSection>\n                    </div>\n                    { this.state.objectOptions && (\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                                <Combobox\n                                    events={{\n                                        onChange: (event, { value }) => {\n                                            this.setState( {\n                                                objectInput : value\n                                            }, this.refreshChart );\n                                        },\n                                        onRequestRemoveSelectedOption: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            } );\n                                        },\n                                        onSelect: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            }, this.refreshChart );\n                                        },\n                                    }}\n\n                                    labels={{\n                                        label: 'Salesforce Object',\n                                        placeholder: '-- SELECT SALESFORCE OBJECT --',\n                                    }}\n\n                                    options={comboboxFilterAndLimit({\n                                        inputValue: this.state.objectInput,\n                                        limit: 1000,\n                                        options: this.state.objectOptions,\n                                        selection: this.state.objectSelection\n                                    })}\n\n                                    selection={this.state.objectSelection}\n                                    value={this.state.objectInput}\n                                    variant=\"readonly\"\n                                />\n                            </div>\n\n                            {this.chart.current &&\n                            (<Combobox\n                                events={{\n                                    onChange: (event, { value }) => {\n                                        this.chart.current.chartInput = value;\n                                        this.chart.current.setState( {\n                                            chartInput : value\n                                        } );\n                                    },\n                                    onRequestRemoveSelectedOption: (event, data) => {\n                                        this.chart.current.selectChart(data.selection)\n                                    },\n                                    onSelect: (event, data) => {\n                                        if( data.selection.length > 0 ){\n                                            this.chart.current.selectChart(data.selection);\n\n                                            this.setState( {\n                                                chartSelected: data.selection\n                                            } );\n                                        }\n                                    },\n                                }}\n\n                                labels={{\n                                    label: 'Chart Type',\n                                    placeholder: '-- SELECT CHART TYPE --',\n                                }}\n\n                                options={comboboxFilterAndLimit({\n                                    inputValue: this.chart.current.state.chartInput,\n                                    limit: 1000,\n                                    options: this.chart.current.state.chartOptions,\n                                    selection: this.state.chartSelected?this.state.chartSelected:this.chart.current.state.chartSelection\n                                })}\n\n                                selection={this.state.chartSelected}\n                                value={this.chart.current.state.chartInput}\n                                variant=\"readonly\"\n                            />)}\n                        </SLDSSection>\n                    </div>) }\n                </div>\n\n                <GRAXSummaryChartsChart\n                    ref={this.chart}\n                    summaryData={this.state.chartData}\n                    showAttributeFilter={false}\n                    hideChartOptions={true}\n                    onChartSelect={(event, selection)=>{\n                        this.chartSelection( selection );\n                    }}\n                />\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport {\n  Spinner,\n  Checkbox,\n  Button,\n  DataTable,\n  DataTableColumn,\n  DataTableCell,\n  Combobox\n} from \"@salesforce/design-system-react\";\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport {\n  moment,\n  getUTCTimeRangeFromUserDate,\n  DATE_FORMAT,\n  DATETIME_FORMAT,\n  TZ,\n  comboboxFilterAndLimit\n} from \"../lib/utils\";\n\nimport $ from 'jquery';\n\nimport '../public/js/jquery.sldsTree.js';\n\nimport { isObjectExcludedFromSummary } from \"../lib/summaryChartsUtils\";\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nconst CustomDataTableCell = ({ children, ...props }) => (\n\t<DataTableCell {...props}>\n\t\t<a\n\t\t\thref = {baseUrl + \"/grax-app/grax-data-lake/generateBackupSummary/\" + props.item.spId + \"/\" + encodeURI(props.item.executionUniqueKey) + \"?orgid=\" + orgid }\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n\t\t>\n\t\t\t{children}\n\t\t</a>\n\t</DataTableCell>\n);\nCustomDataTableCell.displayName = DataTableCell.displayName;\n\nexport default class GRAXSummaryChartsAdvanced extends React.Component {\n    constructor(props) {\n        super(props);\n\n\t\tthis.chart = React.createRef();\n\n\t\tthis.summaryDataResults = [];\n\t\tthis.summaryDataSelected = [];\n\t\tthis.itemsObjectsByDataRange = [];\n\t\tthis.itemsObjectsByDataRangeSelection = [];\n\t\tthis.summaryBreakdownDTItems = [];\n\t\tthis.summaryBreakdownDTSelection = [];\n\t\tthis.summaryDTItems = [];\n\t\tthis.summaryDTSelection = [];\n\t\tthis.chartOptions = [];\n\t\tthis.defaultChartSettings = {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } };\n\t\tthis.summaryBDDTFromDate = new Date();\n    this.summaryBDDTToDate = new Date();\n\n    this.displayValuesOptions = [\n      {id: \"all\", label: \"Show all\"},\n      {id: \"inserted\", label: \"Only show schedule processes that have at least 1 insert\"},\n      {id: \"updated\", label: \"Only show schedule processes that have at least 1 update\"},\n      {id: \"archived\", label: \"Only show schedule processes that have at least 1 archive\"}\n    ];\n\n    const displayValuesSelection = [this.displayValuesOptions[0]]\n\n\t\tthis.state = {\n      isLoading: true,\n      renderCounter: 0,\n\n\t\t\tchartData: [],\n\n\t\t\tchartSelection: [],\n\t\t\tchartInput: '',\n\t\t\tfromDate: new Date(),\n\t\t\ttoDate: new Date(),\n\t\t\t_currentOrgRecords: true,\n\n\t\t\tsummaryDTFilters: {\n\t\t\t\tshowRecords: true, showInserted: true, showUpdated: true, showArchived: true\n\t\t\t},\n\n\t\t\tinputValue: 'Select an option',\n\t\t\tselection: [],\n      checked: [],\n\n      displayValuesSelection,\n\n\t\t\terror: null\n        };\n    }\n\n    componentDidMount() {\n\t\ttry{\n\t\t\tthis.loadSummaries = function(){\n        this.summaryDTSelection = []\n        this.summaryBreakdownDTSelection = []\n        this.itemsObjectsByDataRangeSelection = [];\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t});\n\n\t\t\t\tlet currentChartSelected = this.state.chartSelected;\n\n\t\t\t\tlet fromDT = this.state.fromDate;\n\t\t\t\tfromDT = fromDT.getFullYear() + '-' + (fromDT.getMonth()+1).toString().padStart(2,0) + '-' + fromDT.getDate().toString().padStart(2,0);\n\t\t\t\tlet toDT = this.state.toDate;\n\t\t\t\ttoDT = toDT.getFullYear() + '-' + (toDT.getMonth()+1).toString().padStart(2,0) + '-' + toDT.getDate().toString().padStart(2,0);\n\n        fromDT = getUTCTimeRangeFromUserDate({ date: fromDT })[0];\n        toDT = getUTCTimeRangeFromUserDate({ date: toDT })[1];\n\n        let query = {\"AND\": [\n          {\"GTE\": {\"summaryResults.startTime\": fromDT}},\n          {\"LTE\": {\"summaryResults.startTime\": toDT}}\n        ]};\n\n\t\t\t\tif(this.state._currentOrgRecords) {\n          query.AND.push({\"KEQ\": {\"graxorgid\": orgid}});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBDDTFromDate = this.state.fromDate;\n\t\t\t\tthis.summaryBDDTToDate = this.state.toDate;\n\n\t\t\t\t$.ajax({\n\t\t\t\t\ttype: 'GET',\n\n\t\t\t\t\turl: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n            action: 'load',\n            dataIndex: 'graxgrax_backup_summaryindex',\n\t\t\t\t\t\t_index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n\t\t\t\t\t\t_select: 'summaryMap,spName,spId,CreatedDate,summaryResults,executionUniqueKey',\n\t\t\t\t\t\t_q: JSON.stringify(query),\n\t\t\t\t\t\t_limit: 1000,\n\t\t\t\t\t\t_from: 0,\n\t\t\t\t\t\t_sort: '',\n            _sortType: '',\n            _ignore_unavailable: true\n\t\t\t\t\t}),\n\n\t\t\t\t\tsuccess: function(data) {\n\t\t\t\t\t\t// IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n\t\t\t\t\t\tif( data.results ){\n\t\t\t\t\t\t\tthis.summaryDataResults = data.results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t\tchartSelected: currentChartSelected\n\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\tthis.loadSummaryDataTable(); this.loadSummaryBreakdownTable(); this.loadObjectDataTable();\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\terror: function(xhr, status, err) {\n\t\t\t\t\t\tconsole.error(xhr, status, err);\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tthis.getSelectedSummary = function(){\n        this.summaryBreakdownDTSelection = this.getScheduleProcessBreakdownSelection(this.summaryBreakdownDTSelection);\n\n\t\t\t\tconst selectedSummaries = this.summaryBreakdownDTSelection;\n\t\t\t\tconst summaryDataResults = this.summaryDataResults;\n\n\t\t\t\tconst summaries4chart = [];\n\n\t\t\t\tselectedSummaries.forEach(function(summary){\n\t\t\t\t\tsummaries4chart.push( summaryDataResults[summary.index] );\n\t\t\t\t\t/*summary.index.forEach(function(index){\n\t\t\t\t\t\tsummaries4chart.push( summaryDataResults[index] );\n\t\t\t\t\t});*/\n\t\t\t\t});\n\t\t\t\treturn summaries4chart;\n\t\t\t};\n\n\t\t\tthis.loadSummaryDataTable = function() {\n        const summaryList = this.summaryDataResults;\n        const dtSummaries = [];\n\n        if (summaryList) {\n          const [\n            displayValuesOption = this.displayValuesOptions[0]\n          ] = this.state.displayValuesSelection;\n\n          let i = 0;\n\n          summaryList.forEach(summary => {\n            const { summaryResults = {} } = summary;\n            const { records = 0, inserted = 0, updated = 0, archived = 0 } = summaryResults;\n\n            if (\n              (displayValuesOption.id === \"archived\" && archived === 0) ||\n              (displayValuesOption.id === \"inserted\" && inserted === 0) ||\n              (displayValuesOption.id === \"updated\" && updated === 0)\n            ) {\n              return;\n            }\n\n            const { spId, spName, executionUniqueKey, CreatedDate } = summary;\n\n            const existIndex = dtSummaries.filter(e => e.name === spName);\n\n            if (existIndex && existIndex.length > 0) {\n              existIndex[0].index.push(i);\n\n              existIndex[0].records += records;\n              existIndex[0].inserted += inserted;\n              existIndex[0].updated += updated;\n              existIndex[0].archived += archived;\n            } else {\n              const createdDate = new Date(CreatedDate);\n              const startTime = new Date(summaryResults.startTime);\n\n              dtSummaries.push({\n                name: spName,\n                id: spName,\n                spId,\n                executionUniqueKey,\n                CreatedDate,\n                CreatedDateFormatted: moment\n                  .utc(createdDate)\n                  .tz(TZ)\n                  .format(DATE_FORMAT),\n                startTime,\n                startTimeFormatted: moment\n                  .utc(startTime)\n                  .tz(TZ)\n                  .format(DATETIME_FORMAT),\n                records,\n                inserted,\n                updated,\n                archived,\n                index: [i]\n              });\n            }\n            i++;\n          });\n\n          dtSummaries.sort((a, b) => {\n            if (a.name > b.name) {\n              return 1;\n            }\n\n            if (a.name < b.name) {\n              return -1;\n            }\n\n            return 0;\n          });\n        }\n\n        this.summaryDTItems = dtSummaries;\n      };\n\n\t\t\tthis.loadSummaryBreakdownTable = function(){\n\t\t\t\tconst summaryToShow = this.summaryDTSelection;\n\t\t\t\tconst summaryDataResults = this.summaryDataResults;\n\t\t\t\tconst summaryBreakdownDTItems = [];\n\n\t\t\t\tif( summaryToShow ){\n\n\t\t\t\t\tsummaryToShow.forEach(function(dtSummary){\n\t\t\t\t\t\tdtSummary.index.forEach(function(index){\n\t\t\t\t\t\t\tlet summary = summaryDataResults[index];\n\n\t\t\t\t\t\t\tlet archived = summary.summaryResults.archived;\n\t\t\t\t\t\t\tlet records = summary.summaryResults.records;\n\t\t\t\t\t\t\tlet inserted = summary.summaryResults.inserted;\n\t\t\t\t\t\t\tlet updated = summary.summaryResults.updated;\n\n\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\tconst createdDate = new Date(summary.CreatedDate);\n              const startTime = new Date(summary.summaryResults.startTime);\n\n\t\t\t\t\t\t\tsummaryBreakdownDTItems.push({\n\t\t\t\t\t\t\t\tname: summary.spName,\n                Id: summary.Id,\n                id: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\texecutionUniqueKey: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\t\tCreatedDate: summary.CreatedDate,\n\t\t\t\t\t\t\t\tCreatedDateFormatted: moment.utc(createdDate).tz(TZ).format(DATE_FORMAT),\n\t\t\t\t\t\t\t\tstartTime: summary.startTime,\n\t\t\t\t\t\t\t\tstartTimeFormatted: moment.utc(startTime).tz(TZ).format(DATETIME_FORMAT),\n\t\t\t\t\t\t\t\trecords,\n\t\t\t\t\t\t\t\tinserted,\n\t\t\t\t\t\t\t\tupdated,\n                archived,\n                objectsList: summary.summaryMap ? Object.keys(summary.summaryMap) : []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBreakdownDTItems = summaryBreakdownDTItems;\n      }\n\n\t\t\tthis.loadObjectDataTable = function(updateState = true){\n\t\t\t\tlet summaryToShow = this.getSelectedSummary();\n\t\t\t\tlet itemsObjectsByDataRange = [];\n\n\t\t\t\tif( summaryToShow ){\n\t\t\t\t\tlet allSummaries = {};\n\n\t\t\t\t\tsummaryToShow.forEach( function( summaryData ){\n\t\t\t\t\t\tvar summaryMap = summaryData.summaryMap;\n\n\t\t\t\t\t\tlet smyDate = new Date(summaryData.summaryResults.startTime );\n\n\t\t\t\t\t\tfor( var objName in summaryMap ){\n\t\t\t\t\t\t\tif (\n                typeof summaryMap[objName] == \"object\" &&\n                !isObjectExcludedFromSummary(objName)\n              ) {\n\t\t\t\t\t\t\t\tlet archived = summaryMap[objName].archived;\n\t\t\t\t\t\t\t\tlet records = summaryMap[objName].records;\n\t\t\t\t\t\t\t\tlet inserted = summaryMap[objName].inserted;\n\t\t\t\t\t\t\t\tlet updated = summaryMap[objName].updated;\n\n\t\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet _allSumaries = allSummaries[objName];\n\n\t\t\t\t\t\t\t\tif( !_allSumaries ){\n\t\t\t\t\t\t\t\t\t_allSumaries = {};\n\t\t\t\t\t\t\t\t\t_allSumaries.name = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.id = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.archived = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.records = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.inserted = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.updated = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_allSumaries.archived += archived?archived:0;\n\t\t\t\t\t\t\t\t_allSumaries.records += records?records:0;\n\t\t\t\t\t\t\t\t_allSumaries.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\t_allSumaries.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet dateIndex = _allSumaries.startTimes.indexOf( smyDate );\n\n\t\t\t\t\t\t\t\tif( dateIndex < 0 ){\n\t\t\t\t\t\t\t\t\tdateIndex = _allSumaries.startTimes.length;\n\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes.push({\n\t\t\t\t\t\t\t\t\t\tstartTime: smyDate,\n\t\t\t\t\t\t\t\t\t\tarchived : 0,\n\t\t\t\t\t\t\t\t\t\trecords : 0,\n\t\t\t\t\t\t\t\t\t\tinserted : 0,\n\t\t\t\t\t\t\t\t\t\tupdated : 0\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet dateData = _allSumaries.startTimes[dateIndex];\n\t\t\t\t\t\t\t\tdateData.archived += archived?archived:0;\n\t\t\t\t\t\t\t\tdateData.records += records?records:0;\n\t\t\t\t\t\t\t\tdateData.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\tdateData.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tallSummaries[objName] = _allSumaries;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Top Ten Data\n\t\t\t\t\tfor( var objName in allSummaries ){\n\t\t\t\t\t\titemsObjectsByDataRange.push( allSummaries[objName] );\n\t\t\t\t\t}\n\n\t\t\t\t\titemsObjectsByDataRange.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\n\t\t\t\t\t// itemsObjectsByDataRangeSelection = itemsObjectsByDataRange;\n\t\t\t\t}\n\n\t\t\t\tthis.itemsObjectsByDataRange = itemsObjectsByDataRange;\n\t\t\t\t// this.itemsObjectsByDataRangeSelection = itemsObjectsByDataRangeSelection;\n\n        if (updateState) {\n          this.setState({\n            isLoading: false,\n            renderCounter: this.state.renderCounter + 1,\n          }, this.refreshChart );\n        }\n      }.bind(this);\n\n      this.getItemsObjectsByDataRange = () => {\n        this.loadObjectDataTable(false);\n\n        return this.itemsObjectsByDataRange;\n      };\n\n\t\t\tthis.refreshChart = function(){\n\t\t\t\tconst chartData = [];\n\n\t\t\t\tconst summartDataResults = this.summaryDataResults;\n\t\t\t\t// const summaryDTSelection = this.summaryDTSelection;\n\t\t\t\tconst summaryBreakdownDTSelection = this.summaryBreakdownDTSelection;\n\t\t\t\tconst itemsObjectsByDataRangeSelection = this.itemsObjectsByDataRangeSelection;\n\n\t\t\t\tconst summaryIds = {};\n\t\t\t\tsummaryBreakdownDTSelection.forEach(summary => {\n\t\t\t\t\tsummaryIds[summary.Id] = summary.Id;\n\t\t\t\t});\n\n\t\t\t\tconst objNames = {};\n\t\t\t\titemsObjectsByDataRangeSelection.forEach(obj => {\n\t\t\t\t\tobjNames[obj.name] = obj.name;\n\t\t\t\t});\n\n\t\t\t\tsummartDataResults.forEach(summary => {\n\t\t\t\t\tconst tempData = {};\n\t\t\t\t\tif( summaryIds[summary.Id] ){\n\t\t\t\t\t\ttempData.summaryMap = {};\n\t\t\t\t\t\ttempData.spName = summary.spName;\n                        tempData.summaryResults= {\n\t\t\t\t\t\t\tarchived: 0,\n\t\t\t\t\t\t\trecords: 0,\n\t\t\t\t\t\t\tinserted: 0,\n\t\t\t\t\t\t\tupdate: 0,\n\t\t\t\t\t\t\tstartTime: summary.summaryResults.startTime,\n\t\t\t\t\t\t\tendTime: summary.summaryResults.endTime\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor( let key in summary.summaryMap ){\n\t\t\t\t\t\t\tif( objNames[key] ){\n\t\t\t\t\t\t\t\tlet summaryMap = summary.summaryMap;\n\t\t\t\t\t\t\t\ttempData.summaryMap[key] = summaryMap[key];\n\t\t\t\t\t\t\t\ttempData.summaryResults.archived = summaryMap[key].archived?summaryMap[key].archived:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.records = summaryMap[key].records?summaryMap[key].records:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.inserted = summaryMap[key].inserted?summaryMap[key].inserted:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.update = summaryMap[key].update?summaryMap[key].update:0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchartData.push( tempData );\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setState({\n          isLoading: false,\n          renderCounter: this.state.renderCounter + 1,\n\t\t\t\t\tchartData\n\t\t\t\t}, () => {\n\t\t\t\t\tthis.chart.current.drawChart();\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryDTHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState( {\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){ */\n          this.summaryDTSelection = data.selection;\n\n\t\t\t\t\tthis.loadSummaryBreakdownTable();\n\t\t\t\t\tthis.summaryBreakdownDTHandleChanged(null, {\n            selection: this.summaryBreakdownDTSelection\n          });\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//} );\n\n\t\t\t\tthis.setState({\n          isLoading: false,\n          renderCounter: this.state.renderCounter + 1\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryBreakdownDTHandleChanged = function(event, data){\n\t\t\t\tthis.summaryBreakdownDTSelection = this.getScheduleProcessBreakdownSelection(data.selection);\n        this.loadObjectDataTable();\n        this.itemsObjectsByDataRangeHandleChanged(null, {\n          selection: this.itemsObjectsByDataRangeSelection\n        });\n\t\t\t\t//this.drawChart();\n\n\t\t\t\tthis.setState({\n          isLoading: false,\n          renderCounter: this.state.renderCounter + 1\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.itemsObjectsByDataRangeHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){*/\n\t\t\t\t\tthis.itemsObjectsByDataRangeSelection = this.getObjectsSelection(data.selection);\n\n\t\t\t\t\tthis.refreshChart();\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//});\n\t\t\t\tthis.setState({\n          isLoading: false,\n          renderCounter: this.state.renderCounter + 1\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.dataTableHandleSort = ( dtName, items, sortColumn, ...rest) => {\n\t\t\t\tconst sortProperty = sortColumn.property;\n\t\t\t\tconst sortDirection = sortColumn.sortDirection;\n\t\t\t\tconst newState = {\n\t\t\t\t\t[dtName+\"Column\"]: sortProperty,\n\t\t\t\t\t[dtName+\"Direction\"]: {\n\t\t\t\t\t\t[sortProperty]: sortDirection,\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// needs to work in both directions\n\t\t\t\titems = items.sort((a, b) => {\n\t\t\t\t\tlet val = 0;\n\n\t\t\t\t\tif (a[sortProperty] > b[sortProperty]) {\n\t\t\t\t\t\tval = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a[sortProperty] < b[sortProperty]) {\n\t\t\t\t\t\tval = -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sortDirection === 'desc') {\n\t\t\t\t\t\tval *= -1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn val;\n\t\t\t\t});\n\n\t\t\t\tthis.setState(newState);\n\t\t\t};\n\n\t\t\tthis.formatStartTime = function( startTime ){\n\t\t\t\treturn startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\t\t\t};\n\n\t\t\tthis.formatDate = function( dt ){\n\t\t\t\treturn dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false\n\t\t\t});\n\n\t\t}catch(e){}\n\n    }\n\n  cleanFilterTables() {\n    this.summaryBreakdownDTItems = [];\n    this.summaryDTSelection = [];\n    this.summaryBreakdownDTSelection = [];\n    this.itemsObjectsByDataRangeSelection = [];\n    this.itemsObjectsByDataRange = [];\n\n    this.setState({\n      chartData: [],\n      renderCounter: this.state.renderCounter + 1\n    });\n  }\n\n    renderAggregatedScheduleProcessSection() {\n      return (\n        <SLDSSection\n          title=\"Step 1: Aggregated GRAX Schedule Process\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1 slds-p-horizontal_xx-small\">\n              <Combobox\n                events={{\n                  onChange: (event, { value }) => {\n                    this.displayValuesInput = value;\n                    this.setState({\n                      displayValuesInput: value\n                    });\n                  },\n                  onRequestRemoveSelectedOption: (event, data) => {\n                    this.setState(\n                      {\n                        displayValuesInput: \"\",\n                        displayValuesSelection: data.selection\n                      },\n                      () => {\n                        this.loadSummaryDataTable();\n                        this.loadSummaryBreakdownTable();\n                        this.loadObjectDataTable();\n                      }\n                    );\n                  },\n                  onSelect: (event, data) => {\n                    this.setState(\n                      {\n                        displayValuesSelection: data.selection\n                      },\n                      () => {\n                        this.loadSummaryDataTable();\n                        this.loadSummaryBreakdownTable();\n                        this.loadObjectDataTable();\n                      }\n                    );\n                  }\n                }}\n                labels={{\n                  label: \"Display Values\",\n                  placeholder: \"-- SELECT OPTION --\"\n                }}\n                options={comboboxFilterAndLimit({\n                  inputValue: this.state.displayValuesInput,\n                  limit: 1000,\n                  options: this.displayValuesOptions,\n                  selection: this.state.displayValuesSelection\n                })}\n                selection={this.state.displayValuesSelection}\n                value={this.state.displayValuesInput}\n                variant=\"readonly\"\n              />\n            </div>\n\n            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1 slds-p-top_small\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.summaryDTItems}\n                  id=\"DataTable_Summaries\"\n                  selection={this.summaryDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryDTHandleChanged}\n                  onSort={sortColumn => {\n                    this.dataTableHandleSort(\n                      \"DataTable_Summaries\",\n                      this.summaryDTItems,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  >\n                    <CustomDataTableCell />\n                  </DataTableColumn>\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    getScheduleProcessBreakdownSelection(currentStepSelection) {\n      const parentStepSelection = this.summaryDTSelection;\n      const currentStepItems = this.summaryBreakdownDTItems;\n\n      return currentStepSelection.reduce((accumulator, item) => {\n        const parentItem = parentStepSelection.find(x => x.name === item.name);\n\n        if (parentItem !== undefined) {\n          return [...accumulator, currentStepItems.find(x => x.id === item.id)];\n        }\n\n        return accumulator;\n      }, []);\n    };\n\n    getsummaryBreakdownDTItems = () => {\n      this.loadSummaryBreakdownTable();\n\n      const parentStepSelection = this.summaryDTSelection;\n      const currentStepItems = this.summaryBreakdownDTItems;\n\n      return currentStepItems.reduce((accumulator, item) => {\n        const parentItem = parentStepSelection.find(x => x.name === item.name);\n\n        if (parentItem !== undefined) {\n          return [...accumulator, item];\n        }\n\n        return accumulator;\n      }, []);\n    };\n\n    renderScheduleProcessBreakdownSection() {\n      return (\n        <SLDSSection\n          title=\"Step 2: GRAX Schedule Process Breakdown\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.getsummaryBreakdownDTItems()}\n                  id=\"DataTable_SummaryBreakdown\"\n                  selection={this.summaryBreakdownDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryBreakdownDTHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_SummaryBreakdown\",\n                      this.summaryBreakdownDTItems,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  />\n                  <DataTableColumn\n                    label=\"Execution Unique Key\"\n                    sortable\n                    property=\"executionUniqueKey\"\n                  />\n                  <DataTableColumn label=\"Start Time\" sortable property=\"startTimeFormatted\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    getObjectsSelection(currentStepSelection) {\n      const parentStepSelection = this.summaryBreakdownDTSelection;\n      const currentStepItems = this.itemsObjectsByDataRange;\n\n      return currentStepSelection.reduce((accumulator, item) => {\n        const parentItem = parentStepSelection.find(x => x.objectsList.indexOf(item.name) !== -1);\n\n        if (parentItem !== undefined) {\n          return [...accumulator, currentStepItems.find(x => x.id === item.id)];\n        }\n\n        return accumulator;\n      }, []);\n    }\n\n    renderObjectsSection() {\n      return (\n        <SLDSSection\n          title=\"Step 3: Objects\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.getItemsObjectsByDataRange()}\n                  id=\"DataTable_ObjectsInSummary\"\n                  selection={this.itemsObjectsByDataRangeSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.itemsObjectsByDataRangeHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_ObjectsInSummary\",\n                      this.itemsObjectsByDataRange,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn label=\"Object Name\" sortable primaryColumn property=\"name\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterCriteriaSection() {\n      return (\n        <SLDSSection title=\"Filter Criteria\">\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n            <dl className=\"slds-list_stacked\">\n              <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                <label className=\"slds-form-element__label\">From</label>\n              </dt>\n              <dd className=\"slds-item_detail\">\n                <GRAXDatePicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      fromDate: data.date\n                    });\n                  }}\n                  value={this.state.fromDate}\n                />\n              </dd>\n              <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                <label className=\"slds-form-element__label\">To</label>\n              </dt>\n              <dd className=\"slds-item_detail\">\n                <GRAXDatePicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      toDate: data.date\n                    });\n                  }}\n                  value={this.state.toDate}\n                />\n              </dd>\n            </dl>\n          </div>\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n            <Checkbox\n              className=\"inline-block\"\n              defaultChecked={!this.state._currentOrgRecords}\n              onChange={e => {\n                this.setState({\n                  _currentOrgRecords: !e.target.checked\n                });\n              }}\n              assistiveText={{\n                label: \"Show records from all environments?\"\n              }}\n              variant=\"toggle\"\n              labels={{\n                toggleDisabled: \"Current Environment\",\n                toggleEnabled: \"All connected SF environments\"\n              }}\n            />\n            <div className=\"slds-float_right\">\n              <Button\n                label=\"Retrieve\"\n                variant=\"brand\"\n                onClick={() => {\n                  this.loadSummaries();\n                  this.chart.current.setDateFilter(this.state.fromDate, this.state.toDate);\n                }}\n              />\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterSections() {\n      if (!this.itemsObjectsByDataRange) return null;\n\n      return (\n        <div>\n          {this.summaryDataResults.length > 0 ? this.renderAggregatedScheduleProcessSection() : null}\n          {this.summaryDTSelection.length > 0 ? this.renderScheduleProcessBreakdownSection() : null}\n          {this.summaryBreakdownDTSelection.length > 0 ? this.renderObjectsSection() : null}\n        </div>\n      );\n    }\n\n    render() {\n      return (\n        <div style={{ minHeight: 2000 }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n\n          {this.renderFilterCriteriaSection()}\n          {this.renderFilterSections()}\n\n          <GRAXSummaryChartsChart ref={this.chart} summaryData={this.state.chartData} renderCounter={this.state.renderCounter} />\n        </div>\n      );\n    }\n}\n","import React from 'react';\n\nimport { Tabs, TabsPanel, Spinner } from '@salesforce/design-system-react';\n\n// import '../public/js/jquery.sldsTree.js';\n\n// import '../public/js/googlecharts.js';\nimport GRAXSummaryChartsSimple from './GRAXSummaryChartsSimple';\nimport GRAXSummaryChartsAdvanced from './GRAXSummaryChartsAdvanced';\n\nexport default class GRAXSummaryCharts extends React.Component {\n    constructor(props) {\n        super(props);\n\t\t\n\t\tthis.state = {\n            isLoading: true\n        };\n    }\n\n    componentDidMount() {\n\t\tthis.setState({\n\t\t\tisLoading: false\n\t\t});\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n\t\t\t<div style={{ minHeight: 1000 }} >\n\t\t\t\t<Tabs variant={this.props.variant} id=\"tabs-simple-advanced\" >\n\t\t\t\t\t<TabsPanel label=\"Simple\">\n\t\t\t\t\t\t<GRAXSummaryChartsSimple />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t\t<TabsPanel label=\"Advanced\" style={{padding:0}} >\n\t\t\t\t\t\t<GRAXSummaryChartsAdvanced />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t</Tabs>\n\t\t\t</div>\n        )\n    }\n}\n","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      // load token\n      // anticipates that the API token is in the referrer\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","/* eslint-disable */\nimport React from \"react\";\nimport { Icon } from \"@salesforce/design-system-react\";\n\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool,\n  isCollapsible: PropTypes.bool,\n  onToggle: PropTypes.func,\n  title: PropTypes.string.isRequired,\n  helpText: PropTypes.any,\n  id: PropTypes.string,\n  key: PropTypes.string,\n  children: PropTypes.any.isRequired\n};\n\nclass SLDSSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { isOpen, isCollapsible } = props;\n\n    this.state = {\n      isOpen: isOpen === true ? true : false || isCollapsible === undefined\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(e) {\n    const { onToggle } = this.props;\n\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n\n    if (onToggle) {\n      onToggle(isOpen);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { id, key, isCollapsible, title, helpText, className, children } = this.props;\n    const { isOpen } = this.state;\n\n    const titleElement = (\n      <span\n        className={`slds-truncate${isCollapsible ? \"\" : \" slds-p-horizontal_small\"}`}\n        title={title}\n      >\n        {title}\n        {helpText}\n      </span>\n    );\n\n    return (\n      <div\n        id={id || key}\n        className={[\"slds-section\", isOpen && \"slds-is-open\", className].join(\n          \" \"\n        )}\n      >\n        <h3 className=\"slds-section__title slds-theme_shade\">\n          {isCollapsible ? (\n            <button type=\"button\" className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n              <Icon\n                assistiveText={{ label: title }}\n                category=\"utility\"\n                name=\"switch\"\n                size=\"x-small\"\n                className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n              />\n              {titleElement}\n            </button>\n          ) : (\n            titleElement\n          )}\n        </h3>\n        {isOpen && <div className=\"slds-section__content\">{children}</div>}\n      </div>\n    );\n  }\n}\n\nSLDSSection.propTypes = propTypes;\n\nexport default SLDSSection;\n","/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\";\n\nimport { Datepicker } from \"@salesforce/design-system-react\";\n\nimport { moment, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst GRAXDatePicker = props => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  return (\n    <div className=\"slds-is-relative\">\n      <Datepicker\n        formatter={datePickerFormatter}\n        parser={datePickerParser}\n        // eslint-disable-next-line\n        {...props}\n        onChange={(event, data) => {\n          setIsValidDate(data.formattedDate === \"\" || moment(data.date).isValid());\n\n          if (props.onChange != null) {\n            props.onChange(event, data);\n          }\n        }}\n      />\n      {isValidDate === false ? (\n        <div className=\"slds-text-color_error\">\n          The date is invalid. Please select/write a valid date.\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GRAXDatePicker;\n","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));","const objectsToExcludeFromSummary = [\"grax_data_record__c\", \"grax__grax_data_record__c\"];\n\n/**\n * Check if the objectName is excluded from Summaries\n *\n * @export\n * @param { String } objectName - Salesforce Object Name\n * @returns { Boolean }\n */\nfunction isObjectExcludedFromSummary(objectName) {\n  return objectsToExcludeFromSummary.indexOf(objectName.toLowerCase()) !== -1;\n}\n\nmodule.exports = { isObjectExcludedFromSummary };\n"],"sourceRoot":""}