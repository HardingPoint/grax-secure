{"version":3,"sources":["App.js","components/cloud/dedup/ScenarioPageHeaderActions.js","components/cloud/dedup/ScenariosRow.js","consts/dedup/scenarioFetchEnums.js","components/cloud/configuration/salesforceConnection/consts.js","lib/api.js","models/errors/InvalidActionTypeError.js","reducers/fetchReducer.js","consts/fetchActions.js","hooks/useFetch.js","hooks/dedup/useScenarioFetch.js","contexts/toastContext.js","hooks/dedup/useScenarios.jsx","components/cloud/dedup/Scenarios.js","consts/dedup/componentNames.jsx","hooks/useFieldsFetch.js","reducers/dedup/scenarioReducer.js","consts/dedup/scenarioActions.js","hooks/useObjectsFetch.js","hooks/dedup/useScenario.js","components/cloud/dedup/ScenarioCardActions.js","components/cloud/dedup/ScenarioGeneral.jsx","components/commons/GRAXCombobox.jsx","contexts/scenarioContext.js","components/cloud/dedup/MergeActions.js","components/cloud/dedup/ScenarioHeader.jsx","components/commons/Buttons.jsx","components/commons/withRepeating.jsx","components/cloud/dedup/FieldsAndOperators.js","hooks/dedup/useFieldsAndOperators.js","components/cloud/dedup/MatchCriterias.js","components/cloud/dedup/FilterCriterias.js","components/cloud/dedup/metadata/TreeModalBranchItem.jsx","components/cloud/dedup/metadata/TreeModalBranch.jsx","components/cloud/dedup/metadata/TreeModal.jsx","components/cloud/dedup/ScenarioCriterias.jsx","components/cloud/dedup/Scenario.js","components/cloud/dedup/duplicates/duplicatesHeader.js","components/cloud/dedup/duplicates/duplicateRow.js","hooks/dedup/useDuplicates.js","components/cloud/dedup/duplicates/DuplicateKey.js","components/cloud/dedup/duplicates/duplicateRowVertical.js","components/cloud/dedup/duplicates/duplicatesVertical.js","components/cloud/dedup/duplicates/Duplicates.js","hooks/configuration/useContextProvider.js","reducers/configurations/configurationsReducer.js","components/cloud/configuration/consts.js","consts/configurations/configurationsActions.js","hooks/useCloudRoutes.js","reducers/notificationReducer.js","consts/interactiveFetchStatusActions.js","contexts/interactiveFetchStatusContext.js","hooks/useInteractiveFetchStatus.js","components/cloud/configuration/utils/index.js","contexts/configurationsContext.js","hooks/configuration/useConfigurationFetch.js","components/commons/InteractiveFetchStatus.jsx","components/cloud/configuration/index.jsx","components/commons/ConfigurationNotice.jsx","components/cloud/configuration/EmptyLandingPage.jsx","components/cloud/configuration/NewConfiguration.jsx","reducers/configurations/advancedConfigReducer.js","reducers/configurations/quickStartFormReducer.js","contexts/contextProviders.jsx","contexts/elasticsearchContext.js","consts/configurations/elasticsearchProviders.js","reducers/configurations/storageReducer.js","consts/configurations/cloudStorageProviders.js","contexts/cloudStorageContext.js","contexts/oauthContext.js","components/cloud/configuration/salesforceConnection/utils.js","components/cloud/configuration/salesforceConnection/reducer.js","components/cloud/configuration/salesforceConnection/context.js","components/commons/ButtonGroup.jsx","components/commons/StatefulInput.jsx","consts/configurations/vendorDisplayNameMapping.js","consts/configurations/vendors.js","hooks/configuration/useVendorValidityMessage.js","components/commons/VendorValidityMessage.jsx","hooks/configuration/useIndividualVendorValidity.js","components/cloud/configuration/salesforceConnection/URLStateFulInput.jsx","components/cloud/configuration/salesforceConnection/UsernamePassword.jsx","components/cloud/configuration/salesforceConnection/OAuthFlowWindow.jsx","hooks/useHandleForm.jsx","components/cloud/configuration/salesforceConnection/hooks.js","components/cloud/configuration/salesforceConnection/OAuth.jsx","hooks/configuration/useSelectedProvider.js","components/cloud/configuration/salesforceConnection/index.jsx","components/cloud/configuration/basicConfiguration/SalesforceOrigin.jsx","components/cloud/configuration/basicConfiguration/elasticsearchForm/BonsaiElasticsearch.jsx","components/commons/Combobox.jsx","consts/configurations/regionLabelMap.js","consts/regions.js","hooks/configuration/useAwsRegions.js","components/commons/AwsRegions.jsx","components/cloud/configuration/basicConfiguration/elasticsearchForm/AwsElasticsearch.jsx","components/cloud/configuration/basicConfiguration/elasticsearchForm/ElasticCo.jsx","components/cloud/configuration/basicConfiguration/elasticsearchForm/ProviderFactory.jsx","hooks/configuration/useElasticsearchForm.js","components/cloud/configuration/basicConfiguration/elasticsearchForm/index.jsx","components/cloud/configuration/basicConfiguration/cloudStorageForm/S3Compatible.jsx","components/commons/StatefulCheckbox.jsx","components/cloud/configuration/basicConfiguration/cloudStorageForm/AssumeRoleOptions.jsx","components/cloud/configuration/Subsection.jsx","components/cloud/configuration/basicConfiguration/cloudStorageForm/ServerSideEncryption.jsx","consts/configurations/serverSideEncryptions.js","components/cloud/configuration/basicConfiguration/cloudStorageForm/AwsS3Storage.jsx","components/cloud/configuration/basicConfiguration/cloudStorageForm/AzureBLOB.jsx","components/cloud/configuration/basicConfiguration/cloudStorageForm/GoogleCloudPlatform.jsx","components/cloud/configuration/basicConfiguration/cloudStorageForm/MinIOStorage.jsx","components/cloud/configuration/basicConfiguration/cloudStorageForm/ProviderFactory.jsx","hooks/configuration/useCloudStorageForm.js","components/cloud/configuration/basicConfiguration/cloudStorageForm/index.jsx","consts/configurations/initialState.js","consts/configurations/defaultEnvironmentName.js","models/CloudConfig.js","hooks/configuration/useValidateAndSaveConfiguration.js","components/cloud/configuration/utils/configurationProxy.js","hooks/configuration/useSaveBasicConfiguration.js","components/cloud/configuration/HeaderButtons.jsx","components/cloud/configuration/basicConfiguration/HeaderActions.jsx","hooks/configuration/useBasicConfiguration.js","components/cloud/configuration/basicConfiguration/cloudStorageForm/EnableOAuth.jsx","components/cloud/configuration/basicConfiguration/index.jsx","contexts/metadataBackupContext.js","consts/configurations/sfdcGitIntegration.js","reducers/configurations/environmentVariablesReducer.js","contexts/environmentVariablesContext.js","contexts/syncAnalyticsContext.js","hooks/configuration/useGitIntegration.js","components/cloud/configuration/advancedConfiguration/metadataBackupSettings/GitIntegration.jsx","components/cloud/configuration/advancedConfiguration/metadataBackupSettings/index.jsx","components/cloud/configuration/advancedConfiguration/syncAnalytics/EinsteinSalesforceDestination.jsx","components/cloud/configuration/advancedConfiguration/syncAnalytics/MarketingCloudSettings.jsx","hooks/configuration/useSyncAnalytics.js","components/cloud/configuration/advancedConfiguration/syncAnalytics/index.jsx","components/cloud/configuration/advancedConfiguration/environmentVariables/RevealSectionWarning.jsx","components/commons/ControlledExpandableSection.jsx","components/cloud/configuration/advancedConfiguration/environmentVariables/withProtectedExpandableSection.jsx","components/cloud/configuration/advancedConfiguration/environmentVariables/ProtectedInput.jsx","components/cloud/configuration/advancedConfiguration/environmentVariables/PushtoQueue.jsx","components/cloud/configuration/advancedConfiguration/environmentVariables/OrgMigrationSettings.jsx","components/cloud/configuration/advancedConfiguration/environmentVariables/PointinTimeRestore.jsx","consts/configurations/pushToQueueProvider.js","components/cloud/configuration/advancedConfiguration/environmentVariables/Other.jsx","components/cloud/configuration/advancedConfiguration/environmentVariables/index.jsx","hooks/configuration/useSaveAdvancedConfiguration.js","components/cloud/configuration/advancedConfiguration/HeaderActions.jsx","hooks/configuration/useAdvancedConfiguration.js","components/cloud/configuration/advancedConfiguration/index.jsx","hooks/configuration/useConfigurationSummary.js","components/cloud/configuration/configurationSummary/BasicConfigurationSummary.jsx","components/cloud/configuration/configurationSummary/index.jsx","consts/routes.js","lib/utils.js","serviceWorker.js","index.js","consts/addresses.js","components/commons/NestedRoutes.jsx"],"names":["appName","GRAXRestoreTabs","lazy","GRAXLogging","GRAXHistory","GRAXDelete","GRAXAudit","GRAXSummaryCharts","window","__grax__","appname","location","pathname","split","pop","process","orgid","pageParams","authorization","helpLinkbyAppName","summarycharts","delete","timemachine","logging","GRAXApp","props","state","isLoading","script","document","createElement","src","async","onload","setState","body","appendChild","this","size","variant","Fragment","isAppleDevice","className","isEmbeded","aria-hidden","id","style","position","right","top","href","rel","target","iconPath","ASSETS_LIGHTNING_DESIGN_ICONS","fallback","label","columns","subtype","initialEntries","routes","React","Component","ScenarioActions","onClick","ScenariosRowActions","children","onRowAction","options","item","job_status","push","value","align","iconCategory","iconName","iconVariant","onSelect","selected","buttonClassName","ScenariosViewDuplicates","e","preventDefault","viewDuplicates","DuplicateCounts","duplicateCounts","groups_count","records_affected","ScenarioRowLink","viewScenario","ScenarioRowFields","fields","numberOfFields","length","fieldNames","slice","map","docField","join","IsActiveScenario","displayName","DataTableCell","ScenariosColumns","key","property","SALESFORCE_OAUTH_URL","SALESFORCE_OAUTH_TOKENURL","instance","Axios","create","interceptors","request","use","config","configAuth","url","startsWith","ENDPOINT_CONFIGURATION","sfdcorgid","gatewayToken","apiToken","token","headers","withCredentials","Authorization","InvalidActionTypeError","Error","initialState","error","data","success","status","fetchStatusReducer","type","payload","response","message","statusText","useFetch","initialConfig","defaultState","useState","setConfig","useReducer","fetchStatus","dispatch","useEffect","undefined","a","useCloneScenario","scenarioId","SCENARIO_PROXY_ADDRESS","method","useDeleteScenario","params","useRunDeduplication","ToastContext","createContext","useScenarios","useAllScenariosFetch","allScenarios","fetchAllScenarios","isDeleted","deleteScenario","isRunning","runDeduplication","isCloned","cloneScenario","history","useHistory","openToast","useContext","heading","DEDUP_PATH","createScenario","Scenarios","title","onRenderActions","bind","trail","flexGrow","items","noRowHover","useFieldsFetch","docPrefixedFields","setdocPrefixedFields","setObjectIndex","objectFields","fieldName","fieldDataType","dataType","objectIndex","GRAX_DATA_LAKE_PROXY_ADDRESS","intialState","isEditMode","formState","filterCriteria","matchCriteria","name","description","object_name","is_active","scenario_action","results_table_fields","editMode","scenarioReducer","action","newState","resultsTableFields","field","field_name","operator","useObjectsFetch","sObjects","setSobjects","_sObjects","filter","sObject","useScenario","useFetchScenario","fetchedScenario","fetchScenario","useCreateScenario","isNewScenario","useUpdateScenario","isUpdated","updateScenario","fetchFields","useParams","Number","scenario_id","isInteger","find","obj","onSubmit","createMode","scenarioCardActionPropTypes","PropTypes","bool","isRequired","onDelete","func","onDuplicate","DeleteScenarioPromp","isOpen","onClose","disableClose","footer","onRequestClose","prompt","ScenarioCardActions","onRun","onViewDuplicates","setIsOpen","deleteButton","utilityButton","buttonVariant","checkmark","iconSize","actions","propType","propTypes","PropType","string","required","isActive","onChangeName","onChangeDescription","onChangeNameIsActive","ScenarioGeneral","memo","onChangeIsActive","c","useRef","current","nonCollapsible","onChange","checked","_event","prototype","GRAXCombobox","inputValue","setInputValue","selection","setSelection","onChangeHandler","event","dataSelection","events","onRequestRemoveSelectedOption","comboboxFilterAndLimit","limit","menuItemVisibleLength","classNameMenu","defaultProps","DedupStoreContext","useScenarioStore","DedupStoreContextProvider","DEDUP_PROXY_ADDRESS","operators","stopwords","synonyms","metadata","store","useMemo","Provider","scenarioActions","array","scenarioAction","MergeActions","scenario_actions","b","index","values","display_value","code","extractMergeActions","labels","placeholder","ScenarioHeader","RepeatingRemoveRowButton","onRemove","AddRowButton","iconPosition","withRepeating","WrappedComponent","rows","hideFooter","addRow","row","concat","editRow","r","i","repeatedWrapped","removeRow","isValidElement","cloneElement","renderFooter","arrayOf","shape","onChangeField","onChangeOperator","FieldsAndOperators","dropdownLabel","setDropdownLabel","setDataType","fieldOperators","setFieldOperators","applicableOperators","applicable_data_types","includes","useOperators","fieldLabel","handleFieldName","stopWord","cleanse","number","MatchCriteriaRow","setMetadata","disabledRemoveButton","rowsNum","Object","assign","mutateRow","lineHeight","matchCriteriaId","stopwords_list_id","synonyms_id","disabled","any","FilterCriteriaRow","setValue","onBlur","proptype","selectedId","setIsEditMode","iconClassName","role","left","for","TreeModalBranch","criteria","setRows","width","tabindex","aria-label","aria-sort","scope","TreeModalBranchItem","HEADINGS","TreeModal","stopword","onChangeMatchCriteria","onChangeFilterCriteria","ScenarioCriterias","objectName","onChangeObject","onChangeFields","setCriteria","MatchCriterias","FilterCriterias","Scenario","duplicateScenario","headerActions","useCallback","DuplicatesHeader","tableFields","DuplicateRow","onViewRecord","isChecked","setIsChecked","aria-level","getColumn","useDuplicates","setTableFields","tableFieldsExpanded","setTableFieldsExpanded","indexName","setIndexName","results","useFetchDuplicates","duplicates","fetchDuplicates","index_name","DuplicateKey","keyName","colspan","DuplicateRowVertical","record","colSpan","DuplicatesExpanded","hasNoHeader","aria-multiselectable","Duplicates","selectedRecord","setSelectedRecord","records","useStateContext","context","useDispatchContext","configurationsReducer","useCloudRoutes","goToSummary","ROUTE_CONFIGURATION_SUMMARY","goToStartProvisioning","ROUTE_EMPTY_CONFIGURATION","goToBasicConfiguration","ROUTE_BASIC_CONFIGURATION","goToAdvancedConfiguration","ROUTE_ADVANCED_CONFIGURATION","setHeadings","notificationReducer","duration","stateContext","dispatchContext","InteractiveFetchStatusProvider","useInteractiveFetchStatus","successNotification","errorNotification","hideNotification","spinnerIsRunning","spinnerIsStopped","useToggleSpinner","omitEmptyProps","_","isPlainObject","entries","reduce","accumulator","omittedEmptyProps","objHasCollectionOfProps","properties","isArray","hasOwnProperty","call","isAnExistingConfiguration","configuration","environments","keys","findDataSource","dataSources","organizationId","foundDataSource","organizationIds","types","filteredDataSources","Array","dataSource","indexOf","findDataSourcesByOrganizationgIds","findSourceDataSource","useConfigurationsContext","ConfigurationsProvider","details","mapBackendErrorMessage","useConfigurationRetrieve","InteractiveFetchStatus","Configuration","NestedRoutes","ConfigurationNotice","text","EmptyLandingPage","NewConfiguration","headingLink","onClickHeadingLink","LINK_CONFIGURATION_NEW","advancedConfigReducer","quickStartFormReducer","provider","withQuickStartProvider","reducer","withAdvancedConfigProvider","reducers","useElasticsearchContext","ElasticsearchProvider","storageReducer","s3CompatibleEndpoint","useCloudStorageContext","CloudStorageProvider","useOAuthContext","OAuthProvider","toggleCrosswindowMessageListener","handleMessage","addEventListener","attachEvent","removeEventListener","detachEvent","isOAuthCredential","credential","strictChecking","mandatoryFields","shift","isSalesforceCredential","setDataSourceInitialState","dataSourceType","salesforceConnectionReducer","meta","globals","asyncAttachmentProcessorOrganizationIds","syncSalesforceEinsteinOrganizationIds","result","dataSourceMapping","organizationid","basicConfigurationReducer","useSalesforceConnectionContext","SalesforceConnectionProvider","GRAXButtonGroup","_onClick","option","StatefulInput","helpText","secured","blocked","_value","_type","setType","_disabled","setDisability","toggleSecurity","iconRight","category","securedInput","toggleDisability","blockedInput","fieldLevelHelpTooltip","content","VENDOR_DISPLAY_NAME_MAPPING","iconSettingsTypes","successful","colorVariant","failed","useVendorValidityMessage","customMessage","_status","setStatus","displayProvider","iconSettings","invalidOrganizationId","icon","assistiveText","VendorValidityMessage","theme","useAutoDismissToast","validation","isDismissed","setIsDismissed","setTimeout","clearTimeout","useIndividualVendorValidity","setFetch","vendorValidity","setVendorValidity","vendor","setVendor","cred","credentials","ENDPOINT_VENDOR_VALIDATION","userInfo","loginURLHelpText","URLStateFulInput","inputRef","onInvalid","setCustomValidity","onInput","UsernamePassword","userName","password","onValidated","validateVendor","readOnly","engagementGraph","oauthwindowInstance","previousLoginURL","initiateOauthFlow","oauthUrl","loginurl","closed","w","h","screen","height","dimension","windowFeatures","open","openOAuthWindow","focus","OAuthFlowWindow","urlRef","reportValidity","useFormDispatch","actionType","propertyName","useHandleInput","valueAsNumber","valueCasting","castedValue","useHandleCombobox","useHandleCheckbox","useHandleButtonGroup","useSFDCHandleInput","handleInput","OAuth","handleOnChange","refreshToken","showScopeNotification","access_token","error_description","oauthPopupOrigin","URL","origin","org_id","user_name","useSelectedProvider","SalesforceConnection","showConnectionName","setValidationStatus","handleConnectionName","onBlurButtonGroup","dataSourceVariant","selectedTab","SalesforceOrigin","BonsaiElasticsearch","gatewayPath","SCombobox","prevProps","selectedOption","REGION_LABEL_MAP","subTitle","toString","useAwsRegions","region","AwsRegions","getRegionLabel","Combobox","AwsElasticsearch","accessKey","secretAccessKey","handleCombobox","selections","ElasticCo","user","port","ProviderFactory","bucket","useElasticsearchForm","handleButtonGroup","ElasticsearchForm","S3Compatible","accessKeyName","FieldLevelHelpText","dialogClassName","DestructiveWarning","isADestructiveAction","isMounted","noHeader","StatefulCheckbox","onToggle","isDestructive","_checked","AssumeRoleOptions","s3AssumeRoleArn","s3AssumeRoleExternalId","Subsection","ServerSideEncryption","serverSideEncryption","serverSideEncryptionKmsKey","AwsS3Storage","s3AssumeRoleEnabled","s3AssumeRoleRefreshCredsInHour","handleCheckbox","AzureBLOB","storageAccountName","containerName","accountAccessKey","GoogleCloudPlatform","googleProjectId","googleBucketName","googlePrivateKey","googleClientEmail","MinIOStorage","googlePrivateKeyId","useCloudStorageProviders","CloudStorageForm","useCloudStorageForm","INITIAL_STATE","elastic","storage","metadataBackup","syncAnalytics","timeMachine","pushToQueue","oauth","variables","globalEnvironmentDefaults","asyncBulkLoadOrganizationIds","asyncQueueOrganizationIds","syncSalesforceSourceOrganizationIds","metadataBackupOrganizationIds","odataOrganizationIds","CloudConfig","initializeConfiguration","submittedConfiguration","initializedConfiguration","merge","orgId","environment","forEach","endsWith","splice","sessionCacheTimeoutMinutes","asyncIntervalMinutes","_findDataSourceByOrgId","bulkRestoreDestinationOrganizationId","newDataSource","elasticConfig","storageConfig","enableOAuth","isEinsteinAnalyticsEnabled","isMarketingCloudEnabled","syncAnalyticsResult","syncEinsteinAnalyticsDatasetName","syncSalesforceObjects","omittedEinsteinAnalytics","syncSalesforceEinsteinOrganizationId","_removeOrgIdFromGlobals","marketingCloudHost","marketingCloudUser","marketingCloudPassword","marketingCloudPort","useValidateAndSaveConfiguration","reloadConfigurationState","saveStatus","useSaveConfiguration","saveConfiguration","invalidCredentials","schemaValidationErrors","vendorList","sourceDataSource","schemaErrors","schemaPath","mapVendorsAndSchemaMessage","preValidateDataSourcesSchema","mandatoryProps","globalEnvironmentDefaultsKeys","globalEnvironmentDefaultsProxy","isSingleEnvironment","cloneDeep","isValidGlobalDefault","gDefault","isString","isNumber","isBoolean","Proxy","get","prop","set","gGlobal","useSaveBasicConfiguration","configurationDispatch","dataSourcesState","elasticState","storageState","oauthState","cloudConfig","findBulkRestoreDestination","findEinsteinDestination","HeaderButtons","isAnExistingConfig","formRef","justifyContent","checkValidity","HeaderActions","useBasicConfiguration","createRef","hashKey","EnableOAuth","clientId","tokenUrl","clientSecret","BasicCredentialsForm","ref","useMetadataBackupContext","MetadataBackupProvider","isEnabled","sourceControlEnabled","sourceControlProvider","environmentVariablesReducer","useEnvironmentVariablesContext","EnvironmentVariablesProvider","useSyncAnalyticsContext","SyncAnalyticsProvider","useGitIntegration","GitIntegration","gitRepositoryName","gitRepoAuthorizationToken","gitUserId","MetadataBackupSettings","EinsteinSalesforceDestination","MarketingCloudSettings","useSyncAnalytics","enableGlobalDeault","syncQueryFile","syncBatchSize","syncDestinationAnalyticsUrl","SyncAnalytics","RevealSectionWarning","confirm","ControlledExpandableSection","_isOpen","titleNode","classNames","headerContainer","withProtectedExpandableSection","isSectionRevealed","setIsSectionRevealed","isModalOpen","setIsModalOpen","wasModalOpen","setWasModalOpen","ProtectedInput","variableName","GRAX_SYNCHID","RESTORE_SLEEP_DURATION","GRAX_OBJECT_TYPES_TO_RESTORE","GRAX_MAX_RESTORE","queryFile","apiEndpoint","apiClientId","apiClientSecret","authorizationToken","inputs","asyncIntervalMinutesOnBlur","storageOff","ADVANCED_SECTION_TURN_OFF_STORAGE_IS_ENABLE","EnvironmentVariables","onBlurAsyncIntervalMinutes","cdcEnabled","ADVANCED_SECTION_CHANGE_DATA_CAPTURE_IS_ENABLE","ADVANCED_SECTION_ORG_MIGRATION_SETTINGS_IS_ENABLE","ADVANCED_SECTION_POINT_IN_TIME_RESTORE_IS_ENABLE","ADVANCED_SECTION_PUSH_TO_QUEUE_IS_ENABLE","useSaveAdvancedConfiguration","syncSalesforceEinstein","bulkRestoreDestination","schema","omittedGitUserId","preValidateMetadataBackupSchema","preValidatePushToQueueSchema","preValidateVariablesSchema","useAdvancedConfiguration","environmentVariables","AdvancedConfiguration","createSummaryData","credentialsArray","credentialsSet","_displayableProperties","whitelist","displayCredentials","userKeys","vendorCredentialWhitelist","usernameAndPassword","entry","jsonName","credentialName","_formatContent","truncate","credentialValue","upperFirst","useConfigurationSummary","summary","setSummary","salesforce","summaryData","BasicConfigurationSummary","ConfigurationSummary","iconBasic","iconAdvanced","path","ROUTE_CONFIGURATION","component","exact","ROUTE_NEW_CONFIGURATION","BasicConfiguration","DEDUP_SCENARIOS_PATH","DEDUP_SCENARIOS_DETAILS_PATH","DEDUP_SCENARIOS_NEW_PATH","DEDUP_DUPLICATES_DETAILS_PATH","availableLocales","moment","locales","setCookie","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","cookie","getCookie","ca","decodeURIComponent","charAt","substring","parent","navigator","platform","match","SF_DATETIME_REGEXP","DATETIME_FORMAT","DATE_FORMAT","userLocaleParam","search","tzParam","browserLocale","userLanguage","language","userLocale","TZ","tz","guess","overriddenLocales","console","log","locale","toLowerCase","setDefault","inputValueRegExp","RegExp","escapeRegExp","getUTCTimeRangeFromUserDate","date","timezone","inputFormat","outputFormat","startOf","utc","format","endOf","datePickerFormatter","datePickerParser","str","toDate","Boolean","hostname","ReactDOM","render","App","getElementById","serviceWorker","ready","then","registration","unregister","ROUTE_CLOUD_CLIENT","oneOf","elementType","route"],"mappings":"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","file":"static/js/main.0ba5be61.chunk.js","sourcesContent":["import React, { Suspense, lazy } from \"react\";\nimport { Tabs, TabsPanel, IconSettings, Spinner } from \"@salesforce/design-system-react\";\nimport { MemoryRouter } from \"react-router-dom\";\n\nimport \"@salesforce-ux/design-system/assets/styles/salesforce-lightning-design-system.min.css\";\nimport \"./App.css\";\n\nimport { isEmbeded, isAppleDevice } from \"./lib/utils\";\nimport routes from \"./consts/routes\";\nimport NestedRoutes, { initialEntries } from \"./components/commons/NestedRoutes\";\nimport { ASSETS_LIGHTNING_DESIGN_ICONS } from \"./consts/addresses\";\n\nconst GRAXRestoreTabs = lazy(() => import(\"./components/GRAXRestoreTabs\"));\nconst GRAXLogging = lazy(() => import(\"./components/GRAXLogging\"));\nconst GRAXHistory = lazy(() => import(\"./components/GRAXHistory\"));\nconst GRAXDelete = lazy(() => import(\"./components/GRAXDelete\"));\nconst GRAXAudit = lazy(() => import(\"./components/GRAXAudit\"));\nconst GRAXSummaryCharts = lazy(() => import(\"./components/GRAXSummaryCharts\"));\n\nlet appName;\n\nif (window.__grax__ != null && window.__grax__.appName != null) {\n  appName = window.__grax__.appname;\n} else {\n  appName = window.location.pathname.split(\"/\").pop() || \"cloud\";\n}\n\nif (process && process.env && !window.__grax__) {\n  window.__grax__ = {\n    orgid: process.env.REACT_APP_SFDCORGID,\n    pageParams: { authorization: process.env.REACT_APP_BASIC_TOKEN }\n  };\n}\n\nconst helpLinkbyAppName = {\n  // 'mapping': 'grax-restore',\n  summarycharts: \"summary-charts\",\n  delete: \"datalake-delete\",\n  timemachine: \"grax-object-time-machine\",\n  logging: \"grax-logs\"\n};\n\nclass GRAXApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    if (appName === \"summarycharts\") {\n      const script = document.createElement(\"script\");\n      script.src = \"https://www.gstatic.com/charts/loader.js\";\n      script.async = true;\n      script.onload = () => {\n        this.setState({ isLoading: false });\n      };\n\n      document.body.appendChild(script);\n    } else {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <React.Fragment>\n        {isAppleDevice && (\n          <style>\n            {`\n                    html, body {\n                        height: 100%;\n                        overflow: auto;\n                        -webkit-overflow-scrolling: touch;\n                    }\n                `}\n          </style>\n        )}\n        <div className={isEmbeded ? \"slds-tabs_scoped__content\" : \"\"}>\n          {helpLinkbyAppName[appName] != null ? (\n            <div\n              aria-hidden=\"false\"\n              id=\"GRAXHelpLink\"\n              style={{\n                position: \"absolute\",\n                right: \"1.5rem\",\n                top: \"0.75rem\"\n              }}\n            >\n              <h3>\n                <a\n                  href={`https://documentation.grax.io/docs/${helpLinkbyAppName[appName]}`}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  GRAX Help\n                </a>\n              </h3>\n            </div>\n          ) : null}\n          <IconSettings iconPath={ASSETS_LIGHTNING_DESIGN_ICONS}>\n            <Suspense fallback={<Spinner size=\"large\" variant=\"brand\" />}>\n              {(appName === \"restore\" || appName === \"mapping\") && (\n                <GRAXRestoreTabs variant={isEmbeded ? \"default\" : \"scoped\"} appName={appName} />\n              )}\n              {appName === \"logging\" && (\n                <Tabs variant={isEmbeded ? \"default\" : \"scoped\"} id=\"grax-logging-tabs\">\n                  <TabsPanel label=\"Error Logs\">\n                    <GRAXLogging\n                      columns={[\"CreatedDate\", \"source\", \"info\", \"error\", \"stack\", \"description\"]}\n                    />\n                  </TabsPanel>\n                  <TabsPanel label=\"Restore Logs\">\n                    <GRAXLogging\n                      subtype=\"restore\"\n                      columns={[\n                        \"CreatedDate\",\n                        \"objecttype\",\n                        \"sourceId\",\n                        \"destinationId\",\n                        \"status\",\n                        \"error\",\n                        \"description\"\n                      ]}\n                    />\n                  </TabsPanel>\n                </Tabs>\n              )}\n              {appName === \"timemachine\" && (\n                <Tabs variant={isEmbeded ? \"default\" : \"scoped\"} id=\"grax-history-tabs\">\n                  <TabsPanel label=\"History\">\n                    <GRAXHistory />\n                  </TabsPanel>\n                </Tabs>\n              )}\n              {appName === \"delete\" && (\n                <Tabs variant={isEmbeded ? \"default\" : \"scoped\"} id=\"grax-delete-tabs\">\n                  <TabsPanel label=\"Delete\">\n                    <GRAXDelete />\n                  </TabsPanel>\n                </Tabs>\n              )}\n              {appName === \"audit\" && (\n                <GRAXAudit columns={[\"LastModifiedDate\", \"ObjectType\", \"ObjectVersion\"]} />\n              )}\n              {appName === \"summarycharts\" && (\n                <GRAXSummaryCharts variant={isEmbeded ? \"default\" : \"scoped\"} />\n              )}\n              <MemoryRouter initialEntries={initialEntries(appName)}>\n                <NestedRoutes routes={routes} />\n              </MemoryRouter>\n            </Suspense>\n          </IconSettings>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default GRAXApp;\n","import React from 'react'\n\nimport {\n    PageHeaderControl,\n    ButtonGroup,\n    Button\n} from '@salesforce/design-system-react'\n\nconst ScenarioActions = (onClick) => (\n    <React.Fragment>\n        <PageHeaderControl variant=\"list\">\n            <Button label=\"Create Scenario\" onClick={onClick} />\n        </PageHeaderControl>\n    </React.Fragment>\n)\n\nconst ScenarioControls = () => (\n    <PageHeaderControl>\n        <ButtonGroup>\n            <Button\n                iconName=\"edit\"\n                iconCategory=\"utility\"\n                variant=\"icon\"\n                iconVariant=\"border-filled\"\n            />\n            <Button\n                iconName=\"delete\"\n                iconCategory=\"utility\"\n                variant=\"icon\"\n                iconVariant=\"border-filled\"\n            />\n        </ButtonGroup>\n    </PageHeaderControl>\n)\n\n\nconst NewScenarioControls = () => (\n    <PageHeaderControl>\n        <Button\n            variant=\"brand\"\n            label=\"Save\"\n        />\n    </PageHeaderControl>\n)\n\nexport {\n    ScenarioActions,\n    ScenarioControls,\n    NewScenarioControls\n}","import React from \"react\";\n\nimport { DataTableColumn, DataTableCell, Dropdown } from \"@salesforce/design-system-react\";\n\nimport {\n  SCENARIO_FETCH_ENUMS_RUN,\n  SCENARIO_FETCH_ENUMS_DUPLICATE,\n  SCENARIO_FETCH_ENUMS_UPDATE,\n  SCENARIO_FETCH_ENUMS_DELETE\n} from \"../../../consts/dedup/scenarioFetchEnums\";\n\nconst ScenariosRowActions = ({ children, onRowAction, ...props }) => {\n  const options = [];\n  if (props.item.job_status !== \"SUCCESS\") {\n    options.push({\n      value: SCENARIO_FETCH_ENUMS_RUN,\n      label: \"Run\"\n    });\n  }\n\n  options.push(\n    { value: SCENARIO_FETCH_ENUMS_DUPLICATE, label: \"Clone\" },\n    { value: SCENARIO_FETCH_ENUMS_UPDATE, label: \"Edit\" },\n    { value: SCENARIO_FETCH_ENUMS_DELETE, label: \"Delete\" }\n  );\n\n  return (\n    <DataTableCell {...props}>\n      <Dropdown\n        align={\"right\"}\n        iconCategory=\"utility\"\n        iconName=\"down\"\n        iconVariant=\"border-filled\"\n        onSelect={selected => onRowAction(props.item.id, selected)}\n        buttonClassName=\"slds-button_icon-small\"\n        options={options}\n      />\n    </DataTableCell>\n  );\n};\n\nconst ScenariosViewDuplicates = ({ children, ...props }) => (\n  <DataTableCell {...props}>\n    {props.item.job_status === \"SUCCESS\" ? (\n      <a href={e => e.preventDefault()} onClick={() => props.viewDuplicates(props.item.id)}>\n        View Duplicates\n      </a>\n    ) : (\n      \"View Duplicates\"\n    )}\n  </DataTableCell>\n);\n\nconst DuplicateCounts = ({ children, ...props }) => {\n  let duplicateCounts = \"\";\n  if (props.item.groups_count !== null && props.item.records_affected !== null)\n    duplicateCounts = `${props.item.groups_count} of ${props.item.records_affected}`;\n  return <DataTableCell {...props}>{duplicateCounts}</DataTableCell>;\n};\n\nconst ScenarioRowLink = ({ children, ...props }) => (\n  <DataTableCell {...props}>\n    <a href={e => e.preventDefault()} onClick={() => props.viewScenario(props.item.id)}>\n      {children}\n    </a>\n  </DataTableCell>\n);\n\nconst ScenarioRowFields = ({ children, ...props }) => {\n  let fields = props.item.fields;\n  const numberOfFields = fields.length;\n  let fieldNames = \"\";\n  const fieldLimit = 2;\n\n  if (numberOfFields > 0) {\n    fieldNames = fields\n      .slice(0, fieldLimit)\n      .map(docField => docField.split(\".\")[1])\n      .join(\", \");\n\n    if (numberOfFields > 2) {\n      fieldNames += ` +${numberOfFields - fieldLimit}`;\n    }\n  }\n\n  return <DataTableCell>{fieldNames}</DataTableCell>;\n};\n\nconst IsActiveScenario = ({ children, ...props }) => (\n  <DataTableCell {...props}>{!!children ? \"Yes\" : \"No\"}</DataTableCell>\n);\n\nScenarioRowLink.displayName = DataTableCell.displayName;\nDuplicateCounts.displayName = DataTableCell.displayName;\nScenariosRowActions.displayName = DataTableCell.displayName;\nScenariosViewDuplicates.displayName = DataTableCell.displayName;\nScenarioRowFields.displayName = DataTableCell.displayName;\nIsActiveScenario.displayName = DataTableCell.displayName;\n\nconst ScenariosColumns = [\n  <DataTableColumn key=\"scenario-name\" property=\"name\" label=\"Name\">\n    <ScenarioRowLink />\n  </DataTableColumn>,\n  <DataTableColumn key=\"object-name\" property=\"object_name\" label=\"Object Name\" />,\n  <DataTableColumn key=\"fields\" property=\"fields\" label=\"Fields\">\n    <ScenarioRowFields />\n  </DataTableColumn>,\n  <DataTableColumn key=\"merge-actions\" property=\"scenario_action\" label=\"Merge Action\" />,\n  <DataTableColumn key=\"fields\" property=\"is_active\" label=\"Is Active\">\n    <IsActiveScenario />\n  </DataTableColumn>,\n  <DataTableColumn key=\"duplicate-counts\" label=\"Duplicate Counts\">\n    <DuplicateCounts />\n  </DataTableColumn>,\n  <DataTableColumn key=\"view-results\" property=\"job_status\">\n    <ScenariosViewDuplicates />\n  </DataTableColumn>,\n  <DataTableColumn key=\"row-actions\" property=\"job_status\" label=\"\">\n    <ScenariosRowActions />\n  </DataTableColumn>\n];\n\nexport { ScenariosColumns };\n","export const SCENARIO_FETCH_ENUMS_RUN = 1;\nexport const SCENARIO_FETCH_ENUMS_DUPLICATE = 2;\nexport const SCENARIO_FETCH_ENUMS_UPDATE = 3;\nexport const SCENARIO_FETCH_ENUMS_DELETE = 4;\nexport const SCENARIO_FETCH_ENUMS_RESULTS = 5;\n\n","// SALESFORCE CONNECTIONS\nexport const SALESFORCE_CONNECTION_NAME = \"Default\";\nexport const SALESFORCE_LOGIN_SFDC = \"salesforce\";\nexport const SALESFORCE_LOGIN_OAUTH = \"oauth\";\n\nexport const SALESFORCE_LOGIN_PRODUCTIONURL = \"https://login.salesforce.com\";\nexport const SALESFORCE_LOGIN_SANDBOXURL = \"https://test.salesforce.com\";\n\nexport const SALESFORCE_OAUTH_URLPRODUCTION = \"https://api.grax.com/prod/auth/salesforce\";\nexport const SALESFORCE_OAUTH_URLTEST = \" https://api.grax.com/test/auth/salesforce\";\n\nexport const SALESFORCE_OAUTH_URL =\n  process.env.NODE_ENV === \"production\" ? SALESFORCE_OAUTH_URLPRODUCTION : SALESFORCE_OAUTH_URLTEST;\nexport const SALESFORCE_OAUTH_TOKENURL = `${SALESFORCE_OAUTH_URL}/token`;\nexport const SALESFORCE_OAUTH_ERRORACCESDENIED = \"access_denied\";\n\n// SALESFORCE DATASOURCES\nexport const SALESFORCE_DATASOURCES_SOURCE = \"sourceDataSource\";\nexport const SALESFORCE_DATASOURCES_EINSTEIN = \"syncSalesforceEinstein\";\nexport const SALESFORCE_DATASOURCES_BULKRESTORE = \"bulkRestoreDestination\";\n","/* eslint-disable prefer-destructuring */\nimport Axios from \"axios\";\nimport { ENDPOINT_CONFIGURATION } from \"../consts/addresses\";\nimport { SALESFORCE_OAUTH_URL } from \"../components/cloud/configuration/salesforceConnection/consts\";\n\nconst instance = Axios.create();\n\nexport const retrieveEnvironmentCredentials = () => {\n  if (process.env.REACT_APP_SFDCORGID && process.env.REACT_APP_SFDCORGID !== \"\") {\n    return {\n      sfdcorgid: process.env.REACT_APP_SFDCORGID,\n      authorization: process.env.REACT_APP_BASIC_TOKEN,\n      gatewayToken: process.env.REACT_APP_ENGAGEMENTGRAPH_GATEWAYTOKEN,\n      apiToken: process.env.REACT_APP_ENGAGEMENTGRAPH_APITOKEN,\n    };\n  }\n\n  return {\n    token: window.__grax__.token,\n    sfdcorgid: window.__grax__.orgid,\n    authorization: (window.__grax__.pageParams || {}).authorization,\n    gatewayToken: window.__grax__.gatewayToken,\n    apiToken: window.__grax__.apiToken,\n  };\n};\n\ninstance.interceptors.request.use((config) => {\n  const configAuth = { ...config };\n  if (config.url.startsWith(ENDPOINT_CONFIGURATION)) {\n    const { sfdcorgid, authorization, token } = retrieveEnvironmentCredentials();\n\n    configAuth.headers.sfdcorgid = sfdcorgid;\n    configAuth.withCredentials = true;\n\n    if (authorization != null && authorization !== \"\") {\n      configAuth.headers.Authorization = `Basic ${authorization}`;\n    } else if (token && token !== \"\") {\n      configAuth.headers.Authorization = `Bearer ${token}`;\n    }\n    return configAuth;\n  }\n\n  if (config.url.startsWith(SALESFORCE_OAUTH_URL)) {\n    const { gatewayToken, apiToken } = retrieveEnvironmentCredentials();\n\n    configAuth.headers = {\n      \"gateway-token\": gatewayToken,\n      \"api-token\": apiToken,\n    };\n  }\n\n  return configAuth;\n});\n\nexport default instance;\n","export default class InvalidActionTypeError extends Error {}\n","import { FETCH_SET_DATA, FETCH_IS_LOADING, FETCH_THROW_ERROR } from \"../consts/fetchActions\";\nimport InvalidActionTypeError from \"../models/errors/InvalidActionTypeError\";\n\nexport const initialState = {\n  isLoading: null,\n  error: null,\n  data: null,\n  success: null,\n  status: null,\n};\n\nexport const fetchStatusReducer = (state, { type, payload }) => {\n  switch (type) {\n    case FETCH_IS_LOADING:\n      if (payload.isLoading === true) {\n        return { ...initialState, isLoading: true };\n      }\n      return { ...state, isLoading: false };\n    case FETCH_SET_DATA:\n      return { ...state, data: payload.data, error: null, success: true, isLoading: false };\n    case FETCH_THROW_ERROR: {\n      const { response = {}, message } = payload.error;\n      let error;\n\n      if (response.status >= 500) {\n        error = response.statusText || \"Internal Server Error\";\n      } else if (response.data) {\n        error = response.data;\n      } else if (response.statusText) {\n        error = response.statusText;\n      } else {\n        error = message;\n      }\n\n      return {\n        ...state,\n        data: null,\n        success: false,\n        isLoading: false,\n        error,\n      };\n    }\n    default:\n      throw new InvalidActionTypeError();\n  }\n};\n","export const FETCH_IS_LOADING = \"FETCH_IS_LOADING\";\nexport const FETCH_THROW_ERROR = \"FETCH_THROW_ERROR\";\nexport const FETCH_SET_DATA = \"FETCH_SET_DATA\";\nexport const FETCH_SET_STATUS = \"FETCH_SET_STATUS\";","import { useState, useReducer, useEffect } from \"react\";\n\nimport Axios from \"../lib/api\";\n\nimport { FETCH_SET_DATA, FETCH_IS_LOADING, FETCH_THROW_ERROR } from \"../consts/fetchActions\";\nimport { fetchStatusReducer, initialState } from \"../reducers/fetchReducer\";\n\nconst useFetch = ({ ...initialConfig } = {}, defaultState = {}) => {\n  const [config, setConfig] = useState(initialConfig);\n  const [fetchStatus, dispatch] = useReducer(fetchStatusReducer, {\n    ...initialState,\n    ...defaultState\n  });\n\n  useEffect(() => {\n    if (config.url === undefined) return;\n    dispatch({ type: FETCH_IS_LOADING, payload: { isLoading: true } });\n    (async () => {\n      try {\n        const response = await Axios(config);\n        dispatch({ type: FETCH_SET_DATA, payload: { data: response.data } });\n      } catch (error) {\n        dispatch({ type: FETCH_THROW_ERROR, payload: { error } });\n      }\n    })();\n  }, [config]);\n\n  return [fetchStatus, setConfig];\n};\n\nexport default useFetch;\n","import { SCENARIO_PROXY_ADDRESS } from \"../../consts/addresses\";\nimport useFetch from \"../useFetch\";\n// TODO: retrieves sfdc org from envirotment({ sfdcorgid: \"\" })\nexport const useAllScenariosFetch = () => {\n  const [state, setConfig] = useFetch(null, { data: { data: [] } });\n  const getScenarios = () => setConfig({ url: SCENARIO_PROXY_ADDRESS, params: { sfdcorgid: \"\" } });\n  return [state, getScenarios];\n};\n\nexport const useFetchScenario = () => {\n  const [state, setConfig] = useFetch();\n  const getScenario = scenarioId => {\n    //TODO: set scenario id to number\n    // if (typeof scenarioId === \"number\")\n    setConfig({\n      url: `${SCENARIO_PROXY_ADDRESS}/${scenarioId}`,\n      //TODO: retrieve sfdcorgid from .env\n      params: { sfdcorgid: \"\" }\n    });\n  };\n  return [state, getScenario];\n};\n\nexport const useCreateScenario = () => {\n  const [state, setConfig] = useFetch();\n  const createScenario = payload =>\n    setConfig({ url: SCENARIO_PROXY_ADDRESS, method: \"POST\", data: payload });\n  return [state, createScenario];\n};\n\nexport const useUpdateScenario = () => {\n  const [state, setConfig] = useFetch();\n  const updateScenario = (scenarioId, payload) => {\n    if (typeof scenarioId === \"number\")\n      setConfig({\n        url: `${SCENARIO_PROXY_ADDRESS}/${scenarioId}`,\n        method: \"PATCH\",\n        data: payload,\n        params: { sfdcorgid: \"\" }\n      });\n  };\n  return [state, updateScenario];\n};\n\nexport const useCloneScenario = () => {\n  const [state, setConfig] = useFetch();\n  const cloneScenario = scenarioId =>\n    setConfig({ url: `${SCENARIO_PROXY_ADDRESS}/${scenarioId}`, method: \"POST\" });\n  return [state, cloneScenario];\n};\n\nexport const useDeleteScenario = () => {\n  const [state, setConfig] = useFetch();\n  const deleteScenario = scenarioId =>\n    setConfig({\n      url: `${SCENARIO_PROXY_ADDRESS}/${scenarioId}`,\n      method: \"DELETE\",\n      params: { sfdcorgid: \"\" }\n    });\n  return [state, deleteScenario];\n};\n\n//FIXME: Change name to a more meaningfull one. Conflict with get duplicates\nexport const useRunDeduplication = () => {\n  const [state, setConfig] = useFetch(null, { data: { data: [] } });\n  const runDeduplication = scenarioId =>\n    setConfig({\n      url: `${SCENARIO_PROXY_ADDRESS}/${scenarioId}/run`,\n      params: { sfdcorgid: \"\" },\n      method: \"POST\"\n    });\n  return [state, runDeduplication];\n};\n\nexport const useFetchDuplicates = () => {\n  const [state, setConfig] = useFetch(null, { data: { data: { results: [] } } });\n  const fetchDuplicates = scenarioId =>\n    setConfig({\n      url: `${SCENARIO_PROXY_ADDRESS}/${scenarioId}/results`,\n      params: { sfdcorgid: \"\" }\n    });\n  return [state, fetchDuplicates];\n};\n\nexport const useGetDuplicates = () => {\n  const [state, setConfig] = useFetch();\n  const runDeduplication = scenarioId =>\n    //FIXME: use proper sfdcorgid\n    setConfig({\n      url: `${SCENARIO_PROXY_ADDRESS}/${scenarioId}/results?sfdcorgid=\"`,\n      method: \"POST\"\n    });\n  return [state, runDeduplication];\n};\n","import React, { useState, createContext, useCallback, useMemo } from \"react\";\n\nexport const ToastContext = createContext();\n\nexport const ToastContextProvider = ({ children }) => {\n  const [toast, setToast] = useState({\n    variant: \"success\",\n    isOpen: false\n  });\n\n  const openToast = useCallback(\n    ({ heading }) =>\n      setToast(toast => ({\n        ...toast,\n        isOpen: true,\n        heading: [heading]\n      })),\n    []\n  );\n\n  const closeToast = useCallback(\n    () =>\n      setToast(toast => ({\n        ...toast,\n        isOpen: false\n      })),\n    []\n  );\n\n  const value = useMemo(() => toast, [toast.isOpen]);\n\n  return (\n    <ToastContext.Provider\n      value={{\n        ...value,\n        openToast,\n        closeToast\n      }}\n    >\n      {children}\n    </ToastContext.Provider>\n  );\n};\n","import { useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  SCENARIO_FETCH_ENUMS_RUN,\n  SCENARIO_FETCH_ENUMS_DUPLICATE,\n  SCENARIO_FETCH_ENUMS_UPDATE,\n  SCENARIO_FETCH_ENUMS_DELETE,\n  SCENARIO_FETCH_ENUMS_RESULTS\n} from \"../../consts/dedup/scenarioFetchEnums\";\nimport {\n  useAllScenariosFetch,\n  useDeleteScenario,\n  useCloneScenario,\n  useRunDeduplication\n} from \"./useScenarioFetch\";\nimport { DEDUP_PATH } from \"../../consts/addresses\";\nimport { ToastContext } from \"../../contexts/toastContext\";\n\nconst useScenarios = () => {\n  const [allScenarios, fetchAllScenarios] = useAllScenariosFetch();\n  const [isDeleted, deleteScenario] = useDeleteScenario();\n  const [isRunning, runDeduplication] = useRunDeduplication();\n  const [isCloned, cloneScenario] = useCloneScenario();\n  const history = useHistory();\n  const { openToast } = useContext(ToastContext);\n\n  useEffect(fetchAllScenarios, []);\n\n  useEffect(() => {\n    if (isCloned.data !== null && isCloned.data.data.id)\n      openToast({\n        heading: [\"Scenario Cloned\"]\n      });\n    else if (isDeleted.status !== null && isDeleted.status === 200) {\n      openToast({\n        heading: [\"Scenario Deleted\"]\n      });\n      fetchAllScenarios();\n    } else if (isRunning.data !== null && isRunning.data.status === \"success\") {\n      openToast({\n        heading: [\"Scenario is Running\"]\n      });\n      fetchAllScenarios();\n    }\n  }, [isCloned.data, isDeleted.data, isRunning.data]);\n\n  const createScenario = () => history.push(`${DEDUP_PATH}/scenarios/new`);\n  const viewScenario = scenarioId => history.push(`${DEDUP_PATH}/scenarios/${scenarioId}`);\n  //TODO: set propert route name /grax-app/client/duplicates/:id or /grax-app/client/results/:id ?\n  const viewDuplicates = scenarioId => history.push(`${DEDUP_PATH}/duplicates/${scenarioId}`);\n\n  const onRowAction = (scenarioId, selected) => {\n    switch (selected.value) {\n      case SCENARIO_FETCH_ENUMS_RUN:\n        //TODO: change name to run scenario\n        runDeduplication(scenarioId);\n        break;\n      //TODO: change name to view duplicates\n      case SCENARIO_FETCH_ENUMS_RESULTS:\n        //TODO retrieve scenario id\n        viewDuplicates(scenarioId);\n        break;\n      case SCENARIO_FETCH_ENUMS_DUPLICATE:\n        cloneScenario(scenarioId);\n        break;\n      case SCENARIO_FETCH_ENUMS_UPDATE:\n        viewScenario(scenarioId);\n        break;\n      case SCENARIO_FETCH_ENUMS_DELETE:\n        deleteScenario(scenarioId);\n        break;\n      default:\n    }\n  };\n\n  return [\n    allScenarios,\n    {\n      createScenario,\n      viewScenario,\n      viewDuplicates,\n      onRowAction\n    }\n  ];\n};\n\nexport default useScenarios;\n","import React from \"react\";\nimport { PageHeader, Card, DataTable } from \"@salesforce/design-system-react\";\n\nimport { DEDUP_SCENARIOS } from \"../../../consts/dedup/componentNames\";\nimport { ScenarioActions } from \"./ScenarioPageHeaderActions\";\n//TODO: Change ScenariosRow.js file name to ScenariosColumn.jsx\nimport { ScenariosColumns } from \"./ScenariosRow\";\nimport useScenarios from \"../../../hooks/dedup/useScenarios\";\n\nconst Scenarios = () => {\n  const [\n    allScenarios,\n    { onRowAction, createScenario, viewScenario, viewDuplicates }\n  ] = useScenarios();\n\n  return (\n    <React.Fragment>\n      <PageHeader\n        className=\"slds-m-bottom_large\"\n        title=\"Scenarios\"\n        variant=\"object-home\"\n        onRenderActions={ScenarioActions.bind(null, createScenario)}\n        trail={[<a href=\"javascript:void(0);\">Dedup</a>]}\n      />\n\n      <Card style={{ flexGrow: 1 }} heading=\"All Scenarios\">\n        <DataTable\n          items={allScenarios.data.data}\n          noRowHover={true}\n          viewScenario={viewScenario}\n          viewDuplicates={viewDuplicates}\n          onRowAction={onRowAction}\n        >\n          {ScenariosColumns}\n        </DataTable>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nScenarios.displayName = DEDUP_SCENARIOS;\n\nexport default Scenarios;\n","export const DEDUP_SCENARIO = \"DedupScenario\";\nexport const DEDUP_SCENARIO_FIELDS_AND_OPERATORS = \"DedupScenarioFieldsAndOperators\";\nexport const DEDUP_SCENARIO_FILTER_CRITERIAS = \"DedupScenarioFilterCriterias\";\nexport const DEDUP_SCENARIO_MATCH_CRITERIAS = \"DedupScenarioMatchCriterias\";\nexport const DEDUP_SCENARIO_GENERIAL = \"DedupScenarioGeneral\";\nexport const DEDUP_SCENARIO_MERGE_ACTIONS = \"DedupScenarioMergeActions\";\nexport const DEDUP_SCENARIOS = \"DedupScenarios\";\nexport const DEDUP_SCENARIOS_ROWS = \"DedupScenariosRows\";\nexport const DEDUP_SCENARIO_CARD_ACTIONS = \"DedupScenarioCardActions\";\nexport const DEDUP_SCENARIO_PAGE_HEADER = \"DedupScenarioPageHeader\";\n","import { useState, useEffect } from \"react\";\n\nimport { GRAX_DATA_LAKE_PROXY_ADDRESS } from \"../consts/addresses\";\nimport useFetch from \"./useFetch\";\n\nconst useFieldsFetch = () => {\n  const [docPrefixedFields, setdocPrefixedFields] = useState([]);\n  const [fields, setObjectIndex] = useFetch();\n  const fetchFields = objectIndex => {\n    if (objectIndex !== \"\") {\n      setObjectIndex({\n        url: `${GRAX_DATA_LAKE_PROXY_ADDRESS}/getDataTypeFields/${objectIndex}?action=load`,\n        params: { sfdcorgid: \"\" }\n      });\n    } else {\n      setdocPrefixedFields([]);\n    }\n  };\n\n  useEffect(() => {\n    // verify network request status\n    if (fields.data !== null) {\n      const options = [];\n      const objectFields = fields.data;\n      for (let fieldName in objectFields) {\n        if (fieldName.split(\".\").length === 1 && fieldName.startsWith(\"grax\") === false) {\n          const fieldDataType = objectFields[fieldName];\n          options.push({\n            label: fieldName,\n            //TODO: does it need check for doc. prefixed field name?\n            value: `doc.${fieldName}`,\n            dataType: fieldDataType\n          });\n        }\n      }\n      setdocPrefixedFields(options);\n    }\n  }, [fields.data]);\n\n  return [docPrefixedFields, fetchFields];\n};\n\nexport default useFieldsFetch;\n","import {\n  SCENARIO_SET_MATCH_CRITERIA,\n  SCENARIO_SET_FILTER_CRITERIA,\n  SCENARIO_SET_NAME,\n  SCENARIO_SET_DESCRIPTION,\n  SCENARIO_SET_OBJECT_NAME,\n  SCENARIO_SET_IS_ACTIVE,\n  SCENARIO_SET_SCENARIO_ACTION,\n  SCENARIO_SET_RESULTS_TABLE_FIELDS,\n  SCENARIO_SET_FIELDS,\n  SCENARIO_LOAD\n} from \"../../consts/dedup/scenarioActions\";\n\nconst intialState = {\n  isEditMode: false,\n  objectIndex: \"\",\n  formState: {\n    filterCriteria: [],\n    matchCriteria: [{}],\n    sfdcorgid: \"\",\n    name: \"\",\n    description: \"\",\n    object_name: \"\",\n    is_active: true,\n    scenario_action: \"MANUAL_MERGE\",\n    fields: [],\n    results_table_fields: [],\n    records_affected: null,\n    groups_count: null\n  },\n  editMode: {}\n};\n\nconst scenarioReducer = (state, action) => {\n  switch (action.type) {\n    case SCENARIO_LOAD: {\n      const { payload } = action;\n      return {\n        ...state,\n        isEditMode: action.payload.isEditMode,\n        formState: {\n          matchCriteria: payload.matchCriteria,\n          filterCriteria: action.payload.filterCriteria,\n          name: payload.name,\n          description: payload.description,\n          object_name: payload.object_name,\n          results_table_fields: payload.results_table_fields,\n          fields: payload.fields,\n          is_active: payload.is_active,\n          scenario_action: payload.scenario_action\n        }\n      };\n    }\n    case SCENARIO_SET_MATCH_CRITERIA:\n    case SCENARIO_SET_FILTER_CRITERIA:\n    case SCENARIO_SET_NAME:\n    case SCENARIO_SET_DESCRIPTION:\n    case SCENARIO_SET_IS_ACTIVE:\n    case SCENARIO_SET_SCENARIO_ACTION: {\n      const { payload } = action;\n      let newState = { ...state, formState: { ...state.formState, ...payload } };\n\n      if (state.isEditMode === true) {\n        newState = {\n          ...newState,\n          editMode: {\n            ...state.editMode,\n            ...payload\n          }\n        };\n      }\n\n      return newState;\n    }\n    case SCENARIO_SET_RESULTS_TABLE_FIELDS: {\n      const { payload } = action;\n      const resultsTableFields = payload.fields.map(field => field.value);\n\n      let newState = {\n        ...state,\n        formState: { ...state.formState, results_table_fields: resultsTableFields }\n      };\n\n      if (state.isEditMode === true) {\n        newState = {\n          ...newState,\n          editMode: {\n            ...newState.editMode,\n            results_table_fields: resultsTableFields\n          }\n        };\n      }\n\n      return newState;\n    }\n    case SCENARIO_SET_FIELDS: {\n      const { payload } = action;\n      const fields = payload.fields.map(field => field.value);\n\n      let newState = {\n        ...state,\n        formState: { ...state.formState, fields }\n      };\n\n      if (state.isEditMode === true) {\n        newState = {\n          ...newState,\n          editMode: {\n            ...newState.editMode,\n            fields\n          }\n        };\n      }\n\n      return newState;\n    }\n    case SCENARIO_SET_OBJECT_NAME: {\n      const { payload } = action;\n      const matchCriteria = state.formState.matchCriteria.map(matchCriteria => ({\n        ...matchCriteria,\n        field_name: \"\",\n        operator: \"\"\n      }));\n      const filterCriteria = state.formState.filterCriteria.map(filterCriteria => ({\n        ...filterCriteria,\n        field_name: \"\",\n        operator: \"\"\n      }));\n      //TODO: move objectIndex from state\n      let newState = {\n        ...state,\n        objectIndex: payload.objectIndex,\n        formState: {\n          ...state.formState,\n          object_name: payload.object_name,\n          matchCriteria,\n          filterCriteria\n        }\n      };\n      if (state.isEditMode === true) {\n        newState = {\n          ...newState,\n          editMode: {\n            ...newState.editMode,\n            object_name: payload.object_name,\n            matchCriteria,\n            filterCriteria\n          }\n        };\n      }\n      return newState;\n    }\n    default:\n      throw new Error();\n  }\n};\n\nexport { scenarioReducer, intialState };\n","export const SCENARIO_SET_MATCH_CRITERIA = \"SCENARIO_SET_MATCH_CRITERIA\";\nexport const SCENARIO_SET_FILTER_CRITERIA = \"SCENARIO_SET_FILTER_CRITERIA\";\nexport const SCENARIO_SET_NAME = \"SCENARIO_SET_NAME\";\nexport const SCENARIO_SET_DESCRIPTION = \"SCENARIO_SET_DESCRIPTION\";\nexport const SCENARIO_SET_OBJECT_NAME = \"SCENARIO_SET_OBJECT_NAME\";\nexport const SCENARIO_SET_IS_ACTIVE = \"SCENARIO_SET_IS_ACTIVE\";\nexport const SCENARIO_SET_SCENARIO_ACTION = \"SCENARIO_SET_SCENARIO_ACTION\";\nexport const SCENARIO_SET_RESULTS_TABLE_FIELDS = \"SCENARIO_SET_RESULTS_TABLE_FIELDS\";\nexport const SCENARIO_SET_FIELDS = \"SCENARIO_SET_FIELDS\";\nexport const SCENARIO_LOAD = \"SCENARIO_LOAD\";\n","import { useEffect, useState } from \"react\";\nimport { GRAX_DATA_LAKE_PROXY_ADDRESS } from \"../consts/addresses\";\nimport useFetch from \"./useFetch\";\n\nconst useObjectsFetch = () => {\n  const [sObjects, setSobjects] = useState([]);\n  // TODO: fetch only salesforce standard and custom objects\n  //  joelmsanto/dedup-ui-with-dedupscenariobackend\n  const [_sObjects] = useFetch({\n    url: `${GRAX_DATA_LAKE_PROXY_ADDRESS}/getDataTypes`,\n    params: {\n      sfdcorgid: \"\"\n    }\n  });\n\n  useEffect(() => {\n    if (_sObjects.data !== null) {\n      //TODO: filter custom and standard objects\n      setSobjects(\n        _sObjects.data.filter(\n          sObject => sObject.label.startsWith(\"grax\") === false && sObject.label !== \"logs\"\n        )\n      );\n    }\n  }, [_sObjects.data]);\n\n  return sObjects;\n};\n\nexport default useObjectsFetch;\n","import { useReducer, useEffect, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport {\n  useCloneScenario,\n  useCreateScenario,\n  useDeleteScenario,\n  useUpdateScenario,\n  useRunDeduplication,\n  useFetchScenario\n} from \"./useScenarioFetch\";\nimport useFieldsFetch from \"../useFieldsFetch\";\nimport { ToastContext } from \"../../contexts/toastContext\";\nimport { scenarioReducer, intialState } from \"../../reducers/dedup/scenarioReducer\";\nimport {\n  SCENARIO_LOAD,\n  SCENARIO_SET_RESULTS_TABLE_FIELDS\n} from \"../../consts/dedup/scenarioActions\";\nimport useObjectsFetch from \"../useObjectsFetch\";\nimport { DEDUP_PATH } from \"../../consts/addresses\";\n\nconst useScenario = () => {\n  const [state, dispatch] = useReducer(scenarioReducer, intialState);\n  const [fetchedScenario, fetchScenario] = useFetchScenario();\n  const [isNewScenario, createScenario] = useCreateScenario();\n  const [isDeleted, deleteScenario] = useDeleteScenario();\n  //TODO: rename useRunDeduplication to useRunScenario\n  const [isRunning, runDeduplication] = useRunDeduplication();\n  const [isCloned, cloneScenario] = useCloneScenario();\n  const [isUpdated, updateScenario] = useUpdateScenario();\n  const [docPrefixedFields, fetchFields] = useFieldsFetch();\n  const params = useParams();\n  const history = useHistory();\n  const { openToast } = useContext(ToastContext);\n  const scenarioId = Number(params.scenario_id);\n  const isEditMode = Number.isInteger(scenarioId);\n  const heading = `${isEditMode ? \"Update\" : \"Create\"} Scenario`;\n  const formState = state.formState;\n  const sObjects = useObjectsFetch();\n\n  useEffect(() => {\n    if (isEditMode === true) fetchScenario(scenarioId);\n  }, [isEditMode]);\n\n  useEffect(() => {\n    if (fetchedScenario.data !== null && fetchedScenario.error === null)\n      dispatch({\n        type: SCENARIO_LOAD,\n        payload: {\n          isEditMode,\n          ...fetchedScenario.data.data\n        }\n      });\n  }, [fetchedScenario.data]);\n\n  //TODO: move objectIndex out from reducer\n  useEffect(() => {\n    if (state.objectIndex !== \"\") fetchFields(state.objectIndex);\n  }, [state.objectIndex]);\n\n  useEffect(\n    () =>\n      dispatch({\n        type: SCENARIO_SET_RESULTS_TABLE_FIELDS,\n        payload: {\n          fields: docPrefixedFields\n        }\n      }),\n    [docPrefixedFields]\n  );\n\n  useEffect(() => {\n    const { isEditMode, formState, objectIndex } = state;\n    const { object_name } = formState;\n    if (isEditMode === true && object_name !== \"\" && objectIndex === \"\" && sObjects.length > 0) {\n      //TODO: cleanup hook after first call\n      const sObject = sObjects.find(obj => obj.label === object_name);\n      if (sObject !== undefined) fetchFields(sObject.id);\n    }\n  }, [sObjects, state.formState.object_name]);\n\n  //TODO: move scenario success and error messages toast to insolate hook\n  useEffect(() => {\n    if (isNewScenario.data !== null && isNewScenario.data.data.id) {\n      openToast({\n        heading: [\"New Scenario Created\"]\n      });\n      history.push(`${DEDUP_PATH}/scenarios/${isNewScenario.data.data.id}`);\n    } else if (isCloned.data !== null && isCloned.data.data.id) {\n      openToast({\n        heading: [\"Scenario Cloned\"]\n      });\n      history.push(`${DEDUP_PATH}//scenarios/${isCloned.data.data.id}`);\n    } else if (isDeleted.status !== null && isDeleted.status === 200) {\n      openToast({\n        heading: [\"Scenario Deleted\"]\n      });\n      history.push(`${DEDUP_PATH}/scenarios`);\n    } else if (isRunning.data !== null && isRunning.data.status === \"success\") {\n      openToast({\n        heading: [\"Scenario is Running\"]\n      });\n    }\n  }, [isNewScenario.data, isCloned.data, isDeleted, isUpdated, isRunning]);\n\n  useEffect(() => {\n    if (isUpdated.data !== null && isUpdated.error === null)\n      openToast({\n        heading: \"Scenario Updated\"\n      });\n  }, [isUpdated.data]);\n\n  const onSubmit = e => {\n    if (state.isEditMode === true) {\n      updateScenario(scenarioId, state.editMode);\n    } else {\n      const { fields, ...createMode } = state.formState;\n      createScenario(createMode);\n    }\n    e.preventDefault();\n  };\n\n  const viewDuplicates = scenarioId => history.push(`/grax-app/client/duplicates/${scenarioId}`);\n\n  return [\n    {\n      formState,\n      isEditMode,\n      docPrefixedFields,\n      scenarioId,\n      heading,\n      sObjects\n    },\n    {\n      dispatch,\n      deleteScenario,\n      cloneScenario,\n      runDeduplication,\n      viewDuplicates,\n      onSubmit\n    }\n  ];\n};\n\nexport default useScenario;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Button, Modal, Dropdown } from \"@salesforce/design-system-react\";\n\nimport { DEDUP_SCENARIO_CARD_ACTIONS } from \"../../../consts/dedup/componentNames\";\nimport {\n  SCENARIO_FETCH_ENUMS_DUPLICATE,\n  SCENARIO_FETCH_ENUMS_RUN,\n  SCENARIO_FETCH_ENUMS_RESULTS\n} from \"../../../consts/dedup/scenarioFetchEnums\";\n\nconst scenarioCardActionPropTypes = {\n  isEditMode: PropTypes.bool.isRequired,\n  onDelete: PropTypes.func,\n  onDuplicate: PropTypes.func\n};\n\nconst DeleteScenarioPromp = ({ isOpen, onDelete, onClose }) => (\n  <Modal\n    disableClose\n    footer={[\n      <Button label=\"Cancel\" onClick={onClose} />,\n      <Button\n        label=\"Delete\"\n        variant=\"destructive\"\n        onClick={() => {\n          onClose();\n          onDelete();\n        }}\n      />\n    ]}\n    isOpen={isOpen}\n    onRequestClose={onClose}\n    prompt=\"error\"\n    size=\"small\"\n    title={<span>Delete Scenario?</span>}\n  >\n  </Modal>\n);\n\nconst ScenarioCardActions = ({ isEditMode, onDelete, onDuplicate, onRun, onViewDuplicates }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const deleteButton = (\n    <Button\n      className=\"slds-m-horizontal_xx-small\"\n      iconCategory=\"utility\"\n      iconName=\"delete\"\n      iconVariant=\"border-filled\"\n      onClick={onDelete}\n    />\n  );\n  const utilityButton = (\n    <Dropdown\n      buttonVariant=\"icon\"\n      checkmark\n      iconName=\"settings\"\n      iconSize=\"large\"\n      iconVariant=\"more\"\n      align=\"right\"\n      onSelect={selected => {\n        switch (selected.value) {\n          case SCENARIO_FETCH_ENUMS_RUN:\n            onRun();\n            break;\n          case SCENARIO_FETCH_ENUMS_RESULTS:\n            onViewDuplicates();\n            break;\n          default:\n            onDuplicate();\n        }\n      }}\n      options={[\n        { label: \"Run\", value: SCENARIO_FETCH_ENUMS_RUN },\n        //FIXME: wrong name, imported from wrong location\n        { label: \"View Result\", value: SCENARIO_FETCH_ENUMS_RESULTS },\n        { label: \"Duplicate\", value: SCENARIO_FETCH_ENUMS_DUPLICATE }\n      ]}\n    />\n  );\n  const actions = [];\n\n  if (isEditMode === true) {\n    actions.push(utilityButton);\n    actions.push(deleteButton);\n    actions.push(\n      <DeleteScenarioPromp isOpen={isOpen} onClose={() => setIsOpen(false)} onDelete={onDelete} />\n    );\n  }\n\n  return actions;\n};\n\nScenarioCardActions.propType = scenarioCardActionPropTypes;\nScenarioCardActions.displayName = DEDUP_SCENARIO_CARD_ACTIONS;\n\nexport default ScenarioCardActions;\n","import React, { memo, useRef } from \"react\";\nimport PropType from \"prop-types\";\n\nimport { ExpandableSection, Input, Checkbox } from \"@salesforce/design-system-react\";\n\nimport { DEDUP_SCENARIO_GENERIAL } from \"../../../consts/dedup/componentNames\";\n\nconst propTypes = {\n  name: PropType.string.required,\n  description: PropType.string.required,\n  isActive: PropType.bool.required,\n  onChangeName: PropType.func,\n  onChangeDescription: PropType.func,\n  onChangeNameIsActive: PropType.func\n};\n\nconst ScenarioGeneral = memo(\n  ({ name, description, isActive, onChangeName, onChangeDescription, onChangeIsActive }) => {\n    const c = useRef(0);\n    c.current = c.current + 1;\n    // console.log(c, \"general\");\n    return (\n      <ExpandableSection\n        title=\"General\"\n        className=\"slds-m-bottom_medium slds-m-top_none\"\n        nonCollapsible\n      >\n        <div className=\"slds-grid slds-gutters_small\">\n          <div className=\"slds-col slds-size_2-of-5\">\n            <Input\n              label=\"Name\"\n              required\n              value={name}\n              onChange={e => onChangeName(e.target.value)}\n            />\n          </div>\n          <div className=\"slds-col slds-size_2-of-5\">\n            <Input\n              label=\"Description\"\n              value={description}\n              onChange={e => onChangeDescription(e.target.value)}\n            />\n          </div>\n          <div className=\"slds-col slds-size_1-of-5\">\n            <div className=\"slds-form-element\">\n              <label className=\"slds-form-element__label\">Is Active</label>\n              <Checkbox\n                checked={isActive}\n                variant=\"toggle\"\n                onChange={(_event, { checked }) => onChangeIsActive(checked)}\n              />\n            </div>\n          </div>\n        </div>\n      </ExpandableSection>\n    );\n  }\n);\n\nScenarioGeneral.prototype = propTypes;\nScenarioGeneral.prototype.displayName = DEDUP_SCENARIO_GENERIAL;\n\nexport default ScenarioGeneral;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Combobox, comboboxFilterAndLimit } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object),\n  onChange: PropTypes.func.isRequired,\n  props: PropTypes.objectOf(PropTypes.object)\n};\n\nconst defaultProps = { options: [], props: {} };\n\nconst GRAXCombobox = ({ options = [], onChange, ...props }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selection, setSelection] = useState([]);\n\n  const onChangeHandler = (event, dataSelection) => {\n    if (onChange) {\n      onChange(event, dataSelection, options);\n    }\n  };\n\n  return (\n    <Combobox\n      events={{\n        onChange: (event, { value }) => setInputValue(value),\n        onRequestRemoveSelectedOption: (event, data) => {\n          setInputValue(\"\");\n          setSelection(data.selection);\n\n          onChangeHandler(event, data.selection);\n        },\n        onSelect: (event, data) => {\n          setInputValue(\"\");\n          setSelection(data.selection);\n\n          onChangeHandler(event, data.selection);\n        }\n      }}\n      options={comboboxFilterAndLimit({\n        inputValue,\n        limit: 1000,\n        options,\n        selection\n      })}\n      selection={selection}\n      value={inputValue}\n      variant=\"inline-listbox\"\n      required\n      menuItemVisibleLength={5}\n      classNameMenu=\"slds-dropdown_length-7\"\n      {...props}\n    />\n  );\n};\n\nGRAXCombobox.propTypes = propTypes;\nGRAXCombobox.defaultProps = defaultProps;\n\nexport default GRAXCombobox;\n","import React, { createContext, useContext, useMemo } from \"react\";\n\nimport { DEDUP_PROXY_ADDRESS } from \"../consts/addresses\";\nimport useFetch from \"../hooks/useFetch\";\n\nexport const DedupStoreContext = createContext();\nexport const useScenarioStore = () => useContext(DedupStoreContext);\n\nexport const DedupStoreContextProvider = ({ children }) => {\n  //TODO: retrieve sfdcorgid from .env\n  const [metadata] = useFetch(\n    { url: `${DEDUP_PROXY_ADDRESS}/metadata`, params: { sfdcorgid: \"\" } },\n    { data: { data: { operators: [], stopwords: [], synonyms: [] } } }\n  );\n  // TODO: move salesforce object into a React cache\n\n  const store = useMemo(\n    () => ({\n      metadata\n    }),\n    [metadata]\n  );\n\n  return <DedupStoreContext.Provider value={store}>{children}</DedupStoreContext.Provider>;\n};\n","import React, { memo, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { DEDUP_SCENARIO_MERGE_ACTIONS } from \"../../../consts/dedup/componentNames\";\nimport GRAXCombobox from \"../../commons/GRAXCombobox\";\nimport { useScenarioStore } from \"../../../contexts/scenarioContext\";\n\nconst propTypes = {\n  scenarioActions: PropTypes.array,\n  scenarioAction: PropTypes.string,\n  onChange: PropTypes.func\n};\n\nconst MergeActions = ({ scenarioAction, onChange }) => {\n  const scenarioStore = useScenarioStore();\n  const { scenario_actions } = scenarioStore.metadata.data.data;\n\n  const extractMergeActions = scenarioActions => {\n    const options = [];\n\n    for (let index in scenarioActions) {\n      let values = scenarioActions[index].values;\n\n      values = values.map(value => ({\n        label: value.display_value,\n        value: value.code\n      }));\n\n      options.push(...values);\n    }\n\n    return options;\n  };\n\n  const b = useRef(0);\n  b.current = b.current + 1;\n  //console.log(b);\n  return (\n    <div className=\"slds-col slds-size_2-of-5\">\n      <GRAXCombobox\n        options={extractMergeActions(scenario_actions)}\n        value={scenarioAction}\n        labels={{ placeholder: \"Select Option\" }}\n        required\n        onChange={(e, selected) => onChange(selected.length === 1 ? selected[0].value : null)}\n      />\n    </div>\n  );\n};\n\nMergeActions.prototype = propTypes;\nMergeActions.displayName = DEDUP_SCENARIO_MERGE_ACTIONS;\n\nexport default memo(MergeActions);\n","import React from \"react\";\n\nimport { PageHeader, PageHeaderControl, Button } from \"@salesforce/design-system-react\";\n\nconst ScenarioHeader = ({ heading, onSubmit }) => (\n  <PageHeader\n    className=\"slds-m-bottom_large\"\n    title={heading}\n    variant=\"object-home\"\n    trail={[<span>Dedup </span>, <a href=\"javascript:void(0);\">Scenarios</a>]}\n    onRenderActions={() => (\n      <React.Fragment>\n        <PageHeaderControl variant=\"list\">\n          <Button label=\"Save\" type=\"submit\" />\n        </PageHeaderControl>\n      </React.Fragment>\n    )}\n  />\n);\n\nexport default ScenarioHeader;\n","import React from \"react\";\n\nimport { Button } from \"@salesforce/design-system-react\";\n\nexport const RepeatingRemoveRowButton = ({ onRemove, ...props }) => (\n  <div className=\"slds-col slds-size_1-of-12\">\n    <div className=\"slds-form-element\">\n      <label className=\"slds-form-element__label\">&nbsp;</label>\n      <div className=\"slds-from_element__control\">\n        <Button\n          onClick={onRemove}\n          iconCategory=\"utility\"\n          variant=\"icon\"\n          iconName=\"delete\"\n          iconVariant=\"border-filled\"\n          {...props}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nexport const AddRowButton = ({ onClick, ...props }) => (\n  <Button\n    className=\"slds-m-top_medium\"\n    label=\"Add New Row\"\n    iconCategory=\"utility\"\n    iconName=\"add\"\n    iconPosition=\"left\"\n    onClick={onClick}\n    {...props}\n  />\n);\n","import React, { cloneElement } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { AddRowButton } from \"./Buttons\"\n\nconst propTypes = {\n    rows: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onChange: PropTypes.func.isRequired,\n    header: PropTypes.element,\n    footer: PropTypes.element\n}\n\nconst withRepeating = WrappedComponent => ({\n    rows,\n    onChange,\n    footer,\n    hideFooter,\n    ...props\n}) => {\n    const addRow = (row = {}) => onChange(rows.concat(row));\n    const removeRow = index => onChange(rows.filter((r, i) => index !== i));\n    const editRow = (row, index) => onChange(rows.map((r, i) => index === i ? row : r));\n    const displayName = `${withRepeating.name}${WrappedComponent.name}`;\n    const repeatedWrapped = [];\n\n    WrappedComponent.displayName = displayName;\n    rows.map((row, index) =>\n        repeatedWrapped.push(<WrappedComponent\n            row={row}\n            index={index}\n            key={`${displayName}-${index}`}\n            onChange={row => editRow(row, index)}\n            onRemove={() => removeRow(index)}\n            {...props}\n        />)\n    );\n\n    const renderFooter = (footer, hideFooter) => {\n        if (hideFooter === undefined) {\n            if (React.isValidElement(footer)) {\n                return cloneElement(footer, { addRow });\n            }\n\n            return <AddRowButton onClick={() => addRow({})} />;\n        }\n    }\n\n    return [\n        repeatedWrapped,\n        renderFooter(footer, hideFooter)\n    ];\n}\n\nwithRepeating.displayName = 'withRepeating';\nwithRepeating.propTypes = propTypes;\n\nexport default withRepeating","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DEDUP_SCENARIO_FIELDS_AND_OPERATORS } from \"../../../consts/dedup/componentNames\";\nimport GRAXCombobox from \"../../commons/GRAXCombobox\";\nimport { useOperators } from \"../../../hooks/dedup/useFieldsAndOperators\";\n\nconst propTypes = {\n  fieldName: PropTypes.string,\n  docPrefixedFields: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  ),\n  operator: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  ),\n  onChangeField: PropTypes.func,\n  onChangeOperator: PropTypes.func,\n  operators: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst FieldsAndOperators = ({\n  fieldName,\n  operator,\n  docPrefixedFields,\n  onChangeField,\n  onChangeOperator\n}) => {\n  const [dropdownLabel, setDropdownLabel] = useState(\"\");\n  const [operators, setDataType] = useOperators(fieldName);\n\n  useEffect(() => {\n    if (operators.length === 0 && fieldName !== \"\" && docPrefixedFields.length > 0) {\n      const fieldDataType = docPrefixedFields.find(field => field.value === fieldName);\n      if (fieldDataType !== undefined) setDataType(fieldDataType.dataType);\n    }\n  }, [docPrefixedFields]); //TODO: watch for fieldName also\n\n  useEffect(() => {\n    let fieldLabel = \"\";\n    if (fieldName !== undefined && fieldName.startsWith(\"doc.\"))\n      fieldLabel = fieldName.split(\"doc.\")[1];\n\n    setDropdownLabel(fieldLabel);\n  }, [fieldName]);\n\n  const handleFieldName = selection => {\n    if (selection.length === 1) {\n      const { value, dataType } = selection[0];\n      onChangeField(value);\n      setDataType(dataType);\n    } else {\n      onChangeField(\"\");\n      setDataType(null);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"slds-col slds-size_1-of-5\">\n        <GRAXCombobox\n          onChange={(event, selection) => handleFieldName(selection)}\n          options={docPrefixedFields}\n          value={dropdownLabel}\n          required\n          labels={{\n            label: \"Fields\",\n            placeholder: \"Select Option\"\n          }}\n        />\n      </div>\n      <div className=\"slds-col slds-size_1-of-5\">\n        <GRAXCombobox\n          onChange={(event, selection) =>\n            onChangeOperator(selection.length === 1 ? selection[0].label : \"\")\n          }\n          options={operators}\n          value={operator}\n          required\n          labels={{\n            label: \"Operators\",\n            placeholder: \"Select Option\"\n          }}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nFieldsAndOperators.prototype = propTypes;\nFieldsAndOperators.displayName = DEDUP_SCENARIO_FIELDS_AND_OPERATORS;\n\nexport default FieldsAndOperators;\n","import { useState, useEffect } from \"react\";\n\nimport { useScenarioStore } from \"../../contexts/scenarioContext\";\n\nexport const useOperators = () => {\n  const [dataType, setDataType] = useState(null);\n  const [fieldOperators, setFieldOperators] = useState([]);\n  const scenarioStore = useScenarioStore();\n  const { operators } = scenarioStore.metadata.data.data;\n\n  useEffect(() => {\n    if (dataType === null) setFieldOperators([]);\n    else {\n      const applicableOperators = operators\n        .filter(operator => operator.applicable_data_types.includes(dataType))\n        //TODO: map operators just one\n        .map(operator => ({\n          label: operator.name,\n          value: operator.id\n        }));\n      setFieldOperators(applicableOperators);\n    }\n  }, [dataType, operators]);\n\n  return [fieldOperators, setDataType];\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Checkbox } from \"@salesforce/design-system-react\";\n\nimport { DEDUP_SCENARIO_MATCH_CRITERIAS } from \"../../../consts/dedup/componentNames\";\nimport { mutateRow } from \"../../../lib/utils\";\nimport { RepeatingRemoveRowButton } from \"../../commons/Buttons\";\nimport withRepeating from \"../../commons/withRepeating\";\nimport FieldsAndOperators from \"./FieldsAndOperators\";\n\nconst propTypes = {\n  row: PropTypes.shape({\n    field: PropTypes.string,\n    operator: PropTypes.string,\n    value: PropTypes.string,\n    stopWord: PropTypes.array,\n    synonyms: PropTypes.array,\n    cleanse: PropTypes.bool\n  }),\n  index: PropTypes.number,\n  onChange: PropTypes.func,\n  onRemove: PropTypes.func,\n  docPrefixedFields: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  ),\n  operators: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  )\n};\n\nconst MatchCriteriaRow = ({\n  row,\n  onChange,\n  onRemove,\n  setMetadata,\n  docPrefixedFields,\n  operators,\n  rowsNum\n}) => {\n  const disabledRemoveButton = rowsNum === 1;\n  return (\n    <li className=\"slds-grid slds-gutters_small\">\n      <FieldsAndOperators\n        docPrefixedFields={docPrefixedFields}\n        operators={operators}\n        fieldName={row.field_name}\n        operator={row.operator}\n        onChangeField={fieldName =>\n          onChange(\n            Object.assign({}, row, {\n              field_name: fieldName,\n              operator: \"\"\n            })\n          )\n        }\n        onChangeOperator={operator => onChange(mutateRow(row, \"operator\", operator))}\n      />\n      <div className=\"slds-col slds-size_1-of-5\">\n        <div className=\"slds-form-element\">\n          <label className=\"slds-form-element__label\">stopWord</label>\n          <div className=\"slds-form-element__control\">\n            <a\n              className=\"\"\n              style={{ lineHeight: \"1.875rem\" }}\n              href={e => e.preventDefault()}\n              onClick={() =>\n                setMetadata({\n                  matchCriteriaId: row.id,\n                  id: row.stopwords_list_id,\n                  variant: \"stopwords\"\n                })\n              }\n            >\n              Contact Prefixes\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"slds-col slds-size_1-of-6\">\n        <div className=\"slds-form-element\">\n          <label className=\"slds-form-element__label\">Synonym</label>\n          <div className=\"slds-form-element__control\">\n            <a\n              className=\"\"\n              style={{ lineHeight: \"1.875rem\" }}\n              href={e => e.preventDefault()}\n              onClick={() =>\n                setMetadata({\n                  matchCriteriaId: row.id,\n                  id: row.synonyms_id,\n                  variant: \"synonyms\"\n                })\n              }\n            >\n              Synonym name\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"slds-col slds-size_2-of-12\">\n        <span className=\"slds-form-element__label\">Use Cleansed Field</span>\n        <div className=\"slds-form-element__control\">\n          <Checkbox\n            variant=\"toggle\"\n            checked={row.cleanse}\n            onChange={(event, { checked }) => onChange(mutateRow(row, \"cleanse\", !row.cleanse))}\n          />\n        </div>\n      </div>\n      <RepeatingRemoveRowButton onRemove={onRemove} disabled={disabledRemoveButton} />\n    </li>\n  );\n};\n\nMatchCriteriaRow.prototype = propTypes;\nMatchCriteriaRow.displayName = DEDUP_SCENARIO_MATCH_CRITERIAS;\n\nexport default withRepeating(MatchCriteriaRow);\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Input } from \"@salesforce/design-system-react\";\n\nimport { DEDUP_SCENARIO_FILTER_CRITERIAS } from \"../../../consts/dedup/componentNames\";\nimport { RepeatingRemoveRowButton } from \"../../commons/Buttons\";\nimport { mutateRow } from \"../../../lib/utils\";\nimport withRepeating from \"../../commons/withRepeating\";\nimport FieldsAndOperators from \"./FieldsAndOperators\";\n\nconst propTypes = {\n  row: PropTypes.shape({\n    field: PropTypes.string,\n    operator: PropTypes.string,\n    value: PropTypes.any\n  }),\n  index: PropTypes.number,\n  onChange: PropTypes.func,\n  onRemove: PropTypes.func,\n  docPrefixedFields: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  ),\n  operators: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  )\n};\n\nconst FilterCriteriaRow = ({ row, onChange, onRemove, docPrefixedFields, operators }) => {\n  const [value, setValue] = useState();\n\n  useEffect(() => setValue(row.value), [row.value]);\n\n  return (\n    <li className=\"slds-grid slds-gutters_small\">\n      <FieldsAndOperators\n        docPrefixedFields={docPrefixedFields}\n        operators={operators}\n        fieldName={row.field_name}\n        operator={row.operator}\n        onChangeField={fieldName => onChange(mutateRow(row, \"field_name\", fieldName))}\n        onChangeOperator={operator => onChange(mutateRow(row, \"operator\", operator))}\n      />\n      <div className=\"slds-col slds-size_1-of-5\">\n        <Input\n          label=\"Value\"\n          value={value}\n          required\n          onChange={e => setValue(e.target.value)}\n          onBlur={e => onChange(mutateRow(row, \"value\", value))}\n        />\n      </div>\n      <RepeatingRemoveRowButton onRemove={onRemove} />\n    </li>\n  );\n};\n\nFilterCriteriaRow.proptype = propTypes;\nFilterCriteriaRow.displayName = DEDUP_SCENARIO_FILTER_CRITERIAS;\n\nexport default withRepeating(FilterCriteriaRow);\n","import React, { useState } from \"react\";\nimport { Button, Radio } from \"@salesforce/design-system-react\";\n\nimport withRepeating from \"../../../commons/withRepeating\";\n\nconst TreeModalRow = ({ row, selectedId, onChange, onRemove }) => {\n  const [isEditMode, setIsEditMode] = useState(false);\n  return (\n    <tr className=\"slds-hint-parent\">\n      <th className=\"slds-cell-edit\">\n        <Radio variant=\"base\" checked={selectedId === row.id} />\n      </th>\n      <th className=\"slds-cell-edit\">\n        <span className=\"slds-grid slds-grid_align-spread\">\n          <a className=\"slds-truncate\">\n            <span className=\"slds-grid slds-grid_align-spread\">\n              <span className=\"slds-truncate\" title=\"Acme\">\n                {row.name}\n              </span>\n            </span>\n          </a>\n\n          <Button\n            iconSize=\"small\"\n            onClick={() => setIsEditMode(true)}\n            iconCategory=\"utility\"\n            variant=\"icon\"\n            iconName=\"edit\"\n            iconVariant=\"bare\"\n            className=\"slds-cell-edit__button\"\n            iconClassName=\"slds-button__icon_hint slds-button__icon_edit\"\n          />\n        </span>\n        {isEditMode && (\n          <section\n            className=\"slds-popover slds-popover slds-popover_edit\"\n            role=\"dialog\"\n            style={{ position: \"absolute\", top: \"0px\", left: \"0.0625rem\" }}\n          >\n            <div className=\"slds-popover__body\" id=\"dialog-body-id-1\">\n              <div className=\"slds-form-element slds-grid slds-wrap\">\n                <label\n                  className=\"slds-form-element__label slds-form-element__label_edit slds-no-flex\"\n                  for=\"company-01\"\n                >\n                  <span className=\"slds-assistive-text\">Company</span>\n                </label>\n                <div className=\"slds-form-element__control slds-grow\">\n                  <input\n                    className=\"slds-input\"\n                    id=\"company-01\"\n                    type=\"text\"\n                    value=\"Acme Enterprises\"\n                    onBlur={() => {\n                      setIsEditMode(false);\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </section>\n        )}\n      </th>\n      <td className=\"slds-cell-edit slds-text-align_right\">\n        <Button\n          iconSize=\"small\"\n          onClick={onRemove}\n          iconCategory=\"utility\"\n          variant=\"icon\"\n          iconName=\"delete\"\n          iconVariant=\"border-filled\"\n        />\n      </td>\n    </tr>\n  );\n};\n\nexport default withRepeating(TreeModalRow);\n","import React, { useState, useEffect } from \"react\";\n\nimport TreeModalBranchItem from \"./TreeModalBranchItem\";\nimport { useScenarioStore } from \"../../../../contexts/scenarioContext\";\n\nconst TreeModalBranch = ({ criteria, onChange, onSelect }) => {\n  const [rows, setRows] = useState([]);\n  const scenarioStore = useScenarioStore();\n  const { stopwords, synonyms } = scenarioStore.metadata.data.data;\n\n  useEffect(() => {\n    if (criteria.variant === \"stopwords\") setRows(stopwords);\n    else setRows(synonyms);\n  }, [criteria]);\n\n  return (\n    <table className=\"slds-table slds-table_bordered slds-no-row-hover slds-table_edit\">\n      <thead>\n        <tr className=\"slds-line-height_reset\">\n          <th className=\"\" style={{ width: \"1rem\" }} />\n          <th>\n            <a\n              className=\"slds-th__action slds-text-link_reset\"\n              href=\"javascript:void(0);\"\n              role=\"button\"\n              tabindex=\"0\"\n            >\n              <span className=\"slds-assistive-text\">Sort by: </span>\n              <div className=\"slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate\">\n                <span className=\"slds-truncate\" title=\"Account Name\">\n                  Name\n                </span>\n              </div>\n            </a>\n          </th>\n          <th aria-label=\"Close Date\" aria-sort=\"none\" className=\"\" scope=\"col\" />\n        </tr>\n      </thead>\n      <tbody>\n        <TreeModalBranchItem rows={rows} selectedId={criteria.id} hideFooter={true} />\n      </tbody>\n    </table>\n  );\n};\n\nexport default TreeModalBranch;\n","import React from \"react\";\n\nimport { Modal, Button } from \"@salesforce/design-system-react\";\n\nimport TreeModalBranch from \"./TreeModalBranch\";\n\nconst HEADINGS = {\n  stopwords: \"Stopwords\",\n  synonyms: \"Synonyms\"\n};\nconst TreeModal = ({ isOpen, criteria, onChange, onRequestClose }) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      heading={HEADINGS[criteria.variant]}\n      onRequestClose={onRequestClose}\n      size={\"small\"}\n      footer={[\n        <Button label=\"Cancel\" onClick={onRequestClose} />,\n        <Button variant=\"brand\" label=\"Apply\" onClick={onRequestClose} />\n      ]}\n    >\n      <TreeModalBranch criteria={criteria} onChange={onChange} />\n    </Modal>\n  );\n};\n\nexport default TreeModal;\n","import React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ExpandableSection } from \"@salesforce/design-system-react\";\n\nimport MatchCriterias from \"./MatchCriterias\";\nimport FilterCriterias from \"./FilterCriterias\";\nimport { useScenarioStore } from \"../../../contexts/scenarioContext\";\nimport GRAXCombobox from \"../../commons/GRAXCombobox\";\nimport TreeModal from \"./metadata/TreeModal\";\n\nconst propTypes = {\n  matchCriteria: PropTypes.shape({\n    field: PropTypes.string,\n    operator: PropTypes.string,\n    value: PropTypes.string,\n    stopword: PropTypes.array,\n    synonyms: PropTypes.array,\n    cleanse: PropTypes.bool\n  }),\n  filterCriteria: PropTypes.shape({\n    field: PropTypes.string,\n    operator: PropTypes.string,\n    value: PropTypes.any\n  }),\n  operators: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  ),\n  stopwords: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  ),\n  synonyms: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })\n  ),\n  onChangeMatchCriteria: PropTypes.func,\n  onChangeFilterCriteria: PropTypes.func\n};\n\nconst ScenarioCriterias = ({\n  matchCriteria,\n  filterCriteria,\n  objectName,\n  fields,\n  docPrefixedFields,\n  sObjects,\n  onChangeObject,\n  onChangeFields,\n  onChangeMatchCriteria,\n  onChangeFilterCriteria\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [criteria, setCriteria] = useState({});\n  const scenarioStore = useScenarioStore();\n  const { operators } = scenarioStore.metadata;\n\n  const setMetadata = criteria => {\n    setIsOpen(true);\n    setCriteria(criteria);\n  };\n\n  return (\n    <Fragment>\n      <ExpandableSection title=\"Objects\" className=\"slds-m-bottom_medium\" nonCollapsible>\n        <div className=\"slds-grid slds-gutters_small\">\n          <div className=\"slds-col slds-size_1-of-5\">\n            <GRAXCombobox\n              options={sObjects}\n              labels={{ placeholder: \"Select option\" }}\n              value={objectName}\n              onChange={(event, selection) => {\n                //TODO: improve object name and object index retrievement\n                const sObject =\n                  selection.length === 1 ? selection[0] : { objectName: \"\", objectIndex: \"\" };\n                onChangeObject(sObject.label, sObject.id);\n              }}\n            />\n          </div>\n        </div>\n      </ExpandableSection>\n\n      <ExpandableSection title=\"Matching Criterias\" className=\"slds-m-bottom_medium\" nonCollapsible>\n        <MatchCriterias\n          rows={matchCriteria}\n          docPrefixedFields={docPrefixedFields}\n          operators={operators}\n          rowsNum={matchCriteria.length}\n          onChange={onChangeMatchCriteria}\n          setMetadata={setMetadata}\n        />\n      </ExpandableSection>\n      <ExpandableSection title=\"Filter Criterias\" className=\"slds-m-bottom_medium\" nonCollapsible>\n        <FilterCriterias\n          rows={filterCriteria}\n          docPrefixedFields={docPrefixedFields}\n          operators={operators}\n          onChange={onChangeFilterCriteria}\n        />\n      </ExpandableSection>\n      <TreeModal isOpen={isOpen} criteria={criteria} onRequestClose={() => setIsOpen(false)} />\n    </Fragment>\n  );\n};\n\nScenarioCriterias.propType = propTypes;\nexport default ScenarioCriterias;\n","import React, { useCallback } from \"react\";\nimport { ExpandableSection, Card } from \"@salesforce/design-system-react\";\n\nimport {\n  SCENARIO_SET_NAME,\n  SCENARIO_SET_DESCRIPTION,\n  SCENARIO_SET_IS_ACTIVE,\n  SCENARIO_SET_SCENARIO_ACTION,\n  SCENARIO_SET_MATCH_CRITERIA,\n  SCENARIO_SET_FILTER_CRITERIA,\n  SCENARIO_SET_OBJECT_NAME,\n  SCENARIO_SET_FIELDS\n} from \"../../../consts/dedup/scenarioActions\";\nimport useScenario from \"../../../hooks/dedup/useScenario\";\nimport ScenarioCardActions from \"./ScenarioCardActions\";\nimport ScenarioGeneral from \"./ScenarioGeneral\";\nimport MergeActions from \"./MergeActions\";\nimport ScenarioHeader from \"./ScenarioHeader\";\nimport ScenarioCriterias from \"./ScenarioCriterias\";\nimport { DEDUP_SCENARIO } from \"../../../consts/dedup/componentNames\";\nimport { DedupStoreContextProvider } from \"../../../contexts/scenarioContext\";\n\nconst propType = {};\n\nconst Scenario = () => {\n  const [\n    { formState, isEditMode, docPrefixedFields, scenarioId, heading, sObjects },\n    { dispatch, deleteScenario, duplicateScenario, runDeduplication, viewDuplicates, onSubmit }\n  ] = useScenario();\n\n  const {\n    name,\n    description,\n    is_active,\n    object_name,\n    fields,\n    matchCriteria,\n    filterCriteria,\n    scenario_action\n  } = formState;\n\n  return (\n    <DedupStoreContextProvider>\n      <form onSubmit={e => onSubmit(e)}>\n        <ScenarioHeader heading={heading} />\n        <Card\n          heading={heading}\n          headerActions={\n            <ScenarioCardActions\n              isEditMode={isEditMode}\n              onDelete={() => deleteScenario(scenarioId)}\n              onDuplicate={() => duplicateScenario(scenarioId)}\n              onRun={() => runDeduplication(scenarioId)}\n              onViewDuplicates={() => viewDuplicates(scenarioId)}\n            />\n          }\n        >\n          <div className=\"slds-p-horizontal_medium\">\n            <ScenarioGeneral\n              name={name}\n              description={description}\n              isActive={is_active}\n              onChangeName={useCallback(\n                name =>\n                  dispatch({\n                    type: SCENARIO_SET_NAME,\n                    payload: { name }\n                  }),\n                [name]\n              )}\n              onChangeDescription={useCallback(\n                description =>\n                  dispatch({\n                    type: SCENARIO_SET_DESCRIPTION,\n                    payload: { description }\n                  }),\n                [description]\n              )}\n              onChangeIsActive={useCallback(\n                isActive =>\n                  dispatch({\n                    type: SCENARIO_SET_IS_ACTIVE,\n                    payload: { is_active: isActive }\n                  }),\n                [is_active]\n              )}\n            />\n            <ScenarioCriterias\n              matchCriteria={matchCriteria}\n              filterCriteria={filterCriteria}\n              objectName={object_name}\n              fields={fields}\n              docPrefixedFields={docPrefixedFields}\n              sObjects={sObjects}\n              onChangeMatchCriteria={rows =>\n                dispatch({\n                  type: SCENARIO_SET_MATCH_CRITERIA,\n                  payload: { matchCriteria: rows }\n                })\n              }\n              onChangeFilterCriteria={rows =>\n                dispatch({\n                  type: SCENARIO_SET_FILTER_CRITERIA,\n                  payload: { filterCriteria: rows }\n                })\n              }\n              onChangeObject={(objectName, objectIndex) =>\n                dispatch({\n                  type: SCENARIO_SET_OBJECT_NAME,\n                  payload: { object_name: objectName, objectIndex: objectIndex }\n                })\n              }\n              onChangeFields={fields =>\n                dispatch({\n                  type: SCENARIO_SET_FIELDS,\n                  payload: { fields }\n                })\n              }\n            />\n            <ExpandableSection\n              title=\"Merge Actions\"\n              nonCollapsible\n              className=\"slds-m-bottom_medium\"\n            >\n              <div className=\"slds-grid slds-gutters_small\">\n                <MergeActions\n                  scenarioAction={scenario_action}\n                  onChange={selection =>\n                    dispatch({\n                      type: SCENARIO_SET_SCENARIO_ACTION,\n                      payload: { scenario_action: selection }\n                    })\n                  }\n                />\n              </div>\n            </ExpandableSection>\n          </div>\n        </Card>\n      </form>\n    </DedupStoreContextProvider>\n  );\n};\n\nScenario.propType = propType;\nScenario.displayName = DEDUP_SCENARIO;\n\nexport default Scenario;\n","import React from \"react\";\n\nconst DuplicatesHeader = ({ tableFields }) => {\n  return (\n    <thead>\n      <tr className=\"slds-line-height_reset\">\n        <th className=\"slds-text-align_right\" style={{ width: \"3.25rem\" }} />\n        {tableFields.map(field => (\n          <th aria-label=\"Contact\">\n            <div>\n              <span className=\"slds-truncate\" title=\"Contact\">\n                {field}\n              </span>\n            </div>\n          </th>\n        ))}\n        <th aria-label=\"Contact\" style={{ width: \"3.25rem\" }}>\n          <div>\n            <span className=\"slds-truncate\" title=\"Contact\" />\n          </div>\n        </th>\n      </tr>\n    </thead>\n  );\n};\n\n//TODO: set proptypes\n\nexport default DuplicatesHeader;\n","import React, { useState } from \"react\";\nimport { Button, Checkbox, IconSettings } from \"@salesforce/design-system-react\";\n\n//TODO: should name be plural or singular\nconst DuplicateRow = ({ tableFields, row, onViewRecord }) => {\n  const [isChecked, setIsChecked] = useState(false);\n  const getColumn = (field, row) => {\n    return row[field];\n  };\n\n  return (\n    <tr aria-level=\"1\" className=\"slds-hint-parent\">\n      <td style={{ width: \"3.25rem\" }}>\n        <div className=\"slds-checkbox\">\n          <Checkbox\n            checked={isChecked}\n            onChange={e => {\n              setIsChecked(!isChecked);\n              //onChange();\n            }}\n          />\n        </div>\n      </td>\n      {tableFields.map(field => (\n        <td>\n          <div className=\"slds-truncate\" title=\"Acme\">\n            {getColumn(field, row)}\n          </div>\n        </td>\n      ))}\n\n      <td className=\"slds-text-align_right\">\n        <IconSettings iconPath=\"/assets/icons\">\n          <Button\n            align={\"right\"}\n            iconCategory=\"utility\"\n            iconName=\"expand\"\n            iconVariant=\"border\"\n            iconSize=\"small\"\n            onClick={value => {\n              // move record action to const file\n              onViewRecord(row);\n            }}\n          />\n        </IconSettings>\n      </td>\n    </tr>\n  );\n};\n\n//TODO: set proptypes\n\nexport default DuplicateRow;\n","import { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetchDuplicates } from \"./useScenarioFetch\";\nimport { ToastContext } from \"../../contexts/toastContext\";\n\nconst useDuplicates = () => {\n  const [rows, setRows] = useState([]);\n  const [tableFields, setTableFields] = useState([]);\n  const [tableFieldsExpanded, setTableFieldsExpanded] = useState([]);\n  const [indexName, setIndexName] = useState(null);\n  const [duplicates, fetchDuplicates] = useFetchDuplicates();\n  const params = useParams();\n  const { openToast } = useContext(ToastContext);\n  const scenarioId = params.scenario_id;\n\n  useEffect(() => fetchDuplicates(scenarioId), [scenarioId]);\n  useEffect(() => {\n    const data = duplicates.data.data;\n    const results = data.results;\n    //TODO: move scenario job status to a const file\n    if (results.length > 0) {\n      // const fields = data.results_table_fields.map(field => field.split(\".\")[1]);\n      const fields = [\n        \"doc.Name\",\n        \"doc.Website\",\n        \"doc.Phone\",\n        \"doc.BillingCity\",\n        \"doc.BillingState\"\n      ].map(field => field.split(\".\")[1]);\n\n      setRows(results);\n      setIndexName(results[0].index_name);\n      setTableFields(fields.slice(0, 4));\n      setTableFieldsExpanded(fields);\n    }\n  }, [duplicates.data]);\n\n  useEffect(() => {\n    const jobStatus = duplicates.data.data.job_status;\n\n    if (jobStatus === \"CREATED\") {\n      openToast({ heading: [\"Scenario Job Created\"] });\n    }\n  }, [duplicates.data.data.job_status]);\n\n  return { tableFields, tableFieldsExpanded, rows, indexName };\n};\n\nexport default useDuplicates;\n","import React from \"react\";\nimport { Dropdown, IconSettings } from \"@salesforce/design-system-react\";\n\n//TODO: should name be plural or singular\nconst DuplicateKey = ({ keyName, tableFields }) => {\n  return (\n    <tr className=\"slds-is-selected\">\n      <td colspan={tableFields.length + 1}>Duplicate key: {keyName}</td>\n      <td className=\"slds-text-align_right\" style={{ width: \"3.25rem\" }}>\n        <IconSettings iconPath=\"/assets/icons\">\n          <Dropdown\n            align={\"right\"}\n            iconCategory=\"utility\"\n            iconName=\"down\"\n            iconVariant=\"border-filled\"\n            onSelect={value => {}}\n            buttonClassName=\"slds-button_icon-small\"\n            options={[{ label: \"Merge Records\", value: \"A0\" }]}\n          />\n        </IconSettings>\n      </td>\n    </tr>\n  );\n};\n\n//TODO: set proptypes\n\nexport default DuplicateKey;\n","import React, { Fragment } from \"react\";\n\n//TODO: should name be plural or singular\nconst DuplicateRowVertical = ({ field, record }) => {\n  const getColumn = (field, record) => {\n    return record[field];\n  };\n\n  return (\n    <tr className=\"slds-hint-parent\">\n      <Fragment>\n        <td>\n          <div className=\"slds-truncate\" title=\"Acme\">\n            {field}\n          </div>\n        </td>\n        <td colSpan=\"3\">\n          <div className=\"slds-truncate\" title=\"Acme\">\n            {getColumn(field, record)}\n          </div>\n        </td>\n      </Fragment>\n    </tr>\n  );\n};\n\n//TODO: set proptypes\n\nexport default DuplicateRowVertical;\n","import React, { Fragment } from \"react\";\n\nimport { Modal, IconSettings } from \"@salesforce/design-system-react\";\nimport DuplicateRowVertical from \"./duplicateRowVertical\";\n\nconst DuplicatesExpanded = ({ setIsOpen, tableFields, record }) => {\n  return (\n    <IconSettings iconPath=\"/assets/icons\">\n      <Modal isOpen={true} size=\"medium\" onRequestClose={() => setIsOpen(false)} hasNoHeader={true}>\n        <table\n          aria-multiselectable=\"true\"\n          className=\"slds-table slds-table_header-hidden slds-table_bordered slds-table_cell-buffer slds-no-row-hover slds-tree slds-table_tree\"\n          role=\"grid\"\n        >\n          <thead>\n            <tr aria-level=\"1\" className=\"slds-hint-parent\">\n              <th role=\"gridcell\">\n                <div className=\"slds-truncate\" title=\"Acme\">\n                  STANDARD FIELD NAMES\n                </div>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {record !== null && (\n              <Fragment>\n                {tableFields.map(field => (\n                  <DuplicateRowVertical field={field} record={record} />\n                ))}\n              </Fragment>\n            )}\n          </tbody>\n        </table>\n      </Modal>\n    </IconSettings>\n  );\n};\n\nexport default DuplicatesExpanded;\n","import React, { useState, Fragment, useEffect } from \"react\";\nimport { PageHeader, Card } from \"@salesforce/design-system-react\";\n\n//TODO: import component name\nimport DuplicatesHeader from \"./duplicatesHeader\";\nimport DuplicateRow from \"./duplicateRow\";\nimport useDuplicates from \"../../../../hooks/dedup/useDuplicates\";\nimport DuplicateKey from \"./DuplicateKey\";\nimport DuplicatesExpanded from \"./duplicatesVertical\";\n\nconst Duplicates = () => {\n  const { tableFields, tableFieldsExpanded, rows, indexName } = useDuplicates();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n\n  const onViewRecord = row => {\n    setSelectedRecord(row);\n  };\n\n  useEffect(() => {\n    if (selectedRecord !== null) setIsOpen(true);\n  }, [selectedRecord]);\n\n  return (\n    <React.Fragment>\n      <PageHeader\n        className=\"slds-m-bottom_large\"\n        title=\"All Potential Duplicate Records\"\n        variant=\"object-home\"\n        trail={[<a href=\"javascript:void(0);\">Dedup</a>]}\n      />\n      <Card\n        style={{ flexGrow: 1 }}\n        hasNoHeader={indexName === null}\n        heading={`Index: ${indexName}`}\n      >\n        {rows.length > 0 && (\n          <Fragment>\n            <table\n              aria-multiselectable=\"true\"\n              className=\"slds-table  slds-table_bordered slds-no-row-hover \"\n              role=\"grid\"\n            >\n              <DuplicatesHeader tableFields={tableFields} />\n              <tbody>\n                {rows.map(row => (\n                  <Fragment>\n                    <DuplicateKey keyName={row.key} tableFields={tableFields} />\n                    {row.records.map(record => (\n                      <DuplicateRow\n                        tableFields={tableFields}\n                        row={record}\n                        onViewRecord={onViewRecord}\n                      />\n                    ))}\n                  </Fragment>\n                ))}\n              </tbody>\n            </table>\n            {isOpen === true && (\n              <DuplicatesExpanded\n                isOpen={isOpen}\n                setIsOpen={setIsOpen}\n                tableFields={tableFieldsExpanded}\n                record={selectedRecord}\n              />\n            )}\n          </Fragment>\n        )}\n      </Card>\n    </React.Fragment>\n  );\n};\nexport default Duplicates;\n","import { useContext } from \"react\";\n\nexport const useStateContext = context => {\n  const state = useContext(context);\n\n  if (state === undefined) {\n    throw new Error(\"useStateContext must be called inside provider\");\n  }\n\n  return state;\n};\n\nexport const useDispatchContext = context => {\n  const dispatch = useContext(context);\n\n  if (dispatch === undefined) {\n    throw new Error(\"useDispatchContext must be called inside a provider\");\n  }\n\n  return dispatch;\n};\n","import {\n  CONFIGURATION_LOAD_INITIAL_STATE,\n  CONFIGURATION_RELOAD_STATE\n} from \"../../consts/configurations/configurationsActions\";\nimport InvalidActionTypeError from \"../../models/errors/InvalidActionTypeError\";\n\nconst configurationsReducer = (state, action) => {\n  switch (action.type) {\n    case CONFIGURATION_LOAD_INITIAL_STATE:\n    case CONFIGURATION_RELOAD_STATE:\n      return action.payload;\n    default:\n      throw new InvalidActionTypeError();\n  }\n};\n\nexport default configurationsReducer;\n","// ENDPOINTS\nexport const ENDPOINT_CONFIGURATION_BASEPATH = \"/grax-app/cloud-configuration\";\nexport const ENDPOINT_CONFIGURATION_VALIDATION = `${ENDPOINT_CONFIGURATION_BASEPATH}/validations`;\n\n// VENDOR PROVIDERS\nexport const PROVIDER_ELASTIC = \"elastic\";\nexport const PROVIDER_STORAGE = \"storage\";\nexport const PROVIDER_SALESFORCE = \"salesforce\";\n\n// GLOBAL CONFIGURATIONS ACTIONS\nexport const CONFIGURATION_LOAD = \"CONFIGURATION_LOAD\";\n\n// OTHERS\nexport const CONFIGURATION_DEFAULTENVIRONMENTNAME = \"Heroku Provided Configuration\";\nexport const VALIDATION_BACKENDMESSAGE_INVALIDORGID = \"No Configuration Found\";\nexport const VALIDATION_SCHEMA_METADATABACKUP = \"#/definitions/metadataBackup\";\nexport const LINK_CONFIGURATION_NEW = \"https://documentation.grax.io/docs/configuration-new\";\n","// GLOBAL CONFIGURATIONS ACTIONS\nexport const CONFIGURATION_LOAD_INITIAL_STATE = \"CONFIGURATION_LOAD_INITIAL_STATE\";\nexport const CONFIGURATION_RELOAD_STATE = \"CONFIGURATION_RELOAD_STATE\";\n\n// QUICK START CONFIG UI FORM ACTIONS\nexport const QUICK_START_FORM_INITIAL_LOAD = \"QUICK_START_FORM_INITIAL_LOAD\";\nexport const QUICK_START_FORM_SET_PROVIDER = \"QUICK_START_FORM_SET_PROVIDER\";\nexport const QUICK_START_FORM_SET_NAME = \"QUICK_START_FORM_SET_NAME\";\nexport const BASIC_CONFIG_SET_VALUE = \"BASIC_CONFIG_SET_VALUE\";\nexport const SALESFORCE_CONNECTION_SET_VALUE = \"SALESFORCE_CONNECTION_SET_VALUE\";\n\n// ADVANCE CONFIG UI FORM ACTIONS\nexport const ADVANCED_CONFIG_INITIAL_LOAD = \"ADVANCED_CONFIG_INITIAL_LOAD\";\nexport const ADVANCED_CONFIG_SET_VALUE = \"ADVANCED_CONFIG_SET_VALUE\";\nexport const ENVIRONMENT_VARIABLE_SET_VARS = \"ENVIRONMENT_VARIABLE_SET_VARS\";\nexport const ENVIRONMENT_VARIABLE_SET_PUSH_TO_QUEUE = \"ENVIRONMENT_VARIABLE_SET_PUSH_TO_QUEUE\";\nexport const ENVIRONMENT_VARIABLE_SET_TIME_MACHINE = \"ENVIRONMENT_VARIABLE_SET_TIME_MACHINE\";\n","import { useHistory } from \"react-router-dom\";\n\nimport {\n  ROUTE_BASIC_CONFIGURATION,\n  ROUTE_ADVANCED_CONFIGURATION,\n  ROUTE_CONFIGURATION_SUMMARY,\n  ROUTE_EMPTY_CONFIGURATION\n} from \"../consts/addresses\";\n\nconst useCloudRoutes = () => {\n  const history = useHistory();\n\n  return {\n    goToSummary: () => history.push(ROUTE_CONFIGURATION_SUMMARY),\n    goToStartProvisioning: () => history.push(ROUTE_EMPTY_CONFIGURATION),\n    goToBasicConfiguration: () => history.push(ROUTE_BASIC_CONFIGURATION),\n    goToAdvancedConfiguration: () => history.push(ROUTE_ADVANCED_CONFIGURATION)\n  };\n};\n\nexport default useCloudRoutes;\n","import InvalidActionTypeError from \"../models/errors/InvalidActionTypeError\";\n\nimport {\n  NOTIFICATION_IS_OPEN,\n  NOTIFICATION_IS_CLOSE,\n  NOTIFICATION_SUCCESS,\n  NOTIFICATION_ERROR,\n  SPINNER_IS_RUNNING,\n  SPINNER_IS_STOPPED\n} from \"../consts/interactiveFetchStatusActions\";\n\nconst setHeadings = message => {\n  if (typeof message === \"string\") {\n    return {\n      heading: [message]\n    };\n  }\n\n  return message;\n};\nconst notificationReducer = (state, { type, payload }) => {\n  switch (type) {\n    case SPINNER_IS_RUNNING:\n      return { ...state, isLoading: true };\n    case SPINNER_IS_STOPPED:\n      return { ...state, isLoading: false };\n    case NOTIFICATION_IS_OPEN:\n      return { ...state, isOpen: true };\n    case NOTIFICATION_IS_CLOSE:\n      return { ...state, isOpen: false };\n    case NOTIFICATION_SUCCESS:\n      return { ...state, isOpen: true, variant: \"success\", message: setHeadings(payload.message) };\n    case NOTIFICATION_ERROR: {\n      return {\n        ...state,\n        isOpen: true,\n        variant: \"error\",\n        duration: payload.duration,\n        message: setHeadings(payload.message)\n      };\n    }\n\n    default:\n      throw new InvalidActionTypeError();\n  }\n};\n\nexport default notificationReducer;\n","//TOAST NOTIFICATION\nexport const NOTIFICATION_IS_OPEN = \"NOTIFICATION_IS_OPEN\";\nexport const NOTIFICATION_IS_CLOSE = \"NOTIFICATION_IS_CLOSE\";\nexport const NOTIFICATION_SUCCESS = \"NOTIFICATION_SUCCESS\";\nexport const NOTIFICATION_ERROR = \"NOTIFICATION_ERROR\";\n\n//SPINNER\nexport const SPINNER_IS_RUNNING = \"SPINNER_IS_RUNNING\";\nexport const SPINNER_IS_STOPPED = \"SPINNER_IS_STOPPED\";\n","import React, { createContext, useReducer } from \"react\";\n\nimport { useStateContext, useDispatchContext } from \"../hooks/configuration/useContextProvider\";\nimport notificationReducer from \"../reducers/notificationReducer\";\n\nconst initialState = {\n  isLoading: false,\n  isOpen: false,\n  variant: \"success\",\n  duration: 2000,\n  message: { heading: [] }\n};\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useInteractiveFetchStatusContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext)\n];\n\nexport const InteractiveFetchStatusProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\n\n  return (\n    <stateContext.Provider value={state}>\n      <dispatchContext.Provider value={dispatch}>{children}</dispatchContext.Provider>\n    </stateContext.Provider>\n  );\n};\n","import { useEffect } from \"react\";\n\nimport {\n  NOTIFICATION_IS_CLOSE,\n  NOTIFICATION_SUCCESS,\n  NOTIFICATION_ERROR,\n  SPINNER_IS_STOPPED,\n  SPINNER_IS_RUNNING\n} from \"../consts/interactiveFetchStatusActions\";\nimport { useInteractiveFetchStatusContext } from \"../contexts/interactiveFetchStatusContext\";\n\nconst useInteractiveFetchStatus = () => {\n  const [state, dispatch] = useInteractiveFetchStatusContext();\n\n  const spinnerIsRunning = () =>\n    dispatch({\n      type: SPINNER_IS_RUNNING\n    });\n\n  const spinnerIsStopped = () =>\n    dispatch({\n      type: SPINNER_IS_STOPPED\n    });\n\n  const successNotification = message =>\n    dispatch({\n      type: NOTIFICATION_SUCCESS,\n      payload: { message }\n    });\n\n  const errorNotification = (message, duration = 5000) =>\n    dispatch({\n      type: NOTIFICATION_ERROR,\n      payload: { message, duration }\n    });\n\n  const hideNotification = () =>\n    dispatch({\n      type: NOTIFICATION_IS_CLOSE\n    });\n\n  return [\n    state,\n    { successNotification, errorNotification, hideNotification, spinnerIsRunning, spinnerIsStopped }\n  ];\n};\n\nexport const useToggleSpinner = isLoading => {\n  const [, { spinnerIsRunning, spinnerIsStopped }] = useInteractiveFetchStatus();\n  useEffect(() => (isLoading === true ? spinnerIsRunning : spinnerIsStopped)(), [isLoading]);\n};\n\nexport default useInteractiveFetchStatus;\n","import _ from \"lodash\";\n\nimport { CONFIGURATION_DEFAULTENVIRONMENTNAME } from \"../consts\";\nimport {\n  SALESFORCE_DATASOURCES_SOURCE,\n  SALESFORCE_DATASOURCES_EINSTEIN,\n  SALESFORCE_DATASOURCES_BULKRESTORE,\n} from \"../salesforceConnection/consts\";\n\nexport const omitEmptyProps = (obj) => {\n  if (_.isPlainObject(obj) === true) {\n    return Object.entries(obj).reduce((accumulator, [key, value]) => {\n      const omittedEmptyProps = { ...accumulator };\n      if (value !== \"\" && value !== undefined && value !== null) {\n        omittedEmptyProps[key] = obj[key];\n      }\n      return omittedEmptyProps;\n    }, {});\n  }\n\n  return obj;\n};\n\nexport const objHasCollectionOfProps = (obj, properties) => {\n  if (!_.isPlainObject(obj) || !_.isArray(properties)) {\n    return false;\n  }\n\n  for (const property in properties) {\n    if (!Object.prototype.hasOwnProperty.call(obj, properties[property])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const selectCurrentTab = (state) => {\n  if (state.provider === undefined) throw new Error(\"No Provider Tab Selected\");\n  const { provider } = state;\n  return state[provider];\n};\n\nexport const isAnExistingConfiguration = (configuration) => {\n  if (\n    _.isPlainObject(configuration) === true &&\n    _.isPlainObject(configuration.environments) === true &&\n    Object.keys(configuration.environments).length > 0\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getFirstEnvironment = (configuration) => {\n  if (isAnExistingConfiguration(configuration) === true) {\n    return configuration.environments[getFirstEnvironmentName(configuration)];\n  }\n\n  return null;\n};\n\nexport const getFirstEnvironmentName = (configuration) => {\n  let environmentNames = [];\n  if (isAnExistingConfiguration(configuration)) {\n    environmentNames = Object.keys(configuration.environments);\n  }\n  return environmentNames[0] || CONFIGURATION_DEFAULTENVIRONMENTNAME;\n};\n\nexport const mergeConfigurations = (configuration, newEnvironment) => ({\n  ...(configuration || { globalEnvironmentDefaults: {} }),\n  environments: {\n    [getFirstEnvironmentName(configuration)]: {\n      ...getFirstEnvironment(configuration),\n      ...newEnvironment,\n    },\n  },\n});\n\nexport const findDataSourcesByOrganizationgIds = (dataSources, organizationIds, types) => {\n  let filteredDataSources = [];\n  if (Array.isArray(dataSources)) {\n    filteredDataSources = dataSources.filter((dataSource) => {\n      if (dataSource) {\n        if (dataSource.type && Array.isArray(types)) {\n          return types.indexOf(dataSource.type) !== -1;\n        }\n\n        return (\n          Array.isArray(organizationIds) &&\n          organizationIds.indexOf(dataSource.organizationId) !== -1\n        );\n      }\n\n      return false;\n    });\n  }\n\n  return filteredDataSources;\n};\n\nexport const findDataSource = (dataSources, organizationId, type) => {\n  const organizationIds = organizationId ? [organizationId] : organizationId;\n  const types = type ? [type] : type;\n  const foundDataSource = findDataSourcesByOrganizationgIds(dataSources, organizationIds, types)[0];\n\n  if (foundDataSource !== null && type) {\n    return {\n      ...foundDataSource,\n      type,\n    };\n  }\n\n  return foundDataSource || null;\n};\n\nexport const findSourceDataSource = (dataSources, organizationId) =>\n  findDataSource(dataSources, organizationId, SALESFORCE_DATASOURCES_SOURCE);\n\nexport const findEinsteinDestination = (dataSources, organizationId) =>\n  findDataSource(dataSources, organizationId, SALESFORCE_DATASOURCES_EINSTEIN);\n\nexport const findBulkRestoreDestination = (dataSources, organizationId) =>\n  findDataSource(dataSources, organizationId, SALESFORCE_DATASOURCES_BULKRESTORE);\n","import React, { createContext } from \"react\";\n\nimport { useStateContext, useDispatchContext } from \"../hooks/configuration/useContextProvider\";\nimport { useConfigurationRetrieve } from \"../hooks/configuration/useConfigurationFetch\";\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useConfigurationsContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext)\n];\n\nexport const ConfigurationsProvider = ({ children }) => {\n  const [state, dispatch] = useConfigurationRetrieve();\n\n  return (\n    <stateContext.Provider value={state}>\n      <dispatchContext.Provider value={dispatch}>{children}</dispatchContext.Provider>\n    </stateContext.Provider>\n  );\n};\n","import { useReducer, useEffect } from \"react\";\n\nimport { ENDPOINT_CONFIGURATION } from \"../../consts/addresses\";\nimport { CONFIGURATION_LOAD_INITIAL_STATE } from \"../../consts/configurations/configurationsActions\";\nimport { VALIDATION_BACKENDMESSAGE_INVALIDORGID } from \"../../components/cloud/configuration/consts\";\nimport configurationsReducer from \"../../reducers/configurations/configurationsReducer\";\nimport useFetch from \"../useFetch\";\nimport useCloudRoutes from \"../useCloudRoutes\";\nimport useInteractiveFetchStatus from \"../useInteractiveFetchStatus\";\nimport { isAnExistingConfiguration } from \"../../components/cloud/configuration/utils\";\n\nexport const mapBackendErrorMessage = (error) => {\n  if (error === VALIDATION_BACKENDMESSAGE_INVALIDORGID) {\n    return {\n      heading: \"Cannot find this SFDC Org ID in the configuration of the selected Heroku app.\",\n      details: `Please make sure the selected Heroku app does not already have a configuration tied to another SFDC Org.\n              Each Heroku app can only have a single SFDC source org configured, and this cannot be changed once configured.`,\n    };\n  }\n\n  return error;\n};\n\nexport const useConfigurationRetrieve = () => {\n  const [{ data, success, error }] = useFetch({ url: ENDPOINT_CONFIGURATION });\n  const [state, dispatch] = useReducer(configurationsReducer, null);\n  const [, { errorNotification }] = useInteractiveFetchStatus();\n  const { goToSummary, goToStartProvisioning } = useCloudRoutes();\n\n  useEffect(() => {\n    if (success === true) {\n      if (isAnExistingConfiguration(data)) {\n        dispatch({ type: CONFIGURATION_LOAD_INITIAL_STATE, payload: data });\n        goToSummary();\n      } else {\n        goToStartProvisioning();\n      }\n    }\n  }, [data, success]);\n\n  useEffect(() => {\n    if (success === false) errorNotification(mapBackendErrorMessage(error), null);\n  }, [error, success]);\n\n  return [state, dispatch];\n};\n\nexport const useSaveConfiguration = () => {\n  const [saveStatus, setFetch] = useFetch();\n\n  const saveConfiguration = (configuration) =>\n    setFetch({ url: ENDPOINT_CONFIGURATION, method: \"POST\", data: configuration });\n\n  return [saveStatus, saveConfiguration];\n};\n","import React, { Fragment } from \"react\";\n\nimport { ToastContainer, Spinner, Toast } from \"@salesforce/design-system-react\";\nimport useInteractiveFetchStatus from \"../../hooks/useInteractiveFetchStatus\";\n\nconst InteractiveFetchStatus = () => {\n  const [\n    { isOpen, isLoading, variant, message = {}, duration },\n    { hideNotification }\n  ] = useInteractiveFetchStatus();\n\n  return (\n    <Fragment>\n      {isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n      {isOpen === true && (\n        <ToastContainer>\n          <Toast\n            duration={duration}\n            labels={message}\n            variant={variant}\n            onRequestClose={hideNotification}\n          />\n        </ToastContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default InteractiveFetchStatus;\n","import React from \"react\";\n\nimport { ConfigurationsProvider } from \"../../../contexts/configurationsContext\";\nimport { InteractiveFetchStatusProvider } from \"../../../contexts/interactiveFetchStatusContext\";\nimport InteractiveFetchStatus from \"../../commons/InteractiveFetchStatus\";\nimport NestedRoutes, { NestedRoutesPropTypes } from \"../../commons/NestedRoutes\";\n\nconst Configuration = ({ routes }) => {\n  return (\n    <InteractiveFetchStatusProvider>\n      <ConfigurationsProvider>\n        <InteractiveFetchStatus />\n        <NestedRoutes routes={routes} />\n      </ConfigurationsProvider>\n    </InteractiveFetchStatusProvider>\n  );\n};\n\nConfiguration.propTypes = NestedRoutesPropTypes;\n\nexport default Configuration;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ScopedNotification } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  text: PropTypes.string.isRequired\n};\n\nconst ConfigurationNotice = ({ text }) => (\n  <ScopedNotification>\n    <p>{text}</p>\n  </ScopedNotification>\n);\n\nConfigurationNotice.propTypes = propTypes;\n\nexport default ConfigurationNotice;\n","import React from \"react\";\nimport { Card, Button } from \"@salesforce/design-system-react\";\nimport { useHistory } from \"react-router-dom\";\nimport ConfigurationNotice from \"../../commons/ConfigurationNotice\";\nimport { ROUTE_BASIC_CONFIGURATION } from \"../../../consts/addresses\";\n\nconst warningText = `Ensure you have valid Salesforce, Elasticsearch, and cloud storage credentials before beginning.\n        You will not be able to save your configuration without valid credentials for all three providers.`;\n\nconst EmptyLandingPage = () => {\n  const history = useHistory();\n\n  return (\n    <Card hasNoHeader>\n      <div className=\"slds-text-longform slds-text-align_center\">\n        <h2 className=\"slds-text-heading_medium\">Welcome to GRAX!</h2>\n        <p className=\"slds-text-body_regular\">Your Data Value Platform.</p>\n      </div>\n      <footer className=\"slds-card__footer\">\n        <ConfigurationNotice text={warningText} />\n        <Button\n          className=\"slds-button slds-button_brand\"\n          label=\"Start\"\n          onClick={() => history.push(ROUTE_BASIC_CONFIGURATION)}\n        />\n      </footer>\n    </Card>\n  );\n};\n\nexport default EmptyLandingPage;\n","import React from \"react\";\n\nimport { AlertContainer, Alert } from \"@salesforce/design-system-react\";\nimport { LINK_CONFIGURATION_NEW } from \"../../../consts/addresses\";\n\nconst NewConfiguration = () => (\n  <AlertContainer>\n    <Alert\n      labels={{\n        heading: \"To get more information on setting up GRAX,\",\n        headingLink: \"Please click here\"\n      }}\n      onClickHeadingLink={() => {\n        window.location = LINK_CONFIGURATION_NEW;\n      }}\n      variant=\"warning\"\n    />\n  </AlertContainer>\n);\n\nexport default NewConfiguration;\n","import {\n  ADVANCED_CONFIG_SET_VALUE,\n  ADVANCED_CONFIG_INITIAL_LOAD\n} from \"../../consts/configurations/configurationsActions\";\nimport InvalidActionTypeError from \"../../models/errors/InvalidActionTypeError\";\n\nconst advancedConfigReducer = (state, action) => {\n  const { payload, type } = action;\n\n  switch (type) {\n    case ADVANCED_CONFIG_INITIAL_LOAD:\n    case ADVANCED_CONFIG_SET_VALUE:\n      return { ...state, ...payload };\n    default:\n      throw new InvalidActionTypeError();\n  }\n};\n\nexport default advancedConfigReducer;\n","import {\n  QUICK_START_FORM_INITIAL_LOAD,\n  QUICK_START_FORM_SET_PROVIDER,\n  QUICK_START_FORM_SET_NAME,\n  BASIC_CONFIG_SET_VALUE,\n} from \"../../consts/configurations/configurationsActions\";\nimport InvalidActionTypeError from \"../../models/errors/InvalidActionTypeError\";\n\nconst quickStartFormReducer = (state, { type, payload }) => {\n  switch (type) {\n    case QUICK_START_FORM_INITIAL_LOAD:\n      return {\n        ...state,\n        name: payload.name,\n        [state.provider]: {\n          ...state[state.provider],\n          provider: state.provider,\n          ...payload,\n        },\n      };\n    case QUICK_START_FORM_SET_PROVIDER:\n      return {\n        ...state,\n        provider: payload.provider,\n        name: state.name,\n\n        [payload.provider]: {\n          ...state[payload.provider],\n          name: state.name,\n        },\n      };\n    case QUICK_START_FORM_SET_NAME:\n      return {\n        ...state,\n        name: payload.name,\n        [state.provider]: {\n          ...state[state.provider],\n          name: payload.name,\n        },\n      };\n    case BASIC_CONFIG_SET_VALUE:\n      return {\n        ...state,\n        [state.provider]: {\n          ...state[state.provider],\n          name: state.name,\n          provider: state.provider,\n          ...payload,\n        },\n      };\n    default:\n      throw new InvalidActionTypeError();\n  }\n};\n\nexport default quickStartFormReducer;\n","import React, { useReducer, useEffect } from \"react\";\n\nimport {\n  QUICK_START_FORM_INITIAL_LOAD,\n  ADVANCED_CONFIG_INITIAL_LOAD,\n  QUICK_START_FORM_SET_PROVIDER\n} from \"../consts/configurations/configurationsActions\";\nimport advancedConfigReducer from \"../reducers/configurations/advancedConfigReducer\";\nimport quickStartFormReducer from \"../reducers/configurations/quickStartFormReducer\";\n\nexport const withQuickStartProvider = (\n  stateContext,\n  dispatchContext,\n  initialState = {},\n  reducer = quickStartFormReducer\n) => ({ children, value }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    if (value !== undefined) {\n      if (value.provider) {\n        dispatch({\n          type: QUICK_START_FORM_SET_PROVIDER,\n          payload: { provider: value.provider }\n        });\n      }\n      dispatch({\n        type: QUICK_START_FORM_INITIAL_LOAD,\n        payload: value\n      });\n    }\n  }, [value]);\n\n  return (\n    <stateContext.Provider value={state}>\n      <dispatchContext.Provider value={dispatch}>{children}</dispatchContext.Provider>\n    </stateContext.Provider>\n  );\n};\n\n// TODO: add component's display name\n\nexport const withAdvancedConfigProvider = (\n  stateContext,\n  dispatchContext,\n  initialState = {},\n  reducers = advancedConfigReducer\n) => ({ children, value }) => {\n  const [state, dispatch] = useReducer(reducers, initialState);\n\n  useEffect(() => {\n    dispatch({\n      type: ADVANCED_CONFIG_INITIAL_LOAD,\n      payload: value\n    });\n  }, [value]);\n\n  return (\n    <stateContext.Provider value={state}>\n      <dispatchContext.Provider value={dispatch}>{children}</dispatchContext.Provider>\n    </stateContext.Provider>\n  );\n};\n","import { createContext } from \"react\";\n\nimport { withQuickStartProvider } from \"./contextProviders\";\nimport { useStateContext, useDispatchContext } from \"../hooks/configuration/useContextProvider\";\n\nimport {\n  ELASTICSEARCH_PROVIDERS_BONSAI,\n  ELASTICSEARCH_PROVIDERS_AWS,\n  ELASTICSEARCH_PROVIDERS_ELASTIC_CO,\n} from \"../consts/configurations/elasticsearchProviders\";\n\nconst initialState = {\n  name: \"Default\",\n  provider: ELASTICSEARCH_PROVIDERS_BONSAI,\n  [ELASTICSEARCH_PROVIDERS_BONSAI]: {},\n  [ELASTICSEARCH_PROVIDERS_AWS]: {},\n  [ELASTICSEARCH_PROVIDERS_ELASTIC_CO]: {},\n};\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useElasticsearchContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext),\n];\n\nexport const ElasticsearchProvider = withQuickStartProvider(\n  stateContext,\n  dispatchContext,\n  initialState\n);\n","export const ELASTICSEARCH_PROVIDERS_BONSAI = \"bonsai\";\nexport const ELASTICSEARCH_PROVIDERS_AWS = \"aws\";\nexport const ELASTICSEARCH_PROVIDERS_ELASTIC_CO = \"elasticIo\";\n","import { QUICK_START_FORM_INITIAL_LOAD } from \"../../consts/configurations/configurationsActions\";\nimport { CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE } from \"../../consts/configurations/cloudStorageProviders\";\nimport quickStartFormReducer from \"./quickStartFormReducer\";\n\nconst storageReducer = (state, { type, payload }) => {\n  let newState = state;\n\n  if (type === QUICK_START_FORM_INITIAL_LOAD) {\n    if (payload.s3CompatibleEndpoint) {\n      newState = {\n        ...newState,\n        provider: CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE,\n      };\n    }\n  }\n\n  return quickStartFormReducer(newState, { type, payload });\n};\n\nexport default storageReducer;\n","export const CLOUD_STORAGE_PROVIDERS_AWS_S3 = \"aws\";\nexport const CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE = \"aws-ecs\";\nexport const CLOUD_STORAGE_PROVIDERS_AZURE = \"azure\";\nexport const CLOUD_STORAGE_PROVIDERS_GOOGLE_CLOUD_PLATFORM = \"google\";\nexport const CLOUD_STORAGE_PROVIDERS_MINIO = \"minio\";\n","import { createContext } from \"react\";\n\nimport { withQuickStartProvider } from \"./contextProviders\";\nimport storageReducer from \"../reducers/configurations/storageReducer\";\nimport { useStateContext, useDispatchContext } from \"../hooks/configuration/useContextProvider\";\n\nimport {\n  CLOUD_STORAGE_PROVIDERS_AWS_S3,\n  CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE,\n  CLOUD_STORAGE_PROVIDERS_AZURE,\n  CLOUD_STORAGE_PROVIDERS_GOOGLE_CLOUD_PLATFORM,\n  CLOUD_STORAGE_PROVIDERS_MINIO\n} from \"../consts/configurations/cloudStorageProviders\";\n\nconst initialState = {\n  provider: CLOUD_STORAGE_PROVIDERS_AWS_S3,\n  [CLOUD_STORAGE_PROVIDERS_AWS_S3]: {},\n  [CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE]: {},\n  [CLOUD_STORAGE_PROVIDERS_AZURE]: {},\n  [CLOUD_STORAGE_PROVIDERS_GOOGLE_CLOUD_PLATFORM]: {},\n  [CLOUD_STORAGE_PROVIDERS_MINIO]: {}\n};\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useCloudStorageContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext)\n];\n\nexport const CloudStorageProvider = withQuickStartProvider(\n  stateContext,\n  dispatchContext,\n  initialState,\n  storageReducer\n);\n","import { createContext } from \"react\";\n\nimport { useStateContext, useDispatchContext } from \"../hooks/configuration/useContextProvider\";\nimport { withAdvancedConfigProvider } from \"./contextProviders\";\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useOAuthContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext)\n];\n\nexport const OAuthProvider = withAdvancedConfigProvider(stateContext, dispatchContext);\n","import {\n  SALESFORCE_LOGIN_SFDC,\n  SALESFORCE_LOGIN_OAUTH,\n  SALESFORCE_CONNECTION_NAME,\n} from \"./consts\";\n\nimport { objHasCollectionOfProps } from \"../utils\";\n\nexport const openOAuthWindow = (url, w = 912, h = 513) => {\n  // eslint-disable-next-line no-restricted-globals\n  const left = screen.width / 2 - w / 2;\n  // eslint-disable-next-line no-restricted-globals\n  const top = screen.height / 2 - h / 2;\n  const dimension = `width=${w},height=${h}`;\n  const position = `top=${top},left=${left}`;\n  const windowFeatures = `location=yes,toolbar=no,status=no,menubar=no, ${dimension}, ${position}`;\n  return window.open(url, null, windowFeatures);\n};\n\nexport const toggleCrosswindowMessageListener = (handleMessage) => {\n  if (typeof handleMessage === \"function\") {\n    if (window.addEventListener) {\n      window.addEventListener(\"message\", handleMessage, true);\n    } else if (window.attachEvent) {\n      window.attachEvent(\"message\", handleMessage, true);\n    }\n  } else if (window.removeEventListener) {\n    window.removeEventListener(\"message\", null);\n  } else if (window.detachEvent) {\n    window.detachEvent(\"message\", null);\n  }\n};\n\nexport const isOAuthCredential = (credential, strictChecking = false) => {\n  const mandatoryFields = [\"graxOAuthURL\", \"organizationId\", \"url\", \"name\", \"userName\"];\n  if (objHasCollectionOfProps(credential, [mandatoryFields.shift()])) {\n    if (strictChecking === true && !objHasCollectionOfProps(credential, mandatoryFields)) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nexport const isSalesforceCredential = (credential, strictChecking = false) => {\n  const mandatoryFields = [\"userName\", \"password\", \"url\", \"organizationId\", \"name\"];\n  if (!isOAuthCredential(credential)) {\n    if (\n      strictChecking === true &&\n      (!objHasCollectionOfProps(credential, mandatoryFields) ||\n        credential.provider !== SALESFORCE_LOGIN_SFDC)\n    ) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nexport const isValidSalesforceCredential = (credential, strictChecking = false) => {\n  if (\n    isOAuthCredential(credential, strictChecking) ||\n    isSalesforceCredential(credential, strictChecking)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const setDataSourceInitialState = (dataSourceType, name = SALESFORCE_CONNECTION_NAME) => ({\n  [dataSourceType]: {\n    name,\n    provider: SALESFORCE_LOGIN_SFDC,\n    [SALESFORCE_LOGIN_SFDC]: {\n      type: dataSourceType,\n    },\n    [SALESFORCE_LOGIN_OAUTH]: {\n      type: dataSourceType,\n    },\n  },\n});\n","import {\n  SALESFORCE_LOGIN_SFDC,\n  SALESFORCE_DATASOURCES_SOURCE,\n  SALESFORCE_DATASOURCES_EINSTEIN,\n  SALESFORCE_DATASOURCES_BULKRESTORE,\n  SALESFORCE_LOGIN_OAUTH,\n} from \"./consts\";\n\nimport { isSalesforceCredential } from \"./utils\";\n\nimport basicConfigurationReducer from \"../../../../reducers/configurations/quickStartFormReducer\";\nimport { QUICK_START_FORM_INITIAL_LOAD } from \"../../../../consts/configurations/configurationsActions\";\nimport { findDataSource } from \"../utils\";\n\nconst salesforceConnectionReducer = (state, { type, payload, meta }) => {\n  switch (type) {\n    case QUICK_START_FORM_INITIAL_LOAD: {\n      const { dataSources, globals } = payload;\n\n      return Object.entries({\n        [SALESFORCE_DATASOURCES_SOURCE]: globals.asyncAttachmentProcessorOrganizationIds,\n        [SALESFORCE_DATASOURCES_EINSTEIN]: globals.syncSalesforceEinsteinOrganizationIds,\n        [SALESFORCE_DATASOURCES_BULKRESTORE]: null,\n      }).reduce((result, dataSourceMapping) => {\n        const newState = result;\n        const [dataSourceType, organizationid] = dataSourceMapping;\n        const credential = findDataSource(dataSources, organizationid, dataSourceType);\n        const provider = isSalesforceCredential(credential)\n          ? SALESFORCE_LOGIN_SFDC\n          : SALESFORCE_LOGIN_OAUTH;\n\n        let name;\n        if (credential && credential.name) {\n          ({ name } = credential);\n        } else {\n          ({ name } = state[dataSourceType]);\n        }\n\n        newState[dataSourceType] = {\n          ...state[dataSourceType],\n          [provider]: { ...credential, type: dataSourceType },\n          provider,\n          name,\n        };\n\n        return newState;\n      }, {});\n    }\n    default:\n      return {\n        ...state,\n        [meta.variant]: {\n          ...basicConfigurationReducer(state[meta.variant], {\n            type,\n            payload: { ...payload, type: meta.variant },\n          }),\n        },\n      };\n  }\n};\n\nexport default salesforceConnectionReducer;\n","import { createContext } from \"react\";\n\nimport { withQuickStartProvider } from \"../../../../contexts/contextProviders\";\nimport {\n  useStateContext,\n  useDispatchContext,\n} from \"../../../../hooks/configuration/useContextProvider\";\n\nimport {\n  SALESFORCE_DATASOURCES_SOURCE,\n  SALESFORCE_DATASOURCES_EINSTEIN,\n  SALESFORCE_DATASOURCES_BULKRESTORE,\n} from \"./consts\";\n\nimport salesforceConnectionReducer from \"./reducer\";\nimport { setDataSourceInitialState } from \"./utils\";\n\nexport const initialState = {\n  ...setDataSourceInitialState(SALESFORCE_DATASOURCES_SOURCE),\n  ...setDataSourceInitialState(SALESFORCE_DATASOURCES_EINSTEIN),\n  ...setDataSourceInitialState(SALESFORCE_DATASOURCES_BULKRESTORE),\n};\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useSalesforceConnectionContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext),\n];\n\nexport const SalesforceConnectionProvider = withQuickStartProvider(\n  stateContext,\n  dispatchContext,\n  initialState,\n  salesforceConnectionReducer\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ButtonGroup, Button } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      disabled: PropTypes.bool\n    })\n  ).isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onClick: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  required: PropTypes.bool\n};\n\nconst defaultProps = { required: true, id: null };\n\nconst GRAXButtonGroup = ({ options, value, id, required = true, onClick }) => {\n  const _onClick = selected => {\n    if (required === false && selected === value) {\n      onClick(null);\n    } else {\n      onClick(selected, id);\n    }\n  };\n\n  return (\n    <ButtonGroup>\n      {options.map(option => (\n        <Button\n          label={option.label}\n          key={option.label}\n          onClick={() => _onClick(option.value)}\n          variant={option.value === value ? \"brand\" : \"neutral\"}\n          disabled={option.disabled}\n        />\n      ))}\n    </ButtonGroup>\n  );\n};\n\nGRAXButtonGroup.propTypes = propTypes;\nGRAXButtonGroup.defaultProps = defaultProps;\n\nexport default GRAXButtonGroup;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Input, InputIcon, Tooltip } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  secured: PropTypes.bool,\n  onBlur: PropTypes.func\n};\n\nconst securedInput = (type, toggleSecurity) => ({\n  iconRight: (\n    <InputIcon\n      name={type === \"password\" ? \"preview\" : \"hide\"}\n      category=\"utility\"\n      onClick={toggleSecurity}\n    />\n  )\n});\n\nconst blockedInput = (disabled, toggleDisability) => ({\n  iconRight: (\n    <InputIcon\n      name={disabled === true ? \"edit\" : \"error\"}\n      category=\"utility\"\n      onClick={toggleDisability}\n    />\n  )\n});\n\nconst fieldLevelHelpTooltip = helpText => ({\n  fieldLevelHelpTooltip: (\n    <Tooltip id=\"field-level-help-tooltip\" align=\"top left\" content={helpText} />\n  )\n});\n\nconst StatefulInput = ({\n  value,\n  type = \"text\",\n  helpText,\n  disabled = false,\n  onBlur,\n  secured,\n  blocked,\n  ...props\n}) => {\n  const [_value, setValue] = useState(value);\n  const [_type, setType] = useState(!secured ? type : \"password\");\n  const [_disabled, setDisability] = useState(!blocked ? disabled : true);\n\n  const toggleSecurity = () => setType(_type === \"password\" ? type : \"password\");\n  const toggleDisability = () => setDisability(!_disabled);\n  const _onBlur = e => {\n    if (blocked === true) setDisability(true);\n    if (onBlur !== undefined) onBlur(e);\n  };\n\n  useEffect(() => setValue(value), [value]);\n\n  return (\n    <Input\n      value={_value}\n      type={_type}\n      disabled={_disabled}\n      onBlur={_onBlur}\n      onChange={e => setValue(e.target.value)}\n      {...(secured === true ? securedInput(_type, toggleSecurity) : {})}\n      {...(blocked === true ? blockedInput(_disabled, toggleDisability) : {})}\n      {...(helpText !== undefined ? fieldLevelHelpTooltip(helpText) : {})}\n      {...props}\n    />\n  );\n};\n\nStatefulInput.propTypes = propTypes;\n\nexport default StatefulInput;\n","import {\n  VENDORS_ELASTIC,\n  VENDORS_SF_SOURCE,\n  VENDORS_STORAGE,\n  VENDORS_BULK_RESTORE_SF_DESTINATION,\n  VENDORS_EINSTEIN_SF_DESTINATION\n} from \"./vendors\";\n\nconst VENDOR_DISPLAY_NAME_MAPPING = {\n  [VENDORS_ELASTIC]: \"Elastic\",\n  [VENDORS_STORAGE]: \"cloud storage\",\n  [VENDORS_SF_SOURCE]: \"Salesforce\",\n  [VENDORS_EINSTEIN_SF_DESTINATION]: \"Einstein Salesforce Destination\",\n  [VENDORS_BULK_RESTORE_SF_DESTINATION]: \"Bulk Restore Salesforce Destination\"\n};\n\nexport default VENDOR_DISPLAY_NAME_MAPPING;\n","export const VENDORS_ELASTIC = \"elastic\";\nexport const VENDORS_STORAGE = \"storage\";\nexport const VENDORS_SF_SOURCE = \"sourceDataSource\";\nexport const VENDORS_EINSTEIN_SF_DESTINATION = \"syncSalesforceEinstein\";\nexport const VENDORS_BULK_RESTORE_SF_DESTINATION = \"bulkRestoreDestination\";\n","import { useState, useEffect } from \"react\";\nimport VENDOR_DISPLAY_NAME_MAPPING from \"../../consts/configurations/vendorDisplayNameMapping\";\n\nconst iconSettingsTypes = {\n  successful: {\n    label: \"success\",\n    category: \"utility\",\n    colorVariant: \"default\",\n    name: \"success\",\n  },\n  failed: {\n    label: \"failure\",\n    category: \"utility\",\n    colorVariant: \"error\",\n    name: \"error\",\n  },\n};\n\nconst useVendorValidityMessage = (variant, status, customMessage) => {\n  const [_status, setStatus] = useState(status);\n  useEffect(() => setStatus(status), [status]);\n\n  if (_status !== \"\") {\n    const displayProvider = VENDOR_DISPLAY_NAME_MAPPING[variant];\n    let message;\n\n    const iconSettings =\n      iconSettingsTypes[_status === \"invalidOrganizationId\" ? \"failed\" : _status];\n\n    if (customMessage) {\n      message = customMessage;\n    } else {\n      message = {\n        successful: `${displayProvider} credentials validated`,\n        failed: `Invalid ${displayProvider} credentials`,\n        invalidOrganizationId:\n          \"You cannot enter SFDC credentials for a SFDC org different than the org you are currently in\",\n      }[_status];\n    }\n\n    return { iconSettings, message };\n  }\n\n  return {};\n};\n\nexport default useVendorValidityMessage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport _ from \"lodash\";\n\nimport { ScopedNotification, Icon } from \"@salesforce/design-system-react\";\nimport useVendorValidityMessage from \"../../hooks/configuration/useVendorValidityMessage\";\n\nconst propTypes = {\n  validity: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n\nconst icon = (iconSettings) => (\n  <Icon\n    assistiveText={{\n      label: iconSettings.label,\n    }}\n    category={iconSettings.category}\n    colorVariant={iconSettings.colorVariant}\n    name={iconSettings.name}\n    size=\"x-small\"\n  />\n);\n\nconst VendorValidityMessage = ({ variant, status, customMessage }) => {\n  const { iconSettings, message } = useVendorValidityMessage(variant, status, customMessage);\n\n  return (\n    <>\n      {iconSettings !== undefined && message !== undefined && (\n        <div className=\"slds-grid slds-row slds-grid_align-center slds-m-bottom_x-small \">\n          <ScopedNotification icon={icon(iconSettings)} theme=\"light\">\n            <p>{message}</p>\n          </ScopedNotification>\n        </div>\n      )}\n    </>\n  );\n};\n\nVendorValidityMessage.propTypes = propTypes;\n\nexport default VendorValidityMessage;\n","import { useState, useEffect } from \"react\";\n\nimport {\n  CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE,\n  CLOUD_STORAGE_PROVIDERS_AWS_S3,\n} from \"../../consts/configurations/cloudStorageProviders\";\nimport { ENDPOINT_VENDOR_VALIDATION } from \"../../consts/addresses\";\nimport { useToggleSpinner } from \"../useInteractiveFetchStatus\";\nimport useFetch from \"../useFetch\";\n\nimport { retrieveEnvironmentCredentials } from \"../../lib/api\";\n\nconst useIndividualVendorValidity = () => {\n  const [{ isLoading, data, error, success }, setFetch] = useFetch();\n  const [vendorValidity, setVendorValidity] = useState({ status: \"\" });\n  const [vendor, setVendor] = useState(null);\n  useToggleSpinner(isLoading);\n\n  useEffect(() => {\n    if (vendor === null) return;\n    const cred = { ...vendor };\n\n    if (cred.credentials.provider === CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE) {\n      cred.credentials.provider = CLOUD_STORAGE_PROVIDERS_AWS_S3;\n    }\n\n    setFetch({\n      url: ENDPOINT_VENDOR_VALIDATION,\n      method: \"POST\",\n      data: cred,\n    });\n  }, [vendor]);\n\n  useEffect(() => {\n    if (success === true) {\n      if (vendor.variant === \"sourceDataSource\") {\n        const { sfdcorgid } = retrieveEnvironmentCredentials();\n        if (sfdcorgid !== data.userInfo.organizationId) {\n          setVendorValidity({ ...data, status: \"invalidOrganizationId\" });\n          return;\n        }\n      }\n\n      setVendorValidity(data);\n    }\n  }, [data, success]);\n\n  useEffect(() => {\n    if (success === false) setVendorValidity(error);\n  }, [error, success]);\n\n  return [vendorValidity, setVendor];\n};\n\nexport const useAutoDismissToast = (validation) => {\n  const [isDismissed, setIsDismissed] = useState(true);\n\n  useEffect(() => {\n    setIsDismissed(true);\n    const id = setTimeout(() => setIsDismissed(false), 3000);\n    return () => clearTimeout(id);\n  }, [validation]);\n\n  return isDismissed;\n};\n\nexport default useIndividualVendorValidity;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { SALESFORCE_LOGIN_PRODUCTIONURL, SALESFORCE_LOGIN_SANDBOXURL } from \"./consts\";\n\nimport StatefulInput from \"../../../commons/StatefulInput\";\n\nconst propTypes = {\n  // eslint-disable-next-line react/require-default-props\n  url: PropTypes.string,\n  onBlur: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/require-default-props\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: Element })]),\n};\n\nexport const loginURLHelpText = `${SALESFORCE_LOGIN_PRODUCTIONURL} for Production | ${SALESFORCE_LOGIN_SANDBOXURL} for Sandbox`;\n\nconst URLStateFulInput = ({ url, onBlur, inputRef }) => {\n  return (\n    <StatefulInput\n      label=\"SFDC URL\"\n      helpText={loginURLHelpText}\n      inputRef={inputRef}\n      type=\"url\"\n      required\n      value={url}\n      id=\"url\"\n      onBlur={onBlur}\n      onInvalid={(e) => {\n        e.target.setCustomValidity(`Invalid URL. ${loginURLHelpText}`);\n      }}\n      onInput={(e) => {\n        e.target.setCustomValidity(\"\");\n      }}\n    />\n  );\n};\n\nURLStateFulInput.propTypes = propTypes;\n\nexport default URLStateFulInput;\n","/* eslint-disable react/require-default-props */\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Button } from \"@salesforce/design-system-react\";\n\nimport {\n  SALESFORCE_DATASOURCES_SOURCE,\n  SALESFORCE_DATASOURCES_EINSTEIN,\n  SALESFORCE_DATASOURCES_BULKRESTORE,\n} from \"./consts\";\n\nimport StatefulInput from \"../../../commons/StatefulInput\";\n\nimport useIndividualVendorValidity from \"../../../../hooks/configuration/useIndividualVendorValidity\";\nimport URLStateFulInput from \"./URLStateFulInput\";\n\nconst propTypes = {\n  variant: PropTypes.oneOf([\n    SALESFORCE_DATASOURCES_SOURCE,\n    SALESFORCE_DATASOURCES_EINSTEIN,\n    SALESFORCE_DATASOURCES_BULKRESTORE,\n  ]).isRequired,\n  userName: PropTypes.string,\n  password: PropTypes.string,\n  token: PropTypes.string,\n  url: PropTypes.string,\n  name: PropTypes.string,\n  organizationId: PropTypes.string,\n  onBlur: PropTypes.func,\n  onValidated: PropTypes.func,\n};\n\nconst UsernamePassword = ({\n  variant,\n  name,\n  userName,\n  password,\n  token,\n  url,\n  organizationId,\n  onBlur,\n  onValidated,\n}) => {\n  const [validation, validateVendor] = useIndividualVendorValidity();\n\n  useEffect(() => onValidated(validation), [validation]);\n\n  const onValidation = () =>\n    validateVendor({\n      variant,\n      type: \"salesforce\",\n      credentials: {\n        provider: \"salesforce\",\n        userName,\n        password,\n        token,\n        url,\n        name,\n        organizationId,\n      },\n    });\n\n  return (\n    <Fragment>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"SFDC Username\"\n            required\n            value={userName}\n            id=\"userName\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"SFDC Password\"\n            required\n            secured\n            value={password}\n            id=\"password\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"SFDC Security Token\"\n            required\n            secured\n            value={token}\n            id=\"token\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <URLStateFulInput url={url} onBlur={onBlur} />\n        </div>\n        {organizationId && (\n          <div className=\"slds-col slds-size_1-of-3\">\n            <StatefulInput\n              readOnly\n              label=\"SFDC Organization ID (18 Digit)\"\n              value={organizationId}\n              id=\"organizationId\"\n              onBlur={onBlur}\n            />\n          </div>\n        )}\n      </div>\n      <div className=\"slds-grid slds-gutters_small slds-m-top_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <Button label=\"Validate SFDC Connection\" onClick={onValidation} />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nUsernamePassword.propTypes = propTypes;\n\nexport default UsernamePassword;\n","/* eslint-disable react/require-default-props */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Button } from \"@salesforce/design-system-react\";\n\nimport {\n  SALESFORCE_OAUTH_URL,\n  SALESFORCE_LOGIN_PRODUCTIONURL,\n  SALESFORCE_LOGIN_SANDBOXURL,\n} from \"./consts\";\n\nimport { retrieveEnvironmentCredentials } from \"../../../../lib/api\";\nimport { openOAuthWindow } from \"./utils\";\n\nconst propTypes = {\n  label: PropTypes.string,\n  loginurl: PropTypes.oneOf([SALESFORCE_LOGIN_PRODUCTIONURL, SALESFORCE_LOGIN_SANDBOXURL]),\n  urlRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: Element })]),\n};\n\nconst engagementGraph = retrieveEnvironmentCredentials();\nconst appendQueryParameter = (loginurl) =>\n  `${SALESFORCE_OAUTH_URL}?gateway-token=${engagementGraph.gatewayToken}&api-token=${engagementGraph.apiToken}&loginurl=${loginurl}`;\n\nlet oauthwindowInstance = null;\nlet previousLoginURL = null;\n\nexport const initiateOauthFlow = (oauthUrl) => {\n  if (!oauthwindowInstance || oauthwindowInstance.closed || previousLoginURL !== oauthUrl) {\n    oauthwindowInstance = openOAuthWindow(appendQueryParameter(oauthUrl));\n    previousLoginURL = oauthUrl;\n  } else {\n    oauthwindowInstance.focus();\n  }\n};\n\nconst OAuthFlowWindow = ({ label, loginurl, urlRef }) => {\n  const handleButton = () => {\n    if (urlRef && urlRef.reportValidity()) {\n      initiateOauthFlow(loginurl);\n    }\n  };\n\n  return <Button label={label} variant=\"outline-brand\" onClick={handleButton} />;\n};\n\nOAuthFlowWindow.propTypes = propTypes;\n\nexport default OAuthFlowWindow;\n","export const useFormDispatch = (actionType, dispatch) => {\n  if (actionType === undefined) throw new Error(\"Action Name is required\");\n  if (dispatch === undefined) throw new Error(\"Dispatch is required\");\n\n  return (propertyName, value, meta) => {\n    if (propertyName === undefined) throw new Error(\"Property name is required\");\n\n    dispatch({\n      meta,\n      type: actionType,\n      payload: { [propertyName]: value }\n    });\n  };\n};\n\nexport const useHandleInput = (actionType, dispatch) => {\n  const onChange = useFormDispatch(actionType, dispatch);\n\n  return (\n    { target: { type, id, valueAsNumber, value } },\n    { meta = {}, valueCasting = true } = {}\n  ) => {\n    if (id === undefined) throw new Error(\"Id is required\");\n    const castedValue = type === \"number\" && valueCasting === true ? valueAsNumber : value;\n\n    onChange(id, castedValue, meta);\n  };\n};\n\nexport const useHandleCombobox = (actionType, dispatch) => {\n  const onChange = useFormDispatch(actionType, dispatch);\n\n  return (name, selection) => {\n    if (name === undefined) throw new Error(\"Name is required\");\n\n    onChange(name, selection.length === 1 ? selection[0].value : null);\n  };\n};\n\nexport const useHandleCheckbox = (actionType, dispatch) => {\n  const onChange = useFormDispatch(actionType, dispatch);\n\n  return ({ target: { id } }, { checked }) => {\n    if (id === undefined) throw new Error(\"Id is required\");\n\n    onChange(id, checked);\n  };\n};\n\nexport const useHandleButtonGroup = (actionType, dispatch) => {\n  const onChange = useFormDispatch(actionType, dispatch);\n\n  return (value, id, meta = {}) => {\n    if (id === undefined) throw new Error(\"Id is required\");\n\n    onChange(id, value, meta);\n  };\n};\n","import { BASIC_CONFIG_SET_VALUE } from \"../../../../consts/configurations/configurationsActions\";\n\nimport { useHandleInput } from \"../../../../hooks/useHandleForm\";\n\nexport const useSFDCHandleInput = (variant, dispatch, actionType = BASIC_CONFIG_SET_VALUE) => {\n  const handleInput = useHandleInput(actionType, dispatch);\n\n  return (event) => handleInput(event, { meta: { variant } });\n};\n\nexport default useSFDCHandleInput;\n","/* eslint-disable react/require-default-props */\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Button } from \"@salesforce/design-system-react\";\n\nimport { BASIC_CONFIG_SET_VALUE } from \"../../../../consts/configurations/configurationsActions\";\nimport {\n  SALESFORCE_OAUTH_URL,\n  SALESFORCE_DATASOURCES_SOURCE,\n  SALESFORCE_DATASOURCES_EINSTEIN,\n  SALESFORCE_DATASOURCES_BULKRESTORE,\n  SALESFORCE_OAUTH_TOKENURL,\n  SALESFORCE_OAUTH_ERRORACCESDENIED,\n} from \"./consts\";\n\nimport { isOAuthCredential, toggleCrosswindowMessageListener } from \"./utils\";\n\nimport StatefulInput from \"../../../commons/StatefulInput\";\nimport URLStateFulInput from \"./URLStateFulInput\";\nimport OAuthFlowWindow from \"./OAuthFlowWindow\";\n\nimport { useToggleSpinner } from \"../../../../hooks/useInteractiveFetchStatus\";\nimport { useFormDispatch } from \"../../../../hooks/useHandleForm\";\nimport useFetch from \"../../../../hooks/useFetch\";\nimport { useSFDCHandleInput } from \"./hooks\";\n\nconst propTypes = {\n  dataSource: PropTypes.objectOf({\n    userName: PropTypes.strings,\n    url: PropTypes.string,\n    graxOAuthURL: PropTypes.string,\n    organizationId: PropTypes.string,\n  }),\n  dispatch: PropTypes.func.isRequired,\n  onValidated: PropTypes.func,\n  variant: PropTypes.oneOf([\n    SALESFORCE_DATASOURCES_SOURCE,\n    SALESFORCE_DATASOURCES_EINSTEIN,\n    SALESFORCE_DATASOURCES_BULKRESTORE,\n  ]).isRequired,\n};\n\nconst setTokenUrl = (organizationId) => ({\n  url: `${SALESFORCE_OAUTH_TOKENURL}?sfdcorgid=${organizationId}`,\n});\n\nlet urlRef = null;\n\nconst OAuth = ({ dataSource, variant, dispatch, onValidated }) => {\n  const handleOnChange = useFormDispatch(BASIC_CONFIG_SET_VALUE, dispatch);\n  const onBlur = useSFDCHandleInput(variant, dispatch);\n  const [{ isLoading, error, data, success }, refreshToken] = useFetch();\n  useToggleSpinner(isLoading);\n\n  const showScopeNotification = (customMessage, status = false) => {\n    if (status === true) {\n      onValidated({\n        status: \"successful\",\n        customMessage,\n      });\n    } else {\n      onValidated({\n        status: \"failed\",\n        customMessage: `Invalid OAuth credentials: ${customMessage}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (success === true && data && data.access_token) {\n      showScopeNotification(\"OAuth credentials validated\", true);\n    } else if (success === false || error) {\n      showScopeNotification(error.error_description || \"error description is missing\");\n    }\n  }, [data, error, success]);\n\n  useEffect(() => {\n    toggleCrosswindowMessageListener((event) => {\n      if (event.data && event.data.error) {\n        if (event.data.error === SALESFORCE_OAUTH_ERRORACCESDENIED) return;\n\n        showScopeNotification(event.data.error_description || \"error description is missing\");\n      } else if (event.data && event.data.status === \"success\") {\n        const oauthPopupOrigin = new URL(SALESFORCE_OAUTH_URL).origin;\n        if (event.origin !== oauthPopupOrigin) {\n          showScopeNotification(`Cross Origin authentication is not supported: ${event.origin}`);\n          // return;\n        }\n        showScopeNotification(\"Successful OAuth authentication\", true);\n        handleOnChange(\"graxOAuthURL\", SALESFORCE_OAUTH_TOKENURL, { variant });\n        handleOnChange(\"organizationId\", event.data.org_id, { variant });\n        handleOnChange(\"userName\", event.data.user_name, { variant });\n      }\n    });\n\n    return () => toggleCrosswindowMessageListener();\n  }, []);\n\n  return (\n    <>\n      {isOAuthCredential(dataSource) === true ? (\n        <>\n          <div className=\"slds-grid slds-gutters_small\">\n            <div className=\"slds-col slds-size_1-of-3\">\n              <URLStateFulInput\n                url={dataSource.url}\n                onBlur={onBlur}\n                inputRef={(e) => {\n                  urlRef = e;\n                }}\n              />\n            </div>\n            <div className=\"slds-col slds-size_1-of-3\">\n              <StatefulInput\n                readOnly\n                label=\"SFDC Username\"\n                value={dataSource.userName}\n                id=\"userName\"\n                onBlur={() => {}}\n              />\n            </div>\n            <div className=\"slds-col slds-size_1-of-3\">\n              <StatefulInput\n                readOnly\n                label=\"SFDC Organization ID (18 Digit)\"\n                value={dataSource.organizationId}\n                id=\"organizationId\"\n                onBlur={() => {}}\n              />\n            </div>\n          </div>\n          <div className=\"slds-grid slds-gutters_small\">\n            <div className=\"slds-col slds-size_1-of-3\" />\n          </div>\n          <div className=\"slds-grid slds-gutters_small slds-m-top_small\">\n            <div className=\"slds-col slds-size_1-of-3\">\n              <Button\n                label=\"Validate OAuth authentication\"\n                onClick={() => refreshToken(setTokenUrl(dataSource.organizationId))}\n              />\n              <OAuthFlowWindow\n                label=\"Change authentication\"\n                loginurl={dataSource.url}\n                urlRef={urlRef}\n              />\n            </div>\n          </div>\n        </>\n      ) : (\n        <>\n          <div className=\"slds-grid slds-gutters_small\">\n            <div className=\"slds-col slds-size_1-of-3\">\n              <URLStateFulInput\n                url={dataSource.url}\n                onBlur={onBlur}\n                inputRef={(e) => {\n                  urlRef = e;\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"slds-grid slds-gutters_small slds-m-top_small\">\n            <div className=\"slds-col slds-size_1-of-3\">\n              <OAuthFlowWindow\n                label=\"Authenticate using OAuth\"\n                loginurl={dataSource.url}\n                urlRef={urlRef}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nOAuth.propTypes = propTypes;\n\nexport default OAuth;\n","const useSelectedProvider = state => {\n  if (state.provider === undefined) throw new Error(\"No Provider Tab Selected\");\n\n  const provider = state.provider;\n  return state[provider];\n};\n\nexport default useSelectedProvider;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  QUICK_START_FORM_SET_PROVIDER,\n  QUICK_START_FORM_SET_NAME,\n} from \"../../../../consts/configurations/configurationsActions\";\nimport {\n  SALESFORCE_LOGIN_SFDC,\n  SALESFORCE_LOGIN_OAUTH,\n  SALESFORCE_DATASOURCES_SOURCE,\n  SALESFORCE_DATASOURCES_EINSTEIN,\n  SALESFORCE_DATASOURCES_BULKRESTORE,\n} from \"./consts\";\n\nimport { useSalesforceConnectionContext } from \"./context\";\n\nimport GRAXButtonGroup from \"../../../commons/ButtonGroup\";\nimport StatefulInput from \"../../../commons/StatefulInput\";\nimport ConfigurationNotice from \"../../../commons/ConfigurationNotice\";\nimport VendorValidityMessage from \"../../../commons/VendorValidityMessage\";\nimport UsernamePassword from \"./UsernamePassword\";\nimport OAuth from \"./OAuth\";\n\nimport { useAutoDismissToast } from \"../../../../hooks/configuration/useIndividualVendorValidity\";\nimport { useHandleButtonGroup } from \"../../../../hooks/useHandleForm\";\nimport useSelectedProvider from \"../../../../hooks/configuration/useSelectedProvider\";\nimport { useSFDCHandleInput } from \"./hooks\";\n\nconst propTypes = {\n  // eslint-disable-next-line react/require-default-props\n  showConnectionName: PropTypes.bool,\n  variant: PropTypes.oneOf([\n    SALESFORCE_DATASOURCES_SOURCE,\n    SALESFORCE_DATASOURCES_EINSTEIN,\n    SALESFORCE_DATASOURCES_BULKRESTORE,\n  ]).isRequired,\n};\n\nconst options = [\n  {\n    label: \"Username / Password\",\n    value: SALESFORCE_LOGIN_SFDC,\n  },\n  {\n    label: \"OAuth\",\n    value: SALESFORCE_LOGIN_OAUTH,\n    disabled: false,\n  },\n];\n\nconst SalesforceConnection = ({ variant, showConnectionName = false }) => {\n  const [validation, setValidationStatus] = useState(\"\");\n  const [state, dispatch] = useSalesforceConnectionContext();\n  const isOpen = useAutoDismissToast(validation);\n  const onBlur = useSFDCHandleInput(variant, dispatch);\n  const handleConnectionName = useSFDCHandleInput(variant, dispatch, QUICK_START_FORM_SET_NAME);\n  const onBlurButtonGroup = useHandleButtonGroup(QUICK_START_FORM_SET_PROVIDER, dispatch);\n  const handleButtonGroup = (selected, id) => onBlurButtonGroup(selected, id, { variant });\n\n  const dataSourceVariant = state[variant];\n  const selectedTab = dataSourceVariant.provider;\n  const dataSource = useSelectedProvider(dataSourceVariant);\n\n  return (\n    <>\n      {variant === SALESFORCE_DATASOURCES_SOURCE && (\n        <ConfigurationNotice\n          text={`Please enter credentials for the integration user the GRAX app will use to log in. In order\n        to prevent crossing your wires, the credentials entered here must be for this current SFDC\n        org you are in.`}\n        />\n      )}\n\n      {isOpen === true && (\n        <VendorValidityMessage\n          variant={variant}\n          status={validation.status}\n          customMessage={validation.customMessage}\n        />\n      )}\n      {showConnectionName === true && (\n        <div className=\"slds-grid slds-gutters_small slds-m-bottom_small\">\n          <div className=\"slds-col slds-size_2-of-3\">\n            <StatefulInput\n              label=\"Connection Name\"\n              required\n              value={dataSource.name}\n              id=\"name\"\n              helpText='Please name your Salesforce connection e.g. \"Dev Sandbox“'\n              onBlur={handleConnectionName}\n            />\n          </div>\n        </div>\n      )}\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_2-of-3\">\n          <GRAXButtonGroup\n            options={options}\n            value={selectedTab}\n            id=\"provider\"\n            onClick={handleButtonGroup}\n          />\n        </div>\n      </div>\n      {selectedTab === SALESFORCE_LOGIN_SFDC ? (\n        <UsernamePassword\n          variant={variant}\n          userName={dataSource.userName}\n          password={dataSource.password}\n          token={dataSource.token}\n          url={dataSource.url}\n          name={dataSource.name}\n          organizationId={dataSource.organizationId}\n          onBlur={onBlur}\n          onValidated={setValidationStatus}\n        />\n      ) : (\n        <OAuth\n          dataSource={dataSource}\n          variant={variant}\n          dispatch={dispatch}\n          onValidated={setValidationStatus}\n        />\n      )}\n    </>\n  );\n};\n\nSalesforceConnection.propTypes = propTypes;\n\nexport default SalesforceConnection;\n","import React from \"react\";\n\nimport { ExpandableSection } from \"@salesforce/design-system-react\";\nimport SalesforceConnection from \"../salesforceConnection\";\n\nconst SalesforceOrigin = () => {\n  return (\n    <ExpandableSection\n      title=\"Salesforce Connection\"\n      className=\"slds-m-bottom_medium slds-m-top_none\"\n      nonCollapsible\n    >\n      <SalesforceConnection showConnectionName variant=\"sourceDataSource\" />\n    </ExpandableSection>\n  );\n};\n\nexport default SalesforceOrigin;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\n\nconst propTypes = {\n  url: PropTypes.string,\n  gatewayPath: PropTypes.string,\n  onBlur: PropTypes.func.isRequired\n};\n\nconst BonsaiElasticsearch = ({ url, gatewayPath, onBlur }) => {\n  return (\n    <div className=\"slds-grid slds-gutters_small\">\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput label=\"Bonsai URL\" required value={url} id=\"url\" onBlur={onBlur} />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput label=\"Gateway path\" value={gatewayPath} id=\"gatewayPath\" onBlur={onBlur} />\n      </div>\n    </div>\n  );\n};\n\nBonsaiElasticsearch.propTypes = propTypes;\n\nexport default BonsaiElasticsearch;\n","import React from \"react\";\n\nimport { Combobox, Icon, comboboxFilterAndLimit } from \"@salesforce/design-system-react\";\n\nclass SCombobox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputValue: \"\",\n      selection: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ selection: this.props.selection });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.value !== prevProps.value) {\n      this.setState({ selection: this.props.selection });\n    }\n  }\n\n  render() {\n    return (\n      <Combobox\n        events={{\n          onChange: (event, { value }) => {\n            this.props.onSelect(event, value);\n            this.setState({ inputValue: value });\n          },\n          onRequestRemoveSelectedOption: (event, data) => {\n            this.setState({\n              inputValue: \"\",\n              selection: []\n            });\n            this.props.onSelect(event, data.selection);\n          },\n          onSubmit: (event, { value }) => {\n            this.props.onSelect(event, value);\n            this.setState({\n              inputValue: \"\",\n              selection: [\n                ...this.state.selection,\n                {\n                  label: value,\n                  icon: (\n                    <Icon assistiveText={{ label: \"Account\" }} category=\"standard\" name=\"account\" />\n                  )\n                }\n              ]\n            });\n          },\n          onSelect: (event, data) => {\n            this.props.onSelect(event, ...Object.keys(data).map(key => data[key]));\n            this.setState({\n              inputValue: \"\",\n              selection: data.selection\n            });\n          }\n        }}\n        labels={this.props.labels}\n        options={comboboxFilterAndLimit({\n          inputValue: this.state.inputValue,\n          options: this.props.options,\n          selection: this.state.selection || [],\n          limit: 1000\n        })}\n        selection={this.state.selection}\n        value={this.state.selectedOption ? this.state.selectedOption.label : this.state.inputValue}\n        variant=\"inline-listbox\"\n        required\n        menuItemVisibleLength={5}\n      />\n    );\n  }\n}\n\nSCombobox.displayName = \"SCombobox\";\n\nexport default SCombobox;\n","import {\n  AWS_REGIONS_US_EAST_2,\n  AWS_REGIONS_US_EAST_1,\n  AWS_REGIONS_US_WEST_1,\n  AWS_REGIONS_US_WEST_2,\n  AWS_REGIONS_AP_EAST_1,\n  AWS_REGIONS_AP_SOUTH_1,\n  AWS_REGIONS_AP_NORTHEAST_3,\n  AWS_REGIONS_AP_NORTHEAST_2,\n  AWS_REGIONS_AP_SOUTHEAST_1,\n  AWS_REGIONS_AP_SOUTHEAST_2,\n  AWS_REGIONS_AP_NORTHEAST_1,\n  AWS_REGIONS_CA_CENTRAL_1,\n  AWS_REGIONS_EU_CENTRAL_1,\n  AWS_REGIONS_EU_WEST_1,\n  AWS_REGIONS_EU_WEST_2,\n  AWS_REGIONS_EU_WEST_3,\n  AWS_REGIONS_EU_NORTH_1,\n  AWS_REGIONS_ME_SOUTH_1,\n  AWS_REGIONS_SA_EAST_1\n} from \"../regions\";\n\nconst REGION_LABEL_MAP = {\n  [AWS_REGIONS_US_EAST_2]: \"US East (Ohio)\",\n  [AWS_REGIONS_US_EAST_1]: \"US East (N. Virginia)\",\n  [AWS_REGIONS_US_WEST_1]: \"US West (N. California)\",\n  [AWS_REGIONS_US_WEST_2]: \"US West (Oregon)\",\n  [AWS_REGIONS_AP_EAST_1]: \"Asia Pacific (Hong Kong)\",\n  [AWS_REGIONS_AP_SOUTH_1]: \"Asia Pacific (Mumbai)\",\n  [AWS_REGIONS_AP_NORTHEAST_3]: \"Asia Pacific (Osaka-Local)\",\n  [AWS_REGIONS_AP_NORTHEAST_2]: \"Asia Pacific (Seoul)\",\n  [AWS_REGIONS_AP_SOUTHEAST_1]: \"Asia Pacific (Singapore)\",\n  [AWS_REGIONS_AP_SOUTHEAST_2]: \"Asia Pacific (Sydney)\",\n  [AWS_REGIONS_AP_NORTHEAST_1]: \"Asia Pacific (Tokyo)\",\n  [AWS_REGIONS_CA_CENTRAL_1]: \"Canada (Central)\",\n  [AWS_REGIONS_EU_CENTRAL_1]: \"Europe (Frankfurt)\",\n  [AWS_REGIONS_EU_WEST_1]: \"Europe (Ireland)\",\n  [AWS_REGIONS_EU_WEST_2]: \"Europe (London)\",\n  [AWS_REGIONS_EU_WEST_3]: \"Europe (Paris)\",\n  [AWS_REGIONS_EU_NORTH_1]: \"Europe (Stockholm)\",\n  [AWS_REGIONS_ME_SOUTH_1]: \"Middle East (Bahrain)\",\n  [AWS_REGIONS_SA_EAST_1]: \"South America (São Paulo)\"\n};\n\nexport default REGION_LABEL_MAP;\n","export const AWS_REGIONS_US_EAST_2 = \"us-east-2\";\nexport const AWS_REGIONS_US_EAST_1 = \"us-east-1\";\nexport const AWS_REGIONS_US_WEST_1 = \"us-west-1\";\nexport const AWS_REGIONS_US_WEST_2 = \"us-west-2\";\nexport const AWS_REGIONS_AP_EAST_1 = \"ap-east-1\";\nexport const AWS_REGIONS_AP_SOUTH_1 = \"ap-south-1\";\nexport const AWS_REGIONS_AP_NORTHEAST_3 = \"ap-northeast-3\";\nexport const AWS_REGIONS_AP_NORTHEAST_2 = \"ap-northeast-2\";\nexport const AWS_REGIONS_AP_SOUTHEAST_1 = \"ap-southeast-1\";\nexport const AWS_REGIONS_AP_SOUTHEAST_2 = \"ap-southeast-2\";\nexport const AWS_REGIONS_AP_NORTHEAST_1 = \"ap-northeast-1\";\nexport const AWS_REGIONS_CA_CENTRAL_1 = \"ca-central-1\";\nexport const AWS_REGIONS_EU_CENTRAL_1 = \"eu-central-1\";\nexport const AWS_REGIONS_EU_WEST_1 = \"eu-west-1\";\nexport const AWS_REGIONS_EU_WEST_2 = \"eu-west-2\";\nexport const AWS_REGIONS_EU_WEST_3 = \"eu-west-3\";\nexport const AWS_REGIONS_EU_NORTH_1 = \"eu-north-1\";\nexport const AWS_REGIONS_ME_SOUTH_1 = \"me-south-1\";\nexport const AWS_REGIONS_SA_EAST_1 = \"sa-east-1\";\n\nconst ALL_REGIONS = [\n  AWS_REGIONS_US_EAST_2,\n  AWS_REGIONS_US_EAST_1,\n  AWS_REGIONS_US_WEST_1,\n  AWS_REGIONS_US_WEST_2,\n  AWS_REGIONS_AP_EAST_1,\n  AWS_REGIONS_AP_SOUTH_1,\n  AWS_REGIONS_AP_NORTHEAST_3,\n  AWS_REGIONS_AP_NORTHEAST_2,\n  AWS_REGIONS_AP_SOUTHEAST_1,\n  AWS_REGIONS_AP_SOUTHEAST_2,\n  AWS_REGIONS_AP_NORTHEAST_1,\n  AWS_REGIONS_CA_CENTRAL_1,\n  AWS_REGIONS_EU_CENTRAL_1,\n  AWS_REGIONS_EU_WEST_1,\n  AWS_REGIONS_EU_WEST_2,\n  AWS_REGIONS_EU_WEST_3,\n  AWS_REGIONS_EU_NORTH_1,\n  AWS_REGIONS_ME_SOUTH_1,\n  AWS_REGIONS_SA_EAST_1\n];\n\nexport default ALL_REGIONS;\n","import REGION_LABEL_MAP from \"../../consts/configurations/regionLabelMap\";\n\nconst options = Object.entries(REGION_LABEL_MAP).map(([value, label], index) => ({\n  label,\n  value,\n  subTitle: value,\n  id: index.toString()\n}));\n\nexport const getRegionLabel = region => REGION_LABEL_MAP[region];\n\nconst useAwsRegions = () => {\n  const getSelection = region => {\n    const selection = options.find(option => option.value === region);\n    if (selection !== undefined) return [selection];\n    return undefined;\n  };\n\n  return [options, getSelection];\n};\n\nexport default useAwsRegions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Combobox from \"./Combobox\";\nimport useAwsRegions from \"../../hooks/configuration/useAwsRegions\";\nimport ALL_REGIONS from \"../../consts/regions\";\n\nconst propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.oneOf([...ALL_REGIONS, \"\"]).isRequired,\n  // eslint-disable-next-line react/require-default-props\n  id: PropTypes.string,\n  onChange: PropTypes.func.isRequired\n};\n\nconst AwsRegions = ({ label, value, id, onChange }) => {\n  const [options, getRegionLabel] = useAwsRegions();\n\n  return (\n    <Combobox\n      value={value}\n      options={options}\n      id={id}\n      selection={getRegionLabel(value)}\n      onSelect={(_event, selection) => onChange(selection)}\n      required\n      labels={{\n        label,\n        placeholder: \"Select Option\"\n      }}\n    />\n  );\n};\n\nAwsRegions.propTypes = propTypes;\n\nexport default AwsRegions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport AwsRegions from \"../../../../commons/AwsRegions\";\nimport ALL_REGIONS from \"../../../../../consts/regions\";\n\nconst propTypes = {\n  url: PropTypes.string,\n  accessKey: PropTypes.string,\n  secretAccessKey: PropTypes.string,\n  region: PropTypes.oneOf([...ALL_REGIONS, \"\"]),\n  onBlur: PropTypes.func.isRequired,\n  handleCombobox: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n  url: \"\",\n  accessKey: \"\",\n  secretAccessKey: \"\",\n  region: \"\"\n};\n\nconst AwsElasticsearch = ({ url, accessKey, secretAccessKey, region, onBlur, handleCombobox }) => {\n  return (\n    <>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput label=\"Endpoint Name\" required value={url} id=\"url\" onBlur={onBlur} />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Access Key ID\"\n            required\n            secured\n            value={accessKey}\n            id=\"accessKey\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Secret Access Key\"\n            required\n            secured\n            value={secretAccessKey}\n            id=\"secretAccessKey\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <AwsRegions\n            value={region}\n            label=\"S3 Region\"\n            onChange={selections => handleCombobox(\"region\", selections)}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nAwsElasticsearch.propTypes = propTypes;\nAwsElasticsearch.defaultProps = defaultProps;\n\nexport default AwsElasticsearch;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport StatefulInput from \"../../../../commons/StatefulInput\";\n\nconst propTypes = {\n  user: PropTypes.string,\n  password: PropTypes.string,\n  url: PropTypes.string,\n  port: PropTypes.number,\n  onBlur: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n  user: \"\",\n  password: \"\",\n  url: \"\",\n  port: undefined\n};\n\nconst ElasticCo = ({ user, password, url, port, onBlur }) => {\n  return (\n    <Fragment>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput label=\"Elastic Username\" required value={user} id=\"user\" onBlur={onBlur} />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Elastic Password\"\n            required\n            secured\n            value={password}\n            id=\"password\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput label=\"Elastic URL\" required value={url} id=\"url\" onBlur={onBlur} />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            type=\"number\"\n            label=\"Elastic Port\"\n            required\n            value={port}\n            id=\"port\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nElasticCo.propTypes = propTypes;\nElasticCo.defaultProps = defaultProps;\n\nexport default ElasticCo;\n","import React from \"react\";\nimport {\n  ELASTICSEARCH_PROVIDERS_BONSAI,\n  ELASTICSEARCH_PROVIDERS_AWS,\n  ELASTICSEARCH_PROVIDERS_ELASTIC_CO\n} from \"../../../../../consts/configurations/elasticsearchProviders\";\nimport { BASIC_CONFIG_SET_VALUE } from \"../../../../../consts/configurations/configurationsActions\";\nimport { useHandleInput, useHandleCombobox } from \"../../../../../hooks/useHandleForm\";\n\nimport BonsaiElasticsearch from \"./BonsaiElasticsearch\";\nimport AwsElasticsearch from \"./AwsElasticsearch\";\nimport ElasticCo from \"./ElasticCo\";\n\nconst ProviderFactory = props => {\n  const onBlur = useHandleInput(BASIC_CONFIG_SET_VALUE, props.dispatch);\n  const handleCombobox = useHandleCombobox(BASIC_CONFIG_SET_VALUE, props.dispatch);\n\n  switch (props.selectedTab) {\n    case ELASTICSEARCH_PROVIDERS_BONSAI:\n      return (\n        <BonsaiElasticsearch url={props.url} gatewayPath={props.gatewayPath} onBlur={onBlur} />\n      );\n    case ELASTICSEARCH_PROVIDERS_AWS:\n      return (\n        <AwsElasticsearch\n          url={props.url}\n          accessKey={props.accessKey}\n          secretAccessKey={props.secretAccessKey}\n          region={props.region}\n          bucket={props.bucket}\n          onBlur={onBlur}\n          handleCombobox={handleCombobox}\n        />\n      );\n    case ELASTICSEARCH_PROVIDERS_ELASTIC_CO:\n      return (\n        <ElasticCo\n          user={props.user}\n          password={props.password}\n          url={props.url}\n          port={props.port}\n          onBlur={onBlur}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nexport default ProviderFactory;\n","import {\n  ELASTICSEARCH_PROVIDERS_BONSAI,\n  ELASTICSEARCH_PROVIDERS_AWS,\n  ELASTICSEARCH_PROVIDERS_ELASTIC_CO\n} from \"../../consts/configurations/elasticsearchProviders\";\nimport {\n  QUICK_START_FORM_SET_NAME,\n  QUICK_START_FORM_SET_PROVIDER\n} from \"../../consts/configurations/configurationsActions\";\n\nimport { useElasticsearchContext } from \"../../contexts/elasticsearchContext\";\nimport { useHandleInput, useHandleButtonGroup } from \"../useHandleForm\";\n\nconst options = [\n  { label: \"Bonsai Elasticsearch\", value: ELASTICSEARCH_PROVIDERS_BONSAI },\n  { label: \"AWS Elasticsearch\", value: ELASTICSEARCH_PROVIDERS_AWS },\n  { label: \"Elastic.co\", value: ELASTICSEARCH_PROVIDERS_ELASTIC_CO }\n];\n\n/**\n * Accesses corresponding context to retrieve/set provider data\n *\n * @returns { Array } [{selectedTab, provider, options}, {dispatch}]\n */\nconst useElasticsearchForm = () => {\n  const [state, dispatch] = useElasticsearchContext();\n  const onBlur = useHandleInput(QUICK_START_FORM_SET_NAME, dispatch);\n  const handleButtonGroup = useHandleButtonGroup(QUICK_START_FORM_SET_PROVIDER, dispatch);\n  const { name } = state;\n  const selectedTab = state.provider;\n  const provider = state[selectedTab];\n\n  return [\n    {\n      name,\n      selectedTab,\n      provider,\n      options\n    },\n    { onBlur, handleButtonGroup, dispatch }\n  ];\n};\n\nexport default useElasticsearchForm;\n","import React, { Fragment } from \"react\";\n\nimport { ExpandableSection, Button } from \"@salesforce/design-system-react\";\n\nimport GRAXButtonGroup from \"../../../../commons/ButtonGroup\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport VendorValidityMessage from \"../../../../commons/VendorValidityMessage\";\nimport ProviderFactory from \"./ProviderFactory\";\n\nimport useElasticsearchForm from \"../../../../../hooks/configuration/useElasticsearchForm\";\nimport useIndividualVendorValidity, {\n  useAutoDismissToast,\n} from \"../../../../../hooks/configuration/useIndividualVendorValidity\";\n\nconst ElasticsearchForm = () => {\n  const [validation, validateVendor] = useIndividualVendorValidity();\n  const isOpen = useAutoDismissToast(validation);\n  const [\n    { selectedTab, name, provider, options },\n    { handleButtonGroup, onBlur, dispatch },\n  ] = useElasticsearchForm();\n\n  const onValidation = () => validateVendor({ type: \"elastic\", credentials: provider });\n\n  return (\n    <Fragment>\n      <ExpandableSection\n        title=\"Elasticsearch Provider\"\n        className=\"slds-m-bottom_medium slds-m-top_none\"\n        nonCollapsible\n      >\n        {isOpen === true && <VendorValidityMessage variant=\"elastic\" status={validation.status} />}\n        <div className=\"slds-grid slds-gutters_small  slds-m-bottom_small\">\n          <div className=\"slds-col slds-size_2-of-3\">\n            <StatefulInput label=\"Name\" required value={name} id=\"name\" onBlur={onBlur} />\n          </div>\n        </div>\n        <div className=\"slds-grid slds-gutters_small\">\n          <div className=\"slds-col slds-size_2-of-3\">\n            <GRAXButtonGroup\n              options={options}\n              value={selectedTab}\n              id=\"provider\"\n              onClick={handleButtonGroup}\n            />\n          </div>\n        </div>\n        <ProviderFactory selectedTab={selectedTab} {...provider} dispatch={dispatch} />\n        <div className=\"slds-grid slds-gutters_small slds-m-top_small\">\n          <div className=\"slds-col slds-size_1-of-3\">\n            <Button label=\"Validate Elastic Connection\" onClick={onValidation} />\n          </div>\n        </div>\n      </ExpandableSection>\n    </Fragment>\n  );\n};\n\nexport default ElasticsearchForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AwsRegions from \"../../../../commons/AwsRegions\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport ALL_REGIONS from \"../../../../../consts/regions\";\n\nconst propTypes = {\n  s3CompatibleEndpoint: PropTypes.string,\n  bucket: PropTypes.string,\n  accessKeyName: PropTypes.string,\n  secretAccessKey: PropTypes.string,\n  region: PropTypes.oneOf([...ALL_REGIONS, \"\"]),\n  onBlur: PropTypes.func.isRequired,\n  handleCheckbox: PropTypes.func.isRequired,\n  handleCombobox: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  s3CompatibleEndpoint: \"\",\n  bucket: \"\",\n  accessKeyName: \"\",\n  secretAccessKey: \"\",\n  region: \"\",\n};\n\nconst S3Compatible = ({\n  s3CompatibleEndpoint,\n  bucket,\n  accessKeyName,\n  secretAccessKey,\n  region,\n  onBlur,\n  handleCombobox,\n}) => (\n  <>\n    <div className=\"slds-grid slds-gutters_small\">\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Endpoint\"\n          required\n          value={s3CompatibleEndpoint}\n          id=\"s3CompatibleEndpoint\"\n          onBlur={onBlur}\n        />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput label=\"S3 Bucket Name\" required value={bucket} id=\"bucket\" onBlur={onBlur} />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <AwsRegions\n          label=\"S3 Region\"\n          value={region}\n          onChange={(selections) => handleCombobox(\"region\", selections)}\n        />\n      </div>\n    </div>\n    <div className=\"slds-grid slds-gutters_small\">\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Access Key ID\"\n          required\n          secured\n          value={accessKeyName}\n          id=\"accessKey\"\n          onBlur={onBlur}\n        />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Secret Access Key\"\n          required\n          secured\n          value={secretAccessKey}\n          id=\"secretAccessKey\"\n          onBlur={onBlur}\n        />\n      </div>\n    </div>\n  </>\n);\n\nS3Compatible.propTypes = propTypes;\nS3Compatible.defaultProps = defaultProps;\n\nexport default S3Compatible;\n","/* eslint-disable react/require-default-props */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Checkbox, Tooltip, Modal, Button } from \"@salesforce/design-system-react\";\n\nconst fieldLevelHelpTextPropTypes = {\n  label: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n};\n\nconst statefulCheckboxPropTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  isDestructive: PropTypes.bool,\n  helpText: PropTypes.string,\n};\n\nconst destructiveWarningPropTypes = {\n  isADestructiveAction: PropTypes.bool.isRequired,\n};\n\nconst FieldLevelHelpText = ({ label, helpText }) => (\n  <>\n    <span className=\"slds-form-element__label\">{label}</span>\n    {helpText !== null && (\n      <Tooltip\n        content={helpText}\n        align=\"top left\"\n        variant=\"learnMore\"\n        dialogClassName=\"dialog-classname\"\n      />\n    )}\n  </>\n);\n\nconst DestructiveWarning = ({ isADestructiveAction = false }) => {\n  const isMounted = useRef(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    if (isMounted.current === false) {\n      isMounted.current = true;\n    } else if (isADestructiveAction === false) {\n      setIsOpen(true);\n    }\n  }, [isADestructiveAction]);\n\n  return (\n    <Modal\n      noHeader\n      footer={[<Button key=\"promptBtn\" label=\"Ok\" onClick={() => setIsOpen(false)} />]}\n      isOpen={isOpen}\n      onRequestClose={() => setIsOpen(false)}\n      prompt=\"error\"\n      size=\"small\"\n      title=\"Confirmation Needed\"\n    >\n      <div className=\"slds-m-around_medium\">\n        Once you save the configuration, you will lose the information for this feature you just\n        disabled, and will need to re-enter the next time you enable the feature\n      </div>\n    </Modal>\n  );\n};\n\nconst StatefulCheckbox = ({\n  id,\n  label,\n  checked,\n  onToggle,\n  helpText = null,\n  isDestructive = false,\n}) => {\n  const [_checked, setIsChecked] = useState(false);\n\n  useEffect(() => setIsChecked(checked), [checked]);\n\n  return (\n    <>\n      <FieldLevelHelpText label={label} helpText={helpText} />\n      <div className=\"slds-form-element__control\">\n        <div style={{ width: 0 }}>\n          <Checkbox variant=\"toggle\" id={id} checked={_checked} onChange={onToggle} />\n        </div>\n      </div>\n\n      {isDestructive && <DestructiveWarning isADestructiveAction={_checked} />}\n    </>\n  );\n};\n\nFieldLevelHelpText.propTypes = fieldLevelHelpTextPropTypes;\nDestructiveWarning.propTypes = destructiveWarningPropTypes;\nStatefulCheckbox.propTypes = statefulCheckboxPropTypes;\n\nexport default StatefulCheckbox;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport StatefulInput from \"../../../../commons/StatefulInput\";\n\nconst propTypes = {\n  s3AssumeRoleArn: PropTypes.string.isRequired,\n  s3AssumeRoleExternalId: PropTypes.string.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n\nconst AssumeRoleOptions = ({ s3AssumeRoleArn, s3AssumeRoleExternalId, onBlur }) => {\n  return (\n    <Fragment>\n      <h3 className=\"slds-section__title\">\n        <span className=\"slds-truncate\" title=\"Cloud Storage Provider\">\n          Assume Role Options\n        </span>\n      </h3>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Assume Role / ARN Name\"\n            required\n            value={s3AssumeRoleArn}\n            id=\"s3AssumeRoleArn\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Assume Role External ID\"\n            value={s3AssumeRoleExternalId}\n            id=\"s3AssumeRoleExternalId\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nAssumeRoleOptions.propTypes = propTypes;\n\nexport default AssumeRoleOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  heading: PropTypes.string.isRequired\n};\n\nconst Subsection = ({ heading }) => (\n  <div className=\"slds-grid slds-gutters_small slds-m-top_x-small\">\n    <div className=\"slds-col slds-size_3-of-3\">\n      <h3 className=\"slds-section__title\">\n        <span className=\"slds-truncate\" title=\"Cloud Storage Provider\">\n          {heading}\n        </span>\n      </h3>\n    </div>\n  </div>\n);\n\nSubsection.propTypes = propTypes;\n\nexport default Subsection;\n","/* eslint-disable react/require-default-props */\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport GRAXButtonGroup from \"../../../../commons/ButtonGroup\";\n\nimport {\n  SERVER_SIDE_ENCRYPTIONS_AES256,\n  SERVER_SIDE_ENCRYPTIONS_AWS_KMS,\n  SERVER_SIDE_ENCRYPTIONS_NO_ENCRYPTIONS\n} from \"../../../../../consts/configurations/serverSideEncryptions\";\nimport Subsection from \"../../Subsection\";\n\nconst options = [\n  {\n    label: \"AES256\",\n    value: SERVER_SIDE_ENCRYPTIONS_AES256\n  },\n  {\n    label: \"AWS KMS\",\n    value: SERVER_SIDE_ENCRYPTIONS_AWS_KMS\n  },\n  {\n    label: \"No Encryption\",\n    value: SERVER_SIDE_ENCRYPTIONS_NO_ENCRYPTIONS\n  }\n];\n\nconst propTypes = {\n  serverSideEncryption: PropTypes.oneOf([\n    SERVER_SIDE_ENCRYPTIONS_AES256,\n    SERVER_SIDE_ENCRYPTIONS_AWS_KMS,\n    SERVER_SIDE_ENCRYPTIONS_NO_ENCRYPTIONS\n  ]),\n  serverSideEncryptionKmsKey: PropTypes.string,\n  onBlur: PropTypes.func.isRequired,\n  handleButtonGroup: PropTypes.func.isRequired\n};\n\nconst ServerSideEncryption = ({\n  serverSideEncryption = SERVER_SIDE_ENCRYPTIONS_AES256,\n  serverSideEncryptionKmsKey,\n  onBlur,\n  handleButtonGroup\n}) => (\n  <Fragment>\n    <Subsection heading=\"Server-Side Encryption\" />\n    <div className=\"slds-grid slds-gutters_small\">\n      <div className=\"slds-col slds-size_1-of-3\">\n        <span className=\"slds-form-element__label\">&nbsp;</span>\n        <div className=\"slds-form-element__control\">\n          <GRAXButtonGroup\n            options={options}\n            value={serverSideEncryption}\n            id=\"serverSideEncryption\"\n            onClick={handleButtonGroup}\n          />\n        </div>\n      </div>\n      {serverSideEncryption === SERVER_SIDE_ENCRYPTIONS_AWS_KMS && (\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"S3 KMS ID\"\n            value={serverSideEncryptionKmsKey}\n            id=\"serverSideEncryptionKmsKey\"\n            onBlur={onBlur}\n          />\n        </div>\n      )}\n    </div>\n  </Fragment>\n);\n\nServerSideEncryption.propTypes = propTypes;\n\nexport default ServerSideEncryption;\n","export const SERVER_SIDE_ENCRYPTIONS_AES256 = \"AES256\";\nexport const SERVER_SIDE_ENCRYPTIONS_AWS_KMS = \"aws:kms\";\nexport const SERVER_SIDE_ENCRYPTIONS_NO_ENCRYPTIONS = \"\";\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport AwsRegions from \"../../../../commons/AwsRegions\";\nimport StatefulCheckbox from \"../../../../commons/StatefulCheckbox\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport AssumeRoleOptions from \"./AssumeRoleOptions\";\nimport ServerSideEncryption from \"./ServerSideEncryption\";\n\nconst propTypes = {\n  accessKeyName: PropTypes.string,\n  secretAccessKey: PropTypes.string,\n  bucket: PropTypes.string,\n  region: PropTypes.string,\n  // eslint-disable-next-line react/require-default-props\n  s3AssumeRoleEnabled: PropTypes.bool,\n  s3AssumeRoleArn: PropTypes.string,\n  s3AssumeRoleExternalId: PropTypes.string,\n  s3AssumeRoleRefreshCredsInHour: PropTypes.number,\n  serverSideEncryptionKmsKey: PropTypes.string,\n  serverSideEncryption: PropTypes.string,\n  onBlur: PropTypes.func.isRequired,\n  handleButtonGroup: PropTypes.func.isRequired,\n  handleCheckbox: PropTypes.func.isRequired,\n  handleCombobox: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  accessKeyName: \"\",\n  secretAccessKey: \"\",\n  bucket: \"\",\n  region: \"\",\n  s3AssumeRoleArn: \"\",\n  s3AssumeRoleExternalId: \"\",\n  s3AssumeRoleRefreshCredsInHour: 12,\n  serverSideEncryptionKmsKey: \"\",\n  serverSideEncryption: \"\",\n};\n\nconst AwsS3Storage = ({\n  accessKeyName,\n  secretAccessKey,\n  bucket,\n  region,\n  s3AssumeRoleEnabled,\n  s3AssumeRoleArn,\n  s3AssumeRoleRefreshCredsInHour,\n  s3AssumeRoleExternalId,\n  serverSideEncryptionKmsKey,\n  serverSideEncryption,\n  onBlur,\n  handleButtonGroup,\n  handleCheckbox,\n  handleCombobox,\n}) => {\n  return (\n    <>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"S3 Bucket Name\"\n            required\n            value={bucket}\n            id=\"bucket\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <AwsRegions\n            label=\"S3 Region\"\n            value={region}\n            id=\"region\"\n            onChange={(selections) => handleCombobox(\"region\", selections)}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Access Key ID\"\n            required\n            secured\n            value={accessKeyName}\n            id=\"accessKey\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Secret Access Key\"\n            required\n            secured\n            value={secretAccessKey}\n            id=\"secretAccessKey\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulCheckbox\n            label=\"Assume Role Enabled\"\n            checked={s3AssumeRoleEnabled}\n            id=\"s3AssumeRoleEnabled\"\n            variant=\"toggle\"\n            isDestructive\n            onToggle={handleCheckbox}\n          />\n        </div>\n      </div>\n      {s3AssumeRoleEnabled === true && (\n        <AssumeRoleOptions\n          s3AssumeRoleArn={s3AssumeRoleArn}\n          s3AssumeRoleRefreshCredsInHour={s3AssumeRoleRefreshCredsInHour}\n          s3AssumeRoleExternalId={s3AssumeRoleExternalId}\n          onBlur={onBlur}\n        />\n      )}\n      <ServerSideEncryption\n        serverSideEncryptionKmsKey={serverSideEncryptionKmsKey}\n        serverSideEncryption={serverSideEncryption}\n        onBlur={onBlur}\n        handleButtonGroup={handleButtonGroup}\n      />\n    </>\n  );\n};\n\nAwsS3Storage.propTypes = propTypes;\nAwsS3Storage.defaultProps = defaultProps;\n\nexport default AwsS3Storage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport StatefulInput from \"../../../../commons/StatefulInput\";\n\nconst propTypes = {\n  storageAccountName: PropTypes.string,\n  containerName: PropTypes.string,\n  accountAccessKey: PropTypes.string\n};\n\nconst AzureBLOB = ({ storageAccountName, containerName, accountAccessKey, onBlur }) => {\n  return (\n    <div className=\"slds-grid slds-gutters_small\">\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Azure Storage Account Name\"\n          required\n          value={storageAccountName}\n          id=\"storageAccountName\"\n          onBlur={onBlur}\n        />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Azure Container Name\"\n          required\n          value={containerName}\n          id=\"containerName\"\n          onBlur={onBlur}\n        />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Storage Account Access Key\"\n          required\n          secured\n          value={accountAccessKey}\n          id=\"accountAccessKey\"\n          onBlur={onBlur}\n        />\n      </div>\n    </div>\n  );\n};\n\nAzureBLOB.propTypes = propTypes;\n\nexport default AzureBLOB;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\n\nconst propTypes = {\n  googleProjectId: PropTypes.string,\n  googleBucketName: PropTypes.string,\n  googlePrivateKey: PropTypes.string,\n  googleClientEmail: PropTypes.string,\n  onBlur: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n  googleProjectId: \"\",\n  googleBucketName: \"\",\n  googlePrivateKey: \"\",\n  googleClientEmail: \"\"\n};\n\nconst GoogleCloudPlatform = ({\n  googleProjectId,\n  googleBucketName,\n  googlePrivateKey,\n  googleClientEmail,\n  onBlur\n}) => (\n  <Fragment>\n    <div className=\"slds-grid slds-gutters_small\">\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Google Project Id\"\n          required\n          value={googleProjectId}\n          id=\"googleProjectId\"\n          onBlur={onBlur}\n        />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Google Bucket Name\"\n          required\n          value={googleBucketName}\n          id=\"googleBucketName\"\n          onBlur={onBlur}\n        />\n      </div>\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Google Private Key\"\n          secured\n          required\n          value={googlePrivateKey}\n          id=\"googlePrivateKey\"\n          onBlur={onBlur}\n        />\n      </div>\n    </div>\n    <div className=\"slds-grid slds-gutters_small\">\n      <div className=\"slds-col slds-size_1-of-3\">\n        <StatefulInput\n          label=\"Google Client Email\"\n          value={googleClientEmail}\n          id=\"googleClientEmail\"\n          onBlur={onBlur}\n        />\n      </div>\n    </div>\n  </Fragment>\n);\n\nGoogleCloudPlatform.propTypes = propTypes;\nGoogleCloudPlatform.defaultProps = defaultProps;\n\nexport default GoogleCloudPlatform;\n","import React, { Fragment } from \"react\";\n\nimport { Input } from \"@salesforce/design-system-react\";\n\nconst MinIOStorage = () => {\n  return (\n    <Fragment>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <Input label=\"Minio Endpoint\" />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <Input label=\"Minio Port\" />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <Input label=\"Minio Access Key\" />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <Input label=\"Minio Secret Key\" />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <Input label=\"Minio Bucket Name\" />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default MinIOStorage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  CLOUD_STORAGE_PROVIDERS_AWS_S3,\n  CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE,\n  CLOUD_STORAGE_PROVIDERS_AZURE,\n  CLOUD_STORAGE_PROVIDERS_GOOGLE_CLOUD_PLATFORM,\n  CLOUD_STORAGE_PROVIDERS_MINIO,\n} from \"../../../../../consts/configurations/cloudStorageProviders\";\nimport { BASIC_CONFIG_SET_VALUE } from \"../../../../../consts/configurations/configurationsActions\";\n\nimport S3Compatible from \"./S3Compatible\";\nimport AwsS3Storage from \"./AwsS3Storage\";\nimport AzureBLOB from \"./AzureBLOB\";\nimport GoogleCloudPlatform from \"./GoogleCloudPlatform\";\nimport MinIOStorage from \"./MinIOStorage\";\n\nimport {\n  useHandleInput,\n  useHandleCombobox,\n  useHandleCheckbox,\n  useHandleButtonGroup,\n} from \"../../../../../hooks/useHandleForm\";\n\nconst propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  selectedTab: PropTypes.string,\n  provider: PropTypes.string,\n  name: PropTypes.string,\n  accessKey: PropTypes.string,\n  secretAccessKey: PropTypes.string,\n  bucket: PropTypes.string,\n  region: PropTypes.string,\n  // eslint-disable-next-line react/require-default-props\n  s3AssumeRoleEnabled: PropTypes.string,\n  s3AssumeRoleArn: PropTypes.string,\n  s3AssumeRoleRefreshCredsInHour: PropTypes.string,\n  s3AssumeRoleExternalId: PropTypes.string,\n  serverSideEncryptionKmsKey: PropTypes.string,\n  serverSideEncryption: PropTypes.string,\n  s3CompatibleEndpoint: PropTypes.string,\n  storageAccountName: PropTypes.string,\n  containerName: PropTypes.string,\n  accountAccessKey: PropTypes.string,\n  googleProjectId: PropTypes.string,\n  googleBucketName: PropTypes.string,\n  googlePrivateKeyId: PropTypes.string,\n  googlePrivateKey: PropTypes.string,\n  googleClientEmail: PropTypes.string,\n};\n\nconst ProviderFactory = (props) => {\n  const { dispatch } = props;\n  const onBlur = useHandleInput(BASIC_CONFIG_SET_VALUE, dispatch);\n  const handleCombobox = useHandleCombobox(BASIC_CONFIG_SET_VALUE, dispatch);\n  const handleCheckbox = useHandleCheckbox(BASIC_CONFIG_SET_VALUE, dispatch);\n  const handleButtonGroup = useHandleButtonGroup(BASIC_CONFIG_SET_VALUE, dispatch);\n\n  switch (props.selectedTab) {\n    case CLOUD_STORAGE_PROVIDERS_AWS_S3:\n      return (\n        <AwsS3Storage\n          provider={props.provider}\n          name={props.name}\n          accessKeyName={props.accessKey}\n          secretAccessKey={props.secretAccessKey}\n          bucket={props.bucket}\n          region={props.region}\n          s3AssumeRoleEnabled={props.s3AssumeRoleEnabled}\n          s3AssumeRoleArn={props.s3AssumeRoleArn}\n          s3AssumeRoleExternalId={props.s3AssumeRoleExternalId}\n          s3AssumeRoleRefreshCredsInHour={props.s3AssumeRoleRefreshCredsInHour}\n          serverSideEncryptionKmsKey={props.serverSideEncryptionKmsKey}\n          serverSideEncryption={props.serverSideEncryption}\n          onBlur={onBlur}\n          handleButtonGroup={handleButtonGroup}\n          handleCheckbox={handleCheckbox}\n          handleCombobox={handleCombobox}\n        />\n      );\n    case CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE:\n      return (\n        <S3Compatible\n          s3CompatibleEndpoint={props.s3CompatibleEndpoint}\n          bucket={props.bucket}\n          region={props.region}\n          accessKeyName={props.accessKey}\n          secretAccessKey={props.secretAccessKey}\n          onBlur={onBlur}\n          handleCheckbox={handleCheckbox}\n          handleCombobox={handleCombobox}\n        />\n      );\n    case CLOUD_STORAGE_PROVIDERS_AZURE:\n      return (\n        <AzureBLOB\n          storageAccountName={props.storageAccountName}\n          containerName={props.containerName}\n          accountAccessKey={props.accountAccessKey}\n          onBlur={onBlur}\n        />\n      );\n    case CLOUD_STORAGE_PROVIDERS_GOOGLE_CLOUD_PLATFORM:\n      return (\n        <GoogleCloudPlatform\n          googleProjectId={props.googleProjectId}\n          googleBucketName={props.googleBucketName}\n          googlePrivateKeyId={props.googlePrivateKeyId}\n          googlePrivateKey={props.googlePrivateKey}\n          googleClientEmail={props.googleClientEmail}\n          onBlur={onBlur}\n        />\n      );\n    case CLOUD_STORAGE_PROVIDERS_MINIO:\n      return <MinIOStorage />;\n    default:\n      return null;\n  }\n};\n\nProviderFactory.propTypes = propTypes;\n\nProviderFactory.defaultProps = {\n  selectedTab: \"\",\n  provider: \"\",\n  name: \"\",\n  accessKey: \"\",\n  secretAccessKey: \"\",\n  bucket: \"\",\n  region: \"\",\n  s3AssumeRoleArn: \"\",\n  s3AssumeRoleRefreshCredsInHour: \"\",\n  s3AssumeRoleExternalId: \"\",\n  serverSideEncryptionKmsKey: \"\",\n  serverSideEncryption: \"\",\n  s3CompatibleEndpoint: \"\",\n  storageAccountName: \"\",\n  containerName: \"\",\n  accountAccessKey: \"\",\n  googleProjectId: \"\",\n  googleBucketName: \"\",\n  googlePrivateKeyId: \"\",\n  googlePrivateKey: \"\",\n  googleClientEmail: \"\",\n};\n\nexport default ProviderFactory;\n","import { useEffect } from \"react\";\n\nimport {\n  CLOUD_STORAGE_PROVIDERS_AWS_S3,\n  CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE,\n  CLOUD_STORAGE_PROVIDERS_AZURE,\n  CLOUD_STORAGE_PROVIDERS_GOOGLE_CLOUD_PLATFORM,\n  //  CLOUD_STORAGE_PROVIDERS_MINIO\n} from \"../../consts/configurations/cloudStorageProviders\";\nimport { useCloudStorageContext } from \"../../contexts/cloudStorageContext\";\nimport { useHandleButtonGroup } from \"../useHandleForm\";\nimport { QUICK_START_FORM_SET_PROVIDER } from \"../../consts/configurations/configurationsActions\";\nimport useSelectedProvider from \"./useSelectedProvider\";\n\nconst options = [\n  { label: \"AWS S3 Storage\", value: CLOUD_STORAGE_PROVIDERS_AWS_S3 },\n  { label: \"S3 Compatible\", value: CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE },\n  { label: \"Azure BLOB\", value: CLOUD_STORAGE_PROVIDERS_AZURE },\n  { label: \"Google Cloud Platform\", value: CLOUD_STORAGE_PROVIDERS_GOOGLE_CLOUD_PLATFORM },\n];\n\nconst useCloudStorageProviders = () => {\n  const [state, dispatch] = useCloudStorageContext();\n  const handleButtonGroup = useHandleButtonGroup(QUICK_START_FORM_SET_PROVIDER, dispatch);\n  const provider = useSelectedProvider(state);\n  const selectedTab = state.provider;\n\n  useEffect(() => {}, []);\n\n  return [\n    {\n      selectedTab,\n      provider,\n      options,\n    },\n    { handleButtonGroup, dispatch },\n  ];\n};\n\nexport default useCloudStorageProviders;\n","import React from \"react\";\n\nimport { ExpandableSection, Button } from \"@salesforce/design-system-react\";\nimport ProviderFactory from \"./ProviderFactory\";\nimport GRAXButtonGroup from \"../../../../commons/ButtonGroup\";\nimport useCloudStorageForm from \"../../../../../hooks/configuration/useCloudStorageForm\";\nimport VendorValidityMessage from \"../../../../commons/VendorValidityMessage\";\nimport useIndividualVendorValidity, {\n  useAutoDismissToast,\n} from \"../../../../../hooks/configuration/useIndividualVendorValidity\";\n\nconst CloudStorageForm = () => {\n  const [validation, validateVendor] = useIndividualVendorValidity();\n  const isOpen = useAutoDismissToast(validation);\n  const [\n    { selectedTab, provider, options },\n    { handleButtonGroup, dispatch },\n  ] = useCloudStorageForm();\n\n  const onValidation = () => {\n    const payload = {\n      type: \"storage\",\n      credentials: provider,\n    };\n\n    validateVendor(payload);\n  };\n\n  return (\n    <ExpandableSection\n      title=\"Cloud Storage Provider\"\n      className=\"slds-m-bottom_medium slds-m-top_none\"\n      nonCollapsible\n    >\n      {isOpen === true && <VendorValidityMessage variant=\"storage\" status={validation.status} />}\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_2-of-3\">\n          <GRAXButtonGroup\n            options={options}\n            value={selectedTab}\n            id=\"provider\"\n            onClick={handleButtonGroup}\n          />\n        </div>\n      </div>\n      <ProviderFactory selectedTab={selectedTab} {...provider} dispatch={dispatch} />\n      <div className=\"slds-grid slds-gutters_small slds-m-top_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <Button label=\"Validate Storage Connection\" onClick={onValidation} />\n        </div>\n      </div>\n    </ExpandableSection>\n  );\n};\n\nexport default CloudStorageForm;\n","import { DEFAULT_ENVIRONMENT_NAME } from \"./defaultEnvironmentName\";\n\nconst INITIAL_STATE = {\n  environments: {\n    [DEFAULT_ENVIRONMENT_NAME]: {\n      dataSources: [],\n      elastic: [],\n      storage: [],\n      metadataBackup: [],\n      syncAnalytics: [],\n      timeMachine: [{}],\n      pushToQueue: [{}],\n      oauth: [{}],\n      variables: {}\n    }\n  },\n  globalEnvironmentDefaults: {\n    asyncAttachmentProcessorOrganizationIds: [],\n    asyncBulkLoadOrganizationIds: [],\n    asyncQueueOrganizationIds: [],\n    syncSalesforceEinsteinOrganizationIds: [],\n    syncSalesforceSourceOrganizationIds: [],\n    metadataBackupOrganizationIds: [],\n    odataOrganizationIds: []\n  }\n};\n\nexport default INITIAL_STATE;\n","export const DEFAULT_ENVIRONMENT_NAME = \"Heroku Provided Configuration\";\n","import _ from \"lodash\";\n\nimport INITIAL_STATE from \"../consts/configurations/initialState\";\n\nclass CloudConfig {\n  constructor(configuration = {}) {\n    this.configuration = this.initializeConfiguration(configuration);\n  }\n\n  /**\n   * Initializes configuration, ensuring that configuration minimally has default values\n   * for globalEnvironmentDefaults and environment\n   *\n   * @param { Object } submittedConfiguration\n   * @returns { Object } resultant configuration\n   * @memberof CloudConfig\n   */\n  initializeConfiguration(submittedConfiguration) {\n    let initializedConfiguration = { ...submittedConfiguration };\n    if (\n      !initializedConfiguration.environments ||\n      Object.keys(initializedConfiguration.environments).length === 0\n    ) {\n      initializedConfiguration = {\n        ...initializedConfiguration,\n        environments: INITIAL_STATE.environments,\n      };\n    }\n\n    if (!initializedConfiguration.globalEnvironmentDefaults) {\n      initializedConfiguration = {\n        ...initializedConfiguration,\n        globalEnvironmentDefaults: INITIAL_STATE.globalEnvironmentDefaults,\n      };\n    }\n\n    return _.merge({}, initializedConfiguration);\n  }\n\n  get environment() {\n    const key = Object.keys(this.configuration.environments)[0];\n    return this.configuration.environments[key];\n  }\n\n  get globals() {\n    return this.configuration.globalEnvironmentDefaults;\n  }\n\n  get sessionCacheTimeoutMinutes() {\n    return this.globals.sessionCacheTimeoutMinutes;\n  }\n\n  set sessionCacheTimeoutMinutes(value) {\n    this.globals.sessionCacheTimeoutMinutes = value;\n  }\n\n  get asyncIntervalMinutes() {\n    return this.globals.asyncIntervalMinutes;\n  }\n\n  set asyncIntervalMinutes(value) {\n    this.globals.asyncIntervalMinutes = value;\n  }\n\n  get bulkRestoreDestinationDataSource() {\n    return this._findDataSourceByOrgId(this.globals.bulkRestoreDestinationOrganizationId);\n  }\n\n  get dataSources() {\n    return this.environment.dataSources;\n  }\n\n  get elastic() {\n    return this.environment.elastic[0];\n  }\n\n  /**\n   * Set elastic environment to provided array\n   * Accepts array containing new elastic configuration\n   *\n   * @param { Array } elasticConfig new elastic configuration\n   * @memberof CloudConfig\n   */\n  set elastic(elasticConfig) {\n    this.environment.elastic = [elasticConfig];\n  }\n\n  get metadataBackup() {\n    return this.environment.metadataBackup[0];\n  }\n\n  set metadataBackup(metadataBackup) {\n    this.environment.metadataBackup = metadataBackup;\n  }\n\n  /**\n   * Set metadata Backup environment to provided array\n   * Accepts array containing new elastic configuration\n   *\n   * @param { Array } elasticConfig new elastic configuration\n   * @memberof CloudConfig\n   */\n\n  get pushToQueue() {\n    return this.environment.pushToQueue[0];\n  }\n\n  set pushToQueue(pushToQueue) {\n    this.environment.pushToQueue = pushToQueue;\n  }\n\n  get sourceDataSource() {\n    return this._findDataSourceByOrgId(this.globals.asyncAttachmentProcessorOrganizationIds[0]);\n  }\n\n  get syncSalesforceEinsteinOrganizationId() {\n    return (this.globals.syncSalesforceEinsteinOrganizationIds || [])[0];\n  }\n\n  get syncSalesforceEinsteinDataSources() {\n    return (\n      (this.globals.syncSalesforceEinsteinOrganizationIds || []).map((id) =>\n        this._findDataSourceByOrgId(id)\n      )[0] || null\n    );\n  }\n\n  get storage() {\n    return this.environment.storage[0];\n  }\n\n  /**\n   * Set storage environment to provided array\n   * Accepts array containing new storage configuration\n   *\n   * @param { Array } storage new storage configuration\n   * @memberof CloudConfig\n   */\n  set storage(storageConfig) {\n    this.environment.storage = [storageConfig];\n  }\n\n  get oauth() {\n    return this.environment.oauth[0];\n  }\n\n  set oauth(oauth) {\n    if (oauth.enableOAuth === true) {\n      this.environment.oauth = [oauth];\n    } else {\n      this.environment.oauth = [{}];\n    }\n  }\n\n  get syncAnalytics() {\n    return this.environment.syncAnalytics[0];\n  }\n\n  /**\n   * Set syncAnalytics environment to provided array\n   * Accepts array containing new elastic configuration\n   *\n   * @param { Array } elasticConfig new elastic configuration\n   * @memberof CloudConfig\n   */\n\n  set syncAnalytics({ isEinsteinAnalyticsEnabled, isMarketingCloudEnabled, ...syncAnalytics }) {\n    let syncAnalyticsResult = { ...syncAnalytics };\n    if (isEinsteinAnalyticsEnabled === undefined || isEinsteinAnalyticsEnabled === false) {\n      const {\n        syncEinsteinAnalyticsDatasetName,\n        syncSalesforceObjects,\n        ...omittedEinsteinAnalytics\n      } = syncAnalytics;\n\n      const orgId = this.syncSalesforceEinsteinOrganizationId;\n      if (orgId !== undefined)\n        this._removeOrgIdFromGlobals(orgId, [\"syncSalesforceEinsteinOrganizationIds\"]);\n\n      syncAnalyticsResult = omittedEinsteinAnalytics;\n    }\n\n    if (isMarketingCloudEnabled === false) {\n      const {\n        marketingCloudHost,\n        marketingCloudUser,\n        marketingCloudPassword,\n        marketingCloudPort,\n        ...omittedMMC\n      } = syncAnalytics;\n      syncAnalyticsResult = omittedMMC;\n    }\n\n    this.environment.syncAnalytics = [syncAnalyticsResult];\n  }\n\n  get timeMachine() {\n    return this.environment.timeMachine[0];\n  }\n\n  set timeMachine(timeMachine) {\n    this.environment.timeMachine = [timeMachine];\n  }\n\n  get variables() {\n    return this.environment.variables;\n  }\n\n  /**\n   * Set variables environment to provided array\n   * Accepts array containing new elastic configuration\n   *\n   * @param { Array } elasticConfig new elastic configuration\n   * @memberof CloudConfig\n   */\n\n  set variables(variables) {\n    this.environment.variables = variables;\n  }\n\n  /**\n   * Adds a new data source to data sources array\n   *\n   * @param { Object } newDataSource\n   * @memberof CloudConfig\n   */\n  set dataSources(newDataSource) {\n    this.environment.dataSources = newDataSource;\n  }\n\n  /**\n   * Finds data source for provided org id\n   *\n   * @param { String } orgId\n   * @returns { Object } data source or null\n   * @memberof CloudConfig\n   */\n  _findDataSourceByOrgId(orgId) {\n    const dataSources = this.environment.dataSources.filter(\n      (dataSource) => dataSource.organizationId === orgId\n    );\n    return dataSources.length === 0 ? null : dataSources[0];\n  }\n\n  /**\n   * Removes organization ID from specified global defaults\n   *\n   * @param { String } orgId\n   * @param { Array } globals\n   * @memberof CloudConfig\n   */\n  _removeOrgIdFromGlobals(orgId, globals) {\n    globals.forEach((key) => {\n      if (key.endsWith(\"Ids\")) {\n        const index = this.globals[key].indexOf(orgId);\n        if (index !== -1) this.globals[key].splice(index, 1);\n      } else if (key.endsWith(\"Id\")) {\n        if (this.globals[key] === orgId) delete this.globals[key];\n      }\n    });\n  }\n}\n\nexport default CloudConfig;\n","import { useEffect } from \"react\";\n\nimport useInteractiveFetchStatus, { useToggleSpinner } from \"../useInteractiveFetchStatus\";\nimport { CONFIGURATION_RELOAD_STATE } from \"../../consts/configurations/configurationsActions\";\nimport VENDOR_DISPLAY_NAME_MAPPING from \"../../consts/configurations/vendorDisplayNameMapping\";\nimport { useSaveConfiguration } from \"./useConfigurationFetch\";\nimport useCloudRoutes from \"../useCloudRoutes\";\n\nconst SCHEMA_PATH_METADATA_BACKUP = \"#/definitions/metadataBackup\";\n\nconst mapVendorsAndSchemaMessage = ({ invalidCredentials = {}, schemaValidationErrors = [] }) => {\n  const vendorList = Object.keys(invalidCredentials);\n\n  if (vendorList.length > 0) {\n    if (invalidCredentials.sourceDataSource === \"invalidOrganizationId\") {\n      return \"You cannot enter SFDC credentials for a SFDC org different than the org you are currently in\";\n    }\n    return `Invalid Credentials: ${vendorList\n      .map((vendor) => VENDOR_DISPLAY_NAME_MAPPING[vendor])\n      .join(\", \")}`;\n  }\n\n  if (schemaValidationErrors.length > 0) {\n    const schemaErrors = schemaValidationErrors[0];\n    for (const i in schemaErrors) {\n      if (Object.hasOwnProperty.call(schemaErrors, i)) {\n        if (schemaErrors[i].schemaPath === undefined)\n          return `Invalid credentials: Salesforce connections must have a unique name`;\n        if (schemaErrors[i].schemaPath.includes(SCHEMA_PATH_METADATA_BACKUP))\n          return `Invalid credentials: Git Integration`;\n\n        return schemaErrors[i].message;\n      }\n    }\n  }\n\n  return \"Unknown error saving configuration\";\n};\n\nconst useValidateAndSaveConfiguration = (reloadConfigurationState) => {\n  const [{ isLoading, error, data, success }, saveConfiguration] = useSaveConfiguration();\n  const [, { successNotification, errorNotification }] = useInteractiveFetchStatus();\n  const { goToSummary } = useCloudRoutes();\n  useToggleSpinner(isLoading);\n\n  useEffect(() => {\n    if (success === false) errorNotification(mapVendorsAndSchemaMessage(error));\n  }, [error, success]);\n\n  useEffect(() => {\n    if (success === true) {\n      successNotification(\"Configuration saved successfully\");\n      reloadConfigurationState({ type: CONFIGURATION_RELOAD_STATE, payload: data.configuration });\n      goToSummary();\n    }\n  }, [data, success]);\n\n  return saveConfiguration;\n};\n\nexport default useValidateAndSaveConfiguration;\n","import _ from \"lodash\";\n\nimport { isAnExistingConfiguration, omitEmptyProps, getFirstEnvironment } from \".\";\n\nimport {\n  PUSHTOQUEUE_PROVIDER_APIGEE,\n  PUSHTOQUEUE_PROVIDER_KAFKA,\n} from \"../advancedConfiguration/environmentVariables/consts\";\nimport { METADABACKUP_GITPROVIDER_GITLAB } from \"../advancedConfiguration/metadataBackupSettings/consts\";\nimport { isOAuthCredential } from \"../salesforceConnection/utils\";\n\nexport const preValidateDataSourcesSchema = (dataSources) => {\n  if (_.isArray(dataSources)) {\n    return dataSources\n      .map((dataSource) => {\n        if (isOAuthCredential(dataSource)) {\n          const { provider, ...credential } = dataSource;\n          return omitEmptyProps(credential);\n        }\n\n        return omitEmptyProps(dataSource);\n      })\n      .filter((dataSource) => {\n        if (_.isPlainObject(dataSource)) {\n          const { type, provider, organizationId, name, ...mandatoryProps } = dataSource;\n          return Object.keys(mandatoryProps).length > 0;\n        }\n\n        return false;\n      });\n  }\n\n  return [];\n};\n\nconst preValidateMetadataBackupSchema = (metadataBackup) => {\n  const { isEnabled, sourceControlEnabled, sourceControlProvider } = metadataBackup;\n  let schema;\n\n  if (!isEnabled || !sourceControlEnabled) {\n    schema = { isEnabled: !!isEnabled, sourceControlEnabled: false };\n  } else if (sourceControlProvider === METADABACKUP_GITPROVIDER_GITLAB) {\n    const { gitUserId, ...omittedGitUserId } = metadataBackup;\n    schema = omittedGitUserId;\n  } else {\n    schema = metadataBackup;\n  }\n\n  return schema;\n};\n\nconst preValidatePushToQueueSchema = (pushToQueue) => {\n  let schema = {};\n\n  if (pushToQueue.provider === PUSHTOQUEUE_PROVIDER_KAFKA) {\n    const { provider, authorizationToken, apiEndpoint } = pushToQueue;\n    schema = { provider, authorizationToken, apiEndpoint };\n  } else if (pushToQueue.provider === PUSHTOQUEUE_PROVIDER_APIGEE) {\n    const { provider, apiClientId, apiEndpoint, apiClientSecret } = pushToQueue;\n    schema = { provider, apiClientId, apiEndpoint, apiClientSecret };\n  }\n\n  return schema;\n};\n\nexport const preValidateVariablesSchema = (variables) => {\n  let schema = variables;\n\n  if (variables.cdcEnabled !== undefined) {\n    schema = {\n      ...schema,\n      cdcEnabled: variables.cdcEnabled.toString(),\n    };\n  }\n\n  return schema;\n};\n\nexport const preValidatesyncAnalyticsSchema = ({\n  isEinsteinAnalyticsEnabled,\n  isMarketingCloudEnabled,\n  ...syncAnalytics\n}) => {\n  let schema = { ...syncAnalytics };\n  if (isEinsteinAnalyticsEnabled === undefined || isEinsteinAnalyticsEnabled === false) {\n    const {\n      syncEinsteinAnalyticsDatasetName,\n      syncSalesforceObjects,\n      ...omittedEinsteinAnalytics\n    } = syncAnalytics;\n\n    schema = omittedEinsteinAnalytics;\n  }\n\n  if (isMarketingCloudEnabled === false) {\n    const {\n      marketingCloudHost,\n      marketingCloudUser,\n      marketingCloudPassword,\n      marketingCloudPort,\n      ...omittedMMC\n    } = syncAnalytics;\n    schema = omittedMMC;\n  }\n\n  return schema;\n};\n\nconst environmentSchemas = {\n  storage: (schema) => schema,\n  oauth: (schema) => schema,\n  elastic: (schema) => schema,\n  timeMachine: (schema) => schema,\n  asyncIntervalMinutes: (schema) => schema,\n  sessionCacheTimeoutMinutes: (schema) => schema,\n  syncAnalytics: preValidatesyncAnalyticsSchema,\n  dataSources: preValidateDataSourcesSchema,\n  metadataBackup: preValidateMetadataBackupSchema,\n  pushToQueue: preValidatePushToQueueSchema,\n  variables: preValidateVariablesSchema,\n};\n\nexport const environmentProxy = (environment, isSingleEnvironment = true) => {\n  let target = {};\n\n  if (isAnExistingConfiguration(environment)) {\n    target = _.cloneDeep(getFirstEnvironment(environment));\n  }\n\n  return new Proxy(target, {\n    get(obj, prop) {\n      if (prop in obj) {\n        if (prop === \"dataSources\" || _.isPlainObject(obj[prop]) === true) {\n          return obj[prop];\n        }\n        if (Array.isArray(obj[prop]) === true) {\n          return isSingleEnvironment === true ? obj[prop][0] : [obj[prop][0]];\n        }\n      }\n\n      return null;\n    },\n    set(obj, prop, value) {\n      if (environmentSchemas[prop]) {\n        const newValue = omitEmptyProps(environmentSchemas[prop](value));\n        // eslint-disable-next-line no-param-reassign\n        obj[prop] = prop === \"variables\" || prop === \"dataSources\" ? newValue : [newValue];\n        return true;\n      }\n\n      throw Error(`${prop} is not an existing configuration's node`);\n    },\n  });\n};\n\nconst globalEnvironmentDefaultsKeys = [\n  \"asyncAttachmentProcessorOrganizationIds\",\n  \"asyncBulkLoadOrganizationIds\",\n  \"asyncQueueOrganizationIds\",\n  \"bulkRestoreDestinationOrganizationId\",\n  \"bulkRestoreSourceOrganizationId\",\n  \"syncSalesforceEinsteinOrganizationIds\",\n  \"syncSalesforceSourceOrganizationIds\",\n  \"metadataBackupOrganizationIds\",\n  \"odataOrganizationIds\",\n  \"asyncIntervalMinutes\",\n  \"sessionCacheTimeoutMinutes\",\n  \"configRetrievalIntervalMinutes\",\n];\n\nexport const globalEnvironmentDefaultsProxy = (configuration, isSingleEnvironment = true) => {\n  const target = isAnExistingConfiguration(configuration)\n    ? _.cloneDeep(configuration.globalEnvironmentDefaults)\n    : {};\n\n  const isValidGlobalDefault = (gDefault) =>\n    _.isString(gDefault) || _.isNumber(gDefault) || _.isBoolean(gDefault);\n\n  return new Proxy(target, {\n    get(obj, prop) {\n      if (!globalEnvironmentDefaultsKeys.includes(prop)) {\n        throw Error(`${prop} is not a valid global default key`);\n      }\n\n      if (prop === \"raw\") {\n        return { globalEnvironmentDefaults: omitEmptyProps(target) };\n      }\n\n      if (prop in obj) {\n        if (prop.endsWith(\"Ids\") && isSingleEnvironment === true) {\n          return obj[prop][0] || null;\n        }\n        return obj[prop];\n      }\n\n      return null;\n    },\n    set(obj, prop, value) {\n      if (!globalEnvironmentDefaultsKeys.includes(prop)) {\n        throw Error(`${prop} is not a valid global default key`);\n      }\n\n      if (prop.endsWith(\"Ids\")) {\n        if (!_.isArray(value)) {\n          throw Error(`${prop} should be a collection of 1 more more keys`);\n        }\n        if (value.length > 0 && value.filter((gGlobal) => !_.isString(gGlobal)).length > 0) {\n          throw Error(`${value} is not a valid global default value for ${prop}`);\n        }\n      } else if (!isValidGlobalDefault(value)) {\n        throw Error(`${value} is not a valid global default value for ${prop}`);\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      obj[prop] = value;\n\n      return true;\n    },\n  });\n};\n","import CloudConfig from \"../../models/CloudConfig\";\nimport { useConfigurationsContext } from \"../../contexts/configurationsContext\";\nimport { useElasticsearchContext } from \"../../contexts/elasticsearchContext\";\nimport { useCloudStorageContext } from \"../../contexts/cloudStorageContext\";\nimport useValidateAndSaveConfiguration from \"./useValidateAndSaveConfiguration\";\nimport useSelectedProvider from \"./useSelectedProvider\";\nimport { useOAuthContext } from \"../../contexts/oauthContext\";\nimport {\n  CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE,\n  CLOUD_STORAGE_PROVIDERS_AWS_S3,\n} from \"../../consts/configurations/cloudStorageProviders\";\nimport { useSalesforceConnectionContext } from \"../../components/cloud/configuration/salesforceConnection/context\";\nimport { SALESFORCE_DATASOURCES_SOURCE } from \"../../components/cloud/configuration/salesforceConnection/consts\";\nimport { SERVER_SIDE_ENCRYPTIONS_AWS_KMS } from \"../../consts/configurations/serverSideEncryptions\";\nimport {\n  findEinsteinDestination,\n  findBulkRestoreDestination,\n} from \"../../components/cloud/configuration/utils\";\nimport {\n  globalEnvironmentDefaultsProxy,\n  preValidateDataSourcesSchema,\n} from \"../../components/cloud/configuration/utils/configurationProxy\";\n\nconst omitEmptyProps = (obj) => {\n  if (obj !== null && typeof obj === \"object\") {\n    return Object.entries(obj).reduce((accumulator, [key, value]) => {\n      const omittedEmptyProps = { ...accumulator };\n      if (value !== \"\" && value !== undefined && value !== null) {\n        omittedEmptyProps[key] = obj[key];\n      }\n      return omittedEmptyProps;\n    }, {});\n  }\n\n  return obj;\n};\n\nconst useSaveBasicConfiguration = () => {\n  const [configuration, configurationDispatch] = useConfigurationsContext();\n  const [dataSourcesState] = useSalesforceConnectionContext();\n  const [elasticState] = useElasticsearchContext();\n  const [storageState] = useCloudStorageContext();\n  const [oauthState] = useOAuthContext();\n  const sourceDataSource = useSelectedProvider(dataSourcesState[SALESFORCE_DATASOURCES_SOURCE]);\n\n  const elastic = useSelectedProvider(elasticState);\n  const storage = useSelectedProvider(storageState);\n  const saveConfiguration = useValidateAndSaveConfiguration(configurationDispatch);\n\n  return () => {\n    const cloudConfig = new CloudConfig(configuration);\n    const globals = globalEnvironmentDefaultsProxy(configuration);\n\n    const dataSources = [];\n    dataSources.push(sourceDataSource);\n    dataSources.push(\n      findBulkRestoreDestination(\n        cloudConfig.dataSources,\n        globals.bulkRestoreDestinationOrganizationId\n      )\n    );\n    dataSources.push(\n      findEinsteinDestination(\n        cloudConfig.dataSources,\n        globals.syncSalesforceEinsteinOrganizationIds\n      )\n    );\n\n    cloudConfig.dataSources = preValidateDataSourcesSchema(dataSources);\n    cloudConfig.elastic = omitEmptyProps(elastic);\n    cloudConfig.storage = {\n      ...storage,\n      serverSideEncryptionKmsKey:\n        storage.serverSideEncryption === SERVER_SIDE_ENCRYPTIONS_AWS_KMS\n          ? storage.serverSideEncryptionKmsKey\n          : undefined,\n      provider:\n        storage.provider === CLOUD_STORAGE_PROVIDERS_S3_COMPATIBLE\n          ? CLOUD_STORAGE_PROVIDERS_AWS_S3\n          : storage.provider,\n    };\n    cloudConfig.oauth = oauthState;\n\n    saveConfiguration(cloudConfig.configuration);\n  };\n};\n\nexport default useSaveBasicConfiguration;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"@salesforce/design-system-react\";\n\nimport useCloudRoutes from \"../../../hooks/useCloudRoutes\";\n\nconst propTypes = {\n  // eslint-disable-next-line react/require-default-props\n  formRef: PropTypes.shape({ current: PropTypes.object }),\n  onSubmit: PropTypes.func.isRequired,\n  isAnExistingConfig: PropTypes.bool.isRequired\n};\n\nconst HeaderButtons = ({ isAnExistingConfig, formRef, onSubmit }) => {\n  const { goToStartProvisioning, goToSummary } = useCloudRoutes();\n  const goBack = () => (isAnExistingConfig === true ? goToSummary : goToStartProvisioning)();\n\n  const handleSubmit = () => {\n    if (formRef !== undefined) {\n      if (formRef.current.checkValidity() === true) onSubmit();\n    } else {\n      onSubmit();\n    }\n  };\n\n  return (\n    <div className=\"slds-grid slds-m-bottom_medium\" style={{ justifyContent: \"flex-end\" }}>\n      <Button\n        className=\"slds-m-right_x-small\"\n        label=\"Save\"\n        variant=\"brand\"\n        type={formRef !== undefined ? \"submit\" : \"button\"}\n        onClick={handleSubmit}\n      />\n      <Button label=\"Cancel\" onClick={goBack} />\n    </div>\n  );\n};\n\nHeaderButtons.propTypes = propTypes;\n\nexport default HeaderButtons;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useSaveBasicConfiguration from \"../../../../hooks/configuration/useSaveBasicConfiguration\";\nimport HeaderButtons from \"../HeaderButtons\";\n\nconst propTypes = {\n  formRef: PropTypes.shape({ current: PropTypes.object }).isRequired,\n  isAnExistingConfig: PropTypes.bool.isRequired\n};\n\nconst HeaderActions = ({ isAnExistingConfig, formRef }) => {\n  const onSubmit = useSaveBasicConfiguration();\n\n  return (\n    <HeaderButtons isAnExistingConfig={isAnExistingConfig} formRef={formRef} onSubmit={onSubmit} />\n  );\n};\n\nHeaderActions.propTypes = propTypes;\nexport default HeaderActions;\n","import { createRef } from \"react\";\n\nimport { useConfigurationsContext } from \"../../contexts/configurationsContext\";\nimport CloudConfig from \"../../models/CloudConfig\";\nimport { isAnExistingConfiguration } from \"../../components/cloud/configuration/utils\";\nimport { globalEnvironmentDefaultsProxy } from \"../../components/cloud/configuration/utils/configurationProxy\";\n\nconst useBasicConfiguration = () => {\n  const state = useConfigurationsContext()[0];\n  const formRef = createRef();\n\n  const isAnExistingConfig = isAnExistingConfiguration(state);\n  const cloudConfig = new CloudConfig(state);\n  const globals = globalEnvironmentDefaultsProxy(state);\n\n  const { dataSources, elastic, storage, oauth, hashKey } = cloudConfig;\n\n  return [{ dataSources, elastic, storage, oauth, formRef, hashKey, isAnExistingConfig, globals }];\n};\n\nexport default useBasicConfiguration;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ExpandableSection } from \"@salesforce/design-system-react\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport { useHandleInput, useHandleCheckbox } from \"../../../../../hooks/useHandleForm\";\nimport { ADVANCED_CONFIG_SET_VALUE } from \"../../../../../consts/configurations/configurationsActions\";\nimport { useOAuthContext } from \"../../../../../contexts/oauthContext\";\nimport StatefulCheckbox from \"../../../../commons/StatefulCheckbox\";\n\nconst propTypes = {\n  clientId: PropTypes.string,\n  tokenUrl: PropTypes.string,\n  clientSecret: PropTypes.string,\n};\n\nconst defaultProps = {\n  clientId: \"\",\n  tokenUrl: \"\",\n  clientSecret: \"\",\n};\n\nconst EnableOAuth = () => {\n  const [{ enableOAuth, clientId, tokenUrl, clientSecret }, dispatch] = useOAuthContext();\n  const handleCheckbox = useHandleCheckbox(ADVANCED_CONFIG_SET_VALUE, dispatch);\n  const onBlur = useHandleInput(ADVANCED_CONFIG_SET_VALUE, dispatch);\n\n  return (\n    <ExpandableSection title=\"GRAX OAuth\" className=\"slds-m-bottom_medium slds-m-top_none\">\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulCheckbox\n            label=\"Enable OAuth\"\n            helpText=\"Enable to configure OAuth on the data lake side (e.g. gateway setups).\n            If you want to enable Salesforce OAuth, that must be done in the above Salesforce section\"\n            checked={enableOAuth}\n            id=\"enableOAuth\"\n            variant=\"toggle\"\n            onToggle={handleCheckbox}\n          />\n        </div>\n      </div>\n      {enableOAuth === true && (\n        <div className=\"slds-grid slds-gutters_small\">\n          <div className=\"slds-col slds-size_1-of-3\">\n            <StatefulInput\n              label=\"OAuth Client ID\"\n              value={clientId}\n              id=\"clientId\"\n              onBlur={onBlur}\n              required={true}\n            />\n          </div>\n          <div className=\"slds-col slds-size_1-of-3\">\n            <StatefulInput\n              label=\"OAuth Client Secret\"\n              value={clientSecret}\n              id=\"clientSecret\"\n              onBlur={onBlur}\n              required={true}\n            />\n          </div>\n          <div className=\"slds-col slds-size_1-of-3\">\n            <StatefulInput\n              label=\"OAuth Token URL\"\n              value={tokenUrl}\n              id=\"tokenUrl\"\n              onBlur={onBlur}\n              required={true}\n            />\n          </div>\n        </div>\n      )}\n    </ExpandableSection>\n  );\n};\n\nEnableOAuth.propTypes = propTypes;\nEnableOAuth.defaultProps = defaultProps;\n\nexport default EnableOAuth;\n","import React from \"react\";\n\nimport { ElasticsearchProvider } from \"../../../../contexts/elasticsearchContext\";\nimport { CloudStorageProvider } from \"../../../../contexts/cloudStorageContext\";\nimport { OAuthProvider } from \"../../../../contexts/oauthContext\";\nimport ConfigurationNotice from \"../../../commons/ConfigurationNotice\";\nimport SalesforceOrigin from \"./SalesforceOrigin\";\nimport ElasticSearchForm from \"./elasticsearchForm\";\nimport CloudStorageForm from \"./cloudStorageForm\";\nimport HeaderActions from \"./HeaderActions\";\nimport useBasicConfiguration from \"../../../../hooks/configuration/useBasicConfiguration\";\nimport { SalesforceConnectionProvider } from \"../salesforceConnection/context\";\nimport EnableOAuth from \"./cloudStorageForm/EnableOAuth\";\n\nconst warningText = `Ensure you have the correct credentials for ALL sections before beginning.\n        Upon saving the page, a test will be made to verify each connection.\n        You will not be able to save until all connections are validated.`;\n\nconst BasicCredentialsForm = () => {\n  const [\n    { dataSources, elastic, storage, oauth, formRef, isAnExistingConfig, globals },\n  ] = useBasicConfiguration();\n\n  return (\n    <SalesforceConnectionProvider value={{ dataSources, globals }}>\n      <ElasticsearchProvider value={elastic}>\n        <CloudStorageProvider value={{ ...storage }}>\n          <OAuthProvider value={oauth}>\n            <form ref={formRef} onSubmit={(e) => e.preventDefault()}>\n              <ConfigurationNotice text={warningText} />\n              <HeaderActions isAnExistingConfig={isAnExistingConfig} formRef={formRef} />\n              <SalesforceOrigin />\n              <ElasticSearchForm />\n              <CloudStorageForm />\n              <EnableOAuth />\n            </form>\n          </OAuthProvider>\n        </CloudStorageProvider>\n      </ElasticsearchProvider>\n    </SalesforceConnectionProvider>\n  );\n};\n\nexport default BasicCredentialsForm;\n","import { createContext } from \"react\";\n\nimport { useStateContext, useDispatchContext } from \"../hooks/configuration/useContextProvider\";\nimport { withAdvancedConfigProvider } from \"./contextProviders\";\nimport { SALESFORCE_GIT_INTEGRATION_GITHUB } from \"../consts/configurations/sfdcGitIntegration\";\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useMetadataBackupContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext)\n];\nconst initialState = {\n  isEnabled: false,\n  sourceControlEnabled: false,\n  sourceControlProvider: SALESFORCE_GIT_INTEGRATION_GITHUB\n};\n\nexport const MetadataBackupProvider = withAdvancedConfigProvider(\n  stateContext,\n  dispatchContext,\n  initialState\n);\n","export const SALESFORCE_GIT_INTEGRATION_GITHUB = \"github\";\nexport const SALESFORCE_GIT_INTEGRATION_GITLAB = \"gitlab\";\n","import {\n  ENVIRONMENT_VARIABLE_SET_VARS,\n  ENVIRONMENT_VARIABLE_SET_TIME_MACHINE,\n  ENVIRONMENT_VARIABLE_SET_PUSH_TO_QUEUE\n} from \"../../consts/configurations/configurationsActions\";\nimport advancedConfigReducer from \"./advancedConfigReducer\";\n\nconst environmentVariablesReducer = (state, { payload, type }) => {\n  switch (type) {\n    case ENVIRONMENT_VARIABLE_SET_VARS:\n      return { ...state, variables: { ...state.variables, ...payload } };\n    case ENVIRONMENT_VARIABLE_SET_TIME_MACHINE:\n      return { ...state, timeMachine: { ...state.timeMachine, ...payload } };\n    case ENVIRONMENT_VARIABLE_SET_PUSH_TO_QUEUE:\n      return { ...state, pushToQueue: { ...state.pushToQueue, ...payload } };\n    default:\n      return advancedConfigReducer(state, { payload, type });\n  }\n};\n\nexport default environmentVariablesReducer;\n","import { createContext } from 'react';\n\nimport { useDispatchContext, useStateContext } from '../hooks/configuration/useContextProvider';\nimport environmentVariablesReducer from '../reducers/configurations/environmentVariablesReducer';\nimport { withAdvancedConfigProvider } from './contextProviders';\n\nconst initialState = {\n  variables: {},\n  timeMachine: {},\n  pushToQueue: {},\n  asyncIntervalMinutes: \"10\",\n  sessionCacheTimeoutMinutes: \"15\"\n};\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useEnvironmentVariablesContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext)\n];\n\nexport const EnvironmentVariablesProvider = withAdvancedConfigProvider(\n  stateContext,\n  dispatchContext,\n  initialState,\n  environmentVariablesReducer\n);\n","import { createContext } from \"react\";\n\nimport { useStateContext, useDispatchContext } from \"../hooks/configuration/useContextProvider\";\nimport { withAdvancedConfigProvider } from \"./contextProviders\";\n\nconst stateContext = createContext();\nconst dispatchContext = createContext();\n\nexport const useSyncAnalyticsContext = () => [\n  useStateContext(stateContext),\n  useDispatchContext(dispatchContext)\n];\n\nexport const SyncAnalyticsProvider = withAdvancedConfigProvider(stateContext, dispatchContext);\n","import {\n  SALESFORCE_GIT_INTEGRATION_GITHUB,\n  SALESFORCE_GIT_INTEGRATION_GITLAB\n} from \"../../consts/configurations/sfdcGitIntegration\";\n\nconst options = [\n  { label: \"Github\", value: SALESFORCE_GIT_INTEGRATION_GITHUB },\n  { label: \"GitLab\", value: SALESFORCE_GIT_INTEGRATION_GITLAB }\n];\n\nconst useGitIntegration = dispatch => {\n  return [{ options }];\n};\n\nexport default useGitIntegration;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  SALESFORCE_GIT_INTEGRATION_GITHUB,\n  SALESFORCE_GIT_INTEGRATION_GITLAB\n} from \"../../../../../consts/configurations/sfdcGitIntegration\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport GRAXButtonGroup from \"../../../../commons/ButtonGroup\";\nimport useGitIntegration from \"../../../../../hooks/configuration/useGitIntegration\";\n\nconst propTypes = {\n  sourceControlProvider: PropTypes.oneOf([\n    SALESFORCE_GIT_INTEGRATION_GITHUB,\n    SALESFORCE_GIT_INTEGRATION_GITLAB\n  ]).isRequired,\n  gitRepositoryName: PropTypes.string.isRequired,\n  gitRepoAuthorizationToken: PropTypes.string.isRequired,\n  gitUserId: PropTypes.string.isRequired,\n  handleButtonGroup: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired\n};\n\nconst GitIntegration = ({\n  sourceControlProvider,\n  gitRepositoryName,\n  gitRepoAuthorizationToken,\n  gitUserId,\n  handleButtonGroup,\n  onBlur\n}) => {\n  const [{ options }] = useGitIntegration();\n\n  return (\n    <Fragment>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <GRAXButtonGroup\n            options={options}\n            value={sourceControlProvider}\n            id=\"sourceControlProvider\"\n            onClick={handleButtonGroup}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Git Repository Name\"\n            required\n            value={gitRepositoryName}\n            id=\"gitRepositoryName\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Git Repository Authorization Token\"\n            helpText=\"In Github you should be able to find by navigating to:\n            user>settings>developer settings>personal access token>generate token\"\n            required\n            secured\n            value={gitRepoAuthorizationToken}\n            id=\"gitRepoAuthorizationToken\"\n            onBlur={onBlur}\n          />\n        </div>\n        {sourceControlProvider === SALESFORCE_GIT_INTEGRATION_GITHUB && (\n          <div className=\"slds-col slds-size_1-of-3\">\n            <StatefulInput\n              label=\"Git User ID\"\n              required\n              value={gitUserId}\n              id=\"gitUserId\"\n              onBlur={onBlur}\n            />\n          </div>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nGitIntegration.propTypes = propTypes;\n\nexport default GitIntegration;\n","import React from \"react\";\n\nimport { ExpandableSection } from \"@salesforce/design-system-react\";\n\nimport { ADVANCED_CONFIG_SET_VALUE } from \"../../../../../consts/configurations/configurationsActions\";\nimport GitIntegration from \"./GitIntegration\";\nimport { useMetadataBackupContext } from \"../../../../../contexts/metadataBackupContext\";\nimport StatefulCheckbox from \"../../../../commons/StatefulCheckbox\";\nimport {\n  useHandleInput,\n  useHandleCheckbox,\n  useHandleButtonGroup\n} from \"../../../../../hooks/useHandleForm\";\n\nconst MetadataBackupSettings = () => {\n  const [state, dispatch] = useMetadataBackupContext();\n  const onBlur = useHandleInput(ADVANCED_CONFIG_SET_VALUE, dispatch);\n  const handleButtonGroup = useHandleButtonGroup(ADVANCED_CONFIG_SET_VALUE, dispatch);\n  const handleCheckbox = useHandleCheckbox(ADVANCED_CONFIG_SET_VALUE, dispatch);\n\n  const {\n    isEnabled,\n    sourceControlEnabled,\n    sourceControlProvider,\n    gitRepositoryName,\n    gitRepoAuthorizationToken,\n    gitUserId\n  } = state;\n\n  return (\n    <ExpandableSection\n      title=\"Metadata Backup Settings\"\n      className=\"slds-m-bottom_medium slds-m-top_none\"\n    >\n      <div className=\"slds-grid slds-gutters_small slds-m-bottom_x-small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulCheckbox\n            label=\"Enable Metadata Backup\"\n            helpText=\"By default, metadata will always be backed up to the configured cloud storage provider.\"\n            id=\"isEnabled\"\n            checked={isEnabled}\n            isDestructive\n            onToggle={handleCheckbox}\n          />\n        </div>\n        {isEnabled === true && (\n          <div className=\"slds-col slds-size_1-of-3\">\n            <StatefulCheckbox\n              label=\"Enable Git Integration\"\n              id=\"sourceControlEnabled\"\n              checked={sourceControlEnabled}\n              isDestructive\n              variant=\"toggle\"\n              onToggle={handleCheckbox}\n            />\n          </div>\n        )}\n      </div>\n      {isEnabled === true && sourceControlEnabled === true && (\n        <GitIntegration\n          gitRepositoryName={gitRepositoryName}\n          gitRepoAuthorizationToken={gitRepoAuthorizationToken}\n          gitUserId={gitUserId}\n          sourceControlProvider={sourceControlProvider}\n          handleButtonGroup={handleButtonGroup}\n          onBlur={onBlur}\n        />\n      )}\n    </ExpandableSection>\n  );\n};\nexport default MetadataBackupSettings;\n","import React, { Fragment } from \"react\";\nimport Subsection from \"../../Subsection\";\nimport SalesforceConnection from \"../../salesforceConnection\";\n\nconst EinsteinSalesforceDestination = () => {\n  return (\n    <Fragment>\n      <Subsection heading=\"Einstein Salesforce Destination\" />\n      <div className=\" slds-m-top_x-small\">\n        <SalesforceConnection showConnectionName variant=\"syncSalesforceEinstein\" />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default EinsteinSalesforceDestination;\n","import React, { Fragment } from \"react\";\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport Subsection from \"../../Subsection\";\n\nconst MarketingCloudSettings = ({\n  marketingCloudHost,\n  marketingCloudUser,\n  marketingCloudPassword,\n  marketingCloudPort,\n  onBlur\n}) => {\n  return (\n    <Fragment>\n      <Subsection heading=\"Marketing Cloud Settings\" />\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Marketing Cloud Host (FTP)\"\n            required\n            value={marketingCloudHost}\n            id=\"marketingCloudHost\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Marketing Cloud Username (FTP)\"\n            required\n            value={marketingCloudUser}\n            id=\"marketingCloudUser\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Marketing Cloud Password (FTP)\"\n            required\n            secured\n            value={marketingCloudPassword}\n            id=\"marketingCloudPassword\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Marketing Cloud Port (FTP)\"\n            type=\"number\"\n            required\n            value={marketingCloudPort}\n            id=\"marketingCloudPort\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default MarketingCloudSettings;\n","import { useEffect } from \"react\";\n\nimport { ADVANCED_CONFIG_SET_VALUE } from \"../../consts/configurations/configurationsActions\";\n\nimport { useSyncAnalyticsContext } from \"../../contexts/syncAnalyticsContext\";\nimport { useHandleInput, useHandleCheckbox, useFormDispatch } from \"../useHandleForm\";\n\nconst useSyncAnalytics = syncSalesforceEinsteinOrganizationId => {\n  const [state, dispatch] = useSyncAnalyticsContext();\n  const onBlur = useHandleInput(ADVANCED_CONFIG_SET_VALUE, dispatch);\n  const handleCheckbox = useHandleCheckbox(ADVANCED_CONFIG_SET_VALUE, dispatch);\n  const enableGlobalDeault = useFormDispatch(ADVANCED_CONFIG_SET_VALUE, dispatch);\n\n  const {\n    marketingCloudHost,\n    marketingCloudUser,\n    marketingCloudPassword,\n    marketingCloudPort,\n    syncQueryFile,\n    syncBatchSize,\n    syncDestinationAnalyticsUrl,\n    isEinsteinAnalyticsEnabled,\n    isMarketingCloudEnabled\n  } = state;\n\n  useEffect(() => {\n    if (syncSalesforceEinsteinOrganizationId !== undefined)\n      enableGlobalDeault(\"isEinsteinAnalyticsEnabled\", true);\n  }, [syncSalesforceEinsteinOrganizationId]);\n\n  useEffect(() => {\n    if (marketingCloudHost !== undefined) enableGlobalDeault(\"isMarketingCloudEnabled\", true);\n  }, [marketingCloudHost]);\n\n  return [\n    {\n      isEinsteinAnalyticsEnabled,\n      isMarketingCloudEnabled,\n      marketingCloudHost,\n      marketingCloudUser,\n      marketingCloudPassword,\n      marketingCloudPort,\n      syncQueryFile,\n      syncBatchSize,\n      syncDestinationAnalyticsUrl\n    },\n    { onBlur, handleCheckbox }\n  ];\n};\n\nexport default useSyncAnalytics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ExpandableSection } from \"@salesforce/design-system-react\";\n\nimport StatefulInput from \"../../../../commons/StatefulInput\";\nimport EinsteinSalesforceDestination from \"./EinsteinSalesforceDestination\";\nimport MarketingCloudSettings from \"./MarketingCloudSettings\";\nimport useSyncAnalytics from \"../../../../../hooks/configuration/useSyncAnalytics\";\nimport StatefulCheckbox from \"../../../../commons/StatefulCheckbox\";\n\nconst propTypes = {\n  syncSalesforceEinsteinOrganizationId: PropTypes.bool.isRequired\n};\n\nconst SyncAnalytics = ({ syncSalesforceEinsteinOrganizationId }) => {\n  const [\n    {\n      isEinsteinAnalyticsEnabled,\n      isMarketingCloudEnabled,\n      marketingCloudHost,\n      marketingCloudUser,\n      marketingCloudPassword,\n      marketingCloudPort,\n      syncQueryFile,\n      syncBatchSize\n    },\n    { onBlur, handleCheckbox }\n  ] = useSyncAnalytics(syncSalesforceEinsteinOrganizationId);\n\n  return (\n    <ExpandableSection title=\"Data Sync\" className=\"slds-m-bottom_medium slds-m-top_none\">\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulCheckbox\n            label=\"Einstein Analytics\"\n            checked={isEinsteinAnalyticsEnabled}\n            id=\"isEinsteinAnalyticsEnabled\"\n            isDestructive\n            variant=\"toggle\"\n            onToggle={handleCheckbox}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulCheckbox\n            label=\"Marketing Cloud\"\n            checked={isMarketingCloudEnabled}\n            id=\"isMarketingCloudEnabled\"\n            isDestructive\n            variant=\"toggle\"\n            onToggle={handleCheckbox}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Query File\"\n            helpText=\"Please ensure the query file is a json file and .json is included in the file name you enter here.\n            This json configuration query file must be stored in\n             the following path of your cloud storage providerExample\n            Path: Amazon S3 > Vandelay Industries\n            Prod Bucket > grax > audittrail > salesforce >\n            Org ID of Salesforce Environment > configurationqueryfile.json\"\n            required\n            value={syncQueryFile}\n            id=\"syncQueryFile\"\n            onBlur={onBlur}\n          />\n        </div>\n        <div className=\"slds-col slds-size_1-of-3\">\n          <StatefulInput\n            label=\"Batch Size\"\n            type=\"number\"\n            value={syncBatchSize}\n            id=\"syncBatchSize\"\n            onBlur={onBlur}\n          />\n        </div>\n      </div>\n      {isEinsteinAnalyticsEnabled === true && <EinsteinSalesforceDestination />}\n      {isMarketingCloudEnabled && (\n        <MarketingCloudSettings\n          marketingCloudHost={marketingCloudHost}\n          marketingCloudUser={marketingCloudUser}\n          marketingCloudPassword={marketingCloudPassword}\n          marketingCloudPort={marketingCloudPort}\n          onBlur={onBlur}\n        />\n      )}\n    </ExpandableSection>\n  );\n};\n\nSyncAnalytics.propTypes = propTypes;\n\nexport default SyncAnalytics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Modal, Button } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onRequestClose: PropTypes.func.isRequired,\n  confirm: PropTypes.func.isRequired\n};\n\nconst RevealSectionWarning = ({ isOpen, onRequestClose, confirm }) => {\n  return (\n    <Modal\n      noHeader\n      footer={[\n        <Button key=\"promptBtn\" label=\"Cancel\" onClick={onRequestClose} />,\n        <Button key=\"promptBtn\" label=\"Confirm\" variant=\"brand\" onClick={confirm} />\n      ]}\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      prompt=\"error\"\n      size=\"medium\"\n      title=\"Confirmation Needed to Reveal Section\"\n    >\n      <div className=\"slds-m-around_medium\">\n        This section is meant for configuring system settings that only an advanced GRAX admin or\n        enablement engineer will be familiar with. Please proceed with caution and reach out to GRAX\n        Support if you have any questions.\n      </div>\n    </Modal>\n  );\n};\n\nRevealSectionWarning.propTypes = propTypes;\n\nexport default RevealSectionWarning;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport { Button } from \"@salesforce/design-system-react\";\nimport { Title } from \"@salesforce/design-system-react/lib/components/page-header\";\n\nconst propTypes = {\n  children: PropTypes.node,\n  isOpen: PropTypes.bool,\n  nonCollapsible: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired\n};\n\nconst ControlledExpandableSection = ({\n  children,\n  title,\n  helpText,\n  isOpen = false,\n  nonCollapsible = false,\n  className = \"slds-m-bottom_medium slds-m-top_none\"\n}) => {\n  const [_isOpen, setIsOpen] = useState(nonCollapsible ? true : isOpen);\n\n  const titleNode = (\n    <span\n      className={classNames(\"slds-truncate\", { \"slds-p-horizontal_small\": !!nonCollapsible })}\n      title={title}\n    >\n      {title}\n    </span>\n  );\n\n  const headerContainer = !nonCollapsible ? (\n    <Button\n      iconCategory=\"utility\"\n      iconClassName=\"slds-section__title-action-icon slds-button__icon_left\"\n      iconName=\"switch\"\n      onClick={() => setIsOpen(!_isOpen)}\n      className=\"slds-section__title-action\"\n      variant=\"base\"\n    >\n      {titleNode}\n    </Button>\n  ) : (\n    titleNode\n  );\n\n  return (\n    <div className={classNames(className, \"slds-section\", { \"slds-is-open\": _isOpen })}>\n      <h3 className={classNames(\"slds-section__title\", { \"slds-theme_shade\": !!nonCollapsible })}>\n        {headerContainer}\n      </h3>\n      <div className=\"slds-section__content\">{children}</div>\n    </div>\n  );\n};\n\nControlledExpandableSection.propTypes = propTypes;\n\nexport default ControlledExpandableSection;\n","import React, { useState } from \"react\";\n\nimport { Button } from \"@salesforce/design-system-react\";\nimport RevealSectionWarning from \"./RevealSectionWarning\";\nimport ControlledExpandableSection from \"../../../../commons/ControlledExpandableSection\";\n\n//  TODO: add display name to HOC\nconst withProtectedExpandableSection = heading => WrappedComponent => {\n  return function EnableWrappedComponentHook({ ...props }) {\n    const [isSectionRevealed, setIsSectionRevealed] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [wasModalOpen, setWasModalOpen] = useState(false);\n\n    const onConfirm = () => {\n      setIsSectionRevealed(true);\n      setIsModalOpen(false);\n      if (!wasModalOpen) setWasModalOpen(true);\n    };\n\n    const toggleRevealValuesModal = () => {\n      if (isSectionRevealed === false && wasModalOpen === false) setIsModalOpen(true);\n      else setIsSectionRevealed(!isSectionRevealed);\n    };\n\n    return (\n      <ControlledExpandableSection title={heading}>\n        {isSectionRevealed === false && (\n          <Button\n            iconCategory=\"utility\"\n            iconVariant=\"bare\"\n            iconName={isSectionRevealed ? \"hide\" : \"preview\"}\n            iconPosition=\"left\"\n            onClick={toggleRevealValuesModal}\n            variant=\"base\"\n            label={isSectionRevealed ? \"Hide Fields\" : \"Reveal Fields\"}\n            className=\"slds-m-top_x-small\"\n          />\n        )}\n        {isSectionRevealed === true && (\n          <ul>\n            <WrappedComponent {...props} />\n          </ul>\n        )}\n        <RevealSectionWarning\n          isOpen={isModalOpen}\n          onRequestClose={() => setIsModalOpen(false)}\n          confirm={onConfirm}\n        />\n      </ControlledExpandableSection>\n    );\n  };\n};\n\nexport default withProtectedExpandableSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport StatefulInput from \"../../../../commons/StatefulInput\";\n\nconst propTypes = {\n  label: PropTypes.string.isRequired,\n  variableName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onBlur: PropTypes.func.isRequired\n};\n\nconst ProtectedInput = ({ label, variableName, type, value, onBlur, ...props }) => {\n  const handleNonCastingOnblur = e => onBlur(e, { valueCasting: false });\n\n  return (\n    <div className=\"slds-col slds-size_1-of-3\">\n      <StatefulInput\n        label={label}\n        id={variableName}\n        type={type}\n        value={value}\n        onBlur={handleNonCastingOnblur}\n        valueCasting\n        {...props}\n      />\n    </div>\n  );\n};\n\nProtectedInput.propTypes = propTypes;\n\nexport default ProtectedInput;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport withProtectedExpandableSection from \"./withProtectedExpandableSection\";\nimport ProtectedInput from \"./ProtectedInput\";\nimport GRAXButtonGroup from \"../../../../commons/ButtonGroup\";\nimport {\n  PUSH_TO_QUEUE_PROVIDER_APIGEE,\n  PUSH_TO_QUEUE_PROVIDER_KAFKA\n} from \"../../../../../consts/configurations/pushToQueueProvider\";\n\nconst options = [\n  {\n    label: \"Apigee\",\n    value: PUSH_TO_QUEUE_PROVIDER_APIGEE\n  },\n  {\n    label: \"Kafka\",\n    value: PUSH_TO_QUEUE_PROVIDER_KAFKA\n  }\n];\n\nconst propTypes = {\n  provider: PropTypes.string.isRequired,\n  apiEndpoint: PropTypes.string.isRequired,\n  apiClientId: PropTypes.string.isRequired,\n  apiClientSecret: PropTypes.string.isRequired,\n  authorizationToken: PropTypes.string.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired\n};\n\nconst PushtoQueue = ({\n  provider,\n  apiEndpoint,\n  apiClientId,\n  apiClientSecret,\n  authorizationToken,\n  onToggle,\n  onBlur\n}) => {\n  const inputs = [];\n\n  if (provider === PUSH_TO_QUEUE_PROVIDER_APIGEE || provider === PUSH_TO_QUEUE_PROVIDER_KAFKA) {\n    inputs.push(\n      <ProtectedInput\n        label=\"Push-to-Queue API Endpoint\"\n        variableName=\"apiEndpoint\"\n        value={apiEndpoint}\n        required\n        onBlur={onBlur}\n      />\n    );\n\n    switch (provider) {\n      case PUSH_TO_QUEUE_PROVIDER_APIGEE:\n        inputs.push([\n          <ProtectedInput\n            label=\"Push-to-Queue API Client ID\"\n            variableName=\"apiClientId\"\n            value={apiClientId}\n            required\n            onBlur={onBlur}\n          />,\n          <ProtectedInput\n            label=\"Push-to-Queue API Client Secret\"\n            variableName=\"apiClientSecret\"\n            value={apiClientSecret}\n            required\n            onBlur={onBlur}\n          />\n        ]);\n        break;\n      case PUSH_TO_QUEUE_PROVIDER_KAFKA:\n        inputs.push(\n          <ProtectedInput\n            label=\"Push-to-Queue Authorization Token\"\n            variableName=\"authorizationToken\"\n            value={authorizationToken}\n            required\n            onBlur={onBlur}\n          />\n        );\n        break;\n      default:\n    }\n  }\n\n  return (\n    <>\n      <div className=\"slds-grid slds-gutters_small slds-m-top_x-small\">\n        <div className=\"slds-col slds-size_1-of-3\">\n          <GRAXButtonGroup\n            options={options}\n            value={provider}\n            required={false}\n            onClick={selected => onToggle(\"provider\", selected)}\n          />\n        </div>\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">{inputs}</div>\n    </>\n  );\n};\n\nPushtoQueue.propTypes = propTypes;\n\nexport default withProtectedExpandableSection(\"Push to Queue\")(PushtoQueue);\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport withProtectedExpandableSection from \"./withProtectedExpandableSection\";\nimport ProtectedInput from \"./ProtectedInput\";\nimport Subsection from \"../../Subsection\";\nimport SalesforceConnection from \"../../salesforceConnection\";\n\nconst propTypes = {\n  GRAX_SYNCHID: PropTypes.string.isRequired,\n  RESTORE_SLEEP_DURATION: PropTypes.string.isRequired,\n  GRAX_OBJECT_TYPES_TO_RESTORE: PropTypes.string.isRequired,\n  GRAX_MAX_RESTORE: PropTypes.string.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n\nconst OrgMigrationSettings = ({\n  GRAX_SYNCHID,\n  RESTORE_SLEEP_DURATION,\n  GRAX_OBJECT_TYPES_TO_RESTORE,\n  GRAX_MAX_RESTORE,\n  onBlur,\n}) => {\n  return (\n    <>\n      <div className=\"slds-grid slds-gutters_small\">\n        <ProtectedInput\n          label=\"Synch ID\"\n          variableName=\"GRAX_SYNCHID\"\n          value={GRAX_SYNCHID}\n          type=\"number\"\n          onBlur={onBlur}\n        />\n        <ProtectedInput\n          label=\"Bulk Restore Sleep Duration (Minutes)\"\n          variableName=\"RESTORE_SLEEP_DURATION\"\n          value={RESTORE_SLEEP_DURATION}\n          onBlur={onBlur}\n        />\n        <ProtectedInput\n          label=\"Objects to Restore\"\n          variableName=\"GRAX_OBJECT_TYPES_TO_RESTORE\"\n          value={GRAX_OBJECT_TYPES_TO_RESTORE}\n          onBlur={onBlur}\n        />\n      </div>\n      <div className=\"slds-grid slds-gutters_small\">\n        <ProtectedInput\n          label=\"Bulk Restore Max Batch Size\"\n          variableName=\"GRAX_MAX_RESTORE\"\n          value={GRAX_MAX_RESTORE}\n          type=\"number\"\n          onBlur={onBlur}\n        />\n      </div>\n      <Subsection heading=\"Bulk Restore Salesforce Destination\" />\n      <div className=\"slds-m-top_x-small\">\n        <SalesforceConnection showConnectionName variant=\"bulkRestoreDestination\" />\n      </div>\n    </>\n  );\n};\n\nOrgMigrationSettings.propTypes = propTypes;\n\nexport default withProtectedExpandableSection(\"Org Migration Settings\")(OrgMigrationSettings);\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport withProtectedExpandableSection from \"./withProtectedExpandableSection\";\nimport ProtectedInput from \"./ProtectedInput\";\n\nconst propTypes = {\n  queryFile: PropTypes.string.isRequired,\n  onBlur: PropTypes.func.isRequired\n};\n\nconst PointinTimeRestore = ({ queryFile, onBlur }) => {\n  return (\n    <>\n      <div className=\"slds-grid slds-gutters_small\">\n        <ProtectedInput\n          label=\"Point-in-Time Restore Query File\"\n          variableName=\"queryFile\"\n          value={queryFile}\n          required\n          onBlur={onBlur}\n        />\n      </div>\n    </>\n  );\n};\n\nPointinTimeRestore.propTypes = propTypes;\n\nexport default withProtectedExpandableSection(\"Point in Time Restore\")(PointinTimeRestore);\n","export const PUSH_TO_QUEUE_PROVIDER_APIGEE = \"Apigee\";\nexport const PUSH_TO_QUEUE_PROVIDER_KAFKA = \"Kafka\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { BASIC_CONFIG_SET_VALUE } from \"../../../../../consts/configurations/configurationsActions\";\nimport withProtectedExpandableSection from \"./withProtectedExpandableSection\";\nimport StatefulCheckbox from \"../../../../commons/StatefulCheckbox\";\nimport ProtectedInput from \"./ProtectedInput\";\nimport { useHandleCheckbox } from \"../../../../../hooks/useHandleForm\";\nimport { useCloudStorageContext } from \"../../../../../contexts/cloudStorageContext\";\nimport { ADVANCED_SECTION_TURN_OFF_STORAGE_IS_ENABLE } from \"../../../../../consts/configurations/advancedSections\";\n\nconst propTypes = {\n  asyncIntervalMinutes: PropTypes.string.isRequired,\n  asyncIntervalMinutesOnBlur: PropTypes.func.isRequired\n};\n\nconst Other = ({ asyncIntervalMinutes, asyncIntervalMinutesOnBlur }) => {\n  const [state, dispatch] = useCloudStorageContext();\n  const { storageOff } = state;\n\n  const handleCheckbox = useHandleCheckbox(BASIC_CONFIG_SET_VALUE, dispatch);\n\n  return (\n    <>\n      <div className=\"slds-grid slds-gutters_small\">\n        <ProtectedInput\n          label=\"Async Interval (minutes)\"\n          helpText=\"Determines the interval that the asynchronous heroku dyno runs at.\n           Note that if you have set GRAX_ENV_ASYNC_INTERVAL_MINUTES in your heroku config vars,\n            that value will override this field.\"\n          variableName=\"asyncIntervalMinutes\"\n          value={asyncIntervalMinutes}\n          required\n          type=\"number\"\n          onBlur={asyncIntervalMinutesOnBlur}\n        />\n        <div className=\"slds-col slds-size_1-of-3\">\n          {ADVANCED_SECTION_TURN_OFF_STORAGE_IS_ENABLE === true && (\n            <StatefulCheckbox\n              label=\"Turn Off Storage\"\n              helpText=\"Do not turn off storage unless absolutely necessary, as this could cause extreme data loss\"\n              checked={storageOff}\n              id=\"storageOff\"\n              onToggle={handleCheckbox}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nOther.propTypes = propTypes;\n\nexport default withProtectedExpandableSection(\"Other\")(Other);\n","import React from \"react\";\n\nimport {\n  ENVIRONMENT_VARIABLE_SET_PUSH_TO_QUEUE,\n  ENVIRONMENT_VARIABLE_SET_VARS,\n  ENVIRONMENT_VARIABLE_SET_TIME_MACHINE,\n  ADVANCED_CONFIG_SET_VALUE,\n} from \"../../../../../consts/configurations/configurationsActions\";\nimport { useEnvironmentVariablesContext } from \"../../../../../contexts/environmentVariablesContext\";\n\nimport ChangeDataCapture from \"./ChangeDataCapture\";\nimport OrgMigrationSettings from \"./OrgMigrationSettings\";\nimport PointinTimeRestore from \"./PointinTimeRestore\";\nimport PushtoQueue from \"./PushtoQueue\";\nimport Other from \"./Other\";\n\nimport {\n  useFormDispatch,\n  useHandleInput,\n  useHandleCheckbox,\n} from \"../../../../../hooks/useHandleForm\";\nimport {\n  ADVANCED_SECTION_CHANGE_DATA_CAPTURE_IS_ENABLE,\n  ADVANCED_SECTION_ORG_MIGRATION_SETTINGS_IS_ENABLE,\n  ADVANCED_SECTION_POINT_IN_TIME_RESTORE_IS_ENABLE,\n  ADVANCED_SECTION_PUSH_TO_QUEUE_IS_ENABLE,\n  ADVANCED_SECTION_OTHER_IS_ENABLE,\n} from \"../../../../../consts/configurations/advancedSections\";\n\nconst EnvironmentVariables = () => {\n  const [state, dispatch] = useEnvironmentVariablesContext();\n  const { variables = {}, timeMachine = {}, pushToQueue = {}, asyncIntervalMinutes } = state;\n  const { provider, apiEndpoint, apiClientId, apiClientSecret, authorizationToken } = pushToQueue;\n  const { queryFile } = timeMachine;\n  const {\n    cdcEnabled,\n    GRAX_SYNCHID,\n    RESTORE_SLEEP_DURATION,\n    GRAX_OBJECT_TYPES_TO_RESTORE,\n    GRAX_MAX_RESTORE,\n  } = variables;\n\n  const handleVariablesCheckbox = useHandleCheckbox(ENVIRONMENT_VARIABLE_SET_VARS, dispatch);\n  const onBlurVariables = useHandleInput(ENVIRONMENT_VARIABLE_SET_VARS, dispatch);\n  const onBlurTimeMachine = useHandleInput(ENVIRONMENT_VARIABLE_SET_TIME_MACHINE, dispatch);\n  const onTogglePushToQueue = useFormDispatch(ENVIRONMENT_VARIABLE_SET_PUSH_TO_QUEUE, dispatch);\n  const onBlurPushToQueue = useHandleInput(ENVIRONMENT_VARIABLE_SET_PUSH_TO_QUEUE, dispatch);\n  const onBlurAsyncIntervalMinutes = useHandleInput(ADVANCED_CONFIG_SET_VALUE, dispatch);\n\n  return (\n    <>\n      {ADVANCED_SECTION_CHANGE_DATA_CAPTURE_IS_ENABLE === true && (\n        <ChangeDataCapture cdcEnabled={cdcEnabled} handleCheckbox={handleVariablesCheckbox} />\n      )}\n      {ADVANCED_SECTION_ORG_MIGRATION_SETTINGS_IS_ENABLE === true && (\n        <OrgMigrationSettings\n          GRAX_SYNCHID={GRAX_SYNCHID}\n          RESTORE_SLEEP_DURATION={RESTORE_SLEEP_DURATION}\n          GRAX_OBJECT_TYPES_TO_RESTORE={GRAX_OBJECT_TYPES_TO_RESTORE}\n          GRAX_MAX_RESTORE={GRAX_MAX_RESTORE}\n          onBlur={onBlurVariables}\n        />\n      )}\n      {ADVANCED_SECTION_POINT_IN_TIME_RESTORE_IS_ENABLE === true && (\n        <PointinTimeRestore queryFile={queryFile} onBlur={onBlurTimeMachine} />\n      )}\n      {ADVANCED_SECTION_PUSH_TO_QUEUE_IS_ENABLE === true && (\n        <PushtoQueue\n          provider={provider}\n          apiEndpoint={apiEndpoint}\n          apiClientId={apiClientId}\n          apiClientSecret={apiClientSecret}\n          authorizationToken={authorizationToken}\n          onToggle={onTogglePushToQueue}\n          onBlur={onBlurPushToQueue}\n        />\n      )}\n      {ADVANCED_SECTION_OTHER_IS_ENABLE === true && (\n        <Other\n          asyncIntervalMinutes={asyncIntervalMinutes}\n          asyncIntervalMinutesOnBlur={onBlurAsyncIntervalMinutes}\n        />\n      )}\n    </>\n  );\n};\n\nexport default EnvironmentVariables;\n","import {\n  PUSH_TO_QUEUE_PROVIDER_APIGEE,\n  PUSH_TO_QUEUE_PROVIDER_KAFKA,\n} from \"../../consts/configurations/pushToQueueProvider\";\nimport { SALESFORCE_GIT_INTEGRATION_GITLAB } from \"../../consts/configurations/sfdcGitIntegration\";\nimport { useCloudStorageContext } from \"../../contexts/cloudStorageContext\";\nimport { useConfigurationsContext } from \"../../contexts/configurationsContext\";\nimport { useEnvironmentVariablesContext } from \"../../contexts/environmentVariablesContext\";\nimport { useMetadataBackupContext } from \"../../contexts/metadataBackupContext\";\nimport { useSyncAnalyticsContext } from \"../../contexts/syncAnalyticsContext\";\nimport CloudConfig from \"../../models/CloudConfig\";\nimport useSelectedProvider from \"./useSelectedProvider\";\nimport useValidateAndSaveConfiguration from \"./useValidateAndSaveConfiguration\";\nimport { useSalesforceConnectionContext } from \"../../components/cloud/configuration/salesforceConnection/context\";\nimport {\n  SALESFORCE_DATASOURCES_BULKRESTORE,\n  SALESFORCE_DATASOURCES_EINSTEIN,\n} from \"../../components/cloud/configuration/salesforceConnection/consts\";\n\nimport { findSourceDataSource } from \"../../components/cloud/configuration/utils\";\nimport {\n  preValidateDataSourcesSchema,\n  globalEnvironmentDefaultsProxy,\n} from \"../../components/cloud/configuration/utils/configurationProxy\";\n\nconst omitEmptyProps = (obj) => {\n  if (obj !== null && typeof obj === \"object\") {\n    return Object.entries(obj).reduce((accumulator, [key, value]) => {\n      const omittedEmptyProps = { ...accumulator };\n      if (value !== \"\" && value !== undefined && value !== null) {\n        omittedEmptyProps[key] = obj[key];\n      }\n      return omittedEmptyProps;\n    }, {});\n  }\n\n  return obj;\n};\n\nconst preValidateMetadataBackupSchema = (metadataBackup) => {\n  const { isEnabled, sourceControlEnabled, sourceControlProvider } = metadataBackup;\n  const schema = [];\n\n  if (!isEnabled || !sourceControlEnabled) {\n    schema.push({ isEnabled: !!isEnabled, sourceControlEnabled: false });\n  } else if (sourceControlProvider === SALESFORCE_GIT_INTEGRATION_GITLAB) {\n    const { gitUserId, ...omittedGitUserId } = metadataBackup;\n    schema.push(omitEmptyProps(omittedGitUserId));\n  } else {\n    schema.push(omitEmptyProps(metadataBackup));\n  }\n\n  return schema;\n};\n\nconst preValidatePushToQueueSchema = (pushToQueue) => {\n  const schema = [];\n\n  if (pushToQueue.provider === PUSH_TO_QUEUE_PROVIDER_KAFKA) {\n    const { provider, authorizationToken, apiEndpoint } = pushToQueue;\n    schema.push(omitEmptyProps({ provider, authorizationToken, apiEndpoint }));\n  } else if (pushToQueue.provider === PUSH_TO_QUEUE_PROVIDER_APIGEE) {\n    const { provider, apiClientId, apiEndpoint, apiClientSecret } = pushToQueue;\n    schema.push(omitEmptyProps({ provider, apiClientId, apiEndpoint, apiClientSecret }));\n  } else {\n    schema.push({});\n  }\n\n  return schema;\n};\n\nexport const preValidateVariablesSchema = (variables) => {\n  let schema = variables;\n\n  if (variables.cdcEnabled !== undefined) {\n    schema = {\n      ...schema,\n      cdcEnabled: variables.cdcEnabled.toString(),\n    };\n  }\n\n  return omitEmptyProps(schema);\n};\n\nconst useSaveAdvancedConfiguration = () => {\n  const [configuration, configurationDispatch] = useConfigurationsContext();\n  const [storageState] = useCloudStorageContext();\n  const [metadataBackup] = useMetadataBackupContext();\n  const [syncAnalytics] = useSyncAnalyticsContext();\n\n  const storage = useSelectedProvider(storageState);\n  const [dataSourcesState] = useSalesforceConnectionContext();\n  const syncSalesforceEinstein = useSelectedProvider(\n    dataSourcesState[SALESFORCE_DATASOURCES_EINSTEIN]\n  );\n  const bulkRestoreDestination = useSelectedProvider(\n    dataSourcesState[SALESFORCE_DATASOURCES_BULKRESTORE]\n  );\n  const [\n    { pushToQueue, timeMachine, variables, sessionCacheTimeoutMinutes, asyncIntervalMinutes },\n  ] = useEnvironmentVariablesContext();\n  const saveConfiguration = useValidateAndSaveConfiguration(configurationDispatch);\n\n  return () => {\n    const cloudConfig = new CloudConfig(configuration);\n    const globals = globalEnvironmentDefaultsProxy(configuration);\n\n    const sourceDataSource = findSourceDataSource(\n      cloudConfig.dataSources,\n      globals.asyncAttachmentProcessorOrganizationIds\n    );\n\n    const dataSources = [];\n    dataSources.push(sourceDataSource);\n    dataSources.push(bulkRestoreDestination);\n    if (syncAnalytics.isEinsteinAnalyticsEnabled === true) {\n      dataSources.push(syncSalesforceEinstein);\n    }\n\n    cloudConfig.dataSources = preValidateDataSourcesSchema(dataSources);\n    cloudConfig.metadataBackup = preValidateMetadataBackupSchema(metadataBackup);\n    cloudConfig.pushToQueue = preValidatePushToQueueSchema(pushToQueue);\n    cloudConfig.variables = preValidateVariablesSchema(variables);\n    cloudConfig.storage = omitEmptyProps(storage);\n    cloudConfig.syncAnalytics = omitEmptyProps(syncAnalytics);\n    cloudConfig.timeMachine = omitEmptyProps(timeMachine);\n    cloudConfig.asyncIntervalMinutes = asyncIntervalMinutes;\n    cloudConfig.sessionCacheTimeoutMinutes = sessionCacheTimeoutMinutes;\n    saveConfiguration(cloudConfig.configuration);\n  };\n};\n\nexport default useSaveAdvancedConfiguration;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport HeaderButtons from \"../HeaderButtons\";\nimport useSaveAdvancedConfiguration from \"../../../../hooks/configuration/useSaveAdvancedConfiguration\";\n\nconst propTypes = {\n  formRef: PropTypes.shape({ current: PropTypes.object }).isRequired,\n  isAnExistingConfig: PropTypes.bool.isRequired\n};\n\nconst HeaderActions = ({ isAnExistingConfig }) => {\n  const onSubmit = useSaveAdvancedConfiguration();\n  return <HeaderButtons isAnExistingConfig={isAnExistingConfig} onSubmit={onSubmit} />;\n};\n\nHeaderActions.propTypes = propTypes;\nexport default HeaderActions;\n","import { createRef } from \"react\";\n\nimport { useConfigurationsContext } from \"../../contexts/configurationsContext\";\nimport CloudConfig from \"../../models/CloudConfig\";\nimport { isAnExistingConfiguration } from \"../../components/cloud/configuration/utils\";\nimport { globalEnvironmentDefaultsProxy } from \"../../components/cloud/configuration/utils/configurationProxy\";\n\nconst useAdvancedConfiguration = () => {\n  const [state] = useConfigurationsContext();\n  const formRef = createRef();\n\n  const isAnExistingConfig = isAnExistingConfiguration(state);\n\n  const cloudConfig = new CloudConfig(state);\n  const globals = globalEnvironmentDefaultsProxy(state);\n\n  const {\n    asyncIntervalMinutes,\n    sessionCacheTimeoutMinutes,\n    storage,\n    oauth,\n    metadataBackup,\n    syncAnalytics,\n    variables,\n    timeMachine,\n    pushToQueue,\n    syncSalesforceEinsteinOrganizationId,\n    dataSources,\n  } = cloudConfig;\n\n  const environmentVariables = {\n    asyncIntervalMinutes,\n    sessionCacheTimeoutMinutes,\n    variables,\n    timeMachine,\n    pushToQueue,\n  };\n\n  return {\n    dataSources,\n    globals,\n    storage,\n    oauth,\n    metadataBackup,\n    syncAnalytics,\n    environmentVariables,\n    syncSalesforceEinsteinOrganizationId,\n    isAnExistingConfig,\n    formRef,\n  };\n};\n\nexport default useAdvancedConfiguration;\n","import React from \"react\";\n\nimport { MetadataBackupProvider } from \"../../../../contexts/metadataBackupContext\";\nimport { EnvironmentVariablesProvider } from \"../../../../contexts/environmentVariablesContext\";\nimport { SyncAnalyticsProvider } from \"../../../../contexts/syncAnalyticsContext\";\nimport { CloudStorageProvider } from \"../../../../contexts/cloudStorageContext\";\nimport { OAuthProvider } from \"../../../../contexts/oauthContext\";\n\nimport MetadataBackupSettings from \"./metadataBackupSettings\";\nimport SyncAnalytics from \"./syncAnalytics\";\nimport EnvironmentVariables from \"./environmentVariables\";\nimport HeaderActions from \"./HeaderActions\";\n\nimport useAdvancedConfiguration from \"../../../../hooks/configuration/useAdvancedConfiguration\";\n\nimport ConfigurationNotice from \"../../../commons/ConfigurationNotice\";\nimport {\n  ADVANCED_SECTION_METADATA_BACKUP_SETTINGS_IS_ENABLE,\n  ADVANCED_SECTION_DATA_ZYNC_IS_ENABLE,\n} from \"../../../../consts/configurations/advancedSections\";\nimport { SalesforceConnectionProvider } from \"../salesforceConnection/context\";\n\nconst AdvancedConfiguration = () => {\n  const {\n    dataSources,\n    storage,\n    oauth,\n    syncSalesforceEinsteinOrganizationId,\n    metadataBackup,\n    syncAnalytics,\n    environmentVariables,\n    isAnExistingConfig,\n    globals,\n  } = useAdvancedConfiguration();\n\n  return (\n    <MetadataBackupProvider value={metadataBackup}>\n      <SalesforceConnectionProvider value={{ dataSources, globals }}>\n        <SyncAnalyticsProvider value={syncAnalytics}>\n          <EnvironmentVariablesProvider value={environmentVariables}>\n            <CloudStorageProvider value={storage}>\n              <OAuthProvider value={oauth}>\n                <form onSubmit={(e) => e.preventDefault()}>\n                  <ConfigurationNotice\n                    text={`Please note that fields designated with * should be filled out\n                  in order for a particular feature to work as expected`}\n                  />\n                  <HeaderActions isAnExistingConfig={isAnExistingConfig} />\n                  {ADVANCED_SECTION_METADATA_BACKUP_SETTINGS_IS_ENABLE === true && (\n                    <MetadataBackupSettings />\n                  )}\n                  {ADVANCED_SECTION_DATA_ZYNC_IS_ENABLE === true && (\n                    <SyncAnalytics\n                      syncSalesforceEinsteinOrganizationId={syncSalesforceEinsteinOrganizationId}\n                    />\n                  )}\n                  <EnvironmentVariables />\n                </form>\n              </OAuthProvider>\n            </CloudStorageProvider>\n          </EnvironmentVariablesProvider>\n        </SyncAnalyticsProvider>\n      </SalesforceConnectionProvider>\n    </MetadataBackupProvider>\n  );\n};\n\nexport default AdvancedConfiguration;\n","import { useEffect, useState } from \"react\";\n\nimport _ from \"lodash\";\n\nimport REGION_LABEL_MAP from \"../../consts/configurations/regionLabelMap\";\nimport vendorCredentialWhitelist from \"../../consts/configurations/vendorCredentialWhitelist.json\";\nimport CloudConfig from \"../../models/CloudConfig\";\nimport { isOAuthCredential } from \"../../components/cloud/configuration/salesforceConnection/utils\";\nimport { findSourceDataSource } from \"../../components/cloud/configuration/utils\";\nimport { globalEnvironmentDefaultsProxy } from \"../../components/cloud/configuration/utils/configurationProxy\";\n\n/**\n * Returns displayable form of vendor credentials for configuration summary page\n *\n */\nconst useConfigurationSummary = (configuration) => {\n  const [summary, setSummary] = useState({});\n\n  useEffect(() => {\n    if (configuration) {\n      const cloudConfig = new CloudConfig(configuration);\n      const { elastic, storage } = cloudConfig;\n      const globals = globalEnvironmentDefaultsProxy(configuration);\n      const salesforce = findSourceDataSource(\n        cloudConfig.dataSources,\n        globals.asyncAttachmentProcessorOrganizationIds\n      );\n\n      const summaryData = createSummaryData([\n        { ...elastic, type: \"elastic\" },\n        { ...storage, type: \"storage\" },\n        { ...salesforce, type: \"salesforce\" },\n      ]);\n\n      setSummary(summaryData);\n    }\n  }, [configuration]);\n\n  return summary;\n};\n\n/**\n * Returns displayable form of vendor credentials\n *\n * @param { Array } credentialsArray array of credentials to process\n */\nexport const createSummaryData = (credentialsArray) => {\n  const results = {};\n\n  credentialsArray.forEach((credentialsSet) => {\n    results[credentialsSet.type] = _displayableProperties(credentialsSet);\n  });\n\n  return results;\n};\n\n/**\n * Converts vendor credentials into displayable format for Configuration Summary page,\n * including filtering out secure credentials, substituting readable names for json values,\n * and capitalizing properly.\n *\n * Display order is determined by vendor credentials whitelist file\n * @param { Object } {type, ...credentials} credentials with type (elastic, storage, salesforce)\n * @returns { Object } formatted and filtered vendor credentials\n */\nconst _displayableProperties = ({ type, ...credentials }) => {\n  const displayCredentials = [];\n  const userKeys = Object.keys(credentials);\n  let whitelist;\n\n  if (type === \"salesforce\") {\n    if (isOAuthCredential(credentials)) {\n      whitelist = vendorCredentialWhitelist[type].oauth;\n    } else {\n      whitelist = vendorCredentialWhitelist[type].usernameAndPassword;\n    }\n  } else {\n    whitelist = vendorCredentialWhitelist[type];\n  }\n\n  const whitelistedCredentials = whitelist.map((entry) => entry.jsonName);\n\n  whitelistedCredentials.forEach((credentialName) => {\n    if (userKeys.includes(credentialName)) {\n      const translationPair = whitelist.filter((entry) => entry.jsonName === credentialName)[0];\n      const label = translationPair.displayName;\n      const content = _formatContent(credentialName, credentials[credentialName]);\n      displayCredentials.push({ label, content, truncate: true });\n    }\n  });\n  return displayCredentials;\n};\n\n/**\n * Performs any capitalization or punctuation cleanup\n *\n * @param { String } credentialName name of credential to format\n * @param { String } credentialValue value of credential to format\n * @returns { String } formatted credential value for display\n */\nconst _formatContent = (credentialName, credentialValue) => {\n  if (credentialName === \"provider\") {\n    return credentialValue === \"aws\" ? \"AWS\" : _.upperFirst(credentialValue);\n  }\n  if (credentialName === \"region\") {\n    return REGION_LABEL_MAP[credentialValue];\n  }\n  return _.toString(credentialValue);\n};\n\nexport default useConfigurationSummary;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PageHeader, Card } from \"@salesforce/design-system-react\";\n\nimport useConfigurationSummary from \"../../../../hooks/configuration/useConfigurationSummary\";\n\nconst propTypes = {\n  configuration: PropTypes.object.isRequired\n};\n\nconst BasicConfigurationSummary = ({ configuration }) => {\n  const { salesforce, elastic, storage } = useConfigurationSummary(configuration);\n\n  return (\n    <Card hasNoHeader className=\"slds-card__body_inner\">\n      <PageHeader title=\"Salesforce Source\" variant=\"record-home\" details={salesforce} />\n      <PageHeader title=\"Elasticsearch\" variant=\"record-home\" details={elastic} />\n      <PageHeader title=\"Cloud Storage\" variant=\"record-home\" details={storage} />\n    </Card>\n  );\n};\n\nBasicConfigurationSummary.propTypes = propTypes;\n\nexport default BasicConfigurationSummary;\n","import React from \"react\";\nimport {\n  Button,\n  PageHeader,\n  PageHeaderControl,\n  Icon,\n  Card,\n  ScopedNotification\n} from \"@salesforce/design-system-react\";\n\nimport BasicConfigurationSummary from \"./BasicConfigurationSummary\";\nimport { useConfigurationsContext } from \"../../../../contexts/configurationsContext\";\nimport useCloudRoutes from \"../../../../hooks/useCloudRoutes\";\n\nconst ConfigurationSummary = () => {\n  const [configuration] = useConfigurationsContext();\n  const { goToBasicConfiguration, goToAdvancedConfiguration } = useCloudRoutes();\n\n  const actionsBasic = () => (\n    <PageHeaderControl>\n      <Button label=\"Update Credentials\" onClick={() => goToBasicConfiguration()} />\n    </PageHeaderControl>\n  );\n\n  const actionsAdvanced = () => (\n    <PageHeaderControl>\n      <Button label=\"Edit Advanced Configuration\" onClick={() => goToAdvancedConfiguration()} />\n    </PageHeaderControl>\n  );\n\n  const iconBasic = (\n    <Icon\n      assistiveText={{ label: \"Required Configuration\" }}\n      category=\"standard\"\n      name=\"calibration\"\n    />\n  );\n\n  const iconAdvanced = (\n    <Icon assistiveText={{ label: \"Advanced Configuration\" }} category=\"standard\" name=\"custom\" />\n  );\n\n  return (\n    <div className=\"summaryCard\">\n      <Card hasNoHeader>\n        <PageHeader\n          onRenderActions={actionsBasic}\n          title=\"Required Configuration\"\n          variant=\"record-home\"\n          icon={iconBasic}\n        />\n        <BasicConfigurationSummary configuration={configuration} />\n      </Card>\n      <Card hasNoHeader>\n        <PageHeader\n          onRenderActions={actionsAdvanced}\n          title=\"Advanced Configuration\"\n          variant=\"record-home\"\n          icon={iconAdvanced}\n        />\n        <Card hasNoHeader>\n          <ScopedNotification theme=\"dark\">\n            <p>Only advanced users should edit these settings.</p>\n          </ScopedNotification>\n        </Card>\n      </Card>\n    </div>\n  );\n};\n\nexport default ConfigurationSummary;\n","import Scenarios from \"../components/cloud/dedup/Scenarios\";\nimport Scenario from \"../components/cloud/dedup/Scenario\";\nimport Duplicates from \"../components/cloud/dedup/duplicates/Duplicates\";\n\nimport Configuration from \"../components/cloud/configuration\";\nimport EmptyLandingPage from \"../components/cloud/configuration/EmptyLandingPage\";\nimport NewConfiguration from \"../components/cloud/configuration/NewConfiguration\";\nimport BasicConfiguration from \"../components/cloud/configuration/basicConfiguration\";\nimport AdvancedConfiguration from \"../components/cloud/configuration/advancedConfiguration\";\n\nimport {\n  ROUTE_CONFIGURATION,\n  ROUTE_NEW_CONFIGURATION,\n  ROUTE_BASIC_CONFIGURATION,\n  ROUTE_ADVANCED_CONFIGURATION,\n  ROUTE_EMPTY_CONFIGURATION,\n  DEDUP_SCENARIOS_PATH,\n  DEDUP_SCENARIOS_DETAILS_PATH,\n  DEDUP_SCENARIOS_NEW_PATH,\n  DEDUP_DUPLICATES_DETAILS_PATH,\n  ROUTE_CONFIGURATION_SUMMARY,\n} from \"./addresses\";\nimport ConfigurationSummary from \"../components/cloud/configuration/configurationSummary\";\n\nconst routes = [\n  {\n    path: ROUTE_CONFIGURATION,\n    key: `${ROUTE_CONFIGURATION}2`,\n    component: Configuration,\n    routes: [\n      {\n        exact: true,\n        key: ROUTE_EMPTY_CONFIGURATION,\n        path: ROUTE_EMPTY_CONFIGURATION,\n        component: EmptyLandingPage,\n      },\n      {\n        exact: true,\n        key: ROUTE_CONFIGURATION_SUMMARY,\n        path: ROUTE_CONFIGURATION_SUMMARY,\n        component: ConfigurationSummary,\n      },\n      {\n        exact: true,\n        key: ROUTE_NEW_CONFIGURATION,\n        path: ROUTE_NEW_CONFIGURATION,\n        component: NewConfiguration,\n      },\n      {\n        exact: true,\n        key: ROUTE_BASIC_CONFIGURATION,\n        path: ROUTE_BASIC_CONFIGURATION,\n        component: BasicConfiguration,\n      },\n      {\n        exact: true,\n        key: ROUTE_ADVANCED_CONFIGURATION,\n        path: ROUTE_ADVANCED_CONFIGURATION,\n        component: AdvancedConfiguration,\n      },\n    ],\n  },\n  {\n    exact: true,\n    key: DEDUP_SCENARIOS_PATH,\n    path: DEDUP_SCENARIOS_PATH,\n    component: Scenarios,\n  },\n  {\n    exact: true,\n    key: DEDUP_SCENARIOS_DETAILS_PATH,\n    path: DEDUP_SCENARIOS_DETAILS_PATH,\n    component: Scenario,\n  },\n  {\n    exact: true,\n    key: DEDUP_SCENARIOS_NEW_PATH,\n    path: DEDUP_SCENARIOS_NEW_PATH,\n    component: Scenario,\n  },\n  {\n    exact: true,\n    key: DEDUP_DUPLICATES_DETAILS_PATH,\n    path: DEDUP_DUPLICATES_DETAILS_PATH,\n    component: Duplicates,\n  },\n];\n\nexport default routes;\n","/* eslint-disable no-useless-escape */\nimport moment from 'moment';\nimport 'moment-timezone';\nimport 'moment/min/locales';\nimport _ from 'lodash';\n\nconst availableLocales = moment.locales();\n\nexport function setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = \"expires=\"+ d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n};\n\nexport function getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n};\n\nconst isEmbeded = window.parent != null;\nconst isAppleDevice = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) === true;\n\nexport {isEmbeded, isAppleDevice};\n\n/*\n2018-12-10\n1996-12-10\n2018-12-10 12:40:00\n1996-12-10 12:57:00\n1996-12-10 12:57:00-2340\n1996-12-10 12:57:00+2340\n2018-05-01T18:08:42.000+0000\n2018-12-10T12:50:00Z\n1996-12-10T12:00:00Z\n2018-12-10T12:50:35.000Z\n1996-12-10T12:00:00.000Z\n2010-12-31T23:59:59.999Z\n2002-10-10T12:00:00+05:00\n2002-10-10T07:00:00Z\n2002-10-10T00:00:00+05:00\n2002-10-09T19:00:00Z\n*/\nvar SF_DATETIME_REGEXP = /^((?:(?:19|20)\\d{2})-(?:10|11|12|0?\\d)-(?:30|31|(?:0|1|2)\\d))((?:(?:T|\\s)(?:(?:0|1|2)\\d)(?:\\:[0-5]\\d)(?::[0-5]\\d)?((?:(?:\\.\\d{3})?)?Z?(?:[+-](?:0|1|2)\\d\\:?[0-5]\\d)?))?)$/;\n\nvar DATETIME_FORMAT = 'L LT';\nvar DATE_FORMAT = 'L';\n\nexport {SF_DATETIME_REGEXP, DATETIME_FORMAT, DATE_FORMAT};\n\nvar userLocaleParam = window.location.search.match(/[\\?&]locale\\=([^&]+)/);\nvar tzParam = window.location.search.match(/[\\?&]tz\\=([^&]+)/);\n\nexport const browserLocale = window.navigator.userLanguage || window.navigator.language;\n\nexport const userLocale = userLocaleParam ? decodeURIComponent(userLocaleParam[1]).split('_').join('-') : browserLocale;\nexport const TZ = tzParam ? decodeURIComponent(tzParam[1]) : moment.tz.guess();\n\n// Map SF locale to existent moment locale.\nexport const overriddenLocales = {\n  \"in-ID\": \"id\",\n  \"iw-IL\": \"he\",\n  \"lu-CD\": \"yo\",\n  \"no-NO\": \"nb\",\n  \"rm-CH\": \"nl\",\n  \"rn-BI\": \"yo\",\n  \"sh-BA\": \"sr\",\n  \"sh-CS\": \"sr\",\n  \"sh-ME\": \"sr\",\n  \"sh-ME-USD\": \"sr\",\n  \"so-DJ\": \"fr\",\n  \"so-SO\": \"fr\",\n  \"sr-BA\": \"sr-cyrl\",\n  \"sr-CS\": \"sr-cyrl\",\n  \"ti-ET\": \"fr\",\n  \"xh-ZA\": \"af\",\n  \"zh-MO\": \"zh-hk\",\n  \"zh-SG\": \"zh-hk\",\n  \"zu-ZA\": \"en\"\n};\n\n\nconsole.log('Available localizations: ' + availableLocales.join(', '));\n\nlet locale = userLocale;\n\nif(overriddenLocales[locale] != null) {\n  locale = overriddenLocales[locale];\n}\n\nlocale = locale.toLowerCase();\n\nif(availableLocales.indexOf(locale) === -1 && userLocale.indexOf('-') !== -1) {\n    locale = locale.split('-')[0];\n}\n\nif(availableLocales.indexOf(locale) !== -1) {\n    moment.locale(locale);\n} else {\n    moment.locale('en'); // default localization\n}\n\nif(TZ) {\n    moment.tz.setDefault(TZ);\n}\n\nconsole.log('User Locale: ' + userLocale);\nconsole.log('Trying to use locale: ', locale);\nconsole.log('Available Locale: ' + moment.locale());\nconsole.log('User TimeZone: ' + TZ);\n\nexport {moment}; // Export moment with additions\n\n/*\noptions={comboboxFilterAndLimit({\n    inputValue: this.state.inputValue,\n    limit: 1000,\n    options: this.state.options,\n    selection: this.state.selection\n})}\n*/\nconst comboboxFilterAndLimit = ({ inputValue, limit = 10, options, selection }) => {\n    const inputValueRegExp = new RegExp(_.escapeRegExp(inputValue), 'ig');\n\n    return _.filter(options, (option, i) => {\n        return (!inputValue || option.type === 'separator'\n                            || option.label.match(inputValueRegExp)\n                            || option.id.match(inputValueRegExp))\n                            /*&& !selection.some((sel) => sel && _.isEqual(sel, option))*/;\n    }).splice(0, limit);\n};\n\nexport const mutateRow = (row, name, value) => {\n    return Object.assign({}, row, {\n      [name]: value\n    });\n  };\n\nexport {comboboxFilterAndLimit};\n\nexport const getUTCTimeRangeFromUserDate = ({\n  date,\n  timezone = TZ,\n  inputFormat = \"YYYY-MM-DD\",\n  outputFormat = \"YYYY-MM-DDTHH:mm:ss.SSS\"\n}) => {\n  return [\n    moment.tz(date, inputFormat, timezone).startOf(\"day\").utc().format(outputFormat),\n    moment.tz(date, inputFormat, timezone).endOf(\"day\").utc().format(outputFormat)\n  ];\n};\n\nexport const datePickerFormatter = date => {\n  return date ? moment(date).format(DATE_FORMAT) : \"\";\n};\n\nexport const datePickerParser = str => {\n  return moment(str, DATE_FORMAT).toDate();\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// ROUTE URL\nexport const ROUTE_CLOUD_CLIENT = \"/grax-app/client/cloud\";\nexport const ROUTE_CONFIGURATION = `${ROUTE_CLOUD_CLIENT}/configuration`;\nexport const ROUTE_CONFIGURATION_SUMMARY = `${ROUTE_CONFIGURATION}/summary`;\nexport const ROUTE_BASIC_CONFIGURATION = `${ROUTE_CONFIGURATION}/basic-configuration`;\nexport const ROUTE_ADVANCED_CONFIGURATION = `${ROUTE_CONFIGURATION}/advanced-configuration`;\nexport const ROUTE_NEW_CONFIGURATION = `${ROUTE_CONFIGURATION}/new-configuration`;\nexport const ROUTE_EMPTY_CONFIGURATION = `${ROUTE_CONFIGURATION}/empty-landing-page`;\n\n// DEDUP URLS\nexport const DEDUP_PATH = `${ROUTE_CLOUD_CLIENT}/dedup`;\nexport const DEDUP_SCENARIOS_PATH = `${DEDUP_PATH}/scenarios`;\nexport const DEDUP_SCENARIOS_DETAILS_PATH = `${DEDUP_PATH}/scenarios/:scenario_id`;\nexport const DEDUP_SCENARIOS_NEW_PATH = `${DEDUP_PATH}/scenarios/new`;\nexport const DEDUP_DUPLICATES_DETAILS_PATH = `${DEDUP_PATH}/duplicates/:scenario_id`;\n\n// ENDPOINTS\nexport const ENDPOINT_CONFIGURATION = \"/grax-app/cloud-configuration\";\nexport const ENDPOINT_VENDOR_VALIDATION = `${ENDPOINT_CONFIGURATION}/validations`;\n\nexport const GRAX_DATA_LAKE_PROXY_ADDRESS = \"/grax-app/grax-data-lake\";\nexport const DEDUP_PROXY_ADDRESS = \"/graxproxy/api/dedup\";\nexport const SCENARIO_PROXY_ADDRESS = `${DEDUP_PROXY_ADDRESS}/scenarios`;\n\n// ASSETS DIRECTORY\nexport const ASSETS_LIGHTNING_DESIGN_ICONS = `${process.env.PUBLIC_URL}/assets/icons/`;\nexport const LINK_CONFIGURATION_NEW = \"https://documentation.grax.io/docs/configuration-new\";\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Route } from \"react-router-dom\";\n\nimport {\n  ROUTE_CONFIGURATION,\n  ROUTE_BASIC_CONFIGURATION,\n  ROUTE_CLOUD_CLIENT,\n  ROUTE_ADVANCED_CONFIGURATION,\n  ROUTE_EMPTY_CONFIGURATION,\n  DEDUP_SCENARIOS_PATH,\n  DEDUP_SCENARIOS_DETAILS_PATH,\n  DEDUP_SCENARIOS_NEW_PATH,\n  DEDUP_DUPLICATES_DETAILS_PATH,\n  ROUTE_NEW_CONFIGURATION\n} from \"../../consts/addresses\";\n\nexport const NestedRoutesPropTypes = {\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string.isRequired,\n      path: PropTypes.oneOf([\n        ROUTE_CONFIGURATION,\n        ROUTE_BASIC_CONFIGURATION,\n        ROUTE_CLOUD_CLIENT,\n        ROUTE_ADVANCED_CONFIGURATION,\n        ROUTE_EMPTY_CONFIGURATION,\n        DEDUP_SCENARIOS_PATH,\n        DEDUP_SCENARIOS_DETAILS_PATH,\n        DEDUP_SCENARIOS_NEW_PATH,\n        DEDUP_DUPLICATES_DETAILS_PATH\n      ]).isRequired,\n      exact: PropTypes.bool,\n      component: PropTypes.elementType.isRequired\n    })\n  ).isRequired\n};\n\nconst NestedRoutes = ({ routes = [] }) => {\n  return (\n    <Fragment>\n      {routes.map(route => (\n        <Route\n          key={route.key}\n          path={route.path}\n          exact={route.exact}\n          render={() => <route.component routes={route.routes} />}\n        />\n      ))}\n    </Fragment>\n  );\n};\n\nexport const initialEntries = appName => {\n  const entries = [];\n\n  if (appName === \"configuration\") {\n    entries.push(ROUTE_CONFIGURATION);\n  } else if (appName === \"cloud\") {\n    entries.push(ROUTE_NEW_CONFIGURATION);\n  } else {\n    entries.push(\"/\");\n  }\n\n  return entries;\n};\n\nNestedRoutes.propTypes = NestedRoutesPropTypes;\n\nexport default NestedRoutes;\n"],"sourceRoot":""}