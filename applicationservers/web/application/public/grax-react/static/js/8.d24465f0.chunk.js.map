{"version":3,"sources":["components/GRAXLoggingDataTable.jsx","components/GRAXRestoreStatusTable.jsx","components/GRAXLogging.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/SLDSPaginator.jsx","components/GRAXDatePicker.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXCSVExportButton.jsx","components/GRAXFieldsCombobox.jsx"],"names":["stackToHtml","stackContent","split","join","GRAXLoggingStackCell","children","props","title","style","display","cursor","whiteSpace","wordWrap","wordBreak","onClick","onClickHandler","dangerouslySetInnerHTML","__html","slice","length","displayName","DataTableCell","GRAXLoggingDataTable","state","sortColumn","sortDirection","items","extraInfo","page","isLoaded","isLoading","isStackModalOpen","stackModalHtml","nextProps","nextState","this","renderKey","setState","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_select","_","union","columns","hiddenColumns","_q","filterQuery","_limit","_from","_sort","_sortType","getSortFieldType","success","data","results","filterFunction","map","item","i","forEach","val","key","SF_DATETIME_REGEXP","test","m","moment","utc","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","id","toString","total","size","totalRetrieved","bind","error","xhr","status","err","console","getDataHandler","property","sortField","_graxFieldsSelection","find","assistiveText","dialogLabel","isOpen","onRequestClose","align","className","overflow","position","variant","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onSort","handleSort","columnName","isSorted","label","endsWith","match","sortable","isSortable","sortableColumns","SLDSPaginator","totalItems","pageSize","onChangePage","isInitialLoad","GRAXCSVExportButton","params","source","height","React","Component","TS_FORMAT","TIME_INTERNAL_DAYS","PAGE_SIZE","DEFAULT_SORT_PROPERTY","DEFAULT_SORT_DIRECTION","BatchIdDataTableCell","onSelectBatchId","batchId","substring","event","preventDefault","GRAXRestoreStatusTable","onDataLoaded","Array","isArray","record","completed","Math","round","statusDone","startDate","undefined","strStartDate","unixStateDate","unix","Number","MAX_SAFE_INTEGER","endDate","strEndDate","unixEndDate","allItems","sortData","onDataLoadError","loadData","pageNum","days","updatePage","newSortProperty","newSortDirection","stateSortColumn","stateSortColumnDirection","sortColumnDirection","sortProperty","sort","a","b","x","y","stotal","handleChangePage","clear","theme","marginBottom","col","currentPage","ELASTIC_SORTABLE_TYPES","GRAXLogging","filterBatchId","retrieveLogs","onRemoveFilterBatchId","retrievedCounter","_isMounted","_graxFields","_graxFieldsSelectionList","_filterFunction","dataList","_getFilterQuery","_filterValuesFields","_graxSortableFields","subtype","q","GRAXFieldsCombobox","onLoad","e","graxFieldsSelection","graxFields","graxFieldsSelectionList","log","reduce","sortableFields","elasticField","push","cookieSubfix","SLDSSection","isCollapsible","GRAXFilterGeneration","filterableFieldOptions","onFilterValueChangeHandler","filterValuesFields","getFilterQuery","labels","removeTitle","onRemove","token","window","__grax__","_csrf","orgid","pageParams","userid","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","authorization","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","handleToggle","onToggle","category","name","getPager","isNarrow","startPage","endPage","totalPages","ceil","startIndex","endIndex","min","pages","keys","pager","setPage","iconCategory","iconName","iconPosition","disabled","index","Date","now","content","prevState","newTotalItems","newPageSize","newCurrentPage","defaultProps","GRAXDatePicker","useState","isValidDate","setIsValidDate","formatter","datePickerFormatter","parser","datePickerParser","onChange","formattedDate","date","GRAXSFieldCombobox","options","inputValue","selection","SObjectName","fieldName","picklistValues","value","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onRequestRemoveSelectedOption","onSelect","placeholder","comboboxFilterAndLimit","limit","multiple","required","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","isOpened","filterOptionsHandler","onOpen","onClose","_filterValues","_error","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","_filterValuesList","getFilterValuesList","getFilterFunction","splice","isReturned","filterOperator","filterVal","filterIsNegated","isFilterMatch","itemVal","Boolean","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","selectionIds","scope","data-label","width","defaultChecked","target","checked","SObjectType","getSelectionValues","defaultValue","onBlur","isPicklist","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","portalsRoot","document","getElementById","GRAXCSVExportForm","ReactDOM","createPortal","formId","encType","margin","padding","border","form","selectedDataIndex","getMappedFieldList","selectedFieldList","setCookie","JSON","stringify","selectedFieldsCookie","getCookie","selectedFields","parse","sortBy","_selection","onLoadHandler","onChangeHandler"],"mappings":"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","file":"static/js/8.d24465f0.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Spinner, DataTable, DataTableColumn, DataTableCell, Modal} from '@salesforce/design-system-react';\nimport SLDSPaginator from './SLDSPaginator';\nimport GRAXCSVExportButton from './GRAXCSVExportButton';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\nimport {moment, SF_DATETIME_REGEXP, DATETIME_FORMAT, DATE_FORMAT, TZ} from '../lib/utils';\n\nimport _ from 'lodash';\n\nconst ROWSXPAGE = 20;\n\n\nvar stackToHtml = function(stackContent) {\n    return stackContent.split(/\\\\n/).join('<br/>').split(/\\\\\\\\/).join('\\\\');\n};\n\n\nconst GRAXLoggingStackCell = ({ children, ...props }) => {\n\treturn (\n        <DataTableCell title={children}>\n            {children && (\n                <span\n                    style={{\n                        display: 'inline-block',\n                        cursor: 'pointer',\n                        whiteSpace: 'normal',\n                        wordWrap: 'break-word',\n                        wordBreak: 'break-all'\n                    }}\n                    onClick={() => {\n                        if(props.onClickHandler) {\n                            props.onClickHandler(children);\n                        }\n                    }}\n                    dangerouslySetInnerHTML={{__html: stackToHtml(children.slice(0, 255)) + (children.length > 255 ? '&hellip;' : '')}}\n                ></span>\n            )}\n        </DataTableCell>\n    );\n};\nGRAXLoggingStackCell.displayName = DataTableCell.displayName;\n\n\nexport default class GRAXLoggingDataTable extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n        this.state = {\n\t\t\tsortColumn: 'CreatedDate',\n\t\t\tsortDirection: 'desc',\n            items: [],\n            extraInfo: {},\n            page: 0,\n            isLoaded: false,\n            isLoading: false,\n            isStackModalOpen: false,\n            stackModalHtml: null\n\t\t};\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.renderKey !== nextProps.renderKey || this.state.items !== nextState.items || this.state.isLoaded !== nextState.isLoaded || this.state.isLoading !== nextState.isLoading || this.state.sortColumn !== nextState.sortColumn || this.state.sortDirection !== nextState.sortDirection || this.state.isStackModalOpen !== nextState.isStackModalOpen;\n    }\n\n    getDataHandler(page, sortColumn, sortDirection) {\n        this.setState({\n            isLoading: true,\n            page: page,\n            sortColumn: sortColumn,\n            sortDirection: sortDirection\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                action:'load',\n                dataIndex: this.props.dataIndex,\n                _select: _.union(this.props.columns, this.props.hiddenColumns).join(',') || 'Id',\n                _q: this.props.filterQuery,\n                _limit: ROWSXPAGE,\n                _from: ROWSXPAGE * page,\n                _sort: sortColumn + ' ' + sortDirection,\n                _sortType: this.getSortFieldType(sortColumn)\n            }),\n            /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n            success: function(data) {\n                var results = data.results;\n\n                if(this.props.filterFunction) {\n                    results = this.props.filterFunction(results);\n                }\n\n                results = _.map(results, (item, i) => {\n                    _.forEach(item, (val, key) => {\n                      if (typeof val == \"string\") {\n                        if (SF_DATETIME_REGEXP.test(val)) {\n                          const m = moment.utc(val);\n\n                          if (m.isValid()) {\n                            item[key] = m\n                              .tz(TZ)\n                              .format(m._i.indexOf(\":\") !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                          }\n                        }\n                      }\n                    });\n\n                    return {\n                        ...item,\n                        ...{id: i.toString()}\n                    }\n                });\n\n                this.setState({\n                    page: 0,\n                    data: results,\n                    extraInfo: data.extraInfo || {total: 0, size: ROWSXPAGE, totalRetrieved: 0},\n                    items: results,\n                    isLoaded: true,\n                    isLoading: false\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    isLoading: false,\n                    items: [],\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    componentDidMount() {\n        this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n    }\n\n\thandleSort(sortColumn, ...rest) {\n        if(sortColumn.property) {\n            this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n        }\n    }\n\n    getSortFieldType(sortField) {\n        if(!this.props._graxFieldsSelection) return null;\n\n        return (this.props._graxFieldsSelection.find((item) => {\n            return item.id === sortField;\n        }) || {}).type;\n    }\n\n\trender() {\n\t\treturn this.state.isLoaded ? (\n\t\t\t<div>\n                {this.state.isStackModalOpen ? (\n                    <Modal\n                        assistiveText={{ dialogLabel: 'Stack' }}\n                        isOpen={this.state.isStackModalOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                isStackModalOpen: false,\n                                stackModalHtml: null\n                            });\n                        }}\n                        align=\"top\"\n                        size=\"large\"\n                    >\n                        <section className=\"slds-p-around_medium\" style={{\n                            overflow: 'auto'\n                        }}>\n                            <span style={{\n                                display: 'inline-block',\n                                whiteSpace: 'normal',\n                                wordWrap: 'break-word',\n                                wordBreak: 'break-all'\n                            }} dangerouslySetInnerHTML={{__html: this.state.stackModalHtml}}></span>\n                        </section>\n                    </Modal>\n                ) : null}\n\n                <div style={{position: 'relative'}}>\n                    {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n                    <DataTable\n                        assistiveText={{\n                            actionsHeader: 'actions',\n                            columnSort: 'sort this column',\n                            columnSortedAscending: 'asc',\n                            columnSortedDescending: 'desc',\n                            selectAllRows: 'all rows',\n                            selectRow: 'select this row',\n                        }}\n                        fixedLayout\n                        items={this.state.items}\n                        id=\"GRAXLoggingDataTable\"\n                        onSort={this.handleSort.bind(this)}\n                    >\n\n                        {this.props.columns.map((columnName) => (\n                            <DataTableColumn\n                                key={'col' + columnName}\n                                id={columnName}\n                                isSorted={this.state.sortColumn === columnName}\n                                label={columnName.endsWith('.keyword') ? columnName.match(/(.+)\\.keyword/)[1] : columnName}\n                                property={columnName}\n                                sortable\n                                sortDirection={this.state.sortDirection}\n                                isSortable={this.props.sortableColumns == null || this.props.sortableColumns.indexOf(columnName) !== -1}\n                            >\n                                {(columnName === 'stack' || columnName === 'error' || columnName === 'description') ? (\n                                    <GRAXLoggingStackCell onClickHandler={(stackContent) => {\n                                        if(stackContent) {\n                                            this.setState({\n                                                isStackModalOpen: true,\n                                                stackModalHtml: stackToHtml(stackContent.slice(1, -1)).split(/\\s/g).join('&nbsp;')\n                                            });\n                                        }\n                                    }} />\n                                ) : null}\n                            </DataTableColumn>\n                        ))}\n                    </DataTable>\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n                    <SLDSPaginator totalItems={this.state.items.length > 0 ? this.state.extraInfo.total: 0} pageSize={ROWSXPAGE} onChangePage={(page, isInitialLoad) => {\n                        if(!isInitialLoad) {\n                            this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n                        }\n                    }} />\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n                    <GRAXCSVExportButton params={{\n                        source: 'elastic',\n                        dataIndex: this.props.dataIndex,\n                        _select: _.union(this.props.columns, this.props.hiddenColumns).join(','),\n                        _q: this.props.filterQuery,\n                        _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                        _sortType: this.getSortFieldType(this.state.sortColumn),\n                        columns: this.props.columns\n                    }} />\n                </div>\n\t\t\t</div>\n\t\t) : (\n            <div style={{ position: 'relative', height: '2rem' }}>\n                <Spinner size=\"medium\" variant=\"brand\" />\n            </div>\n        );\n\t}\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  DataTable,\n  DataTableColumn,\n  DataTableCell,\n  ScopedNotification,\n  Button\n} from \"@salesforce/design-system-react\";\nimport { moment } from \"../lib/utils\";\nimport { $, baseUrl } from \"../lib/grax-data-lake\";\nimport SLDSPaginator from \"./SLDSPaginator\";\n\nconst TS_FORMAT = \"L LT\";\nconst TIME_INTERNAL_DAYS = 7;\nconst PAGE_SIZE = 25;\n\nconst columns = [\n  {\n    key: \"batch-id\",\n    property: \"batchId\",\n    label: \"Batch ID\"\n  },\n  {\n    key: \"num-records\",\n    property: \"total\",\n    label: \"# of Records\"\n  },\n  {\n    key: \"obj-type\",\n    property: \"objectType\",\n    label: \"Object Type\"\n  },\n  {\n    key: \"queued\",\n    property: \"statusQueued\",\n    label: \"Queued\"\n  },\n  {\n    key: \"done\",\n    property: \"statusDone\",\n    label: \"Done\"\n  },\n  {\n    key: \"completed\",\n    property: \"completed\",\n    label: \"% Completed\"\n  },\n  {\n    key: \"start-time\",\n    property: \"strStartDate\",\n    label: \"Start Time\"\n  },\n  {\n    key: \"end-time\",\n    property: \"strEndDate\",\n    label: \"End Time\"\n  }\n];\n\nconst DEFAULT_SORT_PROPERTY = \"strStartDate\";\nconst DEFAULT_SORT_DIRECTION = \"desc\";\n\nconst BatchIdDataTableCell = ({ children, ...props }) => {\n  const { onSelectBatchId, item } = props;\n  return (\n    <DataTableCell title={children}>\n      <Button\n        variant=\"base\"\n        title={item.batchId}\n        label={`${item.batchId.substring(0, 15)}...`}\n        onClick={event => {\n          event.preventDefault();\n          if (onSelectBatchId) {\n            onSelectBatchId(item.batchId);\n          }\n        }}\n      />\n    </DataTableCell>\n  );\n};\nBatchIdDataTableCell.displayName = DataTableCell.displayName;\nBatchIdDataTableCell.propTypes = {\n  children: PropTypes.element.isRequired,\n  onSelectBatchId: PropTypes.func.isRequired,\n  item: PropTypes.shape({\n    batchId: PropTypes.string\n  }).isRequired\n};\n\nexport default class GRAXRestoreStatusTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      sortColumn: DEFAULT_SORT_PROPERTY,\n      sortColumnDirection: {\n        [DEFAULT_SORT_PROPERTY]: DEFAULT_SORT_DIRECTION\n      }\n    };\n    this.allItems = [];\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  onDataLoaded = data => {\n    if (Array.isArray(data)) {\n      let id = 1;\n      // pre-process raw data coming in\n      data.forEach(record => {\n        // eslint-disable-next-line no-param-reassign\n        record.completed = `${Math.round((record.statusDone * 100) / record.total)}%`;\n        // eslint-disable-next-line no-param-reassign\n        let m = record.startDate ? moment(record.startDate) : undefined;\n        // eslint-disable-next-line no-param-reassign\n        record.strStartDate = m ? m.format(TS_FORMAT) : \"\";\n        // eslint-disable-next-line no-param-reassign\n        record.unixStateDate = m ? m.unix() : Number.MAX_SAFE_INTEGER;\n        // eslint-disable-next-line no-param-reassign\n        m = record.endDate ? moment(record.endDate) : undefined;\n        // eslint-disable-next-line no-param-reassign\n        record.strEndDate = m ? m.format(TS_FORMAT) : \"\";\n        // eslint-disable-next-line no-param-reassign\n        record.unixEndDate = m ? m.unix() : Number.MAX_SAFE_INTEGER;\n        // eslint-disable-next-line no-param-reassign\n        record.id = `${id}`;\n        id += 1;\n      });\n      this.allItems = data;\n      this.sortData();\n    } else {\n      this.allItems = [];\n    }\n  };\n\n  onDataLoadError = (xhr, status, err) => {\n    this.setState({\n      error: err.toString()\n    });\n  };\n\n  loadData = () => {\n    this.setState({\n      items: [],\n      pageNum: 0\n    });\n\n    $.ajax({\n      type: \"GET\",\n      url: `${baseUrl}/grax-app/grax-data-lake/asyncQueue/status`,\n      data: {\n        days: TIME_INTERNAL_DAYS\n      },\n      success: this.onDataLoaded,\n      error: this.onDataLoadError\n    });\n  };\n\n  updatePage = pageNum => {\n    this.setState({\n      pageNum,\n      items: this.allItems.slice(pageNum * PAGE_SIZE, (pageNum + 1) * PAGE_SIZE)\n    });\n  };\n\n  sortData = (newSortProperty, newSortDirection) => {\n    const {\n      sortColumn: stateSortColumn,\n      sortColumnDirection: stateSortColumnDirection\n    } = this.state;\n    const sortProperty = newSortProperty || stateSortColumn;\n    const sortDirection = newSortDirection || stateSortColumnDirection[sortProperty];\n\n    this.allItems.sort((a, b) => {\n      let property = sortProperty;\n      if (sortProperty === \"strStartDate\") {\n        property = \"unixStateDate\";\n      } else if (sortProperty === \"strEndDate\") {\n        property = \"unixEndDate\";\n      }\n\n      let x;\n      let y;\n      if (property === \"completed\") {\n        x = Math.round((a.statusDone * 100) / a.total);\n        y = Math.round((b.statusDone * 100) / b.stotal);\n      } else {\n        x = a[property];\n        y = b[property];\n      }\n\n      let val = 0;\n\n      if (x > y) {\n        val = 1;\n      }\n      if (x < y) {\n        val = -1;\n      }\n\n      if (sortDirection === \"desc\") {\n        val *= -1;\n      }\n\n      return val;\n    });\n\n    if (\n      sortProperty !== stateSortColumn ||\n      sortDirection !== stateSortColumnDirection[sortProperty]\n    ) {\n      this.setState({\n        sortColumn: sortProperty,\n        sortColumnDirection: {\n          [sortProperty]: sortDirection\n        }\n      });\n    }\n    this.updatePage(0);\n  };\n\n  handleSort = (sortColumn, ...rest) => {\n    const sortProperty = sortColumn.property;\n    const { sortDirection } = sortColumn;\n    this.sortData(sortProperty, sortDirection);\n  };\n\n  handleChangePage = pageNum => {\n    this.updatePage(pageNum - 1);\n  };\n\n  render() {\n    const { items, error, pageNum, sortColumn, sortColumnDirection } = this.state;\n    const { onSelectBatchId } = this.props;\n    return (\n      <>\n        <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n          <Button label=\"Retrieve\" variant=\"brand\" onClick={this.loadData} />\n        </div>\n        {error && (\n          <div style={{ clear: \"both\" }}>\n            <ScopedNotification theme=\"dark\">\n              <p>{error}</p>\n            </ScopedNotification>\n          </div>\n        )}\n        {items.length > 0 && (\n          <>\n            <DataTable\n              assistiveText={{\n                actionsHeader: \"actions\",\n                columnSort: \"sort this column\",\n                columnSortedAscending: \"asc\",\n                columnSortedDescending: \"desc\"\n              }}\n              style={{ marginBottom: \"5px\" }}\n              items={items}\n              fixedLayout\n              onSort={this.handleSort}\n            >\n              {columns.map(col => (\n                <DataTableColumn\n                  key={col.key}\n                  property={col.property}\n                  label={col.label}\n                  isSorted={sortColumn === col.property}\n                  sortable\n                  sortDirection={sortColumnDirection[col.property]}\n                >\n                  {col.property === \"batchId\" && (\n                    <BatchIdDataTableCell onSelectBatchId={onSelectBatchId} />\n                  )}\n                </DataTableColumn>\n              ))}\n            </DataTable>\n            <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n              <SLDSPaginator\n                totalItems={this.allItems.length}\n                pageSize={PAGE_SIZE}\n                currentPage={pageNum + 1}\n                onChangePage={this.handleChangePage}\n              />\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nGRAXRestoreStatusTable.propTypes = {\n  onSelectBatchId: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Pill } from \"@salesforce/design-system-react\";\nimport _ from \"lodash\";\nimport SLDSSection from \"./SLDSSection\";\nimport GRAXLoggingDataTable from \"./GRAXLoggingDataTable\";\nimport GRAXFilterGeneration from \"./GRAXFilterGeneration\";\nimport GRAXFieldsCombobox from \"./GRAXFieldsCombobox\";\n\nimport { $, baseUrl, GetParams } from \"../lib/grax-data-lake\";\n\nimport GRAXRestoreStatusTable from \"./GRAXRestoreStatusTable\";\n\nconst ELASTIC_SORTABLE_TYPES = [\"text\", \"date\", \"number\"];\n\nexport default class GRAXLogging extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._isMounted = false;\n    const { columns = [\"Id\"] } = this.props;\n    this.state = {\n      retrievedCounter: 0,\n      _graxFields: null,\n      _graxFieldsSelection: null,\n      _graxFieldsSelectionList: columns,\n      _filterFunction: dataList => dataList,\n      _getFilterQuery: () => {},\n      _filterValuesFields: [],\n      _graxSortableFields: null\n    };\n  }\n\n  componentDidMount() {\n    const { _graxFieldsSelectionList } = this.state;\n    this._isMounted = true;\n\n    $.ajax({\n      type: \"GET\",\n      // dataType: 'jsonp',\n      url: `${baseUrl}/grax-app/grax-data-lake/getDataTypeFields/graxgrax_loggingindex${GetParams({\n        action: \"load\"\n      })}`,\n      data: {},\n      success: function(data) {\n        if (this._isMounted) {\n          this.setState({\n            _graxFields: _.map(_graxFieldsSelectionList, (val, i) => ({\n              id: val,\n              label: val,\n              type: data[val]\n            }))\n            // _retrieved: true\n          });\n        }\n      }.bind(this),\n      error(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        // if (this._isMounted) {\n        //   this.setState({\n        // _retrieved: true,\n        // error: err.toString()\n        //   });\n        // }\n      }\n    });\n  }\n\n  onSelectBatchId = batchId => {\n    this.setState({\n      filterBatchId: batchId\n    });\n    this.retrieveLogs();\n  };\n\n  getFilterQuery(_getFilterQuery) {\n    const { subtype } = this.props;\n    let q = 'doc.attributes.type.keyword: \"grax_logging';\n\n    if (subtype) {\n      q += `+${subtype}`;\n    }\n\n    q += '\"';\n\n    const _q = _getFilterQuery();\n    if (_q) {\n      q += ` AND (${_q})`;\n    }\n\n    const { filterBatchId } = this.state;\n    if (filterBatchId) {\n      q += ` AND (doc.executionUniqueKey.keyword: \"${filterBatchId}\")`;\n    }\n\n    return q;\n  }\n\n  onRemoveFilterBatchId = () => {\n    this.setState({\n      filterBatchId: undefined\n    });\n    this.retrieveLogs();\n  };\n\n  retrieveLogs = () => {\n    const { retrievedCounter } = this.state;\n    this.setState({\n      retrievedCounter: retrievedCounter + 1\n    });\n  };\n\n  hasFieldSelected() {\n    const { _graxFields, _graxFieldsSelectionList } = this.state;\n    return (\n      _graxFields != null && _graxFieldsSelectionList != null && _graxFieldsSelectionList.length > 0\n    );\n  }\n\n  render() {\n    const {\n      filterBatchId,\n      _graxFieldsSelection,\n      _graxFieldsSelectionList,\n      _graxFields,\n      _getFilterQuery,\n      _filterFunction,\n      _filterValuesFields,\n      _graxSortableFields,\n      retrievedCounter\n    } = this.state;\n\n    const { subtype } = this.props;\n\n    return (\n      <div>\n        <div style={{ display: \"none\" }}>\n          <GRAXFieldsCombobox\n            dataIndex=\"graxgrax_loggingindex\"\n            onLoad={(e, graxFieldsSelection, graxFields, graxFieldsSelectionList) => {\n              console.log(\"onLoad\", graxFieldsSelection, graxFieldsSelectionList, graxFields);\n\n              this.setState({\n                _graxFieldsSelection: graxFieldsSelection,\n                _graxSortableFields: _.reduce(\n                  graxFields,\n                  (sortableFields, elasticField, i) => {\n                    if (ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                      sortableFields.push(elasticField.id);\n                    }\n\n                    return sortableFields;\n                  },\n                  []\n                )\n              });\n            }}\n            cookieSubfix={subtype || \"logs\"}\n          />\n        </div>\n\n        {subtype === \"restore\" && (\n          <SLDSSection isCollapsible isOpen title=\"Restore Status\">\n            <GRAXRestoreStatusTable onSelectBatchId={this.onSelectBatchId} />\n          </SLDSSection>\n        )}\n        <SLDSSection isCollapsible isOpen title=\"Filter Logs\">\n          {_graxFieldsSelectionList != null && (\n            <GRAXFilterGeneration\n              filterableFieldOptions={_graxFields}\n              onFilterValueChangeHandler={(filterFunction, filterValuesFields, getFilterQuery) => {\n                this.setState({\n                  retrievedCounter,\n                  _filterFunction: filterFunction,\n                  _getFilterQuery: getFilterQuery,\n                  _graxFieldsSelection,\n                  _graxFieldsSelectionList,\n                  _filterValuesFields: filterValuesFields\n                });\n              }}\n            />\n          )}\n\n          <div className=\"slds-m-bottom_large\" />\n        </SLDSSection>\n\n        <SLDSSection isCollapsible isOpen title=\"GRAX Logs\">\n          <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n            <Button label=\"Retrieve\" variant=\"brand\" onClick={this.retrieveLogs} />\n            {filterBatchId && (\n              <span className=\"slds-m-left_small\">\n                <Pill\n                  labels={{\n                    label: `${filterBatchId}`,\n                    title: \"filtered by batch ID\",\n                    removeTitle: \"Remove\"\n                  }}\n                  onRemove={this.onRemoveFilterBatchId}\n                />\n              </span>\n            )}\n          </div>\n\n          <GRAXLoggingDataTable\n            key={`GRAXLoggingDataTable_${retrievedCounter}`}\n            renderKey={`GRAXLoggingDataTable_${retrievedCounter}`}\n            columns={_graxFieldsSelectionList}\n            _graxFieldsSelection={_graxFieldsSelection}\n            sortableColumns={_graxSortableFields}\n            hiddenColumns={_filterValuesFields}\n            dataIndex=\"graxgrax_loggingindex\"\n            filterFunction={_filterFunction}\n            filterQuery={this.getFilterQuery(_getFilterQuery)}\n          />\n        </SLDSSection>\n      </div>\n    );\n  }\n}\n\nGRAXLogging.propTypes = {\n  subtype: PropTypes.string.isRequired,\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      Id: PropTypes.string.isRequired\n    })\n  ).isRequired\n};\n","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      // load token\n      // anticipates that the API token is in the referrer\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ButtonGroup, Button, Tooltip } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\n\nconst defaultProps = {\n  currentPage: 1,\n  pageSize: 10\n};\n\nconst getPager = (totalItems, currentPage, pageSize) => {\n  // default to first page\n  // eslint-disable-next-line no-param-reassign\n  currentPage = currentPage || 1;\n\n  // default page size is 10\n  // eslint-disable-next-line no-param-reassign\n  pageSize = pageSize || 10;\n\n  let isNarrow = false;\n\n  if (totalItems > 10000) {\n    // eslint-disable-next-line no-param-reassign\n    totalItems = 10000;\n    isNarrow = true;\n  }\n\n  // calculate total pages\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  let startPage;\n  let endPage;\n  if (totalPages <= 10) {\n    // less than 10 total pages so show all\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // more than 10 total pages so calculate start and end pages\n    // eslint-disable-next-line no-lonely-if\n    if (currentPage <= 6) {\n      startPage = 1;\n      endPage = 10;\n    } else if (isNarrow && currentPage + 3 >= totalPages) {\n      startPage = totalPages - 8;\n      endPage = totalPages;\n    } else if (currentPage + 4 >= totalPages) {\n      startPage = totalPages - 9;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - 5;\n      endPage = currentPage + 4;\n    }\n  }\n\n  // calculate start and end item indexes\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n  // create an array of pages to ng-repeat in the pager control\n  const pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n\n  // return object with all pager properties required by the view\n  return {\n    totalItems,\n    currentPage,\n    pageSize,\n    totalPages,\n    startPage,\n    endPage,\n    startIndex,\n    endIndex,\n    pages,\n    isNarrow\n  };\n};\n\nclass SLDSPaginator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pager: {}\n    };\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillMount() {\n    // set page if items array isn't empty\n    const { totalItems, currentPage } = this.props;\n    if (totalItems) {\n      this.setPage(currentPage, true);\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      totalItems: newTotalItems,\n      pageSize: newPageSize,\n      currentPage: newCurrentPage\n    } = nextProps;\n    const { totalItems, pageSize, page } = prevState.pager;\n    if (totalItems !== newTotalItems || pageSize !== newPageSize || newCurrentPage !== page) {\n      return { pager: getPager(newTotalItems, newCurrentPage, newPageSize) };\n    }\n    return null;\n  }\n\n  setPage(page, isInitialLoad) {\n    const { totalItems, pageSize } = this.props;\n    let { pager } = this.state;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    pager = getPager(totalItems, page, pageSize);\n\n    // update state\n    this.setState({ pager });\n\n    // call change page function in parent component\n    // eslint-disable-next-line react/destructuring-assignment\n    this.props.onChangePage(page, false || isInitialLoad);\n  }\n\n  render() {\n    const { pager } = this.state;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return (\n      <ButtonGroup>\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"left\"\n          iconPosition=\"left\"\n          label=\"First\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(1)}\n          disabled={pager.currentPage === 1}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronleft\"\n          iconPosition=\"left\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage - 1)}\n          disabled={pager.currentPage === 1}\n        />\n        {pager.pages.map((page, index) => {\n          return (\n            <Button\n              // eslint-disable-next-line react/no-array-index-key\n              key={`SLDSPaginator${Date.now()}${index}`}\n              label={page}\n              variant={pager.currentPage === page ? \"brand\" : \"neutral\"}\n              onClick={() => this.setPage(page)}\n            />\n          );\n        })}\n        {pager.isNarrow && pager.currentPage >= pager.totalPages - 3 && (\n          <Tooltip\n            align=\"top right\"\n            content=\"The list is too long, try adding more filters to optimize the results.\"\n          >\n            <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n          </Tooltip>\n        )}\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronright\"\n          iconPosition=\"right\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage + 1)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"right\"\n          iconPosition=\"right\"\n          label=\"Last\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.totalPages)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n      </ButtonGroup>\n    );\n  }\n}\n\nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;\n","/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\";\n\nimport { Datepicker } from \"@salesforce/design-system-react\";\n\nimport { moment, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst GRAXDatePicker = props => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  return (\n    <div className=\"slds-is-relative\">\n      <Datepicker\n        formatter={datePickerFormatter}\n        parser={datePickerParser}\n        // eslint-disable-next-line\n        {...props}\n        onChange={(event, data) => {\n          setIsValidDate(data.formattedDate === \"\" || moment(data.date).isValid());\n\n          if (props.onChange != null) {\n            props.onChange(event, data);\n          }\n        }}\n      />\n      {isValidDate === false ? (\n        <div className=\"slds-text-color_error\">\n          The date is invalid. Please select/write a valid date.\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GRAXDatePicker;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {\n  Spinner,\n  Combobox,\n  Input,\n  Button,\n  Checkbox,\n  comboboxFilterAndLimit\n} from \"@salesforce/design-system-react\";\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport { datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <GRAXDatePicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams, token, orgid } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\",\n            token,\n            orgid\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}