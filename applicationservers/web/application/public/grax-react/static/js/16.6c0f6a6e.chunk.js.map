{"version":3,"sources":["lib/configurationUtils.js","components/GRAXCloud.jsx"],"names":["getDataSourceOrgIds","environments","orgs","Object","keys","forEach","configName","dataSources","dataSource","organizationId","push","GRAXCloudConfigurationsDataTable","lazy","ACTIONS","GRAXCLOUD_MENU","id","label","items","console","log","isDev","GRAXCloud","props","state","isLoading","error","configurations","selectedId","actionHandler","bind","this","action","params","$","ajax","type","url","baseUrl","data","success","parseJSON","e","setState","xhr","status","err","isNonError","toString","contentType","JSON","stringify","size","variant","Fragment","className","style","height","categories","onSelect","event","item","theme","fallback","globalConfigurations","_","get","onChange","globalEnvironmentDefaults","dataSourceOrgIds","isValidId","indexOf","filter","value","endsWith","reduce","result","key","cleannedValue","Array","isArray","cleanIds","React","Component","displayName"],"mappings":"qOAwBaA,EAAsB,SAAC,GAA2B,IAAD,IAAxBC,oBAAwB,MAAT,GAAS,EACtDC,EAAO,GAWb,OAVAC,OAAOC,KAAKH,GAAcI,SAAQ,SAAAC,GAC5BL,EAAaK,GAAYC,aAC3BN,EAAaK,GAAYC,YAAYF,SAAQ,SAAAG,GACvCA,EAAWC,gBACbP,EAAKQ,KAAKF,EAAWC,sBAMtBP,G,yDC3BT,IAAMS,EAAmCC,gBAAK,kBAAM,kCAE9CC,EACmB,EADnBA,EAEmB,EAGnBC,EAAiB,CACtB,CACCC,GAAI,aACJC,MAAO,aACPC,MAAO,CAEG,CAAEF,GAAI,iBAAkBC,MAAO,qBAQ3CE,QAAQC,IAAI,UAAWC,K,IAEFC,E,YAGjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,WAAW,EACXC,MAAO,KACPC,eAAgB,GAGhBC,WAAY,kBAGhB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAZN,E,iFAgBfC,KAAKF,cAAcf,K,oCAGTkB,EAAQC,GACfD,IAAWlB,IACNO,KACAa,IAAEC,KAAK,CACHC,KAAM,MAENC,IAAKC,IAAU,sCACfC,KAAM,GACNC,QAAS,SAASD,GACd,IAAIZ,EAAiBY,GAAQ,GAE7BpB,QAAQC,IAAImB,GAEZ,IACIZ,EAAiBO,IAAEO,UAAUF,GAC/B,MAAMG,IAERX,KAAKY,SAAS,CACVhB,eAAgBA,EAChBF,WAAW,KAEjBK,KAAKC,MACPL,MAAO,SAASkB,EAAKC,EAAQC,GACzB3B,QAAQO,MAAMkB,EAAKC,EAAQC,GAE3B,IAAIC,EAA4B,MAAfH,EAAIC,QAAiC,MAAfD,EAAIC,OAE3Cd,KAAKY,SAAS,CACVjB,MAAOqB,EAAa,KAAOD,EAAIE,WAC/BrB,eAAgBoB,EAAa,GAAK,KAClCtB,WAAW,KAEjBK,KAAKC,QAIZV,KACCU,KAAKY,SAAS,CACVhB,eAAgB,CACZ,0BAA6B,CACzB,wCAA2C,CACvC,sBAEJ,6BAAgC,CAC5B,sBAEJ,qCAAwC,qBACxC,gCAAmC,qBACnC,sCAAyC,CACrC,sBAEJ,oCAAuC,CACnC,sBAEJ,8BAAiC,CAC7B,sBAEJ,oBAAuB,sBAE3B,aAAgB,CACZ,KAAQ,CACJ,YAAe,CACX,CACI,SAAY,mBACZ,SAAY,WACZ,MAAS,QACT,IAAO,+BACP,eAAkB,qBAClB,SAAY,aACZ,KAAQ,0BAEZ,CACI,SAAY,mBACZ,SAAY,WACZ,MAAS,QACT,IAAO,gCACP,eAAkB,qBAClB,SAAY,aACZ,KAAQ,gCAGhB,QAAW,CACP,CACI,SAAY,SACZ,KAAQ,UACR,IAAO,sBACP,aAAgB,MAGxB,QAAW,CACP,CACI,SAAY,MACZ,KAAQ,qBACR,UAAa,YACb,gBAAmB,kBACnB,OAAU,cACV,OAAU,YACV,YAAc,IAGtB,cAAiB,CACb,CACI,SAAY,gBACZ,KAAQ,iBACR,mBAAsB,kBACtB,mBAAsB,qBACtB,uBAA0B,WAC1B,mBAAsB,GACtB,cAAiB,uBACjB,sBAAyB,gBACzB,cAAiB,MAGzB,eAAkB,CACd,CACI,sBAAyB,SACzB,KAAQ,kBACR,sBAAwB,EACxB,WAAa,EACb,kBAAqB,WACrB,0BAA6B,kBAC7B,UAAa,aAGrB,YAAe,CACX,CACI,KAAQ,YAM5BF,WAAW,KAKpBO,IAAWlB,GAA+BO,KACzCF,QAAQC,IAAIa,EAAON,gBAGpBK,IAAWlB,GAAgCO,KAC1Ca,IAAEC,KAAK,CACHC,KAAM,OAENC,IAAKC,IAAU,sCACfW,YAAa,kCACbV,KAAMW,KAAKC,UAAUlB,EAAON,gBAC5Ba,QAAS,SAASD,GACdpB,QAAQC,IAAImB,GAEZR,KAAKY,SAAS,CACVhB,eAAgBM,EAAON,gBAAkB,MAE/CG,KAAKC,MACPL,MAAO,SAASkB,EAAKC,EAAQC,GACzB3B,QAAQO,MAAMkB,EAAKC,EAAQC,GAE3Bf,KAAKY,SAAS,CACVjB,MAAOoB,EAAIE,cAEjBlB,KAAKC,U,+BAKT,IAAD,OACL,OAAGA,KAAKP,MAAMC,UAEN,kBAAC,IAAD,CAAS2B,KAAK,QAAQC,QAAQ,UAIf,MAApBtB,KAAKP,MAAME,MAEN,8BAAOK,KAAKP,MAAME,OAKtB,kBAAC,IAAM4B,SAAP,KACI,8pCAyBA,yBAAKC,UAAU,YAAYvC,GAAG,cAC1B,yBAAKuC,UAAU,4BAA4BC,MAAO,CAACC,OAAQ,UACvD,kBAAC,IAAD,CACIzC,GAAG,wBACH0C,WAAY3C,EACZa,WAAYG,KAAKP,MAAMI,WACvB+B,SAAU,SAACC,EAAOrB,GACd,EAAKI,SAAS,CAAEf,WAAYW,EAAKsB,KAAK7C,SAKlD,yBAAKuC,UAAU,6BAOX,kBAAC,IAAD,CACIA,UAAU,+CACVvC,GAAG,4BACH8C,MAAM,kBAEqB,mBAA1B/B,KAAKP,MAAMI,WACR,kBAAC,WAAD,CAAUmC,SAAU,kBAAC,IAAD,CAASX,KAAK,QAAQC,QAAQ,WAC9C,kBAACzC,EAAD,CAAkCoD,qBAAsBC,IAAEC,IAAInC,KAAKP,MAAO,2CAA4C,IAAKG,eAAgBsC,IAAEC,IAAInC,KAAKP,MAAO,8BAA+B,IAAK2C,SAAU,SAACC,EAA2BlE,GACnO,IAAIyB,EAAiB,EAAKH,MAAMG,eAEhCA,EAAeyC,0BDjS/B,SAAC,GAA+D,IAAD,IAA5DA,iCAA4D,MAAhC,GAAgC,MAA5BC,wBAA4B,MAAT,GAAS,EAC/EC,EAAY,SAAAtD,GAAE,OAAsC,IAAlCqD,EAAiBE,QAAQvD,IAOjD,OAFsBZ,OAAOC,KAAK+D,GAA2BI,QAHzC,SAAAC,GAAK,OACvBA,EAAMC,SAAS,mBAAqBD,EAAMC,SAAS,sBAIhCC,QAAO,SAACC,EAAQC,GACnC,IAAIC,EAAgBF,EAAOC,GAQ3B,OANIE,MAAMC,QAAQF,GAChBA,EAAgBA,EAAcN,OAAOF,GACH,kBAAlBQ,IAChBA,EAAgBR,EAAUQ,GAAiBA,EAAgB,MAGtD,eACFF,EADL,eAEGC,EAAMC,MAERV,GC4Q8Ea,CAAS,CAClDb,4BACAC,iBAAkBpE,EAAoB,CAAEC,mBAE1CyB,EAAezB,aAAeA,EAE9B,EAAK2B,cAAcf,EAA6B,CAC5Ca,eAAgBA,QAI5B,a,GA5QOuD,IAAMC,WAAxB7D,EACV8D,YAAc","file":"static/js/16.6c0f6a6e.chunk.js","sourcesContent":["export const cleanIds = ({ globalEnvironmentDefaults = {}, dataSourceOrgIds = [] }) => {\n  const isValidId = id => dataSourceOrgIds.indexOf(id) !== -1;\n\n  const idKeyFilter = value =>\n    value.endsWith(\"OrganizationId\") || value.endsWith(\"OrganizationIds\");\n\n  const defaultIdKeys = Object.keys(globalEnvironmentDefaults).filter(idKeyFilter);\n\n  return defaultIdKeys.reduce((result, key) => {\n    let cleannedValue = result[key];\n\n    if (Array.isArray(cleannedValue)) {\n      cleannedValue = cleannedValue.filter(isValidId);\n    } else if (typeof cleannedValue === \"string\") {\n      cleannedValue = isValidId(cleannedValue) ? cleannedValue : null;\n    }\n\n    return {\n      ...result,\n      [key]: cleannedValue\n    };\n  }, globalEnvironmentDefaults);\n};\n\nexport const getDataSourceOrgIds = ({ environments = {} }) => {\n  const orgs = [];\n  Object.keys(environments).forEach(configName => {\n    if (environments[configName].dataSources) {\n      environments[configName].dataSources.forEach(dataSource => {\n        if (dataSource.organizationId) {\n          orgs.push(dataSource.organizationId);\n        }\n      });\n    }\n  });\n\n  return orgs;\n};","import React, { Suspense, lazy } from 'react';\nimport { Spinner, VerticalNavigation, BrandBand } from '@salesforce/design-system-react';\n\nimport {$, baseUrl, isDev} from '../lib/grax-data-lake';\n\nimport { cleanIds, getDataSourceOrgIds } from '../lib/configurationUtils';\n\nimport _ from 'lodash';\n\nconst GRAXCloudConfigurationsDataTable = lazy(() => import('./GRAXCloudConfigurationsDataTable'));\n\nconst ACTIONS = {\n    LOAD_CONFIGURATIONS: 1,\n    SAVE_CONFIGURATIONS: 2\n};\n\nconst GRAXCLOUD_MENU = [\n\t{\n\t\tid: 'grax_cloud',\n\t\tlabel: 'GRAX Cloud',\n\t\titems: [\n\t\t\t//{ id: 'dashboard', label: 'Dashboard' },\n            { id: 'configurations', label: 'Configurations' },\n            //{ id: 'accounts', label: 'Accounts' },\n\t\t\t//{ id: 'users', label: 'Users' },\n\t\t\t//{ id: 'notifications', label: 'Notifications' }\n\t\t],\n\t}\n];\n\nconsole.log('isDev: ', isDev);\n\nexport default class GRAXCloud extends React.Component {\n    static displayName = 'GRAXCloudNavigation';\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            error: null,\n            configurations: {},\n\n            //selectedId: 'dashboard'\n            selectedId: 'configurations'\n        };\n\n        this.actionHandler = this.actionHandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.actionHandler(ACTIONS.LOAD_CONFIGURATIONS);\n    }\n\n    actionHandler(action, params) {\n        if(action === ACTIONS.LOAD_CONFIGURATIONS) {\n            if(!isDev) {\n                $.ajax({\n                    type: 'GET',\n                    //dataType: 'jsonp',\n                    url: baseUrl + '/grax-app/grax-cloud/configurations',\n                    data: {},\n                    success: function(data) {\n                        var configurations = data || {};\n\n                        console.log(data);\n\n                        try {\n                            configurations = $.parseJSON(data);\n                        } catch(e){}\n\n                        this.setState({\n                            configurations: configurations,\n                            isLoading: false\n                        });\n                    }.bind(this),\n                    error: function(xhr, status, err) {\n                        console.error(xhr, status, err);\n\n                        var isNonError = xhr.status === 404 || xhr.status === 200;\n\n                        this.setState({\n                            error: isNonError ? null : err.toString(),\n                            configurations: isNonError ? {} : null,\n                            isLoading: false\n                        });\n                    }.bind(this)\n                });\n            }\n\n            if(isDev) {\n                this.setState({\n                    configurations: {\n                        \"globalEnvironmentDefaults\": {\n                            \"asyncAttachmentProcessorOrganizationIds\": [\n                                \"00D4test0000Z1cUAE\"\n                            ],\n                            \"asyncBulkLoadOrganizationIds\": [\n                                \"00D46test0172yZEAQ\"\n                            ],\n                            \"bulkRestoreDestinationOrganizationId\": \"00D4test0000Z1cUAE\",\n                            \"bulkRestoreSourceOrganizationId\": \"00D3test000LiLXUA0\",\n                            \"syncSalesforceEinsteinOrganizationIds\": [\n                                \"00D46test0172yZEAQ\"\n                            ],\n                            \"syncSalesforceSourceOrganizationIds\": [\n                                \"00D46test0172yZEAQ\"\n                            ],\n                            \"metadataBackupOrganizationIds\": [\n                                \"00D46test0172yZEAQ\"\n                            ],\n                            \"odataOrganizationId\": \"00D47test0172yZEAQ\"\n                        },\n                        \"environments\": {\n                            \"test\": {\n                                \"dataSources\": [\n                                    {\n                                        \"userName\": \"sfdc@example.com\",\n                                        \"password\": \"password\",\n                                        \"token\": \"token\",\n                                        \"url\": \"https://test.salesforce.com/\",\n                                        \"organizationId\": \"00D4test0000Z1cUAE\",\n                                        \"provider\": \"salesforce\",\n                                        \"name\": \"Production Source SFDC\"\n                                    },\n                                    {\n                                        \"userName\": \"sfdc@example.com\",\n                                        \"password\": \"password\",\n                                        \"token\": \"token\",\n                                        \"url\": \"https://login.salesforce.com/\",\n                                        \"organizationId\": \"00D46test0172yZEAQ\",\n                                        \"provider\": \"salesforce\",\n                                        \"name\": \"Production Destination SFDC\"\n                                    }\n                                ],\n                                \"elastic\": [\n                                    {\n                                        \"provider\": \"bonsai\",\n                                        \"name\": \"default\",\n                                        \"url\": \"https://example.com\",\n                                        \"maxbatchsize\": 300\n                                    }\n                                ],\n                                \"storage\": [\n                                    {\n                                        \"provider\": \"aws\",\n                                        \"name\": \"Production Storage\",\n                                        \"accessKey\": \"accessKey\",\n                                        \"secretAccessKey\": \"secretAccessKey\",\n                                        \"bucket\": \"bucket-name\",\n                                        \"region\": \"us-east-2\",\n                                        \"storageOff\": false\n                                    }\n                                ],\n                                \"syncAnalytics\": [\n                                    {\n                                        \"provider\": \"syncanalytics\",\n                                        \"name\": \"Sync Analytics\",\n                                        \"marketingCloudHost\": \"example.mc.host\",\n                                        \"marketingCloudUser\": \"marketingCloudUser\",\n                                        \"marketingCloudPassword\": \"mcpasswd\",\n                                        \"marketingCloudPort\": 22,\n                                        \"syncQueryFile\": \"analytics-query.json\",\n                                        \"syncSalesforceObjects\": \"exampleObject\",\n                                        \"syncBatchSize\": 100\n                                    }\n                                ],\n                                \"metadataBackup\": [\n                                    {\n                                        \"sourceControlProvider\": \"github\",\n                                        \"name\": \"Git Integration\",\n                                        \"sourceControlEnabled\": true,\n                                        \"isEnabled\": true,\n                                        \"gitRepositoryName\": \"testrepo\",\n                                        \"gitRepoAuthorizationToken\": \"testtokenabc123\",\n                                        \"gitUserId\": \"testuser\"\n                                    }\n                                ],\n                                \"bulkProcess\": [\n                                    {\n                                        \"name\": \"test\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    isLoading: false\n                });\n            }\n        }\n\n        if(action === ACTIONS.SAVE_CONFIGURATIONS && isDev) {\n            console.log(params.configurations);\n        }\n\n        if(action === ACTIONS.SAVE_CONFIGURATIONS && !isDev) {\n            $.ajax({\n                type: 'POST',\n                //dataType: 'jsonp',\n                url: baseUrl + '/grax-app/grax-cloud/configurations',\n                contentType: \"application/json; charset=utf-8\",\n                data: JSON.stringify(params.configurations),\n                success: function(data) {\n                    console.log(data);\n\n                    this.setState({\n                        configurations: params.configurations || {}\n                    });\n                }.bind(this),\n                error: function(xhr, status, err) {\n                    console.error(xhr, status, err);\n\n                    this.setState({\n                        error: err.toString()\n                    });\n                }.bind(this)\n            });\n        }\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        if(this.state.error != null) {\n            return (\n                <span>{this.state.error}</span>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <style>{`\n                    #grax-cloud .slds-card__body .slds-section .slds-section__title,\n                    #grax-cloud .slds-card__body .slds-section .slds-section__title-action {\n                        border-radius: 0;\n                    }\n\n                    #grax-cloud .slds-card__body .slds-section .slds-section__content {\n                        background: #fff;\n                    }\n\n                    #grax-cloud .slds-card__body .slds-section.slds-is-open {\n                        margin: 2rem 0;\n                    }\n\n                    #grax-cloud .slds-card__body .slds-section.slds-is-open .slds-section__title {\n                        border-bottom-left-radius: 0;\n                        border-bottom-right-radius: 0;\n                        background: transparent;\n                    }\n\n                    #grax-cloud .slds-brand-band.dsr-brand-band_lightning-blue:before {\n                        background-image: url(./assets/images/themes/oneSalesforce/banner-brand-default.png), linear-gradient(to top, rgba(175, 197, 222, 0) 0, #1B5F9E)!important;\n                    }\n                `}</style>\n\n                <div className=\"slds-grid\" id=\"grax-cloud\">\n                    <div className=\"slds-col slds-size_1-of-4\" style={{height: '100vh'}}>\n                        <VerticalNavigation\n                            id=\"grax-cloud-navigation\"\n                            categories={GRAXCLOUD_MENU}\n                            selectedId={this.state.selectedId}\n                            onSelect={(event, data) => {\n                                this.setState({ selectedId: data.item.id });\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"slds-col slds-size_3-of-4\">\n                    {/*<div className=\"slds-col\">*/}\n                        {/*<BrandBand\n                            className=\"custom-brand-band-class slds-p-around_medium\"\n                            id=\"brand-band-large\"\n                            size=\"large\"\n                        >*/}\n                        <BrandBand\n                            className=\"custom-brand-band-class slds-p-around_medium\"\n                            id=\"brand-band-lightning-blue\"\n                            theme=\"lightning-blue\"\n                        >\n                            {this.state.selectedId === 'configurations' ? (\n                                <Suspense fallback={<Spinner size=\"large\" variant=\"brand\" />}>\n                                    <GRAXCloudConfigurationsDataTable globalConfigurations={_.get(this.state, 'configurations.globalEnvironmentDefaults', {})} configurations={_.get(this.state, 'configurations.environments', [])} onChange={(globalEnvironmentDefaults, environments) => {\n                                        var configurations = this.state.configurations;\n\n                                        configurations.globalEnvironmentDefaults = cleanIds({\n                                          globalEnvironmentDefaults,\n                                          dataSourceOrgIds: getDataSourceOrgIds({ environments })\n                                        });\n                                        configurations.environments = environments;\n\n                                        this.actionHandler(ACTIONS.SAVE_CONFIGURATIONS, {\n                                            configurations: configurations\n                                        });\n                                    }} />\n                                </Suspense>\n                            ) : null}\n                        </BrandBand>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}"],"sourceRoot":""}