{"version":3,"sources":["components/GRAXDeleteDataTable.jsx","components/GRAXDelete.jsx","lib/grax-data-lake.js","components/SLDSPaginator.jsx","components/GRAXFieldsCombobox.jsx"],"names":["GRAXDeleteDataTable","props","state","sortColumn","sortDirection","chunks","items","extraInfo","page","selection","isLoaded","isLoading","deleteConfirmIsOpen","deleteConfirmIsChecked","deleteConfirmCallback","deleteConfirmTotal","nextProps","nextState","this","renderKey","_sort","setState","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_select","_","union","columns","hiddenColumns","join","_q","filterQuery","_limit","_from","_includeMetadata","success","data","results","filterFunction","map","item","i","forEach","val","key","SF_DATETIME_REGEXP","test","m","moment","utc","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","id","toString","total","size","totalRetrieved","error","xhr","status","err","console","getDataHandler","event","slice","property","style","position","variant","assistiveText","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onRowChange","handleChanged","bind","onSort","handleSort","selectRows","columnName","isSorted","label","sortable","sortableColumns","className","SLDSPaginator","totalItems","length","pageSize","onChangePage","isInitialLoad","disabled","onClick","confirm","contentType","JSON","stringify","pick","alert","dismissible","footer","labels","onChange","e","target","checked","isOpen","onRequestClose","prompt","align","dismissOnClickOutside","title","height","React","Component","ELASTIC_SORTABLE_TYPES","GRAXDelete","selectedDataIndex","retrieved","retrievedCounter","_graxFields","_graxFieldsSelection","_graxFieldsSelectionList","_filterFunction","dataList","_getFilterQuery","_filterValuesFields","_graxSortableFields","SLDSSection","isCollapsible","GRAXObjectCombobox","onSelect","excludeIds","onRequestRemoveSelectedOption","GRAXFieldsCombobox","onLoad","log","reduce","sortableFields","elasticField","push","GRAXFilterGeneration","SObjectType","filterableFieldOptions","onFilterValueChangeHandler","hasFieldSelected","token","window","__grax__","_csrf","orgid","pageParams","userid","params","undefined","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","authorization","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","pager","currentPage","setPage","totalPages","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","getPager","iconCategory","iconName","iconPosition","index","Date","now","content","defaultProps","cookieSubfix","options","inputValue","getMappedFieldList","selectedFieldList","setCookie","_isMounted","selectedFieldsCookie","getCookie","startsWith","selectedFields","parse","sortBy","_selection","onLoadHandler","Fragment","classNameMenu","events","value","onChangeHandler","placeholder","comboboxFilterAndLimit","limit","required","multiple"],"mappings":"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","file":"static/js/11.56a56f94.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport {\n  Button,\n  Checkbox,\n  DataTable,\n  DataTableColumn,\n  Modal,\n  Spinner\n} from \"@salesforce/design-system-react\";\nimport _ from \"lodash\";\nimport React from \"react\";\n\nimport { $, baseUrl, GetParams } from \"../lib/grax-data-lake\";\nimport { DATE_FORMAT, DATETIME_FORMAT, moment, SF_DATETIME_REGEXP, TZ } from \"../lib/utils\";\nimport SLDSPaginator from \"./SLDSPaginator\";\n\nconst ROWSXPAGE = 100;\n\nexport default class GRAXDeleteDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortColumn: \"Id\",\n      sortDirection: \"asc\",\n      chunks: [],\n      items: [],\n      extraInfo: {},\n      page: 0,\n      selection: [],\n      isLoaded: false,\n      isLoading: false,\n      deleteConfirmIsOpen: false,\n      deleteConfirmIsChecked: false,\n      deleteConfirmCallback: () => {},\n      deleteConfirmTotal: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.renderKey !== nextProps.renderKey ||\n      this.state.items !== nextState.items ||\n      this.state.selection !== nextState.selection ||\n      this.state.isLoaded !== nextState.isLoaded ||\n      this.state.isLoading !== nextState.isLoading ||\n      this.state.sortColumn !== nextState.sortColumn ||\n      this.state.sortDirection !== nextState.sortDirection ||\n      this.state.deleteConfirmIsOpen !== nextState.deleteConfirmIsOpen ||\n      this.state.deleteConfirmIsChecked !== nextState.deleteConfirmIsChecked\n    );\n  }\n\n  getDataHandler(page, sortColumn, sortDirection) {\n    const _sort = sortColumn + \" \" + sortDirection;\n\n    this.setState({\n      isLoading: true,\n      page: page,\n      sortColumn: sortColumn,\n      sortDirection: sortDirection\n    });\n\n    $.ajax({\n      type: \"GET\",\n      //dataType: 'jsonp',\n      url:\n        baseUrl +\n        \"/grax-app/grax-data-lake\" +\n        GetParams({\n          action: \"load\",\n          dataIndex: this.props.dataIndex,\n          _select:\n            _.union(this.props.columns, this.props.hiddenColumns, [\n              \"Id\",\n              \"graxorgid\",\n              \"attributes.type\"\n            ]).join(\",\") || \"Id\",\n          _q: this.props.filterQuery,\n          _limit: ROWSXPAGE,\n          _from: ROWSXPAGE * page,\n          _sort: _sort,\n          _includeMetadata: true\n        }),\n      /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n      success: data => {\n        let results = data.results;\n\n        if (this.props.filterFunction) {\n          results = this.props.filterFunction(results);\n        }\n\n        results = _.map(results, (item, i) => {\n          _.forEach(item, (val, key) => {\n            if (typeof val == \"string\") {\n              if (SF_DATETIME_REGEXP.test(val)) {\n                const m = moment.utc(val);\n\n                if (m.isValid()) {\n                  item[key] = m\n                    .tz(TZ)\n                    .format(m._i.indexOf(\":\") !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                }\n              }\n            }\n\n            if (typeof val == \"boolean\") {\n              item[key] = val ? \"true\" : \"false\";\n            }\n          });\n\n          return {\n            ...item,\n            ...{ id: i.toString() }\n          };\n        });\n\n        this.setState({\n          page: 0,\n          data: results,\n          extraInfo: data.extraInfo || { total: 0, size: ROWSXPAGE, totalRetrieved: 0 },\n          items: results,\n          isLoaded: true,\n          isLoading: false\n        });\n      },\n      error: (xhr, status, err) => {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoaded: true,\n          isLoading: false,\n          items: [],\n          error: err.toString()\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n  }\n\n  handleChanged(event, data) {\n    this.setState({ selection: data.selection.slice(0, 10) });\n  }\n\n  handleSort(sortColumn, ...rest) {\n    if (sortColumn.property) {\n      this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n    }\n  }\n\n  render() {\n    return this.state.isLoaded ? (\n      <div>\n        <div style={{ position: \"relative\" }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n          <DataTable\n            assistiveText={{\n              actionsHeader: \"actions\",\n              columnSort: \"sort this column\",\n              columnSortedAscending: \"asc\",\n              columnSortedDescending: \"desc\",\n              selectAllRows: \"all rows\",\n              selectRow: \"select this row\"\n            }}\n            fixedLayout\n            items={this.state.items}\n            id=\"GRAXDeleteDataTable\"\n            onRowChange={this.handleChanged.bind(this)}\n            onSort={this.handleSort.bind(this)}\n            selection={this.state.selection}\n            selectRows={true}\n          >\n            {this.props.columns.map(columnName => (\n              <DataTableColumn\n                key={\"col\" + columnName}\n                id={columnName}\n                isSorted={this.state.sortColumn === columnName}\n                label={columnName} // TODO\n                property={columnName}\n                sortable={\n                  this.props.sortableColumns == null ||\n                  this.props.sortableColumns.indexOf(columnName) !== -1\n                }\n                sortDirection={this.state.sortDirection}\n              />\n            ))}\n          </DataTable>\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n          <SLDSPaginator\n            totalItems={this.state.items.length > 0 ? this.state.extraInfo.total : 0}\n            pageSize={ROWSXPAGE}\n            onChangePage={(page, isInitialLoad) => {\n              if (!isInitialLoad) {\n                this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n              }\n            }}\n          />\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n          <Button\n            label=\"Delete Selection\"\n            disabled={this.state.selection.length < 1 || this.state.isLoading}\n            onClick={() => {\n              this.setState({\n                deleteConfirmIsOpen: true,\n                deleteConfirmIsChecked: false,\n                deleteConfirmTotal: this.state.selection.length,\n                deleteConfirmCallback: () => {\n                  if (\n                    this.state.deleteConfirmIsChecked &&\n                    confirm(\"Are you sure that you want to delete the selected records?\")\n                  ) {\n                    $.ajax({\n                      type: \"POST\",\n                      url:\n                        baseUrl +\n                        \"/grax-app/grax-data-lake/deleteAPI\" +\n                        GetParams({\n                          action: \"delete\"\n                        }),\n                      contentType: \"application/json; charset=utf-8\",\n                      data: JSON.stringify(\n                        _.map(this.state.selection, item => {\n                          return _.pick(item, [\n                            \"Id\",\n                            \"graxorgid\",\n                            \"_id\",\n                            \"_type\",\n                            \"_index\",\n                            \"attributes.type\"\n                          ]);\n                        })\n                      ),\n                      success: data => {\n                        alert(data.state);\n                      }\n                    });\n\n                    this.setState({\n                      selection: [],\n                      deleteConfirmIsOpen: false,\n                      deleteConfirmCallback: () => {},\n                      deleteConfirmTotal: 0\n                    });\n                  }\n                }\n              });\n            }}\n          />\n        </div>\n\n        <Modal\n          dismissible={true}\n          footer={[\n            <div key=\"agree\" className=\"slds-p-bottom_small\">\n              <Checkbox\n                assistiveText={{\n                  label: \"I understand the risks\"\n                }}\n                id=\"delete-confirm\"\n                labels={{\n                  label: \"I understand the risks\"\n                }}\n                onChange={e => {\n                  this.setState({\n                    deleteConfirmIsChecked: e.target.checked\n                  });\n                }}\n              />\n            </div>,\n            <Button\n              key=\"cancelBtn\"\n              label=\"Cancel\"\n              onClick={() => {\n                this.setState({\n                  deleteConfirmIsOpen: false,\n                  deleteConfirmIsChecked: false\n                });\n              }}\n            />,\n            <Button\n              key=\"deleteBtn\"\n              label=\"Delete\"\n              onClick={this.state.deleteConfirmCallback}\n              variant=\"destructive\"\n              disabled={!this.state.deleteConfirmIsChecked}\n            />\n          ]}\n          isOpen={this.state.deleteConfirmIsOpen}\n          onRequestClose={() => {\n            this.setState({\n              deleteConfirmIsOpen: false,\n              deleteConfirmIsChecked: false\n            });\n          }}\n          prompt=\"error\"\n          size=\"medium\"\n          align=\"top\"\n          dismissOnClickOutside={false}\n          title={\n            <span>\n              Delete <b>{this.state.deleteConfirmTotal}</b> record(s)\n            </span>\n          }\n        >\n          <div className=\"slds-m-around_medium\">\n            Please confirm that you want to delete these record(s) from your GRAX Datalake.\n            <br />\n            After you confirm deletion, these records are NOT recoverable.\n          </div>\n        </Modal>\n      </div>\n    ) : (\n      <div style={{ position: \"relative\", height: \"2rem\" }}>\n        <Spinner size=\"medium\" variant=\"brand\" />\n      </div>\n    );\n  }\n}\n","///* global $ */\nimport React from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXObjectCombobox from './GRAXObjectCombobox';\nimport GRAXFieldsCombobox from './GRAXFieldsCombobox';\nimport GRAXDeleteDataTable from './GRAXDeleteDataTable';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\n\nimport {Button} from '@salesforce/design-system-react';\n\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\n\nexport default class GRAXDelete extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedDataIndex: null,\n            retrieved: false,\n            retrievedCounter: 0,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: null,\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => null),\n            _filterValuesFields: [],\n            _graxSortableFields: null\n        }\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n    \n    render() {\n        return (\n            <div>\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select the GRAX Table\">\n                    <GRAXObjectCombobox\n                        onSelect={(event, data) => {\n                            this.setState({\n                                selectedDataIndex: data[0]\n                            });\n                        }}\n                        excludeIds={['graxgrax_loggingindex']}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            this.setState({\n                                retrieved: false,\n                                selectedDataIndex: null,\n                                _graxFieldsSelection: null,\n                                _graxFieldsSelectionList: null\n                            });\n                        }}\n                    />\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n                \n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Search GRAX Table\">\n                    {\n                        this.state.selectedDataIndex != null\n                        ? (\n                            <GRAXFieldsCombobox\n                                dataIndex={this.state.selectedDataIndex.id}\n                                onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                    console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                                    this.setState({\n                                        _graxFields: _graxFields,\n                                        _graxFieldsSelection: _graxFieldsSelection,\n                                        _graxFieldsSelectionList: _graxFieldsSelectionList,\n                                        _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                            if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                                sortableFields.push(elasticField.id);\n                                            }\n                            \n                                            return sortableFields;\n                                        }, [])\n                                    });\n                                }}\n                                onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                    console.log('onChange', _graxFieldsSelection, _graxFieldsSelectionList);\n\n                                    var retrievedCounter = this.state.retrievedCounter;\n\n                                    if(_graxFieldsSelectionList.length > this.state._graxFieldsSelectionList.length) {\n                                        retrievedCounter++;\n                                    }\n\n                                    this.setState({\n                                        retrievedCounter: retrievedCounter,\n                                        _graxFieldsSelection: _graxFieldsSelection,\n                                        _graxFieldsSelectionList: _graxFieldsSelectionList\n                                    });\n                                }}\n                            />\n                        )\n                        : 'No GRAX Table selected...'\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Records\">\n                    {/*<Input\n                        iconLeft={\n                            <InputIcon\n                                assistiveText=\"Search\"\n                                name=\"search\"\n                                category=\"utility\"\n                            />\n                        }\n                        assistiveText={{ label: 'Search Term' }}\n                        id=\"record-query\"\n                        placeholder=\"Search\"\n                    />*/}\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            SObjectType={this.state.selectedDataIndex.label}\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n\t\t\t\t\t    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrieved: this.state.selectedDataIndex != null,\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} disabled={!this.hasFieldSelected()} />\n                    </div>\n\n                    {this.state.retrieved && this.state._graxFieldsSelectionList && (\n                        <GRAXDeleteDataTable\n                            key={'GRAXDeleteDataTable_' + this.state.retrievedCounter}\n                            renderKey={'GRAXDeleteDataTable_' + this.state.retrievedCounter}\n                            columns={this.state._graxFieldsSelectionList}\n                            hiddenColumns={this.state._filterValuesFields}\n                            dataIndex={this.state.selectedDataIndex.id}\n                            filterFunction={this.state._filterFunction}\n                            filterQuery={this.state._getFilterQuery()}\n                            sortableColumns={this.state._graxSortableFields}\n                        />\n                    )}\n                </SLDSSection>\n            </div>\n        );\n    }\n}","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      // load token\n      // anticipates that the API token is in the referrer\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ButtonGroup, Button, Tooltip } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\n\nconst defaultProps = {\n  currentPage: 1,\n  pageSize: 10\n};\n\nconst getPager = (totalItems, currentPage, pageSize) => {\n  // default to first page\n  // eslint-disable-next-line no-param-reassign\n  currentPage = currentPage || 1;\n\n  // default page size is 10\n  // eslint-disable-next-line no-param-reassign\n  pageSize = pageSize || 10;\n\n  let isNarrow = false;\n\n  if (totalItems > 10000) {\n    // eslint-disable-next-line no-param-reassign\n    totalItems = 10000;\n    isNarrow = true;\n  }\n\n  // calculate total pages\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  let startPage;\n  let endPage;\n  if (totalPages <= 10) {\n    // less than 10 total pages so show all\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // more than 10 total pages so calculate start and end pages\n    // eslint-disable-next-line no-lonely-if\n    if (currentPage <= 6) {\n      startPage = 1;\n      endPage = 10;\n    } else if (isNarrow && currentPage + 3 >= totalPages) {\n      startPage = totalPages - 8;\n      endPage = totalPages;\n    } else if (currentPage + 4 >= totalPages) {\n      startPage = totalPages - 9;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - 5;\n      endPage = currentPage + 4;\n    }\n  }\n\n  // calculate start and end item indexes\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n  // create an array of pages to ng-repeat in the pager control\n  const pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n\n  // return object with all pager properties required by the view\n  return {\n    totalItems,\n    currentPage,\n    pageSize,\n    totalPages,\n    startPage,\n    endPage,\n    startIndex,\n    endIndex,\n    pages,\n    isNarrow\n  };\n};\n\nclass SLDSPaginator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pager: {}\n    };\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillMount() {\n    // set page if items array isn't empty\n    const { totalItems, currentPage } = this.props;\n    if (totalItems) {\n      this.setPage(currentPage, true);\n    }\n  }\n\n  setPage(page, isInitialLoad) {\n    const { totalItems, pageSize } = this.props;\n    let { pager } = this.state;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    pager = getPager(totalItems, page, pageSize);\n\n    // update state\n    this.setState({ pager });\n\n    // call change page function in parent component\n    // eslint-disable-next-line react/destructuring-assignment\n    this.props.onChangePage(page, false || isInitialLoad);\n  }\n\n  render() {\n    const { pager } = this.state;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return (\n      <ButtonGroup>\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"left\"\n          iconPosition=\"left\"\n          label=\"First\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(1)}\n          disabled={pager.currentPage === 1}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronleft\"\n          iconPosition=\"left\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage - 1)}\n          disabled={pager.currentPage === 1}\n        />\n        {pager.pages.map((page, index) => {\n          return (\n            <Button\n              // eslint-disable-next-line react/no-array-index-key\n              key={`SLDSPaginator${Date.now()}${index}`}\n              label={page}\n              variant={pager.currentPage === page ? \"brand\" : \"neutral\"}\n              onClick={() => this.setPage(page)}\n            />\n          );\n        })}\n        {pager.isNarrow && pager.currentPage >= pager.totalPages - 3 && (\n          <Tooltip\n            align=\"top right\"\n            content=\"The list is too long, try adding more filters to optimize the results.\"\n          >\n            <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n          </Tooltip>\n        )}\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronright\"\n          iconPosition=\"right\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage + 1)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"right\"\n          iconPosition=\"right\"\n          label=\"Last\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.totalPages)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n      </ButtonGroup>\n    );\n  }\n}\n\nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}