{"version":3,"sources":["components/SLDSSection.jsx","components/GRAXSObjectCombobox.jsx","components/GRAXOrgCombobox.jsx","components/GRAXRestoreMappingFields.jsx","components/GRAXRestoreMappingDefaults.jsx","components/GRAXRestoreMapping.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx"],"names":["SLDSSection","props","isOpen","isCollapsible","state","undefined","handleToggle","bind","e","onToggle","this","setState","prevState","preventDefault","id","key","title","helpText","className","children","titleElement","join","type","onClick","assistiveText","label","category","name","size","React","Component","GRAXSObjectCombobox","options","inputValue","selection","isLoaded","error","$","ajax","url","baseUrl","GetParams","action","data","_bools","_select","success","_","map","item","i","index","toLowerCase","selectionKeys","filter","indexOf","onLoad","onSelect","length","xhr","status","err","console","toString","Fragment","classNameMenu","events","onChange","event","value","onRequestRemoveSelectedOption","labels","placeholder","comboboxFilterAndLimit","limit","variant","required","menuItem","style","position","height","GRAXOrgCombobox","GRAXRestoreMappingFilter","checked","val","log","onChangeHandler","target","disabled","errorId","option","deselectable","GRAXRestoreMappingDataLakeField","isOpened","filterOptionsHandler","onOpen","onClose","hasStaticAlignment","multiple","GRAXRestoreMappingFields","_graxFieldOptions","_graxFieldOptionsList","_sfFieldOptions","_sfFieldOptionsList","_sfMappedFields","_error","_filterSelection","isPreviouslyMapped","graxFieldOptions","sfMappedFields","sfFieldOptions","forEach","sfField","mappedFields","reduce","_selection","graxFieldName","push","sfMappedFieldsList","Object","keys","graxMappedFieldsList","flatten","values","nextProps","nextState","objectName","renderKey","fieldName","mappedValues","onMappingChange","sortBy","maxHeight","scope","data-label","width","color","onMappingChangeHandler","GRAXRestoreMappingSFField","_isMounted","onRequestOpen","onRequestClose","menuPosition","GRAXRestoreMappingDefaults","_sfDefaultValues","_mappingOptions","_maskOptionsString","_maskOptionsPhone","_maskOptionsEmail","_maskOptionsDate","mapping","masking","isOverride","selectedField","defaultValue","defaultValueStruct","getDefaultValueStruct","tempMsk","mskOpt","override","sfDefaultValues","_sfDefaultValuesFields","_sfDefaultValuesList","getDefaultValuesList","sfDefaultValue","onDefaultValueChangeHandler","splice","texttransform","display","align","content","marginRight","cursor","sfFieldName","find","onBlur","date","formatter","datePickerFormatter","parser","datePickerParser","defaultChecked","persist","sfType","removeFieldHandler","addAnotherFieldHandler","normalizeFieldType","typeName","nft","HAS_CHANGES_MESSAGE","GRAXRestoreMapping","selectedSObject","isLoading","_isCustomOrg","_customOrg","customMapping","hasChanges","isSaving","resetConfirmIsOpen","resetConfirmIsChecked","resetConfirmCallback","renderCounter","confirm","onMappingSettingsChange","fieldMap","omit","isArray","isEmpty","assign","customMappingToSave","contentType","JSON","stringify","sObjectChangeHandler","pageParams","datalakeIndex","maxWidth","_onOrgSelectionChangeHandler","_onOrgSelectionRemoveHandler","isMapLoaded","_onMappingChangeHandler","getCustomMappingToSave","saveCustomMapping","dismissible","footer","prompt","propTypes","PropTypes","string","defaultProps","RadioGroup","shortid","classNames","RadioButtonGroup","rest"],"mappings":"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","file":"static/js/12.0ff9bc00.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from \"react\";\nimport { Icon } from \"@salesforce/design-system-react\";\n\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool,\n  isCollapsible: PropTypes.bool,\n  onToggle: PropTypes.func,\n  title: PropTypes.string.isRequired,\n  helpText: PropTypes.any,\n  id: PropTypes.string,\n  key: PropTypes.string,\n  children: PropTypes.any.isRequired\n};\n\nclass SLDSSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { isOpen, isCollapsible } = props;\n\n    this.state = {\n      isOpen: isOpen === true ? true : false || isCollapsible === undefined\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(e) {\n    const { onToggle } = this.props;\n\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n\n    if (onToggle) {\n      onToggle(isOpen);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { id, key, isCollapsible, title, helpText, className, children } = this.props;\n    const { isOpen } = this.state;\n\n    const titleElement = (\n      <span\n        className={`slds-truncate${isCollapsible ? \"\" : \" slds-p-horizontal_small\"}`}\n        title={title}\n      >\n        {title}\n        {helpText}\n      </span>\n    );\n\n    return (\n      <div\n        id={id || key}\n        className={[\"slds-section\", isOpen && \"slds-is-open\", className].join(\n          \" \"\n        )}\n      >\n        <h3 className=\"slds-section__title slds-theme_shade\">\n          {isCollapsible ? (\n            <button type=\"button\" className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n              <Icon\n                assistiveText={{ label: title }}\n                category=\"utility\"\n                name=\"switch\"\n                size=\"x-small\"\n                className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n              />\n              {titleElement}\n            </button>\n          ) : (\n            titleElement\n          )}\n        </h3>\n        {isOpen && <div className=\"slds-section__content\">{children}</div>}\n      </div>\n    );\n  }\n}\n\nSLDSSection.propTypes = propTypes;\n\nexport default SLDSSection;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/describeGlobal/sobjects' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable,layoutable,triggerable',\n                _select: 'name,label'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.name,\n                        label: item.label,\n                        index: 'grax' + item.name.toLowerCase() + 'index'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.selectionKeys != null) {\n                    this.setState({\n                        selection: _.filter(this.state.options, (item) => this.props.selectionKeys.indexOf(item.index) !== -1 || this.props.selectionKeys.indexOf(item.id) !== -1)\n                    });\n                }\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n\n                if(this.props.onSelect && this.state.selection != null && this.state.selection.length > 0) {\n                    this.props.onSelect(null, this.state.selection);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                if (this.props.onRequestRemoveSelectedOption && this.props.onRequestRemoveSelectedOption(event, data.selection)) {\n                                    this.setState({\n                                        inputValue: '',\n                                        selection: data.selection,\n                                    });\n\n                                    return true;\n                                }\n\n                                return false;\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Object',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                        menuItem={this.props.menuItem}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXOrgCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getOrgList' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.id,\n                        label: item.id + ' (' + item.label + ')'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXOrgCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Org',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox, Icon, RadioButtonGroup, Radio} from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nconst IS_MAPPED_FIELD = 'Is Mapped?'\nconst DATALAKE_FIELD = 'Datalake Field';\nconst SALESFORCE_FIELD = 'Salesforce Field';\n\n\nconst MAPPED_FIELDS = 'Mapped Fields';\nconst UNMAPPED_FIELDS = 'Un-mapped fields';\nconst ALL_FIELDS = 'All fields';\n\n\nclass GRAXRestoreMappingFilter extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n\t\tthis.state = {\n            checked: ALL_FIELDS\n        };\n    }\n\n    onChangeHandler(val) {\n        console.log(\"onChangeHandler\");\n        console.log(val);\n        this.setState({\n            checked: val\n        });\n\n        if(this.props.onChange) {\n            this.props.onChange(val);\n        }\n    }\n\n    render() {\n        const options = [MAPPED_FIELDS, UNMAPPED_FIELDS, ALL_FIELDS];\n\n\t\treturn (\n            <div className=\"slds-p-bottom_medium\">\n                <RadioButtonGroup\n                    onChange={(event) => this.onChangeHandler(event.target.value)}\n\n                    disabled={this.props.disabled}\n                    required={this.props.required}\n                    name={this.props.name}\n                    errorId={this.props.errorId}\n                >\n                    {_.map(options, function(option, i) {\n                        return (\n                            <Radio\n                                key={'option' + i}\n                                id={option}\n                                label={option}\n                                value={option}\n                                checked={this.state.checked === option}\n                                variant=\"button-group\"\n                                deselectable={true}\n                            />\n                        );\n                    }.bind(this))}\n                </RadioButtonGroup>\n            </div>\n\t\t);\n\t}\n}\n\n\nclass GRAXRestoreMappingDataLakeField extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        if(this.props.selection) {\n            this.setState({\n                selection: this.props.selection\n            })\n        }\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options;\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXRestoreMappingDataLakeField'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            this.setState({\n                                isOpened: true\n                            });\n                        },\n                        onClose: (event, data) => {\n                            this.setState({\n                                isOpened: false\n                            });\n                        }\n                    }}\n                    labels={{\n                        placeholder: 'Select DataLake Field',\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant=\"readonly\"\n                    hasStaticAlignment={true}\n                    multiple={true}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXRestoreMappingFields extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _graxFieldOptions: null,\n            _graxFieldOptionsList: null,\n            _sfFieldOptions: null,\n            _sfFieldOptionsList: null,\n            _sfMappedFields: null,\n            _error: null,\n\n            _filterSelection: ALL_FIELDS,\n            isPreviouslyMapped: false\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.state._graxFieldOptions != null && this.state._sfFieldOptions != null);\n    }\n\n    componentDidMount() {\n\n        var _graxFieldOptionsList = _.map(this.props.graxFieldOptions, function(item, i) {\n            return item.id;\n        });\n\n        /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n        var _sfMappedFields = this.props.sfMappedFields || {};\n\n        var _sfFieldOptions = this.props.sfFieldOptions;\n\n        // Map selection\n        _.forEach(_sfFieldOptions, (sfField, i) => {\n            var mappedFields = _.reduce(_sfMappedFields[sfField.id] || [sfField.id], (_selection, graxFieldName) => {\n                if (_graxFieldOptionsList.indexOf(graxFieldName) !== -1) {\n                    _selection.push(graxFieldName);\n                }\n\n                return _selection;\n            }, []);\n\n            if(mappedFields.length > 0) {\n                _sfMappedFields[sfField.id] = mappedFields;\n            }\n        });\n\n        this.setState({\n            _graxFieldOptions: this.props.graxFieldOptions,\n            _graxFieldOptionsList: _graxFieldOptionsList,\n            _sfFieldOptions: _sfFieldOptions,\n            //_sfFieldOptionsList: _sfFieldOptionsList,\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.state._filterSelection !== nextState._filterSelection\n            || this.props.objectName !== nextProps.objectName\n            || this.state._graxFieldOptions !== nextState._graxFieldOptions\n            || this.state._sfFieldOptions !== nextState._sfFieldOptions\n            || this.props.graxFieldOptions !== nextProps.graxFieldOptions\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfMappedFields !== nextProps.sfMappedFields\n            || this.props.renderKey !== nextProps.renderKey\n        );\n    }\n\n    onMappingChangeHandler(fieldName, selection) {\n        var mappedValues = _.map(selection, function(item, i) {\n            return item.id;\n        });\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        if(selection) {\n            _sfMappedFields[fieldName] = mappedValues;\n        } else {\n            delete _sfMappedFields[fieldName];\n        }\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n\n        if(this.props.onMappingChange) {\n            this.props.onMappingChange(fieldName, mappedValues);\n        }\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            var sfFieldOptions = this.state._sfFieldOptions;\n\n            if(this.state._filterSelection === MAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state._sfMappedFields != null\n                        && this.state.sfMappedFieldsList.indexOf(item.id) !== -1\n                        && this.state._sfMappedFields[item.id].length !== 0\n                    );\n                });\n            }\n\n            if(this.state._filterSelection === UNMAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state.sfMappedFieldsList.indexOf(item.id) === -1\n                        || this.state._sfMappedFields[item.id] == null\n                        || this.state._sfMappedFields[item.id].length === 0\n                    );\n                });\n            }\n\n            sfFieldOptions = _.sortBy(sfFieldOptions, ['id']);\n\n            return (\n                <React.Fragment>\n                    <GRAXRestoreMappingFilter onChange={(val) => this.setState({_filterSelection: val})} />\n\n                    <div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    {this.state._filterSelection === ALL_FIELDS && (\n                                        <th className=\"slds-text-title_caps\" scope=\"col\">\n                                            <div className=\"slds-truncate\" title={IS_MAPPED_FIELD}>{IS_MAPPED_FIELD}</div>\n                                        </th>\n                                    )}\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={DATALAKE_FIELD}>{DATALAKE_FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>{SALESFORCE_FIELD}</div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(sfFieldOptions, function(sfField, i) {\n                                    var fieldName = sfField.id;\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={fieldName}>\n                                            {this.state._filterSelection === ALL_FIELDS && (\n                                                <td data-label={IS_MAPPED_FIELD} style={{width: '10vw'}}>\n                                                    {this.state._sfMappedFields[fieldName] != null && this.state._sfMappedFields[fieldName].length > 0 && (\n                                                        <Icon\n                                                            category=\"utility\"\n                                                            color=\"warning\"\n                                                            name=\"check\"\n                                                            size=\"x-small\"\n                                                        />\n                                                    )}\n                                                </td>\n                                            )}\n                                            <td data-label={SALESFORCE_FIELD} style={{width: '60vw'}}>\n                                                <GRAXRestoreMappingDataLakeField\n                                                    options={this.state._graxFieldOptions}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return this.state.graxMappedFieldsList.indexOf(option.id) === -1 && sfField.type === option.type;\n                                                        });\n                                                    }}\n                                                    selection={_.map(this.state._sfMappedFields[fieldName], (graxFieldName, i) => {\n                                                        return {\n                                                            id: graxFieldName,\n                                                            label: graxFieldName\n                                                        };\n                                                    })}\n                                                    onSelect={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                />\n                                            </td>\n                                            <td data-label={DATALAKE_FIELD} style={{width: '30vw'}}>\n                                                <div className=\"slds-truncate\" title={sfField.id}>{sfField.id}</div>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from \"react\";\nimport _ from \"lodash\";\n\nimport {\n  Spinner,\n  Combobox,\n  Input,\n  Datepicker,\n  Button,\n  Checkbox,\n  Tooltip,\n  Icon\n} from \"@salesforce/design-system-react\";\n\nimport { comboboxFilterAndLimit, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst SALESFORCE_FIELD = \"Salesforce Field\";\nconst MAPPING = \"Option\";\nconst DEFAULT_VALUE = \"Value\";\nconst IS_OVERRIDE = \"Is Override?\";\n\nclass GRAXRestoreMappingSFField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._isMounted = false;\n\n    this.state = {\n      inputValue: \"\",\n      selection: [],\n      isOpened: false\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this.props.selection) {\n      this.setState({\n        selection: this.props.selection\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  filterOptionsHandler() {\n    var options = this.props.options;\n\n    if (this.props.filterOptionsHandler && this.state.isOpened) {\n      options = this.props.filterOptionsHandler(options);\n    }\n\n    return comboboxFilterAndLimit({\n      inputValue: this.state.inputValue,\n      limit: 1000,\n      options: options,\n      selection: this.state.selection\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Combobox\n          classNameMenu={\"scrollable-GRAXRestoreMappingSFField\"}\n          events={{\n            onChange: (event, { value }) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: value\n                });\n              }\n\n              if (this.props.onChange) {\n                this.props.onChange(event, value);\n              }\n            },\n            onRequestRemoveSelectedOption: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onRequestRemoveSelectedOption) {\n                this.props.onRequestRemoveSelectedOption(event, data.selection);\n              }\n            },\n            onSelect: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onSelect) {\n                this.props.onSelect(event, data.selection);\n              }\n            },\n            onRequestOpen: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: true\n                });\n              }\n            },\n            onRequestClose: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: false\n                });\n              }\n            },\n            onClose: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: false\n                });\n              }\n            }\n          }}\n          labels={{\n            placeholder: \"Select SalesForce Field\"\n          }}\n          options={this.filterOptionsHandler()}\n          selection={this.state.selection}\n          value={this.state.inputValue}\n          variant=\"readonly\"\n          menuPosition=\"overflowBoundaryElement\"\n          hasStaticAlignment={true}\n          isOpen={this.state.isOpened}\n          hasStaticAlignment={true}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default class GRAXRestoreMappingDefaults extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _sfFieldOptions: null,\n      _sfFieldOptionsList: null,\n      _sfDefaultValues: null,\n      _mappingOptions: [{ id: \"DEFAULT\", label: \"Default To\" }, { id: \"MASK\", label: \"Mask\" }],\n      _maskOptionsString: [\n        { id: \"STRING\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"STRINGRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsPhone: [\n        { id: \"PHONE\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"PHONERND\", label: \"Randomize\" }\n      ],\n      _maskOptionsEmail: [\n        { id: \"EMAIL\", label: \"Mask the domain with @maskeddomain.com\" },\n        { id: \"EMAILRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsDate: [\n        { id: \"DATE\", label: \"Mask the year with 2000\" },\n        { id: \"DATERND\", label: \"Randomize\" }\n      ],\n      _error: null\n    };\n  }\n\n  isLoaded() {\n    return this.state._error || this.state._sfFieldOptions != null;\n  }\n\n  getDefaultValueStruct() {\n    return {\n      id: null,\n      mapping: [this.state._mappingOptions[0]],\n      masking: null,\n      value: null,\n      isOverride: false,\n      selectedField: null\n    };\n  }\n\n  getDefaultValuesList(_sfDefaultValues) {\n    return _.map(_sfDefaultValues, (defaultValue, fieldName) => {\n      var defaultValueStruct = this.getDefaultValueStruct();\n\n      defaultValueStruct.id = fieldName;\n      defaultValueStruct.mapping = _.filter(this.state._mappingOptions, (option, i) => {\n        return option.id === defaultValue.mapping;\n      });\n      if (!defaultValueStruct.mapping) {\n        defaultValueStruct.mapping = [this.state._mappingOptions[0]];\n      }\n      let tempMsk = [];\n      this.state._maskOptionsString.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsPhone.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsEmail.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsDate.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n\n      defaultValueStruct.masking = _.filter(tempMsk, (option, i) => {\n        return option.id === defaultValue.masking;\n      });\n      defaultValueStruct.value = defaultValue.value;\n      defaultValueStruct.isOverride = defaultValue.override;\n      defaultValueStruct.selectedField =\n        _.filter(this.state._sfFieldOptions || this.props.sfFieldOptions, (option, i) => {\n          return option.id === fieldName;\n        })[0] || null;\n\n      return defaultValueStruct;\n    });\n  }\n\n  componentDidMount() {\n    /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n    var _sfDefaultValues = this.props.sfDefaultValues || {};\n\n    this.setState({\n      _sfFieldOptions: this.props.sfFieldOptions,\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.getDefaultValuesList(_sfDefaultValues)\n    });\n  }\n\n  /*shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.props.objectName !== nextProps.objectName\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfDefaultValues !== nextProps.sfDefaultValues\n            || this.props.renderKey != nextProps.renderKey\n        );\n    }*/\n\n  onDefaultValueChangeHandler(sfDefaultValue, selection) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n\n    if (selection) {\n      var defaultValue = selection[0];\n\n      sfDefaultValue.id = defaultValue.id;\n      sfDefaultValue.selectedField = defaultValue;\n\n      _sfDefaultValues[sfDefaultValue.id] = {\n        mapping:\n          sfDefaultValue.mapping && sfDefaultValue.mapping.length > 0\n            ? sfDefaultValue.mapping[0].id\n            : \"\",\n        masking:\n          sfDefaultValue.masking && sfDefaultValue.masking.length > 0\n            ? sfDefaultValue.masking[0].id\n            : \"\",\n        value: sfDefaultValue.value,\n        override: sfDefaultValue.isOverride\n      };\n    } else {\n      delete _sfDefaultValues[sfDefaultValue.id];\n      sfDefaultValue.id = null;\n      sfDefaultValue.selectedField = null;\n    }\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.state._sfDefaultValuesList\n    });\n\n    if (this.props.onDefaultValueChangeHandler) {\n      this.props.onDefaultValueChangeHandler(_sfDefaultValues);\n    }\n  }\n\n  addAnotherFieldHandler() {\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    if (\n      _sfDefaultValuesList.length === 0 ||\n      _sfDefaultValuesList[_sfDefaultValuesList.length - 1].id != null\n    ) {\n      _sfDefaultValuesList.push(this.getDefaultValueStruct());\n\n      this.setState({\n        _sfDefaultValuesList: _sfDefaultValuesList\n      });\n    }\n  }\n\n  removeFieldHandler(i) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    delete _sfDefaultValues[_sfDefaultValuesList[i].id];\n    _sfDefaultValuesList.splice(i, 1);\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: _sfDefaultValuesList\n    });\n  }\n\n  render() {\n    if (this.state._error) {\n      return <div>Error: {this.state._error}</div>;\n    } else if (!this.isLoaded()) {\n      return (\n        <div style={{ position: \"relative\", height: \"5rem\" }}>\n          <Spinner size=\"small\" variant=\"base\" />\n        </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n          <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n            <thead>\n              <tr className=\"slds-line-height_reset\">\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>\n                    {SALESFORCE_FIELD}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={MAPPING}>\n                    {MAPPING}\n                    <div style={{ texttransform: \"none\", display: \"inline\" }}>\n                      <Tooltip\n                        align=\"top left\"\n                        position=\"overflowBoundaryElement\"\n                        content='Default To - Set a value which will be used for this field on all records. Mask - Select one of the options from the \"Value\" picklist'\n                      >\n                        <div style={{ marginRight: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Icon\n                            assistiveText={{ label: \"MAPPING\" }}\n                            category=\"utility\"\n                            name=\"info\"\n                            size=\"x-small\"\n                          />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={DEFAULT_VALUE}>\n                    {DEFAULT_VALUE}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={IS_OVERRIDE}>\n                    {IS_OVERRIDE}\n                    <div style={{ texttransform: \"none\", display: \"inline\" }}>\n                      <Tooltip\n                        align=\"top right\"\n                        position=\"overflowBoundaryElement\"\n                        content='If this checkbox is FALSE, the default value set here will only override blank fields. If this checkbox is TRUE, the default value set will override even populated fields.'\n                      >\n                        <div style={{ marginRight: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Icon\n                            assistiveText={{ label: IS_OVERRIDE }}\n                            category=\"utility\"\n                            name=\"info\"\n                            size=\"x-small\"\n                          />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" />\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* Iterate over fields */}\n              {_.map(\n                this.state._sfDefaultValuesList,\n                function(sfDefaultValue, i) {\n                  console.log(sfDefaultValue, i);\n\n                  var sfFieldName = sfDefaultValue.id;\n\n                  var selectedField = sfDefaultValue.selectedField;\n\n                  return (\n                    <tr className=\"slds-hint-parent\" key={\"sfFieldName: \" + (sfFieldName || \"\")}>\n                      <td data-label={SALESFORCE_FIELD} style={{ width: \"35vw\" }}>\n                        {sfFieldName || (\n                          <GRAXRestoreMappingSFField\n                            options={this.state._sfFieldOptions}\n                            filterOptionsHandler={options => {\n                              return _.filter(options, (option, i) => {\n                                return this.state._sfDefaultValuesFields.indexOf(option.id) === -1;\n                              });\n                            }}\n                            selection={[\n                              _.find(this.state._sfFieldOptions, option => {\n                                return option.id === sfFieldName;\n                              })\n                            ]}\n                            onSelect={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                            onRequestRemoveSelectedOption={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                          />\n                        )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"20vw\" }}>\n                        {selectedField &&\n                          selectedField.type !== \"text\" &&\n                          selectedField.type !== \"date\" &&\n                          this.state._mappingOptions[0] &&\n                          this.state._mappingOptions[0].label}\n                        {selectedField &&\n                          (selectedField.type === \"text\" || selectedField.type === \"date\") && (\n                            <GRAXRestoreMappingSFField\n                              options={this.state._mappingOptions}\n                              filterOptionsHandler={options => {\n                                return this.state._mappingOptions;\n                              }}\n                              selection={sfDefaultValue.mapping}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                sfDefaultValue.isOverride = false;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"35vw\" }}>\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"DEFAULT\" &&\n                          (((selectedField.type === \"text\" || selectedField.type === \"number\") && (\n                            <Input\n                              defaultValue={sfDefaultValue.value}\n                              assistiveText={{ label: selectedField.label }}\n                              id={selectedField.id}\n                              onBlur={event => {\n                                sfDefaultValue.value = event.target.value;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )) ||\n                            (selectedField.type === \"date\" && (\n                              <Datepicker\n                                value={sfDefaultValue.value}\n                                onChange={(event, data) => {\n                                  sfDefaultValue.value = data.date;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                                formatter={datePickerFormatter}\n                                parser={datePickerParser}\n                              />\n                            )) ||\n                            (selectedField.type === \"boolean\" && (\n                              <Checkbox\n                                defaultChecked={sfDefaultValue.value}\n                                onChange={e => {\n                                  e.persist();\n\n                                  sfDefaultValue.value = e.target.checked;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                              />\n                            )))}\n\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"MASK\" &&\n                          (\"sfType:\" + selectedField && (\n                            <GRAXRestoreMappingSFField\n                              /*options={this.state._maskOptions}*/\n                              options={\n                                selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString\n                              }\n                              filterOptionsHandler={options => {\n                                return selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString;\n                              }}\n                              selection={sfDefaultValue.masking}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          ))}\n                      </td>\n                      <td data-label={IS_OVERRIDE} style={{ width: \"10vw\" }}>\n                        {(sfDefaultValue.mapping && sfDefaultValue.mapping[0] == null) ||\n                        sfDefaultValue.mapping[0].id !== \"MASK\" ? (\n                          <Checkbox\n                            key=\"checkbox_enabled\"\n                            defaultChecked={sfDefaultValue.isOverride}\n                            onChange={e => {\n                              e.persist();\n\n                              sfDefaultValue.isOverride = e.target.checked;\n\n                              this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                sfDefaultValue.selectedField\n                              ]);\n                            }}\n                          />\n                        ) : (\n                          <Checkbox key=\"checkbox_disabled\" value={false} disabled={true} />\n                        )}\n                      </td>\n                      <td data-label={\"Actions\"} style={{ width: \"10vw\" }}>\n                        <Button\n                          label=\"Remove Field\"\n                          variant=\"base\"\n                          onClick={() => {\n                            this.removeFieldHandler(i);\n                          }}\n                        />\n                      </td>\n                    </tr>\n                  );\n                }.bind(this)\n              )}\n            </tbody>\n          </table>\n          {/*</div>*/}\n\n          <div className=\"slds-p-top_medium\">\n            <Button\n              label=\"Add Field\"\n              variant=\"brand\"\n              onClick={() => {\n                this.addAnotherFieldHandler();\n              }}\n            />\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport React from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXSObjectCombobox from './GRAXSObjectCombobox';\n\nimport {Spinner, Button, Checkbox, Modal} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams, pageParams} from '../lib/grax-data-lake';\n\nimport GRAXOrgCombobox from './GRAXOrgCombobox';\nimport GRAXRestoreMappingFields from './GRAXRestoreMappingFields';\nimport GRAXRestoreMappingDefaults from './GRAXRestoreMappingDefaults';\n\nfunction normalizeFieldType(typeName) {\n    var nft;\n\n    switch (typeName) {\n        case 'date':\n        case 'datetime':\n            nft = 'date';\n            break;\n        case 'boolean':\n            nft = 'boolean';\n            break;\n        case 'double':\n        case 'long':\n        case 'percent':\n        case 'currency':\n            nft = 'number';\n            break;\n        default:\n            nft = 'text';\n            break;\n    }\n\n    return nft;\n}\n\n\nconst HAS_CHANGES_MESSAGE = 'Some changes have not been saved, do you want to continue?';\n\nconst DEFAULT_VALUES_KEY = '__defaultValues__';\n\nexport default class GRAXRestoreMapping extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedSObject: null,\n            _graxFieldOptions: null,\n            _sfFieldOptions: null,\n            _sfMappedFields: {},\n            _sfDefaultValues: {}, // to null\n            _error: null,\n            isLoading: true,\n            _isCustomOrg: false,\n            _customOrg: null,\n            customMapping: null,\n            hasChanges: false,\n            isSaving: false,\n            resetConfirmIsOpen: false,\n            resetConfirmIsChecked: false,\n            resetConfirmCallback: () => ({}),\n            renderCounter: 0\n        }\n    }\n\n    _onMappingChangeHandler(fieldName, mappedValues) {\n        console.log(fieldName, mappedValues);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        _sfMappedFields[fieldName] = mappedValues;\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            hasChanges: true\n        });\n    }\n\n    _onOrgSelectionChangeHandler(selection) {\n        console.log(selection);\n\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n            });\n            // this.state._customOrg = _customOrg;\n\n            this.onMappingSettingsChange(this.state.selectedSObject, this.state.customMapping);\n        }\n    }\n\n    _onOrgSelectionRemoveHandler(selection) {\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n                _sfMappedFields: {},\n                _sfDefaultValues: {}\n            });\n        }\n    }\n\n    isMapLoaded() {\n        return this.state._error || (\n            this.state.customMapping != null\n            && this.state._graxFieldOptions != null\n            && this.state._sfFieldOptions != null\n            && this.state._sfDefaultValues != null\n        );\n    }\n\n    componentDidMount() {\n        this.setState({\n            customMapping: this.props.customMapping\n        });\n    }\n\n    onMappingSettingsChange(selectedSObject, data) {\n        var customMapping = this.state.customMapping[selectedSObject] || {};\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = customMapping[this.state._customOrg] || {};\n        }\n\n        var fieldMap = customMapping.fieldMap || {};\n\n        this.setState({\n            _sfFieldOptions: _.map(data, (item, i) => ({\n                id: item.name,\n                label: item.name,\n                type: normalizeFieldType(item.type),\n                sfType: item.type\n            })),\n            _sfMappedFields: _.omit(fieldMap, [DEFAULT_VALUES_KEY]) || {},\n            _sfDefaultValues: fieldMap[DEFAULT_VALUES_KEY] || {}\n        });\n    }\n\n    sObjectChangeHandler(selectedSObject) {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + selectedSObject + '/fields' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable',\n                _select: 'name,type'\n            },\n            success: function(data) {\n                this.onMappingSettingsChange(selectedSObject, data);\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/grax' + selectedSObject.toLowerCase() + 'index' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    _graxFieldOptions: _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: normalizeFieldType(val)\n                    }))\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    getCustomMappingToSave() {\n        console.log('this.state.customMapping', this.state.customMapping);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        var customMapping = {\n            fieldMap: _.reduce(_sfMappedFields, (customMapping, mappedFields, fieldName) => {\n                if(!(_.isArray(mappedFields) && mappedFields.length === 1 && mappedFields[0] === fieldName)) {\n                    customMapping[fieldName] = mappedFields;\n                }\n\n                return customMapping;\n            }, {})\n        };\n\n        if(!_.isEmpty(this.state._sfDefaultValues)) {\n            customMapping.fieldMap[DEFAULT_VALUES_KEY] = this.state._sfDefaultValues;\n        }\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = _.assign({}, this.state.customMapping[this.state.selectedSObject.id] || {}, {\n                [this.state._customOrg]: customMapping\n            });\n        }\n\n        console.log('customMapping', customMapping);\n\n        return _.assign({}, this.state.customMapping, {\n            [this.state.selectedSObject.id]: customMapping\n        });\n    }\n\n    saveCustomMapping(customMappingToSave) {\n        console.log('customMappingToSave', customMappingToSave);\n\n        this.setState({\n            isSaving: true\n        });\n\n        $.ajax({\n            type: 'POST',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/saveCustomMapping' + GetParams({action:'save'}),\n            contentType: \"application/json; charset=utf-8\",\n            data: JSON.stringify(customMappingToSave),\n            success: function(data) {\n                console.log(data);\n\n                this.setState({\n                    customMapping: customMappingToSave,\n                    hasChanges: false,\n                    isSaving: false\n                });\n\n                if(this.props.onMappingChange) {\n                    this.props.onMappingChange(customMappingToSave);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString(),\n                    isSaving: false\n                });\n            }.bind(this)\n        });\n\n        //alert('Save in progress...');\n    }\n\n    render() {\n        return (\n            // <div style={{position: 'relative'}}>\n            <div>\n                {this.state.isSaving && <Spinner size=\"large\" variant=\"brand\" />}\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select your Salesforce Object\">\n                    {this.state._error || <GRAXSObjectCombobox\n                        menuItem={(props) => {\n                            if(this.state.customMapping[props.option.id]) {\n                                return <b>{props.option.id}</b>;\n                            }\n\n                            return props.option.id;\n                        }}\n                        onSelect={(event, data) => {\n                            var selectedSObject = data[0];\n\n                            this.setState({\n                                selectedSObject: selectedSObject\n                            });\n\n                            this.sObjectChangeHandler(selectedSObject.id);\n                        }}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            if(!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE)) {\n                                this.setState({\n                                    selectedSObject: null,\n                                    _graxFieldOptions: null,\n                                    _sfFieldOptions: null,\n                                    //_sfDefaultValues: null,\n                                    hasChanges: false\n                                });\n\n                                return true;\n                            }\n\n                            return false;\n                        }}\n                        onLoad={(success, err) => {\n                            this.setState({\n                                isLoading: false,\n                                _error: err ? err.toString : null\n                            })\n                        }}\n                        selectionKeys={pageParams.datalakeIndex != null ? [pageParams.datalakeIndex] : null}\n                    />}\n\n                    {!this.state.isLoading && <Checkbox\n                        className=\"slds-p-top_medium\"\n                        labels={{\n                            label: 'Would you like to define a custom field Mapping for a source Organization?',\n                        }}\n                        onChange={(e) => {\n                            e.persist();\n\n                            this.setState({\n                                _isCustomOrg: e.target.checked\n                            })\n                        }}\n                    />}\n\n                    {this.state._isCustomOrg && (\n                        <div style={{maxWidth: '50vw'}}>\n                            <GRAXOrgCombobox\n                                onSelect={(event, selection) => this._onOrgSelectionChangeHandler(selection)}\n                                onRequestRemoveSelectedOption={(event, selection) => this._onOrgSelectionRemoveHandler(selection)}\n                            />\n                        </div>\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Map the fields to the appropriate Salesforce field\">\n                    {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingFields\n                                key={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                graxFieldOptions={this.state._graxFieldOptions}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfMappedFields={this.state._sfMappedFields}\n                                onMappingChange={this._onMappingChangeHandler.bind(this)}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Set a default field value for fields on this object\">\n                {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingDefaults\n                                key={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfDefaultValues={this.state._sfDefaultValues}\n                                onDefaultValueChangeHandler={(_sfDefaultValues) => {\n                                    console.log(_sfDefaultValues);\n\n                                    this.setState({\n                                        _sfDefaultValues: _sfDefaultValues,\n                                        hasChanges: true\n                                    });\n                                }}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <div style={{\n                  \"margin-bottom\": \"25rem\"\n                }}>\n                    {this.state.selectedSObject && this.isMapLoaded() && (\n                        <React.Fragment>\n                            <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                this.saveCustomMapping(customMappingToSave);\n                            }}/>\n\n                            {this.state.customMapping && this.state.customMapping[this.state.selectedSObject.id] && (\n                                <Button label=\"Reset Mapping\" variant=\"destructive\" onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: true,\n                                        resetConfirmIsChecked: false,\n                                        resetConfirmCallback: (() => {\n                                            if(this.state.resetConfirmIsChecked && confirm('Are you sure that you want to reset the selected mapping?')) {\n                                                this.setState({\n                                                    _sfMappedFields: {},\n                                                    _sfDefaultValues: {},\n\n                                                    renderCounter: this.state.renderCounter + 1,\n\n                                                    resetConfirmIsOpen: false,\n                                                    resetConfirmCallback: (() => {}),\n                                                });\n\n                                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                                if(customMappingToSave[this.state.selectedSObject.id]) {\n                                                    delete customMappingToSave[this.state.selectedSObject.id];\n                                                }\n\n                                                this.saveCustomMapping(customMappingToSave);\n                                            }\n                                        })\n                                    });\n                                }} />\n                            )}\n                        </React.Fragment>\n                    )}\n                </div>\n\n                {this.state.selectedSObject && this.isMapLoaded() && (\n                    <Modal\n                        dismissible={true}\n                        footer={[\n                            <div key=\"resetCheck\" className=\"slds-p-bottom_small\">\n                                <Checkbox\n                                    assistiveText={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    id=\"reset-confirm\"\n                                    labels={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    onChange={(e) => {\n                                        e.persist();\n\n                                        this.setState({\n                                            resetConfirmIsChecked: e.target.checked\n                                        });\n                                    }}\n                                />\n                            </div>,\n                            <Button\n                                key=\"cancelBtn\"\n                                label=\"Cancel\"\n                                onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: false,\n                                        resetConfirmIsChecked: false\n                                    });\n                                }}\n                            />,\n                            <Button\n                                key=\"resetBtn\"\n                                label=\"Reset\"\n                                onClick={this.state.resetConfirmCallback}\n                                variant=\"destructive\"\n                                disabled={!this.state.resetConfirmIsChecked}\n                            />,\n                        ]}\n                        isOpen={this.state.resetConfirmIsOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                resetConfirmIsOpen: false,\n                                resetConfirmIsChecked: false\n                            });\n                        }}\n                        prompt=\"error\"\n                        size=\"medium\"\n                        title={<span>Reset <b>{this.state.selectedSObject.id}</b> mapping?</span>}\n                    >\n                        <div className=\"slds-m-around_medium\">\n                            Removing the mapping will set the mapping back to the default values.\n                            <br />\n                            Once a mapping has been reset, it cannot be restored.\n                        </div>\n                    </Modal>\n                )}\n            </div>\n        );\n    }\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n"],"sourceRoot":""}