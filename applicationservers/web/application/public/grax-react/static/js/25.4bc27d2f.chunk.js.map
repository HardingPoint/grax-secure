{"version":3,"sources":["components/GRAXRestoreDataTable.jsx","components/SLDSPaginator.jsx","components/GRAXCSVExportButton.jsx"],"names":["GRAXRestoreDataTable","props","state","sortColumn","sortDirection","chunks","items","extraInfo","page","selection","isLoaded","isLoading","nextProps","nextState","this","renderKey","columns","setState","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_select","_","union","hiddenColumns","join","_q","filterQuery","_limit","_from","_sort","_sortType","getSortFieldType","success","data","results","filterFunction","map","item","i","forEach","val","key","SF_DATETIME_REGEXP","test","m","moment","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","isArray","id","toString","total","size","totalRetrieved","bind","error","xhr","status","err","console","getDataHandler","event","log","property","sortField","_graxFieldsSelection","find","style","position","variant","assistiveText","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onRowChange","handleChanged","onSort","handleSort","selectRows","columnName","isSorted","label","sortable","sortableColumns","className","totalItems","length","pageSize","onChangePage","isInitialLoad","disabled","onClick","confirm","restoreChildrens","sfRequestsDisabled","checkIsUserActive","useGRAXHistoryOnly","updateRecordIfExist","sendNotification","contentType","JSON","stringify","omit","alert","params","source","height","React","Component","SLDSPaginator","pager","setPage","currentPage","totalPages","getPager","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","iconCategory","iconName","iconPosition","index","Date","now","align","content","defaultProps","portalsRoot","document","getElementById","GRAXCSVExportForm","ReactDOM","createPortal","formId","token","orgid","target","method","encType","margin","padding","border","display","String","name","value","GRAXCSVExportButton","Fragment","form"],"mappings":"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","file":"static/js/25.4bc27d2f.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React from 'react';\n\nimport {Spinner, Button, DataTable, DataTableColumn} from '@salesforce/design-system-react';\nimport SLDSPaginator from './SLDSPaginator';\nimport GRAXCSVExportButton from './GRAXCSVExportButton';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\nimport {moment, SF_DATETIME_REGEXP, DATE_FORMAT, DATETIME_FORMAT, TZ} from '../lib/utils';\n\nimport _ from 'lodash';\nimport { isArray } from 'util';\n\nconst ROWSXPAGE = 100;\n\nexport default class GRAXRestoreDataTable extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n        this.state = {\n\t\t\tsortColumn: 'Id',\n\t\t\tsortDirection: 'asc',\n            chunks: [],\n            items: [],\n            extraInfo: {},\n            page: 0,\n            selection: [],\n            isLoaded: false,\n            isLoading: false\n\t\t};\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.renderKey !== nextProps.renderKey || this.state.items !== nextState.items || this.state.selection !== nextState.selection || this.state.isLoaded !== nextState.isLoaded || this.state.isLoading !== nextState.isLoading || this.state.sortColumn !== nextState.sortColumn || this.state.sortDirection !== nextState.sortDirection || this.props.columns !== nextProps.columns;\n    }\n\n    getDataHandler(page, sortColumn, sortDirection) {\n        this.setState({\n            isLoading: true,\n            page: page,\n            sortColumn: sortColumn,\n            sortDirection: sortDirection\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                action:'load',\n                dataIndex: this.props.dataIndex,\n                _select: _.union(this.props.columns, this.props.hiddenColumns).join(',') || 'Id',\n                _q: this.props.filterQuery,\n                _limit: ROWSXPAGE,\n                _from: ROWSXPAGE * page,\n                _sort: sortColumn + ' ' + sortDirection,\n                _sortType: this.getSortFieldType(sortColumn)\n            }),\n            /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n            success: function(data) {\n                var results = data.results;\n\n                if(this.props.filterFunction) {\n                    results = this.props.filterFunction(results);\n                }\n\n                results = _.map(results, (item, i) => {\n                    _.forEach(item, (val, key) => {\n                        if(typeof(val) == 'string') {\n                            if(SF_DATETIME_REGEXP.test(val)) {\n                                var m = moment(val);\n\n                                if(m.isValid()) {\n                                    item[key] = m.tz(TZ).format(m._i.indexOf(':') !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                                }\n                            }\n                        }\n\n                        if(isArray(val)) {\n                            item[key] = val.join(', ');\n                        }\n\n                        if(typeof(val) == 'boolean') {\n                            item[key] = val ? 'true' : 'false';\n                        }\n                    });\n\n                    return {\n                        ...item,\n                        ...{id: i.toString()}\n                    }\n                });\n\n                this.setState({\n                    page: 0,\n                    data: results,\n                    extraInfo: data.extraInfo || {total: 0, size: ROWSXPAGE, totalRetrieved: 0},\n                    items: results,\n                    isLoaded: true,\n                    isLoading: false\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    isLoading: false,\n                    items: [],\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n    \n    componentDidMount() {\n        this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n    }\n\n\thandleChanged(event, data) {\n\t\tthis.setState({ selection: data.selection });\n\t\tconsole.log(event, data);\n\t}\n\n\thandleSort(sortColumn, ...rest) {        \n        if(sortColumn.property) {\n            this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n        }\n    }\n    \n    getSortFieldType(sortField) {\n        if(!this.props._graxFieldsSelection) return null;\n\n        return (this.props._graxFieldsSelection.find((item) => {\n            return item.id === sortField;\n        }) || {}).type;\n    }\n\n\trender() {\n\t\treturn this.state.isLoaded ? (\n\t\t\t<div>\n                <div style={{position: 'relative'}}>\n                    {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n                    <DataTable\n                        assistiveText={{\n                            actionsHeader: 'actions',\n                            columnSort: 'sort this column',\n                            columnSortedAscending: 'asc',\n                            columnSortedDescending: 'desc',\n                            selectAllRows: 'all rows',\n                            selectRow: 'select this row',\n                        }}\n                        fixedLayout\n                        items={this.state.items}\n                        id=\"GRAXRestoreDataTable\"\n                        onRowChange={this.handleChanged.bind(this)}\n                        onSort={this.handleSort.bind(this)}\n                        selection={this.state.selection}\n                        selectRows={true}\n                    >\n\n                        {this.props.columns.map((columnName) => (\n                            <DataTableColumn\n                                key={'col' + columnName}\n                                id={columnName}\n                                isSorted={this.state.sortColumn === columnName}\n                                label={columnName} // TODO\n                                property={columnName}\n                                sortable={this.props.sortableColumns == null || this.props.sortableColumns.indexOf(columnName) !== -1}\n                                sortDirection={this.state.sortDirection}\n                            />\n                        ))}\n                    </DataTable>\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n                    <SLDSPaginator totalItems={this.state.items.length > 0 ? this.state.extraInfo.total: 0} pageSize={ROWSXPAGE} onChangePage={(page, isInitialLoad) => {\n                        if(!isInitialLoad) {\n                            this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n                        }\n                    }} />\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n                    <Button label=\"Restore Selection\" disabled={this.state.selection.length < 1 || this.state.isLoading} onClick={() => {\n                        if(confirm('Are you sure that you want to re-create the selected records?')) {\n                            $.ajax({\n                                type: 'POST',\n                                url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                                    action: 'restore',\n                                    restoreChildrens: this.props.restoreChildrens,\n                                    sfRequestsDisabled: this.props.sfRequestsDisabled,\n                                    checkIsUserActive: this.props.checkIsUserActive,\n                                    useGRAXHistoryOnly: this.props.useGRAXHistoryOnly,\n                                    updateRecordIfExist: this.props.updateRecordIfExist,\n                                    sendNotification: this.props.sendNotification\n                                }),\n                                contentType: \"application/json; charset=utf-8\",\n                                data: JSON.stringify(_.map(this.state.selection, function(item) {\n                                    return _.omit(item, ['id']);\n                                })),\n                                success: function(data) {\n                                    alert(data.state);\n                                }\n                            });\n\n                            this.setState({\n                                selection: []\n                            });\n                        }\n                    }} />\n\n                    <Button label=\"Restore All\" disabled={this.state.isLoading} onClick={() => {\n                        if(confirm('Are you sure that you want to re-create the filtered records?')) {\n                            $.ajax({\n                                type: 'POST',\n                                url: baseUrl + '/grax-app/grax-data-lake/restoreAll' + GetParams({\n                                    action: 'restore',\n                                    restoreChildrens: this.props.restoreChildrens,\n                                    sfRequestsDisabled: this.props.sfRequestsDisabled,\n                                    checkIsUserActive: this.props.checkIsUserActive,\n                                    useGRAXHistoryOnly: this.props.useGRAXHistoryOnly,\n                                    updateRecordIfExist: this.props.updateRecordIfExist,\n                                    sendNotification: this.props.sendNotification\n                                }),\n                                contentType: \"application/json; charset=utf-8\",\n                                data: JSON.stringify({\n                                    dataIndex: this.props.dataIndex,\n                                    _q: this.props.filterQuery,\n                                    _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                                    _sortType: this.getSortFieldType(this.state.sortColumn)\n                                }),\n                                success: function(data) {\n                                    alert(data.state);\n                                }\n                            });\n\n                            this.setState({\n                                selection: []\n                            });\n                        }\n                    }} />\n\n                    <GRAXCSVExportButton params={{\n                        source: 'elastic',\n                        dataIndex: this.props.dataIndex,\n                        _select: _.union(this.props.columns, this.props.hiddenColumns).join(','),\n                        _q: this.props.filterQuery,\n                        _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                        _sortType: this.getSortFieldType(this.state.sortColumn),\n                        columns: this.props.columns\n                    }} />\n                </div>\n\t\t\t</div>\n\t\t) : (\n            <div style={{ position: 'relative', height: '2rem' }}>\n                <Spinner size=\"medium\" variant=\"brand\" />\n            </div>\n        );\n\t}\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonGroup, Button, Tooltip} from '@salesforce/design-system-react';\n \nconst propTypes = {\n    totalItems: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    pageSize: PropTypes.number,\n}\n \nconst defaultProps = {\n    currentPage: 1,\n    pageSize: 10\n}\n \nclass SLDSPaginator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pager: {}\n        };\n    }\n \n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.totalItems) {\n            this.setPage(this.props.currentPage, true);\n        }\n    }\n \n    setPage(page, isInitialLoad) {\n        var { totalItems, pageSize } = this.props;\n        var pager = this.state.pager;\n \n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n \n        // get new pager object for specified page\n        pager = this.getPager(totalItems, page, pageSize);\n \n        // update state\n        this.setState({ pager: pager });\n \n        // call change page function in parent component\n        this.props.onChangePage(page, false || isInitialLoad);\n    }\n \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n \n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        var isNarrow = false;\n\n        if(totalItems > 10000) {\n            totalItems = 10000;\n            isNarrow = true;\n        }\n \n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n \n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (isNarrow && (currentPage + 3) >= totalPages) {\n                startPage = totalPages - 8;\n                endPage = totalPages;\n            } else if ((currentPage + 4) >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n \n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages,\n            isNarrow: isNarrow\n        };\n    }\n \n    render() {\n        var pager = this.state.pager;\n \n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n \n        return (\n            <ButtonGroup>\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"left\"\n\t\t\t\t\t\ticonPosition=\"left\" label=\"First\" variant=\"neutral\" onClick={() => this.setPage(1)} disabled={pager.currentPage === 1} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronleft\"\n\t\t\t\t\t\ticonPosition=\"left\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage - 1)} disabled={pager.currentPage === 1} />\n                {pager.pages.map((page, index) => {\n                    return (\n                        <Button key={'SLDSPaginator' + Date.now() + index} label={page} variant={pager.currentPage === page ? 'brand' : 'neutral'} onClick={() => this.setPage(page)} />\n                    )\n                })}\n                {pager.isNarrow && pager.currentPage >= (pager.totalPages - 3) && (\n                    <Tooltip\n                        align=\"top right\"\n                        content=\"The list is too long, try adding more filters to optimize the results.\"\n                    >\n                        <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n                    </Tooltip>\n                )}\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\t\ticonPosition=\"right\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage + 1)} disabled={pager.currentPage === pager.totalPages} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"right\"\n\t\t\t\t\t\ticonPosition=\"right\" label=\"Last\" variant=\"neutral\" onClick={() => this.setPage(pager.totalPages)} disabled={pager.currentPage === pager.totalPages} />\n            </ButtonGroup>\n        );\n    }\n}\n \nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams, token, orgid } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\",\n            token,\n            orgid\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}