{"version":3,"sources":["components/SLDSSection.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/SLDSPaginator.jsx","components/GRAXCSVExportButton.jsx","public/js/jquery.sldsTree.js","components/GRAXAuditDataTable.jsx","components/GRAXTree.jsx","components/GRAXAudit.jsx"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","GRAXSFieldCombobox","options","inputValue","selection","isLoaded","error","$","ajax","type","url","baseUrl","SObjectName","fieldName","GetParams","action","data","_select","success","_","map","picklistValues","item","i","value","onLoad","xhr","status","err","console","toString","length","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onChange","event","onRequestRemoveSelectedOption","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","variant","multiple","required","style","position","height","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","_isMounted","isOpened","log","filterOptionsHandler","onOpen","onClose","GRAXFilterGeneration","_filterValues","_error","_filterValuesFields","filterableFieldOptions","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","keys","_filterValuesList","getFilterValuesList","onFilterValueChangeHandler","getFilterFunction","getFilterQuery","push","splice","dataList","isReturned","forEach","filterOperator","filterVal","Array","isArray","split","filterIsNegated","isFilterMatch","itemVal","Boolean","moment","format","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","reduce","selectionIds","scope","data-label","width","indexOf","find","defaultChecked","target","checked","SObjectType","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","disabled","SLDSPaginator","pager","totalItems","setPage","currentPage","page","isInitialLoad","pageSize","totalPages","getPager","onChangePage","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","iconCategory","iconName","iconPosition","index","Date","now","align","content","defaultProps","portalsRoot","document","getElementById","GRAXCSVExportForm","ReactDOM","createPortal","formId","params","source","token","orgid","method","encType","margin","padding","border","display","val","GRAXCSVExportButton","form","svgns","fn","sldsTree","settings","extend","items","childs","attrs","root","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","onDiv","$div","append","onButton","$button","onFinish","$root","getTreeItemContent","level","attr","toggleClass","icon","createElementNS","setAttribute","class","icon_use","setAttributeNS","path","appendChild","on","getTreeItemButton","getTreeItem","getTree","html","jQuery","GRAXTimeMachineCell","onClickHandler","displayName","DataTableCell","selectedDataIndex","GRAXAuditDataTable","sortColumn","sortDirection","extraInfo","isLoading","isTimeMachineModalOpen","timeMachineRecord","nextProps","nextState","renderKey","dataIndex","union","columns","hiddenColumns","_q","filterQuery","_limit","_from","_sort","_sortType","getSortFieldType","results","filterFunction","SF_DATETIME_REGEXP","test","m","isValid","tz","TZ","_i","DATETIME_FORMAT","DATE_FORMAT","total","totalRetrieved","getDataHandler","property","sortField","_graxFieldsSelection","dialogLabel","overflow","JSON","stringify","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onSort","handleSort","columnName","isSorted","endsWith","match","sortable","isSortable","sortableColumns","Key","slice","cookieSubfix","renderFieldListSelector","$fieldListSelector","$fieldlist","onLoadHandler","onChangeHandler","sort","a","b","domPrefix","isSelected","fields","countChecked","cookieSelected","getCookie","updateValue","eventHandler","selectedFieldList","selectedFields","field","selected","getSelectedFields","setCookie","prop","GRAXTree","_selection","fieldItem","getMappedFieldSelection","$el","el","fieldList","minHeight","ref","fieldlist","ELASTIC_SORTABLE_TYPES","GRAXAudit","retrieved","retrievedCounter","_graxFields","_graxFieldsSelectionList","_filterFunction","_getFilterQuery","_graxSortableFields","sortableFields","elasticField"],"mappings":"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","file":"static/js/5.51646e73.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonGroup, Button, Tooltip} from '@salesforce/design-system-react';\n \nconst propTypes = {\n    totalItems: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    pageSize: PropTypes.number,\n}\n \nconst defaultProps = {\n    currentPage: 1,\n    pageSize: 10\n}\n \nclass SLDSPaginator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pager: {}\n        };\n    }\n \n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.totalItems) {\n            this.setPage(this.props.currentPage, true);\n        }\n    }\n \n    setPage(page, isInitialLoad) {\n        var { totalItems, pageSize } = this.props;\n        var pager = this.state.pager;\n \n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n \n        // get new pager object for specified page\n        pager = this.getPager(totalItems, page, pageSize);\n \n        // update state\n        this.setState({ pager: pager });\n \n        // call change page function in parent component\n        this.props.onChangePage(page, false || isInitialLoad);\n    }\n \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n \n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        var isNarrow = false;\n\n        if(totalItems > 10000) {\n            totalItems = 10000;\n            isNarrow = true;\n        }\n \n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n \n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (isNarrow && (currentPage + 3) >= totalPages) {\n                startPage = totalPages - 8;\n                endPage = totalPages;\n            } else if ((currentPage + 4) >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n \n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages,\n            isNarrow: isNarrow\n        };\n    }\n \n    render() {\n        var pager = this.state.pager;\n \n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n \n        return (\n            <ButtonGroup>\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"left\"\n\t\t\t\t\t\ticonPosition=\"left\" label=\"First\" variant=\"neutral\" onClick={() => this.setPage(1)} disabled={pager.currentPage === 1} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronleft\"\n\t\t\t\t\t\ticonPosition=\"left\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage - 1)} disabled={pager.currentPage === 1} />\n                {pager.pages.map((page, index) => {\n                    return (\n                        <Button key={'SLDSPaginator' + Date.now() + index} label={page} variant={pager.currentPage === page ? 'brand' : 'neutral'} onClick={() => this.setPage(page)} />\n                    )\n                })}\n                {pager.isNarrow && pager.currentPage >= (pager.totalPages - 3) && (\n                    <Tooltip\n                        align=\"top right\"\n                        content=\"The list is too long, try adding more filters to optimize the results.\"\n                    >\n                        <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n                    </Tooltip>\n                )}\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\t\ticonPosition=\"right\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage + 1)} disabled={pager.currentPage === pager.totalPages} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"right\"\n\t\t\t\t\t\ticonPosition=\"right\" label=\"Last\" variant=\"neutral\" onClick={() => this.setPage(pager.totalPages)} disabled={pager.currentPage === pager.totalPages} />\n            </ButtonGroup>\n        );\n    }\n}\n \nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams, token, orgid } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\",\n            token,\n            orgid\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\nimport {Spinner, DataTable, DataTableColumn, DataTableCell, Modal} from '@salesforce/design-system-react';\nimport SLDSPaginator from './SLDSPaginator';\nimport GRAXCSVExportButton from './GRAXCSVExportButton';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\nimport {moment, SF_DATETIME_REGEXP, DATETIME_FORMAT, DATE_FORMAT, TZ} from '../lib/utils';\n\nimport _ from 'lodash';\n\nconst ROWSXPAGE = 20;\n\n\nconst GRAXTimeMachineCell = ({ children, ...props }) => {\n\treturn (\n        <DataTableCell title={children}>\n            {children && (\n                <a onClick={(e) => {\n                    if(props.onClickHandler) {\n                        props.onClickHandler(children);\n                    }\n\n                    e.preventDefault();\n                }}>\n                    Load this version\n                </a>\n            )}\n        </DataTableCell>\n    );\n};\nGRAXTimeMachineCell.displayName = DataTableCell.displayName;\n\n\nexport default class GRAXAuditDataTable extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n        this.state = {\n\t\t\tsortColumn: 'CreatedDate',\n\t\t\tsortDirection: 'desc',\n            items: [],\n            extraInfo: {},\n            page: 0,\n            isLoaded: false,\n            isLoading: false,\n            isTimeMachineModalOpen: false,\n            timeMachineRecord: null\n\t\t};\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.renderKey !== nextProps.renderKey || this.state.items !== nextState.items || this.state.isLoaded !== nextState.isLoaded || this.state.isLoading !== nextState.isLoading || this.state.sortColumn !== nextState.sortColumn || this.state.sortDirection !== nextState.sortDirection || this.state.isTimeMachineModalOpen !== nextState.isTimeMachineModalOpen;\n    }\n\n    getDataHandler(page, sortColumn, sortDirection) {\n        this.setState({\n            isLoading: true,\n            page: page,\n            sortColumn: sortColumn,\n            sortDirection: sortDirection\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                action:'load',\n                dataIndex: this.props.dataIndex,\n                _select: _.union(this.props.columns, this.props.hiddenColumns).join(',') || 'Id',\n                _q: this.props.filterQuery,\n                _limit: ROWSXPAGE,\n                _from: ROWSXPAGE * page,\n                _sort: sortColumn + ' ' + sortDirection,\n                _sortType: this.getSortFieldType(sortColumn)\n            }),\n            /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n            success: function(data) {\n                var results = data.results;\n\n                if(this.props.filterFunction) {\n                    results = this.props.filterFunction(results);\n                }\n\n                results = _.map(results, (item, i) => {\n                    _.forEach(item, (val, key) => {\n                        if(typeof(val) == 'string') {\n                            if(SF_DATETIME_REGEXP.test(val)) {\n                                var m = moment(val);\n\n                                if(m.isValid()) {\n                                    item[key] = m.tz(TZ).format(m._i.indexOf(':') !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                                }\n                            }\n                        }\n                    });\n\n                    return {\n                        ...item,\n                        ...{id: i.toString()}\n                    }\n                });\n\n                this.setState({\n                    page: 0,\n                    data: results,\n                    extraInfo: data.extraInfo || {total: 0, size: ROWSXPAGE, totalRetrieved: 0},\n                    items: results,\n                    isLoaded: true,\n                    isLoading: false\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    isLoading: false,\n                    items: [],\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n    \n    componentDidMount() {\n        this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n    }\n\n\thandleSort(sortColumn, ...rest) {        \n        if(sortColumn.property) {\n            this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n        }\n    }\n    \n    getSortFieldType(sortField) {\n        if(!this.props._graxFieldsSelection) return null;\n\n        return (this.props._graxFieldsSelection.find((item) => {\n            return item.id === sortField;\n        }) || {}).type;\n    }\n\n\trender() {\n\t\treturn this.state.isLoaded ? (\n\t\t\t<div>\n                {this.state.isTimeMachineModalOpen ? (\n                    <Modal\n                        assistiveText={{ dialogLabel: 'Time Machine Record' }}\n                        isOpen={this.state.isTimeMachineModalOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                isTimeMachineModalOpen: false,\n                                timeMachineRecord: null\n                            });\n                        }}\n                        align=\"top\"\n                        size=\"large\"\n                    >\n                        <section className=\"slds-p-around_medium\" style={{\n                            overflow: 'auto'\n                        }}>\n                            {JSON.stringify(this.state.timeMachineRecord)}\n                        </section>\n                    </Modal>\n                ) : null}\n\n                <div style={{position: 'relative'}}>\n                    {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n                    <DataTable\n                        assistiveText={{\n                            actionsHeader: 'actions',\n                            columnSort: 'sort this column',\n                            columnSortedAscending: 'asc',\n                            columnSortedDescending: 'desc',\n                            selectAllRows: 'all rows',\n                            selectRow: 'select this row',\n                        }}\n                        fixedLayout\n                        items={this.state.items}\n                        id=\"GRAXAuditDataTable\"\n                        onSort={this.handleSort.bind(this)}\n                    >\n\n                        {this.props.columns.map((columnName) => (\n                            <DataTableColumn\n                                key={'col' + columnName}\n                                id={columnName}\n                                isSorted={this.state.sortColumn === columnName}\n                                label={columnName.endsWith('.keyword') ? columnName.match(/(.+)\\.keyword/)[1] : columnName}\n                                property={columnName}\n                                sortable\n                                sortDirection={this.state.sortDirection}\n                                isSortable={this.props.sortableColumns == null || this.props.sortableColumns.indexOf(columnName) !== -1}\n                            >\n                                {(columnName === 'ObjectVersion') ? (\n                                    <GRAXTimeMachineCell onClickHandler={(timeMachineRecord) => {\n                                        console.log({\n                                            Key: timeMachineRecord.split(/(\\/grax\\/)/).slice(1).join('')\n                                        });\n\n                                        /*var params = {\n                                            \"orgid\" : \"00D1I000003nRMaUAM\",\n                                            \"objecttype\" : \"Account\",\n                                            \"objectid\" : \"0014600000VpLa3AAF\",\n                                            \"filename\" : \"Account-0014600000VpLa3AAF-2018-10-23T15-38-14.json\"\n                                        };*/\n                                        \n                                        if(timeMachineRecord) {\n                                            this.setState({\n                                                isTimeMachineModalOpen: true,\n                                                timeMachineRecord: timeMachineRecord\n                                            });\n                                        }\n                                    }} />\n                                ) : null}\n                            </DataTableColumn>\n                        ))}\n                    </DataTable>\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n                    <SLDSPaginator totalItems={this.state.items.length > 0 ? this.state.extraInfo.total: 0} pageSize={ROWSXPAGE} onChangePage={(page, isInitialLoad) => {\n                        if(!isInitialLoad) {\n                            this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n                        }\n                    }} />\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n                    <GRAXCSVExportButton params={{\n                        source: 'elastic',\n                        dataIndex: this.props.dataIndex,\n                        _select: _.union(this.props.columns, this.props.hiddenColumns).join(','),\n                        _q: this.props.filterQuery,\n                        _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                        _sortType: this.getSortFieldType(this.state.sortColumn),\n                        columns: this.props.columns\n                    }} />\n                </div>\n\t\t\t</div>\n\t\t) : (\n            <div style={{ position: 'relative', height: '2rem' }}>\n                <Spinner size=\"medium\" variant=\"brand\" />\n            </div>\n        );\n\t}\n}","/* eslint-disable no-multi-str */\nimport React from 'react';\nimport '../public/js/jquery.sldsTree.js';\n\nimport {Spinner} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nimport _ from 'lodash';\n\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\nvar renderFieldListSelector = function($fieldListSelector, $fieldlist, data, onLoadHandler, onChangeHandler) {\n    data.sort(function (a, b) {\n        if (a.label > b.label) {\n            return 1;\n        }\n\n        if (a.label < b.label) {\n            return -1;\n        }\n        \n        return 0;\n    });\n\n    var domPrefix = Date.now() + selectedDataIndex + cookieSubfix;\n\n    $fieldListSelector.sldsTree({ \n        data: data,\n        attrs: {\n            root: {'class': 'slds-scrollable_y', 'style': 'max-height: 25vw'}\n        },\n        onDiv: function($div, item, settings) {\n            $div.append('<div class=\"slds-size_1-of-1\">\\\n            <div class=\"slds-form-element\">\\\n                <div class=\"slds-form-element__control\">\\\n                    <span class=\"slds-checkbox\">\\\n                    <input name=\"field_' + domPrefix + item[settings.items.id] + '\" id=\"field_' + domPrefix + item[settings.items.id] + '\" type=\"checkbox\" ' + (item.isSelected ? 'checked' : '') + ' />\\\n                    <label class=\"slds-checkbox__label\" for=\"field_' + domPrefix + item[settings.items.id] + '\">\\\n                        <span class=\"slds-checkbox_faux\"></span>\\\n                        <span class=\"slds-form-element__label\">' + item[settings.items.label] + '</span>\\\n                    </label>\\\n                    </span>\\\n                </div>\\\n                </div>\\\n            </div>');\n        },\n        onFinish: function($root, items, settings) {\n            var fields = {};\n            var countChecked = 1;\n\n            var getSelectedFields = function() {\n                var selectedFields = [];\n\n                $.each(fields, function(field, selected) {\n                    if(selected) {\n                        selectedFields.push(field);\n                    }\n                });\n\n                return selectedFields;\n            };\n\n            var cookieSelected = getCookie(selectedDataIndex + cookieSubfix);\n\n            var updateValue = function(eventHandler) {\n                var selectedFieldList = getSelectedFields();\n                var selectedFields = selectedFieldList.join(',');\n\n                $fieldlist.val(selectedFields);\n                setCookie(selectedDataIndex + cookieSubfix, selectedFields);\n\n                if(eventHandler) {\n                    eventHandler(selectedFieldList);\n                }\n            };\n\n            $.each(items, function(i, item) {\n                var id = item[settings.items.id];\n\n                if(cookieSelected) {\n                    fields[id] = cookieSelected.split(',').indexOf(id) !== -1;\n                } else {\n                    fields[id] = item.isSelected;\n                }\n\n                $('#field_' + domPrefix + id).on('change', function(e) {\n                    if(e.target.checked && countChecked >= 9) {\n                        e.target.checked = false;\n                        e.preventDefault();\n                        \n                        return false;\n                    }\n\n                    fields[id] = e.target.checked;\n\n                    if(e.target.checked) {\n                        countChecked++;\n                    } else {\n                        countChecked--;\n                    }\n\n                    updateValue(onChangeHandler);\n                }).prop('checked', fields[id]);\n\n                //updateValue();\n            });\n\n            \n            updateValue(onLoadHandler);\n        }\n    });\n};\n\nexport default class GRAXTree extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this._isMounted = false;\n\n        this.state = {\n            items: [],\n            isLoaded: false\n        };\n    }\n\n    getMappedFieldSelection(selectedFieldList) {\n        return _.reduce(this.state.items, (_selection, fieldItem) => {\n            if (selectedFieldList.indexOf(fieldItem.id) !== -1) {\n                _selection.push(fieldItem);\n            }\n\n            return _selection;\n        }, []);\n    }\n\n    onLoadHandler(selectedFieldList) {\n        if(this.props.onLoad) {\n            this.props.onLoad(this.getMappedFieldSelection(selectedFieldList), selectedFieldList, this.state.items);\n        }\n    }\n\n    onChangeHandler(selectedFieldList) {\n        if(this.props.onChange) {\n            this.props.onChange(this.getMappedFieldSelection(selectedFieldList), selectedFieldList, this.state.items);\n        }\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        if(this.props.selection) {\n            setCookie(selectedDataIndex + cookieSubfix, this.props.selection.join(','));\n        }\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this._isMounted) {\n                    this.setState({\n                        items: _.map(data, (val, key) => ({\n                            id: key,\n                            label: key,\n                            type: val,\n                            isSelected: (!getCookie(selectedDataIndex + cookieSubfix) && key === 'Id')\n                        })),\n                        isLoaded: true\n                    });\n                }\n\n                this.$el = $(this.el);\n                this.$fieldlist = $(this.fieldList);\n\n                renderFieldListSelector(this.$el, this.$fieldlist, this.state.items, this.onLoadHandler.bind(this), this.onChangeHandler.bind(this));\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }.bind(this)\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }\n\n    render() {\n        return (\n            <div style={{ position: 'relative', minHeight: '2rem' }}>\n                {!this.state.isLoaded ? <Spinner size=\"small\" variant=\"base\" /> : (\n                    <React.Fragment>\n                        <input type=\"hidden\" ref={fieldlist => this.fieldlist = fieldlist} />\n                        <div ref={el => this.el = el} />\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport SLDSSection from './SLDSSection';\nimport GRAXAuditDataTable from './GRAXAuditDataTable';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\nimport GRAXTree from './GRAXTree';\n\nimport {Button} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\nexport default class GRAXAudit extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this._isMounted = false;\n\n        this.state = {\n            retrieved: false,\n            retrievedCounter: 0,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: this.props.columns || ['Id'],\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => {}),\n            _filterValuesFields: [],\n            _graxSortableFields: null\n        }\n    }\n\n    getFilterQuery(_getFilterQuery) {\n        return _getFilterQuery();\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/graxgraxtimemachineindex' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this._isMounted) {\n                    this.setState({\n                        _graxFields: _.map(this.state._graxFieldsSelectionList, (val, i) => ({\n                            id: val,\n                            label: val,\n                            type: data[val]\n                        })),\n                        retrieved: true\n                    });\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        retrieved: true,\n                        error: err.toString()\n                    });\n                }\n            }.bind(this)\n        });\n    }\n    \n    render() {\n        return (\n            <div>\n                <div style={{display: 'none'}}>\n                    <GRAXTree\n                        dataIndex=\"graxgraxtimemachineindex\"\n                        onLoad={(_graxFieldsSelection, _graxFieldsSelectionList, _graxFields) => {\n                            console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                            this.setState({\n                                _graxFieldsSelection: _graxFieldsSelection,\n                                _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                    if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                        sortableFields.push(elasticField.id);\n                                    }\n                    \n                                    return sortableFields;\n                                }, [])\n                            });\n                        }}\n                        selection={this.state._graxFieldsSelectionList}\n                    />\n                </div>\n\n                <SLDSSection title=\"Filter Time Machine Records\">\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelection: this.state._graxFieldsSelection,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n                </SLDSSection>\n\n                <SLDSSection title=\"GRAX Time Machine Records\" className=\"slds-p-top_large\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n\t\t\t\t\t    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} />\n                    </div>\n\n                    <GRAXAuditDataTable\n                        key={'GRAXAuditDataTable_' + this.state.retrievedCounter}\n                        renderKey={'GRAXAuditDataTable_' + this.state.retrievedCounter}\n                        columns={this.state._graxFieldsSelectionList}\n                        _graxFieldsSelection={this.state._graxFieldsSelection}\n                        sortableColumns={this.state._graxSortableFields}\n                        hiddenColumns={this.state._filterValuesFields}\n                        dataIndex=\"graxgraxtimemachineindex\"\n                        filterFunction={this.state._filterFunction}\n                        filterQuery={this.getFilterQuery(this.state._getFilterQuery)}\n                    />\n                </SLDSSection>\n            </div>\n        );\n    }\n}"],"sourceRoot":""}