{"version":3,"sources":["components/GRAXRestore.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx"],"names":["GRAXFieldsCombobox","lazy","GRAXRestoreDataTable","ELASTIC_SORTABLE_TYPES","BOTH","GRAXRestoreArchiveFilter","props","state","checked","val","this","setState","onChange","options","className","event","onChangeHandler","target","value","required","name","errorId","disabled","_","map","option","i","key","id","label","variant","bind","style","margin","align","content","React","Component","GRAXRestore","selectedDataIndex","retrieved","retrievedCounter","_sfRequestsDisabled","_restoreChildrens","_checkIsUserActive","_useGRAXHistoryOnly","_updateRecordIfExist","_sendNotification","_currentOrgRecords","_graxFields","_graxFieldsSelection","_graxFieldsSelectionList","_filterFunction","dataList","_getFilterQuery","_filterValuesFields","_graxSortableFields","objectHasCustomMapping","_archiveFilterQuery","length","queryParts","concat","push","orgid","remove","queryPart","join","isCollapsible","isOpen","title","href","marginRight","assistiveText","category","size","defaultChecked","isChecked","labels","toggleDisabled","toggleEnabled","onSelect","data","console","log","customMapping","objectType","objectTypeMapping","Object","keys","find","k","toLowerCase","excludeIds","onRequestRemoveSelectedOption","dismissible","heading","onRequestClose","fallback","position","height","dataIndex","onLoad","e","reduce","sortableFields","elasticField","indexOf","type","archiveFilterQuery","SObjectType","filterableFieldOptions","onFilterValueChangeHandler","onClick","hasFieldSelected","renderKey","columns","hiddenColumns","sfRequestsDisabled","restoreChildrens","checkIsUserActive","useGRAXHistoryOnly","updateRecordIfExist","sendNotification","filterFunction","filterQuery","getFilterQuery","sortableColumns","propTypes","PropTypes","string","children","error","defaultProps","RadioGroup","shortid","assign","classNames","RadioButtonGroup","rest"],"mappings":"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","file":"static/js/13.7539e4f5.chunk.js","sourcesContent":["/* eslint-disable no-script-url */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Suspense, lazy } from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXObjectCombobox from './GRAXObjectCombobox';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\n\nimport {Button, Checkbox, Tooltip, Icon, Alert, RadioButtonGroup, Radio, Spinner} from '@salesforce/design-system-react';\n\nimport {orgid} from '../lib/grax-data-lake';\n\nconst GRAXFieldsCombobox = lazy(() => import('./GRAXFieldsCombobox'));\nconst GRAXRestoreDataTable = lazy(() => import('./GRAXRestoreDataTable'));\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\nconst BACKEDUP = 'Backed Up';\nconst ARCHIVED = 'Archived';\nconst BOTH = 'Both';\n\nclass GRAXRestoreArchiveFilter extends React.Component {\n\tconstructor(props) {\n        super(props);\n        \n\t\tthis.state = {\n            checked: BOTH\n        };\n    }\n\n    onChangeHandler(val) {\n        this.setState({\n            checked: val\n        });\n\n        if(this.props.onChange) {\n            this.props.onChange(val);\n        }\n    }\n    \n    render() {\n        const options = [BACKEDUP, ARCHIVED, BOTH];\n        \n\t\treturn (\n            <div className=\"slds-p-bottom_medium\">\n                <div className=\"slds-clearfix\">\n                    <div className=\"slds-float_left slds-p-right_xx-small\">\n                        <RadioButtonGroup\n                            onChange={(event) => this.onChangeHandler(event.target.value)}\n                            //disabled={this.props.disabled}\n                            required={this.props.required}\n                            name={this.props.name}\n                            errorId={this.props.errorId}\n                            disabled={this.props.disabled === true}\n                        >\n                            {_.map(options, function(option, i) {\n                                return (\n                                    <Radio\n                                        key={'option' + i}\n                                        id={'option' + i}\n                                        label={option}\n                                        value={option}\n                                        checked={this.state.checked === option}\n                                        variant=\"button-group\"\n                                    />\n                                );\n                            }.bind(this))}\n                        </RadioButtonGroup>\n                    </div>\n\n                    <div className=\"slds-float_left\" style={{\n                        margin: '0.41rem'\n                    }}>\n                        <Tooltip\n                            align=\"top left\"\n                            content={'Select one of the options, \"Backed Up\", \"Archived\", or \"Both\", below to display these records.'}\n                            variant=\"learnMore\"\n                        />\n                    </div>\n                </div>\n            </div>\n\t\t);\n\t}\n}\n\n\nexport default class GRAXRestore extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedDataIndex: null,\n            retrieved: false,\n            retrievedCounter: 0,\n            _sfRequestsDisabled: true,\n            _restoreChildrens: false,\n            _checkIsUserActive: true,\n            _useGRAXHistoryOnly: false,\n            _updateRecordIfExist: false,\n            _sendNotification: false,\n            _currentOrgRecords: true,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: null,\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => null),\n            _filterValuesFields: [],\n            _graxSortableFields: null,\n            objectHasCustomMapping: false,\n            _archiveFilterQuery: null\n        }\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n\n    getFilterQuery() {\n        var queryParts = _.concat(this.state._getFilterQuery(), this.state._archiveFilterQuery);\n\n        if(this.state._currentOrgRecords) {\n            queryParts.push('(doc.graxorgid.keyword: \"' + orgid + '\")');\n        }\n        \n        queryParts = _.remove(queryParts, function(queryPart) {\n            return queryPart != null;\n        });\n\n        if(queryParts && queryParts.length > 0) {\n            return queryParts.join(' AND ');\n        }\n\n        return null;\n    }\n    \n    render() {\n        return (\n            <div>\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Disclaimers\">\n                    <ol>\n                        <li>{'When restoring records in an environment please confirm that the following is true:'}</li>\n                        <ol className=\"slds-list_ordered\">\n                            <li>{'Ensure that the destination environment has the same customizations and metadata as the source environment'}</li>\n                            <li>{'Ensure that all workflows, APEX triggers, validation rules, process builders, duplication rules, etc. are disabled in the destination environment'}</li>\n                            <li>{'If restoring in a partial or developer Sandbox, ensure that there is ample storage space for the data you are intending to restore in the destination environment'}</li>\n                            <li>{'Ensure that your user has \"modify all data\" permission in the destination environment'}</li>\n                            <li>{'If you are attempting to restore records where the owner is inactive, ensure that your user has the permission \"Update records with inactive owners\" set to true in the destination environment'}</li>\n                        </ol>\n                    </ol>\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Settings\">\n                    <div className=\"slds-grid slds-wrap\">\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When disabled, only the parent record will be restored. When enabled, the parent and all related children will be enabled.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Restore Child Records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._restoreChildrens}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _restoreChildrens: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Restore Child Records?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Restore Parent Record Only',\n                                        toggleEnabled: 'Restore Child Records'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When disabled, the restore process queries your storage facility to determine if this record exists already in this SF environment. When enabled the process queries SF to see if this record already exists and will not create a duplicate.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Skip Salesforce Queries?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._sfRequestsDisabled}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _sfRequestsDisabled: !isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Skip Salesforce Queries?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Query storage facility',\n                                        toggleEnabled: 'Query Salesforce'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When enabled, the user must have the setting &quot;Update Records with Inactive Owners&quot; set to true otherwise records assigned to an inactive user will NOT be created.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Assign Records to Inactive Users?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._checkIsUserActive}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _checkIsUserActive: !isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Assign Records to Inactive Users?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Assign records only to Active Users',\n                                        toggleEnabled: 'Assign records to Active or Inactive Users'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Set it to TRUE if you don't want to double check that the restored records still exist in the destination Org.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Use GRAXHistory only?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._useGRAXHistoryOnly}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _useGRAXHistoryOnly: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Use GRAXHistory only?\"\n\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Query SFDC to confirm record exists',\n                                        toggleEnabled: 'Query only GRAX History'\n                                    }}\n                                />\n                                \n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Set it to TRUE if you want to update the previously restored records in the destination Org.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Update records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._updateRecordIfExist}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _updateRecordIfExist: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Update records?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Only insert records',\n                                        toggleEnabled: 'Update records if exists'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Notify User via Email when Process Completes\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Send Notification?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._sendNotification}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _sendNotification: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Send Notification?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Don\\'t Send Notification',\n                                        toggleEnabled: 'Send Notification'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Show records only from the current environment or all environments.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Filter records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _currentOrgRecords: !isChecked,\n                                            retrievedCounter: this.state.retrievedCounter + 1\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select the GRAX Table\">\n                    <GRAXObjectCombobox\n                        onSelect={(event, data) => {\n                            var objectHasCustomMapping = false;\n\n                            var selectedDataIndex = data[0];\n\n                            console.log(this.props.customMapping, selectedDataIndex);\n\n                            var objectType = selectedDataIndex.label;\n\n                            if(this.props.customMapping != null) {\n                                var objectTypeMapping = this.props.customMapping[\n                                    Object.keys(this.props.customMapping)\n                                        .find(k => k.toLowerCase() === objectType.toLowerCase())\n                                ];\n\n                                if(objectTypeMapping && Object.keys(objectTypeMapping).length > 0) {\n                                    objectHasCustomMapping = true;\n                                }\n                            }\n\n                            this.setState({\n                                selectedDataIndex: selectedDataIndex,\n                                objectHasCustomMapping: objectHasCustomMapping\n                            });\n                        }}\n                        excludeIds={['graxgrax_loggingindex']}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            this.setState({\n                                retrieved: false,\n                                selectedDataIndex: null,\n                                _graxFieldsSelection: null,\n                                _graxFieldsSelectionList: null,\n                                objectHasCustomMapping: false\n                            });\n                        }}\n                    />\n\n                    {this.state.objectHasCustomMapping ? (\n                        <div>\n                            <Alert\n                                dismissible\n                                labels={{\n                                    heading: 'The selected object has a custom mapping defined. To review this custom mapping, click on the \"Restore Mapping\" tab and then select the object.'\n                                }}\n                                onRequestClose={() => {\n                                    this.setState({ objectHasCustomMapping: false });\n                                }}\n                            />\n                        </div>\n                    ) : null}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n                \n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Search GRAX Table\">\n                    {\n                        this.state.selectedDataIndex != null\n                        ? (\n                            <Suspense\n                                fallback={(\n                                    <div style={{ position: 'relative', height: '2rem' }}>\n                                        <Spinner size=\"small\" variant=\"base\" />\n                                    </div>\n                                )}\n                            >\n                                <GRAXFieldsCombobox\n                                    dataIndex={this.state.selectedDataIndex.id}\n                                    onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                        console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                                        this.setState({\n                                            _graxFields: _graxFields,\n                                            _graxFieldsSelection: _graxFieldsSelection,\n                                            _graxFieldsSelectionList: _graxFieldsSelectionList,\n                                            _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                                if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                                    sortableFields.push(elasticField.id);\n                                                }\n                                \n                                                return sortableFields;\n                                            }, [])\n                                        });\n                                    }}\n                                    onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                        console.log('onChange', _graxFieldsSelection, _graxFieldsSelectionList);\n\n                                        var retrievedCounter = this.state.retrievedCounter;\n\n                                        if(_graxFieldsSelectionList.length > this.state._graxFieldsSelectionList.length) {\n                                            retrievedCounter++;\n                                        }\n\n                                        this.setState({\n                                            retrievedCounter: retrievedCounter,\n                                            _graxFieldsSelection: _graxFieldsSelection,\n                                            _graxFieldsSelectionList: _graxFieldsSelectionList\n                                        });\n                                    }}\n                                />\n                            </Suspense>\n                        )\n                        : 'No GRAX Table selected...'\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Records\">\n                    <GRAXRestoreArchiveFilter onChange={(val) => {\n                        var archiveFilterQuery;\n\n                        if(val === BOTH) {\n                            archiveFilterQuery = null;\n                        }\n\n                        if(val === BACKEDUP) {\n                            archiveFilterQuery = '(NOT doc.IsDeleted:true)';\n                        }\n\n                        if(val === ARCHIVED) {\n                            archiveFilterQuery = '(doc.IsDeleted:true)';\n                        }\n\n                        this.setState({\n                            _archiveFilterQuery: archiveFilterQuery,\n                            retrievedCounter: this.state.retrievedCounter + 1\n                        })\n                    }} />\n\n                    {/*<Input\n                        iconLeft={\n                            <InputIcon\n                                assistiveText=\"Search\"\n                                name=\"search\"\n                                category=\"utility\"\n                            />\n                        }\n                        assistiveText={{ label: 'Search Term' }}\n                        id=\"record-query\"\n                        placeholder=\"Search\"\n                    />*/}\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            SObjectType={this.state.selectedDataIndex.label}\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_small\">\n                        <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrieved: this.state.selectedDataIndex != null,\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} disabled={!this.hasFieldSelected()} />\n                    </div>\n\n                    {this.state.retrieved && this.state._graxFieldsSelectionList && (\n                        <Suspense\n                            fallback={(\n                                <div style={{ position: 'relative', height: '2rem' }}>\n                                    <Spinner size=\"small\" variant=\"base\" />\n                                </div>\n                            )}\n                        >\n                            <GRAXRestoreDataTable\n                                key={'GRAXRestoreDataTable_' + this.state.retrievedCounter}\n                                renderKey={'GRAXRestoreDataTable_' + this.state.retrievedCounter}\n                                columns={this.state._graxFieldsSelectionList}\n                                _graxFieldsSelection={this.state._graxFieldsSelection}\n                                hiddenColumns={this.state._filterValuesFields}\n                                dataIndex={this.state.selectedDataIndex.id}\n                                sfRequestsDisabled={this.state._sfRequestsDisabled}\n                                restoreChildrens={this.state._restoreChildrens}\n                                checkIsUserActive={this.state._checkIsUserActive}\n                                useGRAXHistoryOnly={this.state._useGRAXHistoryOnly}\n                                updateRecordIfExist={this.state._updateRecordIfExist}\n                                sendNotification={this.state._sendNotification}\n                                filterFunction={this.state._filterFunction}\n                                filterQuery={this.getFilterQuery()}\n                                sortableColumns={this.state._graxSortableFields}\n                            />\n                        </Suspense>\n                    )}\n                </SLDSSection>\n            </div>\n        );\n    }\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n"],"sourceRoot":""}