{"version":3,"sources":["components/GRAXRestoreDataTable.jsx","components/SLDSPaginator.jsx","components/GRAXCSVExportButton.jsx"],"names":["GRAXRestoreDataTable","props","_this","Object","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","sortColumn","sortDirection","chunks","items","extraInfo","page","selection","isLoaded","isLoading","nextProps","nextState","renderKey","columns","setState","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_select","_","union","hiddenColumns","join","_q","filterQuery","_limit","_from","_sort","_sortType","getSortFieldType","success","data","results","filterFunction","map","item","i","forEach","val","key","SF_DATETIME_REGEXP","test","m","moment","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","isArray","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","id","toString","total","size","totalRetrieved","bind","error","xhr","status","err","console","getDataHandler","event","log","property","sortField","_graxFieldsSelection","find","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","style","position","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_7__","variant","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_8__","assistiveText","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onRowChange","handleChanged","onSort","handleSort","selectRows","columnName","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_9__","isSorted","label","sortable","sortableColumns","className","_SLDSPaginator__WEBPACK_IMPORTED_MODULE_11__","totalItems","length","pageSize","onChangePage","isInitialLoad","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_10__","disabled","onClick","confirm","restoreChildrens","sfRequestsDisabled","checkIsUserActive","useGRAXHistoryOnly","updateRecordIfExist","sendNotification","contentType","JSON","stringify","omit","alert","_GRAXCSVExportButton__WEBPACK_IMPORTED_MODULE_12__","params","source","height","React","Component","SLDSPaginator","pager","setPage","currentPage","_this$props","totalPages","getPager","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","Array","keys","iconCategory","iconName","iconPosition","index","Date","now","align","content","defaultProps","portalsRoot","document","getElementById","GRAXCSVExportForm","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","ReactDOM","createPortal","react__WEBPACK_IMPORTED_MODULE_5___default","formId","target","method","encType","margin","padding","border","display","String","name","value","GRAXCSVExportButton","Fragment","form"],"mappings":"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","file":"static/js/19.0bc5717a.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React from 'react';\n\nimport {Spinner, Button, DataTable, DataTableColumn} from '@salesforce/design-system-react';\nimport SLDSPaginator from './SLDSPaginator';\nimport GRAXCSVExportButton from './GRAXCSVExportButton';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\nimport {moment, SF_DATETIME_REGEXP, DATE_FORMAT, DATETIME_FORMAT, TZ} from '../lib/utils';\n\nimport _ from 'lodash';\nimport { isArray } from 'util';\n\nconst ROWSXPAGE = 100;\n\nexport default class GRAXRestoreDataTable extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n        this.state = {\n\t\t\tsortColumn: 'Id',\n\t\t\tsortDirection: 'asc',\n            chunks: [],\n            items: [],\n            extraInfo: {},\n            page: 0,\n            selection: [],\n            isLoaded: false,\n            isLoading: false\n\t\t};\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.renderKey !== nextProps.renderKey || this.state.items !== nextState.items || this.state.selection !== nextState.selection || this.state.isLoaded !== nextState.isLoaded || this.state.isLoading !== nextState.isLoading || this.state.sortColumn !== nextState.sortColumn || this.state.sortDirection !== nextState.sortDirection || this.props.columns !== nextProps.columns;\n    }\n\n    getDataHandler(page, sortColumn, sortDirection) {\n        this.setState({\n            isLoading: true,\n            page: page,\n            sortColumn: sortColumn,\n            sortDirection: sortDirection\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                action:'load',\n                dataIndex: this.props.dataIndex,\n                _select: _.union(this.props.columns, this.props.hiddenColumns).join(',') || 'Id',\n                _q: this.props.filterQuery,\n                _limit: ROWSXPAGE,\n                _from: ROWSXPAGE * page,\n                _sort: sortColumn + ' ' + sortDirection,\n                _sortType: this.getSortFieldType(sortColumn)\n            }),\n            /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n            success: function(data) {\n                var results = data.results;\n\n                if(this.props.filterFunction) {\n                    results = this.props.filterFunction(results);\n                }\n\n                results = _.map(results, (item, i) => {\n                    _.forEach(item, (val, key) => {\n                        if(typeof(val) == 'string') {\n                            if(SF_DATETIME_REGEXP.test(val)) {\n                                var m = moment(val);\n\n                                if(m.isValid()) {\n                                    item[key] = m.tz(TZ).format(m._i.indexOf(':') !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                                }\n                            }\n                        }\n\n                        if(isArray(val)) {\n                            item[key] = val.join(', ');\n                        }\n\n                        if(typeof(val) == 'boolean') {\n                            item[key] = val ? 'true' : 'false';\n                        }\n                    });\n\n                    return {\n                        ...item,\n                        ...{id: i.toString()}\n                    }\n                });\n\n                this.setState({\n                    page: 0,\n                    data: results,\n                    extraInfo: data.extraInfo || {total: 0, size: ROWSXPAGE, totalRetrieved: 0},\n                    items: results,\n                    isLoaded: true,\n                    isLoading: false\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    isLoading: false,\n                    items: [],\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n    \n    componentDidMount() {\n        this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n    }\n\n\thandleChanged(event, data) {\n\t\tthis.setState({ selection: data.selection });\n\t\tconsole.log(event, data);\n\t}\n\n\thandleSort(sortColumn, ...rest) {        \n        if(sortColumn.property) {\n            this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n        }\n    }\n    \n    getSortFieldType(sortField) {\n        if(!this.props._graxFieldsSelection) return null;\n\n        return (this.props._graxFieldsSelection.find((item) => {\n            return item.id === sortField;\n        }) || {}).type;\n    }\n\n\trender() {\n\t\treturn this.state.isLoaded ? (\n\t\t\t<div>\n                <div style={{position: 'relative'}}>\n                    {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n                    <DataTable\n                        assistiveText={{\n                            actionsHeader: 'actions',\n                            columnSort: 'sort this column',\n                            columnSortedAscending: 'asc',\n                            columnSortedDescending: 'desc',\n                            selectAllRows: 'all rows',\n                            selectRow: 'select this row',\n                        }}\n                        fixedLayout\n                        items={this.state.items}\n                        id=\"GRAXRestoreDataTable\"\n                        onRowChange={this.handleChanged.bind(this)}\n                        onSort={this.handleSort.bind(this)}\n                        selection={this.state.selection}\n                        selectRows={true}\n                    >\n\n                        {this.props.columns.map((columnName) => (\n                            <DataTableColumn\n                                key={'col' + columnName}\n                                id={columnName}\n                                isSorted={this.state.sortColumn === columnName}\n                                label={columnName} // TODO\n                                property={columnName}\n                                sortable={this.props.sortableColumns == null || this.props.sortableColumns.indexOf(columnName) !== -1}\n                                sortDirection={this.state.sortDirection}\n                            />\n                        ))}\n                    </DataTable>\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n                    <SLDSPaginator totalItems={this.state.items.length > 0 ? this.state.extraInfo.total: 0} pageSize={ROWSXPAGE} onChangePage={(page, isInitialLoad) => {\n                        if(!isInitialLoad) {\n                            this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n                        }\n                    }} />\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n                    <Button label=\"Restore Selection\" disabled={this.state.selection.length < 1 || this.state.isLoading} onClick={() => {\n                        if(confirm('Are you sure that you want to re-create the selected records?')) {\n                            $.ajax({\n                                type: 'POST',\n                                url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                                    action: 'restore',\n                                    restoreChildrens: this.props.restoreChildrens,\n                                    sfRequestsDisabled: this.props.sfRequestsDisabled,\n                                    checkIsUserActive: this.props.checkIsUserActive,\n                                    useGRAXHistoryOnly: this.props.useGRAXHistoryOnly,\n                                    updateRecordIfExist: this.props.updateRecordIfExist,\n                                    sendNotification: this.props.sendNotification\n                                }),\n                                contentType: \"application/json; charset=utf-8\",\n                                data: JSON.stringify(_.map(this.state.selection, function(item) {\n                                    return _.omit(item, ['id']);\n                                })),\n                                success: function(data) {\n                                    alert(data.state);\n                                }\n                            });\n\n                            this.setState({\n                                selection: []\n                            });\n                        }\n                    }} />\n\n                    <Button label=\"Restore All\" disabled={this.state.isLoading} onClick={() => {\n                        if(confirm('Are you sure that you want to re-create the filtered records?')) {\n                            $.ajax({\n                                type: 'POST',\n                                url: baseUrl + '/grax-app/grax-data-lake/restoreAll' + GetParams({\n                                    action: 'restore',\n                                    restoreChildrens: this.props.restoreChildrens,\n                                    sfRequestsDisabled: this.props.sfRequestsDisabled,\n                                    checkIsUserActive: this.props.checkIsUserActive,\n                                    useGRAXHistoryOnly: this.props.useGRAXHistoryOnly,\n                                    updateRecordIfExist: this.props.updateRecordIfExist,\n                                    sendNotification: this.props.sendNotification\n                                }),\n                                contentType: \"application/json; charset=utf-8\",\n                                data: JSON.stringify({\n                                    dataIndex: this.props.dataIndex,\n                                    _q: this.props.filterQuery,\n                                    _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                                    _sortType: this.getSortFieldType(this.state.sortColumn)\n                                }),\n                                success: function(data) {\n                                    alert(data.state);\n                                }\n                            });\n\n                            this.setState({\n                                selection: []\n                            });\n                        }\n                    }} />\n\n                    <GRAXCSVExportButton params={{\n                        source: 'elastic',\n                        dataIndex: this.props.dataIndex,\n                        _select: _.union(this.props.columns, this.props.hiddenColumns).join(','),\n                        _q: this.props.filterQuery,\n                        _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                        _sortType: this.getSortFieldType(this.state.sortColumn),\n                        columns: this.props.columns\n                    }} />\n                </div>\n\t\t\t</div>\n\t\t) : (\n            <div style={{ position: 'relative', height: '2rem' }}>\n                <Spinner size=\"medium\" variant=\"brand\" />\n            </div>\n        );\n\t}\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonGroup, Button, Tooltip} from '@salesforce/design-system-react';\n \nconst propTypes = {\n    totalItems: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    pageSize: PropTypes.number,\n}\n \nconst defaultProps = {\n    currentPage: 1,\n    pageSize: 10\n}\n \nclass SLDSPaginator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pager: {}\n        };\n    }\n \n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.totalItems) {\n            this.setPage(this.props.currentPage, true);\n        }\n    }\n \n    setPage(page, isInitialLoad) {\n        var { totalItems, pageSize } = this.props;\n        var pager = this.state.pager;\n \n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n \n        // get new pager object for specified page\n        pager = this.getPager(totalItems, page, pageSize);\n \n        // update state\n        this.setState({ pager: pager });\n \n        // call change page function in parent component\n        this.props.onChangePage(page, false || isInitialLoad);\n    }\n \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n \n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        var isNarrow = false;\n\n        if(totalItems > 10000) {\n            totalItems = 10000;\n            isNarrow = true;\n        }\n \n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n \n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (isNarrow && (currentPage + 3) >= totalPages) {\n                startPage = totalPages - 8;\n                endPage = totalPages;\n            } else if ((currentPage + 4) >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n \n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages,\n            isNarrow: isNarrow\n        };\n    }\n \n    render() {\n        var pager = this.state.pager;\n \n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n \n        return (\n            <ButtonGroup>\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"left\"\n\t\t\t\t\t\ticonPosition=\"left\" label=\"First\" variant=\"neutral\" onClick={() => this.setPage(1)} disabled={pager.currentPage === 1} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronleft\"\n\t\t\t\t\t\ticonPosition=\"left\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage - 1)} disabled={pager.currentPage === 1} />\n                {pager.pages.map((page, index) => {\n                    return (\n                        <Button key={'SLDSPaginator' + Date.now() + index} label={page} variant={pager.currentPage === page ? 'brand' : 'neutral'} onClick={() => this.setPage(page)} />\n                    )\n                })}\n                {pager.isNarrow && pager.currentPage >= (pager.totalPages - 3) && (\n                    <Tooltip\n                        align=\"top right\"\n                        content=\"The list is too long, try adding more filters to optimize the results.\"\n                    >\n                        <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n                    </Tooltip>\n                )}\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\t\ticonPosition=\"right\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage + 1)} disabled={pager.currentPage === pager.totalPages} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"right\"\n\t\t\t\t\t\ticonPosition=\"right\" label=\"Last\" variant=\"neutral\" onClick={() => this.setPage(pager.totalPages)} disabled={pager.currentPage === pager.totalPages} />\n            </ButtonGroup>\n        );\n    }\n}\n \nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\"\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}