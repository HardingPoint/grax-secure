{"version":3,"sources":["components/SLDSSection.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx","components/GRAXSObjectCombobox.jsx","components/GRAXOrgCombobox.jsx","components/GRAXRestoreMappingFields.jsx","components/GRAXRestoreMappingDefaults.jsx","components/GRAXRestoreMapping.jsx"],"names":["SLDSSection","props","isOpen","isCollapsible","state","undefined","handleToggle","bind","e","onToggle","this","setState","prevState","preventDefault","id","key","title","helpText","className","children","titleElement","join","type","onClick","assistiveText","label","category","name","size","React","Component","propTypes","PropTypes","string","labels","error","onChange","disabled","required","errorId","RadioButtonGroup","rest","variant","GRAXSObjectCombobox","options","inputValue","selection","isLoaded","$","ajax","url","baseUrl","GetParams","action","data","_bools","_select","success","_","map","item","i","index","toLowerCase","selectionKeys","filter","indexOf","onLoad","onSelect","length","xhr","status","err","console","toString","Fragment","classNameMenu","events","event","value","onRequestRemoveSelectedOption","placeholder","comboboxFilterAndLimit","limit","menuItem","style","position","height","GRAXOrgCombobox","GRAXRestoreMappingFilter","checked","val","log","onChangeHandler","target","option","deselectable","GRAXRestoreMappingDataLakeField","isOpened","filterOptionsHandler","onOpen","onClose","hasStaticAlignment","multiple","GRAXRestoreMappingFields","_graxFieldOptions","_graxFieldOptionsList","_sfFieldOptions","_sfFieldOptionsList","_sfMappedFields","_error","_filterSelection","isPreviouslyMapped","graxFieldOptions","sfMappedFields","sfFieldOptions","forEach","sfField","mappedFields","reduce","_selection","graxFieldName","push","sfMappedFieldsList","Object","keys","graxMappedFieldsList","flatten","values","nextProps","nextState","objectName","renderKey","fieldName","mappedValues","onMappingChange","sortBy","maxHeight","scope","data-label","width","color","onMappingChangeHandler","GRAXRestoreMappingSFField","_isMounted","onRequestOpen","onRequestClose","menuPosition","GRAXRestoreMappingDefaults","_sfDefaultValues","_mappingOptions","_maskOptionsString","_maskOptionsPhone","_maskOptionsEmail","_maskOptionsDate","mapping","masking","isOverride","selectedField","defaultValue","defaultValueStruct","getDefaultValueStruct","tempMsk","mskOpt","override","sfDefaultValues","_sfDefaultValuesFields","_sfDefaultValuesList","getDefaultValuesList","sfDefaultValue","onDefaultValueChangeHandler","splice","texttransform","display","align","content","marginRight","cursor","sfFieldName","find","onBlur","date","formatter","datePickerFormatter","parser","datePickerParser","defaultChecked","persist","sfType","removeFieldHandler","addAnotherFieldHandler","normalizeFieldType","typeName","nft","HAS_CHANGES_MESSAGE","GRAXRestoreMapping","selectedSObject","isLoading","_isCustomOrg","_customOrg","customMapping","hasChanges","isSaving","resetConfirmIsOpen","resetConfirmIsChecked","resetConfirmCallback","renderCounter","confirm","onMappingSettingsChange","fieldMap","omit","isArray","isEmpty","assign","customMappingToSave","contentType","JSON","stringify","sObjectChangeHandler","pageParams","datalakeIndex","maxWidth","_onOrgSelectionChangeHandler","_onOrgSelectionRemoveHandler","isMapLoaded","_onMappingChangeHandler","getCustomMappingToSave","saveCustomMapping","dismissible","footer","prompt"],"mappings":"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","file":"static/js/12.e39176a5.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from \"react\";\nimport { Icon } from \"@salesforce/design-system-react\";\n\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool,\n  isCollapsible: PropTypes.bool,\n  onToggle: PropTypes.func,\n  title: PropTypes.string.isRequired,\n  helpText: PropTypes.any,\n  id: PropTypes.string,\n  key: PropTypes.string,\n  children: PropTypes.any.isRequired\n};\n\nclass SLDSSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { isOpen, isCollapsible } = props;\n\n    this.state = {\n      isOpen: isOpen === true ? true : false || isCollapsible === undefined\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(e) {\n    const { onToggle } = this.props;\n\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n\n    if (onToggle) {\n      onToggle(isOpen);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { id, key, isCollapsible, title, helpText, className, children } = this.props;\n    const { isOpen } = this.state;\n\n    const titleElement = (\n      <span\n        className={`slds-truncate${isCollapsible ? \"\" : \" slds-p-horizontal_small\"}`}\n        title={title}\n      >\n        {title}\n        {helpText}\n      </span>\n    );\n\n    return (\n      <div\n        id={id || key}\n        className={[\"slds-section\", isOpen && \"slds-is-open\", className].join(\n          \" \"\n        )}\n      >\n        <h3 className=\"slds-section__title slds-theme_shade\">\n          {isCollapsible ? (\n            <button type=\"button\" className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n              <Icon\n                assistiveText={{ label: title }}\n                category=\"utility\"\n                name=\"switch\"\n                size=\"x-small\"\n                className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n              />\n              {titleElement}\n            </button>\n          ) : (\n            titleElement\n          )}\n        </h3>\n        {isOpen && <div className=\"slds-section__content\">{children}</div>}\n      </div>\n    );\n  }\n}\n\nSLDSSection.propTypes = propTypes;\n\nexport default SLDSSection;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/describeGlobal/sobjects' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable,layoutable,triggerable',\n                _select: 'name,label'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.name,\n                        label: item.label,\n                        index: 'grax' + item.name.toLowerCase() + 'index'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.selectionKeys != null) {\n                    this.setState({\n                        selection: _.filter(this.state.options, (item) => this.props.selectionKeys.indexOf(item.index) !== -1 || this.props.selectionKeys.indexOf(item.id) !== -1)\n                    });\n                }\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n\n                if(this.props.onSelect && this.state.selection != null && this.state.selection.length > 0) {\n                    this.props.onSelect(null, this.state.selection);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                if (this.props.onRequestRemoveSelectedOption && this.props.onRequestRemoveSelectedOption(event, data.selection)) {\n                                    this.setState({\n                                        inputValue: '',\n                                        selection: data.selection,\n                                    });\n\n                                    return true;\n                                }\n\n                                return false;\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Object',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                        menuItem={this.props.menuItem}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXOrgCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getOrgList' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    options: _.map(data, (item, i) => ({\n                        id: item.id,\n                        label: item.id + ' (' + item.label + ')'\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXOrgCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Select Salesforce Org',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox, Icon, RadioButtonGroup, Radio} from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nconst IS_MAPPED_FIELD = 'Is Mapped?'\nconst DATALAKE_FIELD = 'Datalake Field';\nconst SALESFORCE_FIELD = 'Salesforce Field';\n\n\nconst MAPPED_FIELDS = 'Mapped Fields';\nconst UNMAPPED_FIELDS = 'Un-mapped fields';\nconst ALL_FIELDS = 'All fields';\n\n\nclass GRAXRestoreMappingFilter extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n\t\tthis.state = {\n            checked: ALL_FIELDS\n        };\n    }\n\n    onChangeHandler(val) {\n        console.log(\"onChangeHandler\");\n        console.log(val);\n        this.setState({\n            checked: val\n        });\n\n        if(this.props.onChange) {\n            this.props.onChange(val);\n        }\n    }\n\n    render() {\n        const options = [MAPPED_FIELDS, UNMAPPED_FIELDS, ALL_FIELDS];\n\n\t\treturn (\n            <div className=\"slds-p-bottom_medium\">\n                <RadioButtonGroup\n                    onChange={(event) => this.onChangeHandler(event.target.value)}\n\n                    disabled={this.props.disabled}\n                    required={this.props.required}\n                    name={this.props.name}\n                    errorId={this.props.errorId}\n                >\n                    {_.map(options, function(option, i) {\n                        return (\n                            <Radio\n                                key={'option' + i}\n                                id={option}\n                                label={option}\n                                value={option}\n                                checked={this.state.checked === option}\n                                variant=\"button-group\"\n                                deselectable={true}\n                            />\n                        );\n                    }.bind(this))}\n                </RadioButtonGroup>\n            </div>\n\t\t);\n\t}\n}\n\n\nclass GRAXRestoreMappingDataLakeField extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        if(this.props.selection) {\n            this.setState({\n                selection: this.props.selection\n            })\n        }\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options;\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXRestoreMappingDataLakeField'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            this.setState({\n                                inputValue: '',\n                                selection: data.selection,\n                            });\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            this.setState({\n                                isOpened: true\n                            });\n                        },\n                        onClose: (event, data) => {\n                            this.setState({\n                                isOpened: false\n                            });\n                        }\n                    }}\n                    labels={{\n                        placeholder: 'Select DataLake Field',\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant=\"readonly\"\n                    hasStaticAlignment={true}\n                    multiple={true}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXRestoreMappingFields extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _graxFieldOptions: null,\n            _graxFieldOptionsList: null,\n            _sfFieldOptions: null,\n            _sfFieldOptionsList: null,\n            _sfMappedFields: null,\n            _error: null,\n\n            _filterSelection: ALL_FIELDS,\n            isPreviouslyMapped: false\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.state._graxFieldOptions != null && this.state._sfFieldOptions != null);\n    }\n\n    componentDidMount() {\n\n        var _graxFieldOptionsList = _.map(this.props.graxFieldOptions, function(item, i) {\n            return item.id;\n        });\n\n        /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n        var _sfMappedFields = this.props.sfMappedFields || {};\n\n        var _sfFieldOptions = this.props.sfFieldOptions;\n\n        // Map selection\n        _.forEach(_sfFieldOptions, (sfField, i) => {\n            var mappedFields = _.reduce(_sfMappedFields[sfField.id] || [sfField.id], (_selection, graxFieldName) => {\n                if (_graxFieldOptionsList.indexOf(graxFieldName) !== -1) {\n                    _selection.push(graxFieldName);\n                }\n\n                return _selection;\n            }, []);\n\n            if(mappedFields.length > 0) {\n                _sfMappedFields[sfField.id] = mappedFields;\n            }\n        });\n\n        this.setState({\n            _graxFieldOptions: this.props.graxFieldOptions,\n            _graxFieldOptionsList: _graxFieldOptionsList,\n            _sfFieldOptions: _sfFieldOptions,\n            //_sfFieldOptionsList: _sfFieldOptionsList,\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.state._filterSelection !== nextState._filterSelection\n            || this.props.objectName !== nextProps.objectName\n            || this.state._graxFieldOptions !== nextState._graxFieldOptions\n            || this.state._sfFieldOptions !== nextState._sfFieldOptions\n            || this.props.graxFieldOptions !== nextProps.graxFieldOptions\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfMappedFields !== nextProps.sfMappedFields\n            || this.props.renderKey !== nextProps.renderKey\n        );\n    }\n\n    onMappingChangeHandler(fieldName, selection) {\n        var mappedValues = _.map(selection, function(item, i) {\n            return item.id;\n        });\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        if(selection) {\n            _sfMappedFields[fieldName] = mappedValues;\n        } else {\n            delete _sfMappedFields[fieldName];\n        }\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            sfMappedFieldsList: Object.keys(_sfMappedFields),\n            graxMappedFieldsList: _.flatten(_.values(_sfMappedFields))\n        });\n\n        if(this.props.onMappingChange) {\n            this.props.onMappingChange(fieldName, mappedValues);\n        }\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            var sfFieldOptions = this.state._sfFieldOptions;\n\n            if(this.state._filterSelection === MAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state._sfMappedFields != null\n                        && this.state.sfMappedFieldsList.indexOf(item.id) !== -1\n                        && this.state._sfMappedFields[item.id].length !== 0\n                    );\n                });\n            }\n\n            if(this.state._filterSelection === UNMAPPED_FIELDS) {\n                sfFieldOptions = _.filter(sfFieldOptions, (item, i) => {\n                    return (\n                        this.state.sfMappedFieldsList.indexOf(item.id) === -1\n                        || this.state._sfMappedFields[item.id] == null\n                        || this.state._sfMappedFields[item.id].length === 0\n                    );\n                });\n            }\n\n            sfFieldOptions = _.sortBy(sfFieldOptions, ['id']);\n\n            return (\n                <React.Fragment>\n                    <GRAXRestoreMappingFilter onChange={(val) => this.setState({_filterSelection: val})} />\n\n                    <div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    {this.state._filterSelection === ALL_FIELDS && (\n                                        <th className=\"slds-text-title_caps\" scope=\"col\">\n                                            <div className=\"slds-truncate\" title={IS_MAPPED_FIELD}>{IS_MAPPED_FIELD}</div>\n                                        </th>\n                                    )}\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={DATALAKE_FIELD}>{DATALAKE_FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>{SALESFORCE_FIELD}</div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(sfFieldOptions, function(sfField, i) {\n                                    var fieldName = sfField.id;\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={fieldName}>\n                                            {this.state._filterSelection === ALL_FIELDS && (\n                                                <td data-label={IS_MAPPED_FIELD} style={{width: '10vw'}}>\n                                                    {this.state._sfMappedFields[fieldName] != null && this.state._sfMappedFields[fieldName].length > 0 && (\n                                                        <Icon\n                                                            category=\"utility\"\n                                                            color=\"warning\"\n                                                            name=\"check\"\n                                                            size=\"x-small\"\n                                                        />\n                                                    )}\n                                                </td>\n                                            )}\n                                            <td data-label={SALESFORCE_FIELD} style={{width: '60vw'}}>\n                                                <GRAXRestoreMappingDataLakeField\n                                                    options={this.state._graxFieldOptions}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return this.state.graxMappedFieldsList.indexOf(option.id) === -1 && sfField.type === option.type;\n                                                        });\n                                                    }}\n                                                    selection={_.map(this.state._sfMappedFields[fieldName], (graxFieldName, i) => {\n                                                        return {\n                                                            id: graxFieldName,\n                                                            label: graxFieldName\n                                                        };\n                                                    })}\n                                                    onSelect={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onMappingChangeHandler(fieldName, selection)}\n                                                />\n                                            </td>\n                                            <td data-label={DATALAKE_FIELD} style={{width: '30vw'}}>\n                                                <div className=\"slds-truncate\" title={sfField.id}>{sfField.id}</div>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from \"react\";\nimport _ from \"lodash\";\n\nimport {\n  Spinner,\n  Combobox,\n  Input,\n  Datepicker,\n  Button,\n  Checkbox,\n  Tooltip,\n  Icon\n} from \"@salesforce/design-system-react\";\n\nimport { comboboxFilterAndLimit, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst SALESFORCE_FIELD = \"Salesforce Field\";\nconst MAPPING = \"Option\";\nconst DEFAULT_VALUE = \"Value\";\nconst IS_OVERRIDE = \"Is Override?\";\n\nclass GRAXRestoreMappingSFField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._isMounted = false;\n\n    this.state = {\n      inputValue: \"\",\n      selection: [],\n      isOpened: false\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this.props.selection) {\n      this.setState({\n        selection: this.props.selection\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  filterOptionsHandler() {\n    var options = this.props.options;\n\n    if (this.props.filterOptionsHandler && this.state.isOpened) {\n      options = this.props.filterOptionsHandler(options);\n    }\n\n    return comboboxFilterAndLimit({\n      inputValue: this.state.inputValue,\n      limit: 1000,\n      options: options,\n      selection: this.state.selection\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Combobox\n          classNameMenu={\"scrollable-GRAXRestoreMappingSFField\"}\n          events={{\n            onChange: (event, { value }) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: value\n                });\n              }\n\n              if (this.props.onChange) {\n                this.props.onChange(event, value);\n              }\n            },\n            onRequestRemoveSelectedOption: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onRequestRemoveSelectedOption) {\n                this.props.onRequestRemoveSelectedOption(event, data.selection);\n              }\n            },\n            onSelect: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  inputValue: \"\",\n                  selection: data.selection\n                });\n              }\n\n              if (this.props.onSelect) {\n                this.props.onSelect(event, data.selection);\n              }\n            },\n            onRequestOpen: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: true\n                });\n              }\n            },\n            onRequestClose: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: false\n                });\n              }\n            },\n            onClose: (event, data) => {\n              if (this._isMounted) {\n                this.setState({\n                  isOpened: false\n                });\n              }\n            }\n          }}\n          labels={{\n            placeholder: \"Select SalesForce Field\"\n          }}\n          options={this.filterOptionsHandler()}\n          selection={this.state.selection}\n          value={this.state.inputValue}\n          variant=\"readonly\"\n          menuPosition=\"overflowBoundaryElement\"\n          hasStaticAlignment={true}\n          isOpen={this.state.isOpened}\n          hasStaticAlignment={true}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default class GRAXRestoreMappingDefaults extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _sfFieldOptions: null,\n      _sfFieldOptionsList: null,\n      _sfDefaultValues: null,\n      _mappingOptions: [{ id: \"DEFAULT\", label: \"Default To\" }, { id: \"MASK\", label: \"Mask\" }],\n      _maskOptionsString: [\n        { id: \"STRING\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"STRINGRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsPhone: [\n        { id: \"PHONE\", label: \"Mask the last 4 with XXXX\" },\n        { id: \"PHONERND\", label: \"Randomize\" }\n      ],\n      _maskOptionsEmail: [\n        { id: \"EMAIL\", label: \"Mask the domain with @maskeddomain.com\" },\n        { id: \"EMAILRND\", label: \"Randomize\" }\n      ],\n      _maskOptionsDate: [\n        { id: \"DATE\", label: \"Mask the year with 2000\" },\n        { id: \"DATERND\", label: \"Randomize\" }\n      ],\n      _error: null\n    };\n  }\n\n  isLoaded() {\n    return this.state._error || this.state._sfFieldOptions != null;\n  }\n\n  getDefaultValueStruct() {\n    return {\n      id: null,\n      mapping: [this.state._mappingOptions[0]],\n      masking: null,\n      value: null,\n      isOverride: false,\n      selectedField: null\n    };\n  }\n\n  getDefaultValuesList(_sfDefaultValues) {\n    return _.map(_sfDefaultValues, (defaultValue, fieldName) => {\n      var defaultValueStruct = this.getDefaultValueStruct();\n\n      defaultValueStruct.id = fieldName;\n      defaultValueStruct.mapping = _.filter(this.state._mappingOptions, (option, i) => {\n        return option.id === defaultValue.mapping;\n      });\n      if (!defaultValueStruct.mapping) {\n        defaultValueStruct.mapping = [this.state._mappingOptions[0]];\n      }\n      let tempMsk = [];\n      this.state._maskOptionsString.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsPhone.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsEmail.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n      this.state._maskOptionsDate.forEach(function(mskOpt) {\n        tempMsk.push(mskOpt);\n      });\n\n      defaultValueStruct.masking = _.filter(tempMsk, (option, i) => {\n        return option.id === defaultValue.masking;\n      });\n      defaultValueStruct.value = defaultValue.value;\n      defaultValueStruct.isOverride = defaultValue.override;\n      defaultValueStruct.selectedField =\n        _.filter(this.state._sfFieldOptions || this.props.sfFieldOptions, (option, i) => {\n          return option.id === fieldName;\n        })[0] || null;\n\n      return defaultValueStruct;\n    });\n  }\n\n  componentDidMount() {\n    /*var _sfFieldOptionsList = _.map(this.props.sfFieldOptions, function(item, i) {\n            return item.id;\n        });*/\n\n    var _sfDefaultValues = this.props.sfDefaultValues || {};\n\n    this.setState({\n      _sfFieldOptions: this.props.sfFieldOptions,\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.getDefaultValuesList(_sfDefaultValues)\n    });\n  }\n\n  /*shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.props.objectName !== nextProps.objectName\n            || this.props.sfFieldOptions !== nextProps.sfFieldOptions\n            || this.props.sfDefaultValues !== nextProps.sfDefaultValues\n            || this.props.renderKey != nextProps.renderKey\n        );\n    }*/\n\n  onDefaultValueChangeHandler(sfDefaultValue, selection) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n\n    if (selection) {\n      var defaultValue = selection[0];\n\n      sfDefaultValue.id = defaultValue.id;\n      sfDefaultValue.selectedField = defaultValue;\n\n      _sfDefaultValues[sfDefaultValue.id] = {\n        mapping:\n          sfDefaultValue.mapping && sfDefaultValue.mapping.length > 0\n            ? sfDefaultValue.mapping[0].id\n            : \"\",\n        masking:\n          sfDefaultValue.masking && sfDefaultValue.masking.length > 0\n            ? sfDefaultValue.masking[0].id\n            : \"\",\n        value: sfDefaultValue.value,\n        override: sfDefaultValue.isOverride\n      };\n    } else {\n      delete _sfDefaultValues[sfDefaultValue.id];\n      sfDefaultValue.id = null;\n      sfDefaultValue.selectedField = null;\n    }\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: this.state._sfDefaultValuesList\n    });\n\n    if (this.props.onDefaultValueChangeHandler) {\n      this.props.onDefaultValueChangeHandler(_sfDefaultValues);\n    }\n  }\n\n  addAnotherFieldHandler() {\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    if (\n      _sfDefaultValuesList.length === 0 ||\n      _sfDefaultValuesList[_sfDefaultValuesList.length - 1].id != null\n    ) {\n      _sfDefaultValuesList.push(this.getDefaultValueStruct());\n\n      this.setState({\n        _sfDefaultValuesList: _sfDefaultValuesList\n      });\n    }\n  }\n\n  removeFieldHandler(i) {\n    var _sfDefaultValues = this.state._sfDefaultValues;\n    var _sfDefaultValuesList = this.state._sfDefaultValuesList;\n\n    delete _sfDefaultValues[_sfDefaultValuesList[i].id];\n    _sfDefaultValuesList.splice(i, 1);\n\n    this.setState({\n      _sfDefaultValues: _sfDefaultValues,\n      _sfDefaultValuesFields: Object.keys(_sfDefaultValues),\n      _sfDefaultValuesList: _sfDefaultValuesList\n    });\n  }\n\n  render() {\n    if (this.state._error) {\n      return <div>Error: {this.state._error}</div>;\n    } else if (!this.isLoaded()) {\n      return (\n        <div style={{ position: \"relative\", height: \"5rem\" }}>\n          <Spinner size=\"small\" variant=\"base\" />\n        </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n          <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n            <thead>\n              <tr className=\"slds-line-height_reset\">\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={SALESFORCE_FIELD}>\n                    {SALESFORCE_FIELD}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={MAPPING}>\n                    {MAPPING}\n                    <div style={{ texttransform: \"none\", display: \"inline\" }}>\n                      <Tooltip\n                        align=\"top left\"\n                        position=\"overflowBoundaryElement\"\n                        content='Default To - Set a value which will be used for this field on all records. Mask - Select one of the options from the \"Value\" picklist'\n                      >\n                        <div style={{ marginRight: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Icon\n                            assistiveText={{ label: \"MAPPING\" }}\n                            category=\"utility\"\n                            name=\"info\"\n                            size=\"x-small\"\n                          />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={DEFAULT_VALUE}>\n                    {DEFAULT_VALUE}\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" title={IS_OVERRIDE}>\n                    {IS_OVERRIDE}\n                    <div style={{ texttransform: \"none\", display: \"inline\" }}>\n                      <Tooltip\n                        align=\"top right\"\n                        position=\"overflowBoundaryElement\"\n                        content='If this checkbox is FALSE, the default value set here will only override blank fields. If this checkbox is TRUE, the default value set will override even populated fields.'\n                      >\n                        <div style={{ marginRight: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Icon\n                            assistiveText={{ label: IS_OVERRIDE }}\n                            category=\"utility\"\n                            name=\"info\"\n                            size=\"x-small\"\n                          />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </th>\n                <th className=\"slds-text-title_caps\" scope=\"col\">\n                  <div className=\"slds-truncate\" />\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* Iterate over fields */}\n              {_.map(\n                this.state._sfDefaultValuesList,\n                function(sfDefaultValue, i) {\n                  console.log(sfDefaultValue, i);\n\n                  var sfFieldName = sfDefaultValue.id;\n\n                  var selectedField = sfDefaultValue.selectedField;\n\n                  return (\n                    <tr className=\"slds-hint-parent\" key={\"sfFieldName: \" + (sfFieldName || \"\")}>\n                      <td data-label={SALESFORCE_FIELD} style={{ width: \"35vw\" }}>\n                        {sfFieldName || (\n                          <GRAXRestoreMappingSFField\n                            options={this.state._sfFieldOptions}\n                            filterOptionsHandler={options => {\n                              return _.filter(options, (option, i) => {\n                                return this.state._sfDefaultValuesFields.indexOf(option.id) === -1;\n                              });\n                            }}\n                            selection={[\n                              _.find(this.state._sfFieldOptions, option => {\n                                return option.id === sfFieldName;\n                              })\n                            ]}\n                            onSelect={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                            onRequestRemoveSelectedOption={(event, selection) =>\n                              this.onDefaultValueChangeHandler(sfDefaultValue, selection)\n                            }\n                          />\n                        )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"20vw\" }}>\n                        {selectedField &&\n                          selectedField.type !== \"text\" &&\n                          selectedField.type !== \"date\" &&\n                          this.state._mappingOptions[0] &&\n                          this.state._mappingOptions[0].label}\n                        {selectedField &&\n                          (selectedField.type === \"text\" || selectedField.type === \"date\") && (\n                            <GRAXRestoreMappingSFField\n                              options={this.state._mappingOptions}\n                              filterOptionsHandler={options => {\n                                return this.state._mappingOptions;\n                              }}\n                              selection={sfDefaultValue.mapping}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                sfDefaultValue.isOverride = false;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.mapping = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )}\n                      </td>\n                      <td data-label={DEFAULT_VALUE} style={{ width: \"35vw\" }}>\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"DEFAULT\" &&\n                          (((selectedField.type === \"text\" || selectedField.type === \"number\") && (\n                            <Input\n                              defaultValue={sfDefaultValue.value}\n                              assistiveText={{ label: selectedField.label }}\n                              id={selectedField.id}\n                              onBlur={event => {\n                                sfDefaultValue.value = event.target.value;\n\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          )) ||\n                            (selectedField.type === \"date\" && (\n                              <Datepicker\n                                value={sfDefaultValue.value}\n                                onChange={(event, data) => {\n                                  sfDefaultValue.value = data.date;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                                formatter={datePickerFormatter}\n                                parser={datePickerParser}\n                              />\n                            )) ||\n                            (selectedField.type === \"boolean\" && (\n                              <Checkbox\n                                defaultChecked={sfDefaultValue.value}\n                                onChange={e => {\n                                  e.persist();\n\n                                  sfDefaultValue.value = e.target.checked;\n\n                                  this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                    sfDefaultValue.selectedField\n                                  ]);\n                                }}\n                              />\n                            )))}\n\n                        {selectedField &&\n                          sfDefaultValue.mapping &&\n                          sfDefaultValue.mapping[0] &&\n                          sfDefaultValue.mapping[0].id === \"MASK\" &&\n                          (\"sfType:\" + selectedField && (\n                            <GRAXRestoreMappingSFField\n                              /*options={this.state._maskOptions}*/\n                              options={\n                                selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString\n                              }\n                              filterOptionsHandler={options => {\n                                return selectedField.sfType === \"phone\"\n                                  ? this.state._maskOptionsPhone\n                                  : selectedField.sfType === \"email\"\n                                  ? this.state._maskOptionsEmail\n                                  : selectedField.type === \"date\"\n                                  ? this.state._maskOptionsDate\n                                  : this.state._maskOptionsString;\n                              }}\n                              selection={sfDefaultValue.masking}\n                              onSelect={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                              onRequestRemoveSelectedOption={(event, selection) => {\n                                sfDefaultValue.masking = selection;\n                                this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                  sfDefaultValue.selectedField\n                                ]);\n                              }}\n                            />\n                          ))}\n                      </td>\n                      <td data-label={IS_OVERRIDE} style={{ width: \"10vw\" }}>\n                        {(sfDefaultValue.mapping && sfDefaultValue.mapping[0] == null) ||\n                        sfDefaultValue.mapping[0].id !== \"MASK\" ? (\n                          <Checkbox\n                            key=\"checkbox_enabled\"\n                            defaultChecked={sfDefaultValue.isOverride}\n                            onChange={e => {\n                              e.persist();\n\n                              sfDefaultValue.isOverride = e.target.checked;\n\n                              this.onDefaultValueChangeHandler(sfDefaultValue, [\n                                sfDefaultValue.selectedField\n                              ]);\n                            }}\n                          />\n                        ) : (\n                          <Checkbox key=\"checkbox_disabled\" value={false} disabled={true} />\n                        )}\n                      </td>\n                      <td data-label={\"Actions\"} style={{ width: \"10vw\" }}>\n                        <Button\n                          label=\"Remove Field\"\n                          variant=\"base\"\n                          onClick={() => {\n                            this.removeFieldHandler(i);\n                          }}\n                        />\n                      </td>\n                    </tr>\n                  );\n                }.bind(this)\n              )}\n            </tbody>\n          </table>\n          {/*</div>*/}\n\n          <div className=\"slds-p-top_medium\">\n            <Button\n              label=\"Add Field\"\n              variant=\"brand\"\n              onClick={() => {\n                this.addAnotherFieldHandler();\n              }}\n            />\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport React from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXSObjectCombobox from './GRAXSObjectCombobox';\n\nimport {Spinner, Button, Checkbox, Modal} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams, pageParams} from '../lib/grax-data-lake';\n\nimport GRAXOrgCombobox from './GRAXOrgCombobox';\nimport GRAXRestoreMappingFields from './GRAXRestoreMappingFields';\nimport GRAXRestoreMappingDefaults from './GRAXRestoreMappingDefaults';\n\nfunction normalizeFieldType(typeName) {\n    var nft;\n\n    switch (typeName) {\n        case 'date':\n        case 'datetime':\n            nft = 'date';\n            break;\n        case 'boolean':\n            nft = 'boolean';\n            break;\n        case 'double':\n        case 'long':\n        case 'percent':\n        case 'currency':\n            nft = 'number';\n            break;\n        default:\n            nft = 'text';\n            break;\n    }\n\n    return nft;\n}\n\n\nconst HAS_CHANGES_MESSAGE = 'Some changes have not been saved, do you want to continue?';\n\nconst DEFAULT_VALUES_KEY = '__defaultValues__';\n\nexport default class GRAXRestoreMapping extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedSObject: null,\n            _graxFieldOptions: null,\n            _sfFieldOptions: null,\n            _sfMappedFields: {},\n            _sfDefaultValues: {}, // to null\n            _error: null,\n            isLoading: true,\n            _isCustomOrg: false,\n            _customOrg: null,\n            customMapping: null,\n            hasChanges: false,\n            isSaving: false,\n            resetConfirmIsOpen: false,\n            resetConfirmIsChecked: false,\n            resetConfirmCallback: () => ({}),\n            renderCounter: 0\n        }\n    }\n\n    _onMappingChangeHandler(fieldName, mappedValues) {\n        console.log(fieldName, mappedValues);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        _sfMappedFields[fieldName] = mappedValues;\n\n        this.setState({\n            _sfMappedFields: _sfMappedFields,\n            hasChanges: true\n        });\n    }\n\n    _onOrgSelectionChangeHandler(selection) {\n        console.log(selection);\n\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n            });\n            // this.state._customOrg = _customOrg;\n\n            this.onMappingSettingsChange(this.state.selectedSObject, this.state.customMapping);\n        }\n    }\n\n    _onOrgSelectionRemoveHandler(selection) {\n        var _customOrg = selection[0] || null;\n\n        if(this.state._customOrg !== _customOrg && (!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE))) {\n            this.setState({\n                _customOrg: _customOrg,\n                _sfMappedFields: {},\n                _sfDefaultValues: {}\n            });\n        }\n    }\n\n    isMapLoaded() {\n        return this.state._error || (\n            this.state.customMapping != null\n            && this.state._graxFieldOptions != null\n            && this.state._sfFieldOptions != null\n            && this.state._sfDefaultValues != null\n        );\n    }\n\n    componentDidMount() {\n        this.setState({\n            customMapping: this.props.customMapping\n        });\n    }\n\n    onMappingSettingsChange(selectedSObject, data) {\n        var customMapping = this.state.customMapping[selectedSObject] || {};\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = customMapping[this.state._customOrg] || {};\n        }\n\n        var fieldMap = customMapping.fieldMap || {};\n\n        this.setState({\n            _sfFieldOptions: _.map(data, (item, i) => ({\n                id: item.name,\n                label: item.name,\n                type: normalizeFieldType(item.type),\n                sfType: item.type\n            })),\n            _sfMappedFields: _.omit(fieldMap, [DEFAULT_VALUES_KEY]) || {},\n            _sfDefaultValues: fieldMap[DEFAULT_VALUES_KEY] || {}\n        });\n    }\n\n    sObjectChangeHandler(selectedSObject) {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + selectedSObject + '/fields' + GetParams({action:'load'}),\n            data: {\n                _bools: 'createable',\n                _select: 'name,type'\n            },\n            success: function(data) {\n                this.onMappingSettingsChange(selectedSObject, data);\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/grax' + selectedSObject.toLowerCase() + 'index' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                this.setState({\n                    _graxFieldOptions: _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: normalizeFieldType(val)\n                    }))\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    getCustomMappingToSave() {\n        console.log('this.state.customMapping', this.state.customMapping);\n\n        var _sfMappedFields = this.state._sfMappedFields;\n\n        var customMapping = {\n            fieldMap: _.reduce(_sfMappedFields, (customMapping, mappedFields, fieldName) => {\n                if(!(_.isArray(mappedFields) && mappedFields.length === 1 && mappedFields[0] === fieldName)) {\n                    customMapping[fieldName] = mappedFields;\n                }\n\n                return customMapping;\n            }, {})\n        };\n\n        if(!_.isEmpty(this.state._sfDefaultValues)) {\n            customMapping.fieldMap[DEFAULT_VALUES_KEY] = this.state._sfDefaultValues;\n        }\n\n        if(this.state._isCustomOrg && this.state._customOrg) {\n            customMapping = _.assign({}, this.state.customMapping[this.state.selectedSObject.id] || {}, {\n                [this.state._customOrg]: customMapping\n            });\n        }\n\n        console.log('customMapping', customMapping);\n\n        return _.assign({}, this.state.customMapping, {\n            [this.state.selectedSObject.id]: customMapping\n        });\n    }\n\n    saveCustomMapping(customMappingToSave) {\n        console.log('customMappingToSave', customMappingToSave);\n\n        this.setState({\n            isSaving: true\n        });\n\n        $.ajax({\n            type: 'POST',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/saveCustomMapping' + GetParams({action:'save'}),\n            contentType: \"application/json; charset=utf-8\",\n            data: JSON.stringify(customMappingToSave),\n            success: function(data) {\n\n                this.setState({\n                    customMapping: customMappingToSave,\n                    hasChanges: false,\n                    isSaving: false\n                });\n\n                if(this.props.onMappingChange) {\n                    this.props.onMappingChange(customMappingToSave);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    _error: err.toString(),\n                    isSaving: false\n                });\n            }.bind(this)\n        });\n\n        //alert('Save in progress...');\n    }\n\n    render() {\n        return (\n            // <div style={{position: 'relative'}}>\n            <div>\n                {this.state.isSaving && <Spinner size=\"large\" variant=\"brand\" />}\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select your Salesforce Object\">\n                    {this.state._error || <GRAXSObjectCombobox\n                        menuItem={(props) => {\n                            if(this.state.customMapping[props.option.id]) {\n                                return <b>{props.option.id}</b>;\n                            }\n\n                            return props.option.id;\n                        }}\n                        onSelect={(event, data) => {\n                            var selectedSObject = data[0];\n\n                            this.setState({\n                                selectedSObject: selectedSObject\n                            });\n\n                            this.sObjectChangeHandler(selectedSObject.id);\n                        }}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            if(!this.state.hasChanges || confirm(HAS_CHANGES_MESSAGE)) {\n                                this.setState({\n                                    selectedSObject: null,\n                                    _graxFieldOptions: null,\n                                    _sfFieldOptions: null,\n                                    //_sfDefaultValues: null,\n                                    hasChanges: false\n                                });\n\n                                return true;\n                            }\n\n                            return false;\n                        }}\n                        onLoad={(success, err) => {\n                            this.setState({\n                                isLoading: false,\n                                _error: err ? err.toString : null\n                            })\n                        }}\n                        selectionKeys={pageParams.datalakeIndex != null ? [pageParams.datalakeIndex] : null}\n                    />}\n\n                    {!this.state.isLoading && <Checkbox\n                        className=\"slds-p-top_medium\"\n                        labels={{\n                            label: 'Would you like to define a custom field Mapping for a source Organization?',\n                        }}\n                        onChange={(e) => {\n                            e.persist();\n\n                            this.setState({\n                                _isCustomOrg: e.target.checked\n                            })\n                        }}\n                    />}\n\n                    {this.state._isCustomOrg && (\n                        <div style={{maxWidth: '50vw'}}>\n                            <GRAXOrgCombobox\n                                onSelect={(event, selection) => this._onOrgSelectionChangeHandler(selection)}\n                                onRequestRemoveSelectedOption={(event, selection) => this._onOrgSelectionRemoveHandler(selection)}\n                            />\n                        </div>\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Map the fields to the appropriate Salesforce field\">\n                    {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingFields\n                                key={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingFields_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                graxFieldOptions={this.state._graxFieldOptions}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfMappedFields={this.state._sfMappedFields}\n                                onMappingChange={this._onMappingChangeHandler.bind(this)}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Set a default field value for fields on this object\">\n                {\n                        this.state.selectedSObject && (this.isMapLoaded() ? (\n                            <GRAXRestoreMappingDefaults\n                                key={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                renderKey={'GRAXRestoreMappingDefaults_' + this.state.renderCounter}\n                                objectName={this.state.selectedSObject.id}\n                                sfFieldOptions={this.state._sfFieldOptions}\n                                sfDefaultValues={this.state._sfDefaultValues}\n                                onDefaultValueChangeHandler={(_sfDefaultValues) => {\n                                    console.log(_sfDefaultValues);\n\n                                    this.setState({\n                                        _sfDefaultValues: _sfDefaultValues,\n                                        hasChanges: true\n                                    });\n                                }}\n                            />\n                        ) : (\n                            <div style={{ position: 'relative', height: '5rem' }}>\n                                <Spinner size=\"medium\" variant=\"brand\" />\n                            </div>\n                        ))\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <div style={{\n                  \"margin-bottom\": \"25rem\"\n                }}>\n                    {this.state.selectedSObject && this.isMapLoaded() && (\n                        <React.Fragment>\n                            <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                this.saveCustomMapping(customMappingToSave);\n                            }}/>\n\n                            {this.state.customMapping && this.state.customMapping[this.state.selectedSObject.id] && (\n                                <Button label=\"Reset Mapping\" variant=\"destructive\" onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: true,\n                                        resetConfirmIsChecked: false,\n                                        resetConfirmCallback: (() => {\n                                            if(this.state.resetConfirmIsChecked && confirm('Are you sure that you want to reset the selected mapping?')) {\n                                                this.setState({\n                                                    _sfMappedFields: {},\n                                                    _sfDefaultValues: {},\n\n                                                    renderCounter: this.state.renderCounter + 1,\n\n                                                    resetConfirmIsOpen: false,\n                                                    resetConfirmCallback: (() => {}),\n                                                });\n\n                                                var customMappingToSave = this.getCustomMappingToSave();\n\n                                                if(customMappingToSave[this.state.selectedSObject.id]) {\n                                                    delete customMappingToSave[this.state.selectedSObject.id];\n                                                }\n\n                                                this.saveCustomMapping(customMappingToSave);\n                                            }\n                                        })\n                                    });\n                                }} />\n                            )}\n                        </React.Fragment>\n                    )}\n                </div>\n\n                {this.state.selectedSObject && this.isMapLoaded() && (\n                    <Modal\n                        dismissible={true}\n                        footer={[\n                            <div key=\"resetCheck\" className=\"slds-p-bottom_small\">\n                                <Checkbox\n                                    assistiveText={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    id=\"reset-confirm\"\n                                    labels={{\n                                        label: 'I understand the risks',\n                                    }}\n                                    onChange={(e) => {\n                                        e.persist();\n\n                                        this.setState({\n                                            resetConfirmIsChecked: e.target.checked\n                                        });\n                                    }}\n                                />\n                            </div>,\n                            <Button\n                                key=\"cancelBtn\"\n                                label=\"Cancel\"\n                                onClick={() => {\n                                    this.setState({\n                                        resetConfirmIsOpen: false,\n                                        resetConfirmIsChecked: false\n                                    });\n                                }}\n                            />,\n                            <Button\n                                key=\"resetBtn\"\n                                label=\"Reset\"\n                                onClick={this.state.resetConfirmCallback}\n                                variant=\"destructive\"\n                                disabled={!this.state.resetConfirmIsChecked}\n                            />,\n                        ]}\n                        isOpen={this.state.resetConfirmIsOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                resetConfirmIsOpen: false,\n                                resetConfirmIsChecked: false\n                            });\n                        }}\n                        prompt=\"error\"\n                        size=\"medium\"\n                        title={<span>Reset <b>{this.state.selectedSObject.id}</b> mapping?</span>}\n                    >\n                        <div className=\"slds-m-around_medium\">\n                            Removing the mapping will set the mapping back to the default values.\n                            <br />\n                            Once a mapping has been reset, it cannot be restored.\n                        </div>\n                    </Modal>\n                )}\n            </div>\n        );\n    }\n}"],"sourceRoot":""}