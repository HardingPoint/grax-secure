{"version":3,"sources":["../../../../.tmp-es/components/combobox/filter.js","components/GRAXObjectCombobox.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx","../../../../.tmp-es/components/alert/check-props.js","../../../../.tmp-es/components/alert/index.jsx","components/GRAXRestore.jsx","components/SLDSSection.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../../../.tmp-es/components/color-picker/private/swatch.jsx","../../../../.tmp-es/components/radio/check-props.js","../../../../.tmp-es/components/radio/index.jsx","../../../.tmp-es/utilities/get-data-props.js","../../../.tmp-es/utilities/class-names.js","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx"],"names":["inputValue","limit","options","selection","inputValueRegExp","RegExp","escapeRegExp","searchTermFound","option","isSeparator","notAlreadySelected","sel","GRAXObjectCombobox","props","state","isLoaded","error","$","ajax","type","url","baseUrl","GetParams","action","data","success","this","excludeIds","_","filter","item","indexOf","id","setState","bind","xhr","status","err","console","toString","Fragment","classNameMenu","events","onChange","event","value","onRequestRemoveSelectedOption","onSelect","labels","placeholder","comboboxFilterAndLimit","variant","required","style","position","height","size","React","Component","propTypes","assistiveText","label","PropTypes","string","children","className","disabled","name","errorId","defaultProps","RadioGroup","shortid","assign","classNames","title","RadioButtonGroup","rest","closeButton","dismissible","icon","heading","headingLink","onClickHeadingLink","onRequestClose","isRequired","Alert","DOMElementFocus","isInitialRender","checkProps","defaultIcons","info","category","offline","warning","iconName","clonedIcon","containerClassName","inverse","role","onClick","href","buttonRef","iconCategory","iconSize","GRAXFieldsCombobox","lazy","GRAXRestoreDataTable","ELASTIC_SORTABLE_TYPES","BOTH","GRAXRestoreArchiveFilter","checked","val","onChangeHandler","target","map","i","key","margin","align","content","GRAXRestore","selectedDataIndex","retrieved","retrievedCounter","_sfRequestsDisabled","_restoreChildrens","_checkIsUserActive","_useGRAXHistoryOnly","_updateRecordIfExist","_sendNotification","_currentOrgRecords","_graxFields","_graxFieldsSelection","_graxFieldsSelectionList","_filterFunction","dataList","_getFilterQuery","_filterValuesFields","_graxSortableFields","objectHasCustomMapping","_archiveFilterQuery","length","queryParts","concat","push","orgid","remove","queryPart","join","SLDSSection","isCollapsible","isOpen","marginRight","defaultChecked","isChecked","toggleDisabled","toggleEnabled","log","customMapping","objectType","objectTypeMapping","Object","keys","find","k","toLowerCase","fallback","dataIndex","onLoad","e","reduce","sortableFields","elasticField","archiveFilterQuery","GRAXFilterGeneration","SObjectType","filterableFieldOptions","onFilterValueChangeHandler","hasFieldSelected","renderKey","columns","hiddenColumns","sfRequestsDisabled","restoreChildrens","checkIsUserActive","useGRAXHistoryOnly","updateRecordIfExist","sendNotification","filterFunction","filterQuery","getFilterQuery","sortableColumns","undefined","handleToggle","onToggle","preventDefault","_toConsumableArray","arr","Array","isArray","arr2","iter","Symbol","iterator","prototype","call","from","TypeError","Swatch","color","innerStyle","backgroundColor","coverable","vertical","onRenderVisualPicker","onRenderVisualPickerSelected","onRenderVisualPickerNotSelected","description","refs","input","func","Radio","Boolean","ariaProps","getAriaProps","dataProps","prev","radio","border","htmlFor","getId","colorVariant","labelId","onKeyPress","charCode","KEYS","ref","GRAXSFieldCombobox","SObjectName","fieldName","_select","picklistValues","onElseComponent","onRender","elseComponent","multiple","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","_isMounted","isOpened","filterOptionsHandler","onOpen","onClose","_filterValues","_error","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filterValues","_filterValuesList","getFilterValuesList","getFilterFunction","splice","isReturned","forEach","filterOperator","filterVal","split","filterIsNegated","isFilterMatch","itemVal","moment","format","String","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","selectionIds","scope","data-label","width","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler"],"mappings":"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","file":"static/js/16.3981d4a5.chunk.js","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport escapeRegExp from 'lodash.escaperegexp';\n\n/**\n * SLDS recommends auto-complete/search inputs menus have a limit of 10 items.\n */\nconst filter = ({ inputValue, limit = 10, options, selection }) => {\n\tconst inputValueRegExp = new RegExp(escapeRegExp(inputValue), 'ig');\n\t// eslint-disable-next-line fp/no-mutating-methods\n\treturn options\n\t\t.filter((option) => {\n\t\t\tconst searchTermFound = option.label\n\t\t\t\t? option.label.match(inputValueRegExp)\n\t\t\t\t: false;\n\t\t\tconst isSeparator = option.type === 'separator';\n\t\t\tconst notAlreadySelected = !selection.some((sel) => sel.id === option.id);\n\n\t\t\treturn (\n\t\t\t\t(!inputValue || isSeparator || searchTermFound) && notAlreadySelected\n\t\t\t);\n\t\t})\n\t\t.splice(0, limit);\n};\nexport default filter;\n","import React from 'react';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypes' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this.props.excludeIds) {\n                    data = _.filter(data, (item) => {\n                        return this.props.excludeIds.indexOf(item.id) === -1;\n                    });\n                }\n\n                this.setState({\n                    options: data,\n                    isLoaded: true\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>                    \n                    <Combobox\n                        classNameMenu={'scrollable-GRAXObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Search GRAX Table',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n/* eslint-disable import/no-mutable-exports */\n\nimport sunsetProperty from '../../utilities/warning/sunset-property';\nimport getComponentDocFn from '../../utilities/get-component-doc';\n\nlet checkProps = function checkPropsFunction() {};\n\nif (process.env.NODE_ENV !== 'production') {\n\tcheckProps = function checkPropsFunction(COMPONENT, props, jsonDoc) {\n\t\tconst createDocUrl = getComponentDocFn(jsonDoc);\n\t\t/* eslint-disable max-len */\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.iconCategory,\n\t\t\t'iconCategory',\n\t\t\t`Use \\`Icon\\` instead. ${createDocUrl('icon')}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.iconName,\n\t\t\t'iconName',\n\t\t\t`Use \\`Icon\\` instead. ${createDocUrl('icon')}`\n\t\t);\n\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.content,\n\t\t\t'content',\n\t\t\t`Use \\`labels.heading\\` and \\`labels.headingLink\\` instead.${createDocUrl(\n\t\t\t\t'labels'\n\t\t\t)}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.duration,\n\t\t\t'duration',\n\t\t\t`Only Toasts can auto-hide. ${createDocUrl()}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.isOpen,\n\t\t\t'isOpen',\n\t\t\t`Use a conditional outside of alert. ${createDocUrl()}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.isOpen,\n\t\t\t'onDismiss',\n\t\t\t`Use \\`onRequestClose\\` instead. ${createDocUrl('onRequestClose')}`\n\t\t);\n\t\tsunsetProperty(COMPONENT, props.texture, 'texture', createDocUrl());\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.theme,\n\t\t\t'theme',\n\t\t\t`Use \\`variant\\` instead. ${createDocUrl('variant')}`\n\t\t);\n\t};\n}\n\nexport default checkProps;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Alert Component\n\n// Implements the [Alert design pattern](https://lightningdesignsystem.com/components/alert/) in React.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport assign from 'lodash.assign';\nimport classNames from '../../utilities/class-names';\nimport Button from '../button';\nimport Icon from '../icon';\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\nimport { ALERT } from '../../utilities/constants';\nimport DOMElementFocus from '../../utilities/dom-element-focus';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `closeButton`: This is a visually hidden label for the close button.\n\t * _Tested with snapshot testing._\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tcloseButton: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t}),\n\t/**\n\t * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t * _Tested with snapshot testing._\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Allows user to click a close button. Banners should be dismissible only if they communicate future impact to the system,\n\t * _Tested with snapshot testing._\n\t */\n\tdismissible: PropTypes.bool,\n\t/**\n\t * Icon of type `~/components/icon`. This icon will be cloned and additional props appended. The default icons are:\n\t * * info variant: `utility:info`\n\t * * error variant: `utility:error`\n\t * * offline variant: `utility:offline`\n\t * * warning variant: `utility:warning`\n\t *\n\t * _Tested with snapshot testing._\n\t */\n\ticon: PropTypes.node,\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `heading`: text within heading tag\n\t * * `headingLink`: Text of link that triggers `onClickHeadingLink`. Inline links should pass a keyed array of React components into `labels.heading`.\n\t *\n\t * _Tested with snapshot testing._\n\t */\n\tlabels: PropTypes.shape({\n\t\theading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t\theadingLink: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t}),\n\t/**\n\t * Triggered by link. _Tested with Mocha testing._\n\t */\n\tonClickHeadingLink: PropTypes.func,\n\t/**\n\t * Triggered by close button. This is a controlled component. _Tested with Mocha testing._\n\t */\n\tonRequestClose: PropTypes.func,\n\t/**\n\t * Custom styles to be passed to the component. _Tested with Mocha testing._\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * The type of alert. _Tested with snapshot testing._\n\t */\n\tvariant: PropTypes.oneOf(['error', 'info', 'offline', 'warning']).isRequired,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tcloseButton: 'Close',\n\t},\n\tlabels: {},\n\tvariant: 'info',\n};\n\n/**\n * Alert banners communicate a state that affects the entire system, not just a feature or page. It persists over a session and appears without the user initiating the action. View [banner guidelines](https://www.lightningdesignsystem.com/guidelines/messaging/components/banners/).\n */\n\nclass Alert extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisInitialRender: true,\n\t\t};\n\n\t\t// `checkProps` issues warnings to developers about properties (similar to React's built in development tools)\n\t\tcheckProps(ALERT, props, componentDoc);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tDOMElementFocus.returnFocusToStoredElement();\n\t}\n\n\tsaveButtonRef = (component) => {\n\t\tthis.closeButton = component;\n\t\tif (this.state.isInitialRender) {\n\t\t\tDOMElementFocus.storeActiveElement();\n\t\t\tif (this.closeButton) {\n\t\t\t\tthis.closeButton.focus();\n\t\t\t}\n\t\t\tthis.setState({ isInitialRender: false });\n\t\t}\n\t};\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tconst assistiveText = assign(\n\t\t\t{},\n\t\t\tdefaultProps.assistiveText,\n\t\t\tthis.props.assistiveText\n\t\t);\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\n\t\t// BACKWARD COMPATIBILITY WITH NOTIFICATION\n\t\tconst heading = labels.heading || this.props.content; // eslint-disable-line react/prop-types\n\t\tconst onRequestClose = this.props.onRequestClose || this.props.onDismiss; // eslint-disable-line react/prop-types\n\n\t\tconst assistiveTextVariant = {\n\t\t\tinfo: 'info',\n\t\t\twarning: 'warning',\n\t\t\terror: 'error',\n\t\t\toffline: 'offline',\n\t\t};\n\n\t\tconst defaultIcons = {\n\t\t\tinfo: <Icon category=\"utility\" name=\"info\" />,\n\t\t\toffline: <Icon category=\"utility\" name=\"offline\" />,\n\t\t\twarning: <Icon category=\"utility\" name=\"warning\" />,\n\t\t\terror: <Icon category=\"utility\" name=\"error\" />,\n\t\t};\n\n\t\tlet icon = this.props.icon\n\t\t\t? this.props.icon\n\t\t\t: defaultIcons[this.props.variant];\n\n\t\t// BACKWARD COMPATIBILITY WITH NOTIFICATION\n\t\tif (this.props.iconName && this.props.iconCategory) {\n\t\t\t// eslint-disable-line react/prop-types\n\t\t\ticon = (\n\t\t\t\t<Icon category={this.props.iconCategory} name={this.props.iconName} />\n\t\t\t);\n\t\t}\n\n\t\tconst clonedIcon = React.cloneElement(icon, {\n\t\t\tcontainerClassName: 'slds-m-right_x-small',\n\t\t\tinverse: true,\n\t\t\tsize: 'x-small',\n\t\t});\n\n\t\t/* eslint-disable no-script-url */\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-notify slds-notify_alert slds-theme_alert-texture',\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-theme_info': this.props.variant === 'info',\n\t\t\t\t\t\t'slds-theme_warning': this.props.variant === 'warning',\n\t\t\t\t\t\t'slds-theme_error': this.props.variant === 'error',\n\t\t\t\t\t\t'slds-theme_offline': this.props.variant === 'offline',\n\t\t\t\t\t},\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t\trole=\"alert\"\n\t\t\t\tstyle={this.props.style}\n\t\t\t>\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{assistiveTextVariant[this.props.variant]}\n\t\t\t\t</span>\n\t\t\t\t{clonedIcon}\n\t\t\t\t<h2>\n\t\t\t\t\t{heading}{' '}\n\t\t\t\t\t{labels.headingLink ? (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tonClick={this.props.onClickHeadingLink}\n\t\t\t\t\t\t\thref=\"javascript:void(0);\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{labels.headingLink}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t) : null}\n\t\t\t\t</h2>\n\t\t\t\t{this.props.dismissible ? (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tassistiveText={{ icon: assistiveText.closeButton }}\n\t\t\t\t\t\tbuttonRef={this.saveButtonRef}\n\t\t\t\t\t\tclassName=\"slds-notify__close\"\n\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"close\"\n\t\t\t\t\t\ticonSize=\"medium\"\n\t\t\t\t\t\tinverse\n\t\t\t\t\t\tonClick={onRequestClose}\n\t\t\t\t\t\ttitle={assistiveText.closeButton}\n\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nAlert.defaultProps = defaultProps;\nAlert.displayName = ALERT;\nAlert.propTypes = propTypes;\n\nexport default Alert;\n","/* eslint-disable no-script-url */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Suspense, lazy } from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXObjectCombobox from './GRAXObjectCombobox';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\n\nimport {Button, Checkbox, Tooltip, Icon, Alert, RadioButtonGroup, Radio, Spinner} from '@salesforce/design-system-react';\n\nimport {orgid} from '../lib/grax-data-lake';\n\nconst GRAXFieldsCombobox = lazy(() => import('./GRAXFieldsCombobox'));\nconst GRAXRestoreDataTable = lazy(() => import('./GRAXRestoreDataTable'));\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\nconst BACKEDUP = 'Backed Up';\nconst ARCHIVED = 'Archived';\nconst BOTH = 'Both';\n\nclass GRAXRestoreArchiveFilter extends React.Component {\n\tconstructor(props) {\n        super(props);\n        \n\t\tthis.state = {\n            checked: BOTH\n        };\n    }\n\n    onChangeHandler(val) {\n        this.setState({\n            checked: val\n        });\n\n        if(this.props.onChange) {\n            this.props.onChange(val);\n        }\n    }\n    \n    render() {\n        const options = [BACKEDUP, ARCHIVED, BOTH];\n        \n\t\treturn (\n            <div className=\"slds-p-bottom_medium\">\n                <div className=\"slds-clearfix\">\n                    <div className=\"slds-float_left slds-p-right_xx-small\">\n                        <RadioButtonGroup\n                            onChange={(event) => this.onChangeHandler(event.target.value)}\n                            //disabled={this.props.disabled}\n                            required={this.props.required}\n                            name={this.props.name}\n                            errorId={this.props.errorId}\n                            disabled={this.props.disabled === true}\n                        >\n                            {_.map(options, function(option, i) {\n                                return (\n                                    <Radio\n                                        key={'option' + i}\n                                        id={'option' + i}\n                                        label={option}\n                                        value={option}\n                                        checked={this.state.checked === option}\n                                        variant=\"button-group\"\n                                    />\n                                );\n                            }.bind(this))}\n                        </RadioButtonGroup>\n                    </div>\n\n                    <div className=\"slds-float_left\" style={{\n                        margin: '0.41rem'\n                    }}>\n                        <Tooltip\n                            align=\"top left\"\n                            content={'Select one of the options, \"Backed Up\", \"Archived\", or \"Both\", below to display these records.'}\n                            variant=\"learnMore\"\n                        />\n                    </div>\n                </div>\n            </div>\n\t\t);\n\t}\n}\n\n\nexport default class GRAXRestore extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedDataIndex: null,\n            retrieved: false,\n            retrievedCounter: 0,\n            _sfRequestsDisabled: true,\n            _restoreChildrens: false,\n            _checkIsUserActive: true,\n            _useGRAXHistoryOnly: false,\n            _updateRecordIfExist: false,\n            _sendNotification: false,\n            _currentOrgRecords: true,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: null,\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => null),\n            _filterValuesFields: [],\n            _graxSortableFields: null,\n            objectHasCustomMapping: false,\n            _archiveFilterQuery: null\n        }\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n\n    getFilterQuery() {\n        var queryParts = _.concat(this.state._getFilterQuery(), this.state._archiveFilterQuery);\n\n        if(this.state._currentOrgRecords) {\n            queryParts.push('(doc.graxorgid.keyword: \"' + orgid + '\")');\n        }\n        \n        queryParts = _.remove(queryParts, function(queryPart) {\n            return queryPart != null;\n        });\n\n        if(queryParts && queryParts.length > 0) {\n            return queryParts.join(' AND ');\n        }\n\n        return null;\n    }\n    \n    render() {\n        return (\n            <div>\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Disclaimers\">\n                    <ol>\n                        <li>{'When restoring records in an environment please confirm that the following is true:'}</li>\n                        <ol className=\"slds-list_ordered\">\n                            <li>{'Ensure that the destination environment has the same customizations and metadata as the source environment'}</li>\n                            <li>{'Ensure that all workflows, APEX triggers, validation rules, process builders, duplication rules, etc. are disabled in the destination environment'}</li>\n                            <li>{'If restoring in a partial or developer Sandbox, ensure that there is ample storage space for the data you are intending to restore in the destination environment'}</li>\n                            <li>{'Ensure that your user has \"modify all data\" permission in the destination environment'}</li>\n                            <li>{'If you are attempting to restore records where the owner is inactive, ensure that your user has the permission \"Update records with inactive owners\" set to true in the destination environment'}</li>\n                        </ol>\n                    </ol>\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Settings\">\n                    <div className=\"slds-grid slds-wrap\">\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When disabled, only the parent record will be restored. When enabled, the parent and all related children will be enabled.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Restore Child Records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._restoreChildrens}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _restoreChildrens: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Restore Child Records?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Restore Parent Record Only',\n                                        toggleEnabled: 'Restore Child Records'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When disabled, the restore process queries your storage facility to determine if this record exists already in this SF environment. When enabled the process queries SF to see if this record already exists and will not create a duplicate.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Skip Salesforce Queries?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._sfRequestsDisabled}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _sfRequestsDisabled: !isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Skip Salesforce Queries?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Query storage facility',\n                                        toggleEnabled: 'Query Salesforce'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When enabled, the user must have the setting &quot;Update Records with Inactive Owners&quot; set to true otherwise records assigned to an inactive user will NOT be created.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Assign Records to Inactive Users?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._checkIsUserActive}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _checkIsUserActive: !isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Assign Records to Inactive Users?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Assign records only to Active Users',\n                                        toggleEnabled: 'Assign records to Active or Inactive Users'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Set it to TRUE if you don't want to double check that the restored records still exist in the destination Org.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Use GRAXHistory only?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._useGRAXHistoryOnly}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _useGRAXHistoryOnly: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Use GRAXHistory only?\"\n\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Query SFDC to confirm record exists',\n                                        toggleEnabled: 'Query only GRAX History'\n                                    }}\n                                />\n                                \n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Set it to TRUE if you want to update the previously restored records in the destination Org.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Update records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._updateRecordIfExist}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _updateRecordIfExist: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Update records?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Only insert records',\n                                        toggleEnabled: 'Update records if exists'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Notify User via Email when Process Completes\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Send Notification?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._sendNotification}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _sendNotification: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Send Notification?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Don\\'t Send Notification',\n                                        toggleEnabled: 'Send Notification'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Show records only from the current environment or all environments.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Filter records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _currentOrgRecords: !isChecked,\n                                            retrievedCounter: this.state.retrievedCounter + 1\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select the GRAX Table\">\n                    <GRAXObjectCombobox\n                        onSelect={(event, data) => {\n                            var objectHasCustomMapping = false;\n\n                            var selectedDataIndex = data[0];\n\n                            console.log(this.props.customMapping, selectedDataIndex);\n\n                            var objectType = selectedDataIndex.label;\n\n                            if(this.props.customMapping != null) {\n                                var objectTypeMapping = this.props.customMapping[\n                                    Object.keys(this.props.customMapping)\n                                        .find(k => k.toLowerCase() === objectType.toLowerCase())\n                                ];\n\n                                if(objectTypeMapping && Object.keys(objectTypeMapping).length > 0) {\n                                    objectHasCustomMapping = true;\n                                }\n                            }\n\n                            this.setState({\n                                selectedDataIndex: selectedDataIndex,\n                                objectHasCustomMapping: objectHasCustomMapping\n                            });\n                        }}\n                        excludeIds={['graxgrax_loggingindex']}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            this.setState({\n                                retrieved: false,\n                                selectedDataIndex: null,\n                                _graxFieldsSelection: null,\n                                _graxFieldsSelectionList: null,\n                                objectHasCustomMapping: false\n                            });\n                        }}\n                    />\n\n                    {this.state.objectHasCustomMapping ? (\n                        <div>\n                            <Alert\n                                dismissible\n                                labels={{\n                                    heading: 'The selected object has a custom mapping defined. To review this custom mapping, click on the \"Restore Mapping\" tab and then select the object.'\n                                }}\n                                onRequestClose={() => {\n                                    this.setState({ objectHasCustomMapping: false });\n                                }}\n                            />\n                        </div>\n                    ) : null}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n                \n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Search GRAX Table\">\n                    {\n                        this.state.selectedDataIndex != null\n                        ? (\n                            <Suspense\n                                fallback={(\n                                    <div style={{ position: 'relative', height: '2rem' }}>\n                                        <Spinner size=\"small\" variant=\"base\" />\n                                    </div>\n                                )}\n                            >\n                                <GRAXFieldsCombobox\n                                    dataIndex={this.state.selectedDataIndex.id}\n                                    onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                        console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                                        this.setState({\n                                            _graxFields: _graxFields,\n                                            _graxFieldsSelection: _graxFieldsSelection,\n                                            _graxFieldsSelectionList: _graxFieldsSelectionList,\n                                            _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                                if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                                    sortableFields.push(elasticField.id);\n                                                }\n                                \n                                                return sortableFields;\n                                            }, [])\n                                        });\n                                    }}\n                                    onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                        console.log('onChange', _graxFieldsSelection, _graxFieldsSelectionList);\n\n                                        var retrievedCounter = this.state.retrievedCounter;\n\n                                        if(_graxFieldsSelectionList.length > this.state._graxFieldsSelectionList.length) {\n                                            retrievedCounter++;\n                                        }\n\n                                        this.setState({\n                                            retrievedCounter: retrievedCounter,\n                                            _graxFieldsSelection: _graxFieldsSelection,\n                                            _graxFieldsSelectionList: _graxFieldsSelectionList\n                                        });\n                                    }}\n                                />\n                            </Suspense>\n                        )\n                        : 'No GRAX Table selected...'\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Records\">\n                    <GRAXRestoreArchiveFilter onChange={(val) => {\n                        var archiveFilterQuery;\n\n                        if(val === BOTH) {\n                            archiveFilterQuery = null;\n                        }\n\n                        if(val === BACKEDUP) {\n                            archiveFilterQuery = '(NOT doc.IsDeleted:true)';\n                        }\n\n                        if(val === ARCHIVED) {\n                            archiveFilterQuery = '(doc.IsDeleted:true)';\n                        }\n\n                        this.setState({\n                            _archiveFilterQuery: archiveFilterQuery,\n                            retrievedCounter: this.state.retrievedCounter + 1\n                        })\n                    }} />\n\n                    {/*<Input\n                        iconLeft={\n                            <InputIcon\n                                assistiveText=\"Search\"\n                                name=\"search\"\n                                category=\"utility\"\n                            />\n                        }\n                        assistiveText={{ label: 'Search Term' }}\n                        id=\"record-query\"\n                        placeholder=\"Search\"\n                    />*/}\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            SObjectType={this.state.selectedDataIndex.label}\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_small\">\n                        <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrieved: this.state.selectedDataIndex != null,\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} disabled={!this.hasFieldSelected()} />\n                    </div>\n\n                    {this.state.retrieved && this.state._graxFieldsSelectionList && (\n                        <Suspense\n                            fallback={(\n                                <div style={{ position: 'relative', height: '2rem' }}>\n                                    <Spinner size=\"small\" variant=\"base\" />\n                                </div>\n                            )}\n                        >\n                            <GRAXRestoreDataTable\n                                key={'GRAXRestoreDataTable_' + this.state.retrievedCounter}\n                                renderKey={'GRAXRestoreDataTable_' + this.state.retrievedCounter}\n                                columns={this.state._graxFieldsSelectionList}\n                                _graxFieldsSelection={this.state._graxFieldsSelection}\n                                hiddenColumns={this.state._filterValuesFields}\n                                dataIndex={this.state.selectedDataIndex.id}\n                                sfRequestsDisabled={this.state._sfRequestsDisabled}\n                                restoreChildrens={this.state._restoreChildrens}\n                                checkIsUserActive={this.state._checkIsUserActive}\n                                useGRAXHistoryOnly={this.state._useGRAXHistoryOnly}\n                                updateRecordIfExist={this.state._updateRecordIfExist}\n                                sendNotification={this.state._sendNotification}\n                                filterFunction={this.state._filterFunction}\n                                filterQuery={this.getFilterQuery()}\n                                sortableColumns={this.state._graxSortableFields}\n                            />\n                        </Suspense>\n                    )}\n                </SLDSSection>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Swatch = ({ color, style, label, labels }) => {\n\tconst innerStyle = {\n\t\tbackgroundColor: color,\n\t\t...style,\n\t};\n\tlet assistiveText = label || color;\n\n\t// falsey values output a transparent swatch\n\tif (!color) {\n\t\tinnerStyle.backgroundImage =\n\t\t\t'linear-gradient(-45deg, white 47%, #870500 0, #870500 53%, white 0)';\n\t\tif (labels && labels.swatchTabTransparentSwatch) {\n\t\t\tassistiveText = labels.swatchTabTransparentSwatch;\n\t\t}\n\t}\n\n\treturn (\n\t\t<span className=\"slds-swatch\" style={innerStyle}>\n\t\t\t<span className=\"slds-assistive-text\">{assistiveText}</span>\n\t\t</span>\n\t);\n};\n\nSwatch.propTypes = {\n\tcolor: PropTypes.string.isRequired,\n};\n\nexport default Swatch;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n/* eslint-disable import/no-mutable-exports */\n/* eslint-disable max-len */\n\nimport getComponentDocFn from '../../utilities/get-component-doc';\nimport sunsetProperty from '../../utilities/warning/sunset-property';\n\nlet checkProps = function checkPropsFunction() {};\n\nif (process.env.NODE_ENV !== 'production') {\n\tcheckProps = function checkPropsFunction(COMPONENT, props, jsonDoc) {\n\t\tconst createDocUrl = getComponentDocFn(jsonDoc);\n\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.label,\n\t\t\t'label',\n\t\t\t`Use \\`labels.label\\` instead.${createDocUrl('labels')}`\n\t\t);\n\t};\n}\n\nexport default checkProps;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport classNames from 'classnames';\n\nimport KEYS from '../../utilities/key-code';\nimport { RADIO } from '../../utilities/constants';\nimport getAriaProps from '../../utilities/get-aria-props';\nimport getDataProps from '../../utilities/get-data-props';\nimport Swatch from '../../components/color-picker/private/swatch';\nimport Icon from '../icon';\n\n// This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `label`: This is used as a visually hidden label if, no `labels.label` is provided.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * The ID of an element that describes this radio input. Often used for error messages.\n\t */\n\t'aria-describedby': PropTypes.string,\n\t/**\n\t * The aria-labelledby attribute establishes relationships between objects and their label(s), and its value should be one or more element IDs, which refer to elements that have the text needed for labeling. List multiple element IDs in a space delimited fashion.\n\t */\n\t'aria-labelledby': PropTypes.string,\n\t/**\n\t * This is a controlled component. This radio is checked according to this value.\n\t */\n\tchecked: PropTypes.bool,\n\t/**\n\t * Class name to be passed to radio input wrapper ( `span` element)\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]) /**\n\t * This is the initial value of an uncontrolled form element and is present only to provide compatibility\n\t * with hybrid framework applications that are not entirely React. It should only be used in an application\n\t * without centralized state (Redux, Flux). \"Controlled components\" with centralized state is highly recommended.\n\t * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n\t */,\n\tdefaultChecked: PropTypes.bool,\n\t/**\n\t * Disable this radio input.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * A unique ID that is used to associating a label to the `input` element. This ID is added to the `input` element.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `heading`: Heading for the visual picker variant\n\t * * `label`: Label for the radio input\n\t */\n\tlabels: PropTypes.shape({\n\t\theading: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * The name of the radio input group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * This event fires when the radio selection changes. Passes in `event, { checked }`.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * The value of this radio input.\n\t */\n\tvalue: PropTypes.string,\n\t/**\n\t * Variant of the Radio button. Base is the default and button-group makes the radio button look like a normal button (should be a child of <RadioButtonGroup>).\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group', 'swatch', 'visual-picker']),\n\t/**\n\t * Determines whether visual picker is coverable when selected (only for visual picker variant)\n\t */\n\tcoverable: PropTypes.bool,\n\t/**\n\t * Determines whether the visual picker should be vertical or horizontal (only for visual picker variant)\n\t */\n\tvertical: PropTypes.bool,\n\t/**\n\t * Allows icon to shown if radio is not selected (only for non-coverable visual picker variant)\n\t */\n\tonRenderVisualPicker: PropTypes.func,\n\t/**\n\t * Allows icon to shown if radio is not selected (only for visual picker variant)\n\t */\n\tonRenderVisualPickerSelected: PropTypes.func,\n\t/**\n\t * Allows icon to shown if radio is not selected (only for visual picker variant)\n\t */\n\tonRenderVisualPickerNotSelected: PropTypes.func,\n\t/**\n\t * Shows description for radio option (only for visual picker variant)\n\t */\n\tdescription: PropTypes.string,\n\t/**\n\t * Allows icon to shown if radio is not selected (only for visual picker variant)\n\t */\n\tsize: PropTypes.oneOf(['medium', 'large']),\n\t/**\n\t * Ref callback that will pass in the radio's `input` tag\n\t */\n\trefs: PropTypes.shape({\n\t\tinput: PropTypes.func,\n\t}),\n};\n\nconst defaultProps = {\n\tassistiveText: {},\n\tvariant: 'base',\n\tcoverable: false,\n};\n\n/**\n * A radio input that can have a single input checked at any one time. Radios should be wrapped with\n * a [RadioGroup](/components/radio-group) or [RadioButtonGroup](/components/radio-button-group)\n */\nclass Radio extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.preventDuplicateChangeEvent = false;\n\t}\n\n\tcomponentWillMount() {\n\t\tcheckProps(RADIO, this.props, componentDoc);\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\thandleChange = (event, preventDuplicateChangeEvent) => {\n\t\tif (!this.preventDuplicateChangeEvent) {\n\t\t\tthis.preventDuplicateChangeEvent = Boolean(preventDuplicateChangeEvent);\n\t\t\tif (this.props.onChange) {\n\t\t\t\tthis.props.onChange(event, {\n\t\t\t\t\tchecked: !this.props.checked,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.preventDuplicateChangeEvent = false;\n\t\t}\n\t};\n\n\trender() {\n\t\tconst ariaProps = getAriaProps(this.props);\n\t\tconst dataProps = getDataProps(this.props);\n\n\t\tlet radio;\n\n\t\tconst labels = {\n\t\t\t...defaultProps.labels,\n\t\t\t/* Remove backward compatibility at next breaking change */\n\t\t\t...(this.props.label ? { label: this.props.label } : {}),\n\t\t\t...this.props.labels,\n\t\t};\n\n\t\tif (this.props.variant === 'swatch') {\n\t\t\tradio = (\n\t\t\t\t<label\n\t\t\t\t\tstyle={{ border: '1px' }}\n\t\t\t\t\tclassName=\"slds-radio_button__label\"\n\t\t\t\t\thtmlFor={this.getId()}\n\t\t\t\t>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<Swatch\n\t\t\t\t\t\t\tlabel={labels.label}\n\t\t\t\t\t\t\tstyle={this.props.style}\n\t\t\t\t\t\t\tcolor={this.props.value}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\t\t\t\t</label>\n\t\t\t);\n\t\t} else if (this.props.variant === 'button-group') {\n\t\t\tradio = (\n\t\t\t\t<label className=\"slds-radio_button__label\" htmlFor={this.getId()}>\n\t\t\t\t\t<span className=\"slds-radio_faux\">{labels.label}</span>\n\t\t\t\t</label>\n\t\t\t);\n\t\t} else if (this.props.variant === 'visual-picker') {\n\t\t\tradio = (\n\t\t\t\t<label htmlFor={this.getId()}>\n\t\t\t\t\t{this.props.coverable ? (\n\t\t\t\t\t\t<div className=\"slds-visual-picker__figure slds-visual-picker__icon slds-align_absolute-center\">\n\t\t\t\t\t\t\t<span className=\"slds-is-selected\">\n\t\t\t\t\t\t\t\t{this.props.onRenderVisualPickerSelected()}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span className=\"slds-is-not-selected\">\n\t\t\t\t\t\t\t\t{this.props.onRenderVisualPickerNotSelected()}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<span className=\"slds-visual-picker__figure slds-visual-picker__text slds-align_absolute-center\">\n\t\t\t\t\t\t\t{this.props.onRenderVisualPicker()}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t\t{!this.props.vertical ? (\n\t\t\t\t\t\t<span className=\"slds-visual-picker__body\">\n\t\t\t\t\t\t\t{labels.heading ? (\n\t\t\t\t\t\t\t\t<span className=\"slds-text-heading_small\">\n\t\t\t\t\t\t\t\t\t{labels.heading}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t<span className=\"slds-text-title\">{labels.label}</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{!this.props.coverable ? (\n\t\t\t\t\t\t<span className=\"slds-icon_container slds-visual-picker__text-check\">\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\tassistiveText={this.props.assistiveText}\n\t\t\t\t\t\t\t\tcategory=\"utility\"\n\t\t\t\t\t\t\t\tname=\"check\"\n\t\t\t\t\t\t\t\tcolorVariant=\"base\"\n\t\t\t\t\t\t\t\tsize=\"x-small\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t) : null}\n\t\t\t\t</label>\n\t\t\t);\n\t\t} else {\n\t\t\tradio = (\n\t\t\t\t<label\n\t\t\t\t\tclassName=\"slds-radio__label\"\n\t\t\t\t\thtmlFor={this.getId()}\n\t\t\t\t\tid={this.props.labelId}\n\t\t\t\t>\n\t\t\t\t\t<span className=\"slds-radio_faux\" />\n\t\t\t\t\t<span className=\"slds-form-element__label\">{labels.label}</span>\n\t\t\t\t\t{this.props.assistiveText.label ? (\n\t\t\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t{this.props.assistiveText.label}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t) : null}\n\t\t\t\t</label>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<span\n\t\t\t\tclassName={classNames(\n\t\t\t\t\tthis.props.variant === 'visual-picker'\n\t\t\t\t\t\t? `slds-visual-picker_${this.props.size}`\n\t\t\t\t\t\t: null,\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-radio':\n\t\t\t\t\t\t\tthis.props.variant === 'base' || this.props.variant === 'swatch',\n\t\t\t\t\t\t'slds-button slds-radio_button':\n\t\t\t\t\t\t\tthis.props.variant === 'button-group',\n\t\t\t\t\t\t'slds-visual-picker': this.props.variant === 'visual-picker',\n\t\t\t\t\t\t'slds-visual-picker_vertical':\n\t\t\t\t\t\t\tthis.props.variant === 'visual-picker' && this.props.vertical,\n\t\t\t\t\t},\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\tid={this.getId()}\n\t\t\t\t\tname={this.props.name}\n\t\t\t\t\tvalue={this.props.value}\n\t\t\t\t\t/* A form element should not have both checked and defaultChecked props. */\n\t\t\t\t\t{...(this.props.checked !== undefined\n\t\t\t\t\t\t? { checked: this.props.checked }\n\t\t\t\t\t\t: { defaultChecked: this.props.defaultChecked })}\n\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\tthis.handleChange(event);\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\tif (this.props.checked && this.props.deselectable) {\n\t\t\t\t\t\t\tthis.handleChange(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyPress={(event) => {\n\t\t\t\t\t\tconst { charCode } = event;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcharCode === KEYS.SPACE &&\n\t\t\t\t\t\t\tthis.props.checked &&\n\t\t\t\t\t\t\tthis.props.deselectable\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.handleChange(event, true);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t(charCode === KEYS.ENTER &&\n\t\t\t\t\t\t\t\t(this.props.checked && this.props.deselectable)) ||\n\t\t\t\t\t\t\t!this.props.checked\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.handleChange(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t{...ariaProps}\n\t\t\t\t\t{...dataProps}\n\t\t\t\t\tref={(input) => {\n\t\t\t\t\t\tif (this.props.refs && this.props.refs.input) {\n\t\t\t\t\t\t\tthis.props.refs.input(input);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t{radio}\n\t\t\t</span>\n\t\t);\n\t}\n}\n\nRadio.displayName = RADIO;\nRadio.propTypes = propTypes;\nRadio.defaultProps = defaultProps;\n\nexport default Radio;\n","export default function getDataProps(props) {\n\treturn Object.keys(props).reduce((prev, key) => {\n\t\tif (key.substr(0, 5) === 'data-') {\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tprev[key] = props[key];\n\t\t}\n\t\treturn prev;\n\t}, {});\n}\n","// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, \"a simple javascript utility for conditionally\n// joining classNames together.\"\nimport classNames from 'classnames';\n\n// eslint-disable-next-line fp/no-rest-parameters\nconst classNamesWrapper = (...rest) => {\n\tconst string = classNames(...rest);\n\treturn string === '' ? undefined : string;\n};\n\nexport default classNamesWrapper;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    \n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n            \n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n    \n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n            \n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n                    \n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n            \n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(isChecked) => {\n                                                                    filterValue.value = isChecked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n            \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n            \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n                        \n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n                \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(isChecked) => {\n                                                        filterValue.isActive = isChecked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}