{"version":3,"sources":["../../../../.tmp-es/components/combobox/filter.js","components/GRAXEnvSetting.jsx","components/GRAXCloudBulkRestoreForm.jsx","components/SLDSSection.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx"],"names":["inputValue","limit","options","selection","inputValueRegExp","RegExp","escapeRegExp","searchTermFound","option","isSeparator","notAlreadySelected","sel","GRAXEnvSettingCombobox","lazy","GRAXEnvSettingSwitch","GRAXEnvSettingInput","GRAXEnvSetting","props","getComponentToRender","label","type","defaultValue","key","id","setting","onChange","v","onChangeTrigger","helpTextTooltip","getHelpTextTooltip","Date","now","toString","state","selectedOption","name","_","startCase","camelCase","value","this","onBlur","getLabelFromName","helpText","align","content","fallback","size","variant","getLabel","getType","getDefaultValue","React","PureComponent","BULK_RESTORE_SETTINGS","GRAXCloudBulkRestoreForm","isLoading","error","globalConfigurations","title","configuration","triggerConfigurationChange","bind","console","log","dataSources","get","dataSourcesOptions","map","item","organizationId","bulkRestoreSourceOrganizationId","bulkRestoreDestinationOrganizationId","sourceOrgSelection","filter","destinationOrgSelection","setState","className","e","set","target","htmlFor","placeholder","onSelect","event","i","Component","SLDSSection","isOpen","undefined","isCollapsible","handleToggle","onToggle","preventDefault","join","onClick","assistiveText","category","children","_toConsumableArray","arr","Array","isArray","arr2","length","iter","Symbol","iterator","Object","prototype","call","from","TypeError","GRAXSFieldCombobox","isLoaded","$","ajax","url","baseUrl","SObjectName","fieldName","GetParams","action","data","_select","success","picklistValues","onLoad","xhr","status","err","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onRequestRemoveSelectedOption","onRequestClose","labels","comboboxFilterAndLimit","multiple","required","style","position","height","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","_isMounted","isOpened","filterOptionsHandler","onOpen","onClose","GRAXFilterGeneration","_filterValues","_error","_filterValuesFields","filterableFieldOptions","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filterValues","keys","_filterValuesList","getFilterValuesList","onFilterValueChangeHandler","getFilterFunction","getFilterQuery","push","splice","dataList","isReturned","forEach","filterOperator","filterVal","split","filterIsNegated","isFilterMatch","itemVal","Boolean","moment","format","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","reduce","selectionIds","scope","data-label","width","indexOf","find","defaultChecked","isChecked","SObjectType","getSelectionValues","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","disabled"],"mappings":"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","file":"static/js/19.da4717c2.chunk.js","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport escapeRegExp from 'lodash.escaperegexp';\n\n/**\n * SLDS recommends auto-complete/search inputs menus have a limit of 10 items.\n */\nconst filter = ({ inputValue, limit = 10, options, selection }) => {\n\tconst inputValueRegExp = new RegExp(escapeRegExp(inputValue), 'ig');\n\t// eslint-disable-next-line fp/no-mutating-methods\n\treturn options\n\t\t.filter((option) => {\n\t\t\tconst searchTermFound = option.label\n\t\t\t\t? option.label.match(inputValueRegExp)\n\t\t\t\t: false;\n\t\t\tconst isSeparator = option.type === 'separator';\n\t\t\tconst notAlreadySelected = !selection.some((sel) => sel.id === option.id);\n\n\t\t\treturn (\n\t\t\t\t(!inputValue || isSeparator || searchTermFound) && notAlreadySelected\n\t\t\t);\n\t\t})\n\t\t.splice(0, limit);\n};\nexport default filter;\n","import React, { Suspense, lazy } from \"react\";\nimport _ from \"lodash\";\nimport { Tooltip, Spinner } from \"@salesforce/design-system-react\";\n\nconst GRAXEnvSettingCombobox = lazy(() => import(\"./GRAXEnvSettingCombobox\"));\nconst GRAXEnvSettingSwitch = lazy(() => import(\"./GRAXEnvSettingSwitch\"));\nconst GRAXEnvSettingInput = lazy(() => import(\"./GRAXEnvSettingInput\"));\n\nexport default class GRAXEnvSetting extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    if (this.props.id) {\n      this.id = this.props.id;\n    } else {\n      this.id = Date.now().toString();\n    }\n\n    this.state = {\n      inputValue: \"\",\n      selection: null,\n      selectedOption: null\n    };\n  }\n\n  getLabelFromName(name) {\n    return _.startCase(_.camelCase(name));\n  }\n\n  onChangeTrigger(value) {\n    const onChange = this.props.onChange || this.props.onBlur || (() => {});\n\n    onChange(value);\n  }\n\n  getType() {\n    return this.props.setting.type || \"text\";\n  }\n\n  getLabel() {\n    if (this.props.setting.label) {\n      return this.props.setting.label;\n    }\n\n    return this.getLabelFromName(this.props.setting.name);\n  }\n\n  getDefaultValue() {\n    return this.props.setting.defaultValue || this.props.defaultValue;\n  }\n\n  getHelpTextTooltip() {\n    if (this.props.setting.helpText) {\n      return (\n        <Tooltip\n          key={this.id + \"-helptext\"}\n          id={this.id + \"-helptext\"}\n          align=\"top left\"\n          content={this.props.setting.helpText}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  getComponentToRender = ({ label, type, defaultValue }) => {\n    if (type === \"combobox\") {\n      return (\n        <GRAXEnvSettingCombobox\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    if (type === \"boolean\") {\n      return (\n        <GRAXEnvSettingSwitch\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          helpTextTooltip={this.getHelpTextTooltip()}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    return (\n      <GRAXEnvSettingInput\n        key={this.id}\n        id={this.id}\n        type={type}\n        label={label}\n        setting={this.props.setting}\n        helpTextTooltip={this.getHelpTextTooltip()}\n        onChange={v => this.onChangeTrigger(v)}\n        defaultValue={defaultValue}\n      />\n    );\n  };\n\n  render() {\n    if (this.props.setting == null || this.props.id == null) return null;\n\n    return (\n      <Suspense fallback={<Spinner size=\"small\" variant=\"brand\" />}>\n        {this.getComponentToRender({\n          label: this.getLabel(),\n          type: this.getType(),\n          defaultValue: this.getDefaultValue()\n        })}\n      </Suspense>\n    );\n  }\n}\n","import React from \"react\";\nimport { Spinner, Input } from \"@salesforce/design-system-react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport GRAXEnvSetting from \"./GRAXEnvSetting\";\nimport { GRAXFilterableCombobox } from \"./GRAXFilterGeneration\";\n\nimport _ from \"lodash\";\n\nconst BULK_RESTORE_SETTINGS = [\n  {\n    name: \"GRAX_ESMAXBULK\",\n    type: \"number\",\n    helpText: \"Enter the maximum number of records to be processed per Bulk API Batch.\"\n  },\n  {\n    name: \"GRAX_OBJECT_TYPES_TO_RESTORE\",\n    type: \"text\",\n    helpText: \"Set the API Name of Object(s) to restore, separated by comma.\"\n  },\n  {\n    name: \"GRAX_MAX_RESTORE\",\n    type: \"number\",\n    helpText: \"# of records per batch to be restored\"\n  }\n];\n\nexport default class GRAXCloudBulkRestoreForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n\n      globalConfigurations: {},\n      title: null,\n      configuration: {}\n    };\n\n    this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n  }\n\n  componentDidMount() {\n    var globalConfigurations = this.props.globalConfigurations || {};\n    var configuration = this.props.configuration || {};\n\n    console.log(\"configuration\", configuration);\n\n    var dataSources = _.get(configuration, \"dataSources\", []);\n    var dataSourcesOptions = _.map(dataSources, item => {\n      return {\n        id: item.organizationId,\n        label: item.name + \" (\" + item.organizationId + \")\"\n      };\n    });\n\n    var bulkRestoreSourceOrganizationId = _.get(\n      globalConfigurations,\n      \"bulkRestoreSourceOrganizationId\"\n    );\n    var bulkRestoreDestinationOrganizationId = _.get(\n      globalConfigurations,\n      \"bulkRestoreDestinationOrganizationId\"\n    );\n\n    console.log(\"bulkRestoreSourceOrganizationId\", bulkRestoreSourceOrganizationId);\n    console.log(\"bulkRestoreDestinationOrganizationId\", bulkRestoreDestinationOrganizationId);\n\n    console.log(\"dataSourcesOptions\", dataSourcesOptions);\n\n    var sourceOrgSelection = _.filter(dataSourcesOptions, item => {\n      console.log(\"item\", item);\n\n      return item.id === bulkRestoreSourceOrganizationId;\n    });\n\n    var destinationOrgSelection = _.filter(dataSourcesOptions, item => {\n      console.log(\"item\", item);\n\n      return item.id === bulkRestoreDestinationOrganizationId;\n    });\n\n    console.log(\"destinationOrgSelection: \", destinationOrgSelection);\n\n    this.setState({\n      globalConfigurations: globalConfigurations,\n      dataSourcesOptions: dataSourcesOptions,\n      sourceOrgSelection: sourceOrgSelection,\n      destinationOrgSelection: destinationOrgSelection,\n      isLoading: false\n    });\n  }\n\n  triggerConfigurationChange() {\n    console.log(this.state.configuration);\n\n    if (this.props.onChange) {\n      this.props.onChange(\n        this.state.title,\n        this.state.configuration,\n        this.state.globalConfigurations\n      );\n    }\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <div className=\"slds-p-around_medium\">\n        <SLDSSection title=\"Configuration\">\n          <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center slds-p-bottom_medium\">\n            <div className=\"slds-col\">\n              <Input\n                id=\"grax-cloud-bulk-restore-name\"\n                label=\"Configuration Name\"\n                defaultValue={_.get(this.state.configuration, \"bulkRestore[0].name\")}\n                onBlur={e => {\n                  var configuration = this.state.configuration;\n\n                  _.set(configuration, \"bulkRestore[0].name\", e.target.value);\n\n                  this.setState({\n                    configuration: configuration\n                  });\n\n                  this.triggerConfigurationChange();\n                }}\n              />\n            </div>\n          </div>\n        </SLDSSection>\n\n        <SLDSSection title=\"Bulk Restore\" className=\"slds-p-top_large\">\n          <div className=\"slds-form-element\">\n            <label className=\"slds-form-element__label\" htmlFor=\"grax-cloud-bulk-process-sourceOrg\">\n              Source SF\n            </label>\n            <div className=\"slds-form-element__control\">\n              <GRAXFilterableCombobox\n                placeholder=\"Select Source SF\"\n                options={this.state.dataSourcesOptions}\n                selection={this.state.sourceOrgSelection}\n                variant=\"readonly\"\n                onSelect={(event, selection) => {\n                  if (selection != null) {\n                    var globalConfigurations = this.state.globalConfigurations;\n\n                    _.set(globalConfigurations, \"bulkRestoreSourceOrganizationId\", selection[0]);\n\n                    this.setState({\n                      globalConfigurations: globalConfigurations\n                    });\n\n                    this.triggerConfigurationChange();\n                  }\n                }}\n              />\n            </div>\n          </div>\n\n          <div className=\"slds-form-element\">\n            <label className=\"slds-form-element__label\" htmlFor=\"grax-cloud-bulk-process-sourceOrg\">\n              Destination SF\n            </label>\n            <div className=\"slds-form-element__control\">\n              <GRAXFilterableCombobox\n                placeholder=\"Select Destination SF\"\n                options={this.state.dataSourcesOptions}\n                selection={this.state.destinationOrgSelection}\n                variant=\"readonly\"\n                onSelect={(event, selection) => {\n                  if (selection != null) {\n                    var globalConfigurations = this.state.globalConfigurations;\n\n                    _.set(\n                      globalConfigurations,\n                      \"bulkRestoreDestinationOrganizationId\",\n                      selection[0]\n                    );\n\n                    this.setState({\n                      globalConfigurations: globalConfigurations\n                    });\n\n                    this.triggerConfigurationChange();\n                  }\n                }}\n              />\n            </div>\n          </div>\n\n          {_.map(BULK_RESTORE_SETTINGS, (setting, i) => {\n            var key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                onBlur={e => {\n                  console.log(e);\n                }}\n              />\n            );\n          })}\n        </SLDSSection>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    \n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n            \n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n    \n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n            \n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n                    \n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n            \n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(isChecked) => {\n                                                                    filterValue.value = isChecked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n            \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n            \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n                        \n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n                \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(isChecked) => {\n                                                        filterValue.isActive = isChecked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}