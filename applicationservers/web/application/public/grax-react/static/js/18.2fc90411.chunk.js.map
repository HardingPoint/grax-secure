{"version":3,"sources":["components/GRAXCloudBulkRestoreForm.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@salesforce/design-system-react/module/components/combobox/filter.js","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx"],"names":["BULK_RESTORE_SETTINGS","name","type","helpText","GRAXCloudBulkRestoreForm","props","_this","Object","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","isLoading","error","globalConfigurations","title","configuration","triggerConfigurationChange","bind","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","console","log","dataSources","_","get","dataSourcesOptions","map","item","id","organizationId","label","bulkRestoreSourceOrganizationId","bulkRestoreDestinationOrganizationId","sourceOrgSelection","filter","destinationOrgSelection","setState","onChange","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_7__","size","variant","className","_SLDSSection__WEBPACK_IMPORTED_MODULE_9__","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_8__","defaultValue","onBlur","e","set","target","value","htmlFor","_GRAXFilterGeneration__WEBPACK_IMPORTED_MODULE_11__","placeholder","options","selection","onSelect","event","setting","i","key","_GRAXCloudConfigurationForm__WEBPACK_IMPORTED_MODULE_10__","React","Component","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","Symbol","iterator","prototype","toString","from","_iterableToArray","TypeError","_nonIterableSpread","__webpack_require__","d","__webpack_exports__","combobox_filter","_ref","inputValue","_ref$limit","limit","inputValueRegExp","RegExp","lodash_escaperegexp_default","option","searchTermFound","match","isSeparator","notAlreadySelected","some","sel","splice","GRAXSFieldCombobox","classCallCheck","possibleConstructorReturn","getPrototypeOf","isLoaded","$","ajax","url","baseUrl","SObjectName","fieldName","GetParams","action","data","_select","success","picklistValues","onLoad","xhr","status","err","react_default","onElseComponent","onRender","elseComponent","Fragment","combobox","classNameMenu","events","onRequestRemoveSelectedOption","onRequestClose","labels","comboboxFilterAndLimit","multiple","required","style","position","height","spinner","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","text","isNegated","date","number","long","boolean","GRAXFilterableCombobox","_React$Component","_isMounted","isOpened","inherits","createClass","filterOptionsHandler","onOpen","onClose","GRAXFilterGeneration","_this3","_filterValues","_error","_filterValuesFields","filterableFieldOptions","operator","isActive","selectedField","_this4","filterValueStruct","getFilterValueStruct","filterValues","keys","_filterValuesList","getFilterValuesList","onFilterValueChangeHandler","getFilterFunction","getFilterQuery","push","dataList","_this5","isReturned","forEach","filterOperator","filterVal","split","filterIsNegated","isFilterMatch","itemVal","Boolean","moment","format","String","toLowerCase","includes","apply","concat","toConsumableArray","operatorByName","gt","gte","lt","lte","queryConditions","startsWith","_filterVal","condition","inConditions","each","join","parseFloat","reduce","selectionIds","_this7","scope","_this6","data-label","width","GRAXFilterGeneration_GRAXFilterableCombobox","indexOf","find","components_checkbox","defaultChecked","isChecked","GRAXSFieldCombobox_GRAXSFieldCombobox","SObjectType","getSelectionValues","input","assistiveText","isPicklist","date_picker","menuPosition","hasStaticAlignment","components_button","onClick","removeFieldHandler","addAnotherFieldHandler","disabled"],"mappings":"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","file":"static/js/18.2fc90411.chunk.js","sourcesContent":["import React from 'react';\nimport { Spinner, Input } from '@salesforce/design-system-react';\n\nimport SLDSSection from './SLDSSection';\nimport { GRAXEnvSetting } from './GRAXCloudConfigurationForm';\nimport { GRAXFilterableCombobox } from './GRAXFilterGeneration';\n\nimport _ from 'lodash';\n\nconst BULK_RESTORE_SETTINGS = [\n    {\n        name: 'GRAX_ESMAXBULK',\n        type: 'number',\n        helpText: 'Enter the maximum number of records to be processed per Bulk API Batch.'\n    },\n    {\n        name: 'GRAX_OBJECT_TYPES_TO_RESTORE',\n        type: 'text',\n        helpText: 'Set the API Name of Object(s) to restore, separated by comma.'\n    },\n    {\n        name: 'GRAX_MAX_RESTORE',\n        type: 'number',\n        helpText: '# of records per batch to be restored'\n    }\n];\n\n\nexport default class GRAXCloudBulkRestoreForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            error: null,\n\n            globalConfigurations: {},\n            title: null,\n            configuration: {}\n        };\n\n        this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n    }\n\n    componentDidMount() {\n        var globalConfigurations = this.props.globalConfigurations || {};\n        var configuration = this.props.configuration || {};\n\n        console.log('configuration', configuration);\n\n        var dataSources = _.get(configuration, 'dataSources', []);\n        var dataSourcesOptions = _.map(dataSources, (item) => {\n            return {\n                id: item.organizationId,\n                label: item.name + ' (' + item.organizationId + ')'\n            };\n        });\n\n        var bulkRestoreSourceOrganizationId = _.get(globalConfigurations, 'bulkRestoreSourceOrganizationId');\n        var bulkRestoreDestinationOrganizationId = _.get(globalConfigurations, 'bulkRestoreDestinationOrganizationId');\n\n        console.log('bulkRestoreSourceOrganizationId', bulkRestoreSourceOrganizationId);\n        console.log('bulkRestoreDestinationOrganizationId', bulkRestoreDestinationOrganizationId);\n\n        console.log('dataSourcesOptions', dataSourcesOptions);\n\n        var sourceOrgSelection = _.filter(dataSourcesOptions, (item) => {\n            console.log('item', item);\n\n            return item.id === bulkRestoreSourceOrganizationId;\n        });\n\n        var destinationOrgSelection = _.filter(dataSourcesOptions, (item) => {\n            console.log('item', item);\n\n            return item.id === bulkRestoreDestinationOrganizationId;\n        });\n\n        console.log('destinationOrgSelection: ', destinationOrgSelection);\n\n        this.setState({\n            globalConfigurations: globalConfigurations,\n            dataSourcesOptions: dataSourcesOptions,\n            sourceOrgSelection: sourceOrgSelection,\n            destinationOrgSelection: destinationOrgSelection,\n            isLoading: false\n        });\n    }\n\n    triggerConfigurationChange() {\n        console.log(this.state.configuration);\n\n        if(this.props.onChange) {\n            this.props.onChange(this.state.title, this.state.configuration, this.state.globalConfigurations);\n        }\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n            <div className=\"slds-p-around_medium\">\n                <SLDSSection title=\"Configuration\">\n                    <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center slds-p-bottom_medium\">\n                        <div className=\"slds-col\">\n                            <Input id=\"grax-cloud-bulk-restore-name\" label=\"Configuration Name\" defaultValue={_.get(this.state.configuration, 'bulkRestore[0].name')} onBlur={(e) => {\n                                var configuration = this.state.configuration;\n                                \n                                _.set(configuration, 'bulkRestore[0].name', e.target.value);\n\n                                this.setState({\n                                    configuration: configuration\n                                });\n\n                                this.triggerConfigurationChange();\n                            }} />\n                        </div>\n                    </div>\n                </SLDSSection>\n\n                <SLDSSection title=\"Bulk Restore\" className=\"slds-p-top_large\">\n                    <div className=\"slds-form-element\">\n                        <label className=\"slds-form-element__label\" htmlFor=\"grax-cloud-bulk-process-sourceOrg\">Source SF</label>\n                        <div className=\"slds-form-element__control\">\n                            <GRAXFilterableCombobox\n                                placeholder=\"Select Source SF\"\n                                options={this.state.dataSourcesOptions}\n                                selection={this.state.sourceOrgSelection}\n                                variant=\"readonly\"\n                                onSelect={(event, selection) => {\n                                    if(selection != null) {\n                                        var globalConfigurations = this.state.globalConfigurations;\n                                \n                                        _.set(globalConfigurations, 'bulkRestoreSourceOrganizationId', selection[0]);\n\n                                        this.setState({\n                                            globalConfigurations: globalConfigurations\n                                        });\n\n                                        this.triggerConfigurationChange();\n                                    }\n                                }}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"slds-form-element\">\n                        <label className=\"slds-form-element__label\" htmlFor=\"grax-cloud-bulk-process-sourceOrg\">Destination SF</label>\n                        <div className=\"slds-form-element__control\">\n                            <GRAXFilterableCombobox\n                                placeholder=\"Select Destination SF\"\n                                options={this.state.dataSourcesOptions}\n                                selection={this.state.destinationOrgSelection}\n                                variant=\"readonly\"\n                                onSelect={(event, selection) => {\n                                    if(selection != null) {\n                                        var globalConfigurations = this.state.globalConfigurations;\n                                \n                                        _.set(globalConfigurations, 'bulkRestoreDestinationOrganizationId', selection[0]);\n\n                                        this.setState({\n                                            globalConfigurations: globalConfigurations\n                                        });\n\n                                        this.triggerConfigurationChange();\n                                    }\n                                }}\n                            />\n                        </div>\n                    </div>\n\n                    {_.map(BULK_RESTORE_SETTINGS, (setting, i) => {\n                        var key = 'grax-env-setting-' + (setting.id || setting.name)\n\n                        return (\n                            <GRAXEnvSetting id={key} key={key} setting={setting} onBlur={(e) => {\n                                console.log(e);\n                            }} />\n                        );\n                    })}\n                </SLDSSection>\n            </div>\n        )\n    }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport escapeRegExp from 'lodash.escaperegexp';\n/**\n * SLDS recommends auto-complete/search inputs menus have a limit of 10 items.\n */\n\nvar filter = function filter(_ref) {\n  var inputValue = _ref.inputValue,\n      _ref$limit = _ref.limit,\n      limit = _ref$limit === void 0 ? 10 : _ref$limit,\n      options = _ref.options,\n      selection = _ref.selection;\n  var inputValueRegExp = new RegExp(escapeRegExp(inputValue), 'ig'); // eslint-disable-next-line fp/no-mutating-methods\n\n  return options.filter(function (option) {\n    var searchTermFound = option.label ? option.label.match(inputValueRegExp) : false;\n    var isSeparator = option.type === 'separator';\n    var notAlreadySelected = !selection.some(function (sel) {\n      return sel.id === option.id;\n    });\n    return (!inputValue || isSeparator || searchTermFound) && notAlreadySelected;\n  }).splice(0, limit);\n};\n\nexport default filter;","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    \n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n            \n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n    \n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n            \n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n                    \n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n            \n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(isChecked) => {\n                                                                    filterValue.value = isChecked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n            \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n            \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n                        \n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n                \n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(isChecked) => {\n                                                        filterValue.isActive = isChecked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}