{"version":3,"sources":["components/SLDSSection.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXObjectCombobox.jsx","../../../../.tmp-es/components/radio-group/index.jsx","../../../../.tmp-es/components/radio-button-group/index.jsx","../../../../.tmp-es/components/alert/check-props.js","../../../../.tmp-es/components/alert/index.jsx","components/GRAXRestore.jsx"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","GRAXSFieldCombobox","options","inputValue","selection","isLoaded","error","$","ajax","type","url","baseUrl","SObjectName","fieldName","GetParams","action","data","_select","success","_","map","picklistValues","item","i","value","onLoad","xhr","status","err","console","toString","length","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onChange","event","onRequestRemoveSelectedOption","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","variant","multiple","required","style","position","height","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","_isMounted","isOpened","log","filterOptionsHandler","onOpen","onClose","GRAXFilterGeneration","_filterValues","_error","_filterValuesFields","filterableFieldOptions","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","keys","_filterValuesList","getFilterValuesList","onFilterValueChangeHandler","getFilterFunction","getFilterQuery","push","splice","dataList","isReturned","forEach","filterOperator","filterVal","Array","isArray","split","filterIsNegated","isFilterMatch","itemVal","Boolean","moment","format","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","reduce","selectionIds","scope","data-label","width","indexOf","find","defaultChecked","target","checked","SObjectType","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","disabled","GRAXObjectCombobox","excludeIds","propTypes","PropTypes","string","errorId","defaultProps","RadioGroup","shortid","assign","classNames","RadioButtonGroup","rest","closeButton","dismissible","icon","heading","headingLink","onClickHeadingLink","isRequired","Alert","DOMElementFocus","isInitialRender","checkProps","defaultIcons","info","offline","warning","iconName","clonedIcon","containerClassName","inverse","role","href","buttonRef","iconCategory","iconSize","GRAXFieldsCombobox","lazy","GRAXRestoreDataTable","ELASTIC_SORTABLE_TYPES","BOTH","GRAXRestoreArchiveFilter","val","onChangeHandler","margin","align","content","GRAXRestore","selectedDataIndex","retrieved","retrievedCounter","_sfRequestsDisabled","_restoreChildrens","_checkIsUserActive","_useGRAXHistoryOnly","_updateRecordIfExist","_sendNotification","_currentOrgRecords","_graxFields","_graxFieldsSelection","_graxFieldsSelectionList","_filterFunction","_getFilterQuery","_graxSortableFields","objectHasCustomMapping","_archiveFilterQuery","queryParts","concat","orgid","remove","queryPart","marginRight","isChecked","toggleDisabled","toggleEnabled","customMapping","objectType","objectTypeMapping","k","fallback","dataIndex","sortableFields","elasticField","archiveFilterQuery","hasFieldSelected","renderKey","columns","hiddenColumns","sfRequestsDisabled","restoreChildrens","checkIsUserActive","useGRAXHistoryOnly","updateRecordIfExist","sendNotification","filterFunction","filterQuery","sortableColumns"],"mappings":"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","file":"static/js/9.0f6ec7af.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypes' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this.props.excludeIds) {\n                    data = _.filter(data, (item) => {\n                        return this.props.excludeIds.indexOf(item.id) === -1;\n                    });\n                }\n\n                this.setState({\n                    options: data,\n                    isLoaded: true\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>                    \n                    <Combobox\n                        classNameMenu={'scrollable-GRAXObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Search GRAX Table',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Group design pattern](https://lightningdesignsystem.com/components/radio-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\n\nimport { RADIO_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t * * `required`: Text to help identify the group as required\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\trequired: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to the node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the radio group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n\t/**\n\t * Variants of radio groups such as Radio Button Group\n\t */\n\tvariant: PropTypes.oneOf(['base', 'button-group']),\n};\n\nconst defaultProps = {\n\tassistiveText: { required: 'Required' },\n\tlabels: {},\n\tvariant: 'base',\n};\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nclass RadioGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedName = shortid.generate();\n\t\tthis.generatedErrorId = shortid.generate();\n\t}\n\n\tgetErrorId() {\n\t\tif (this.hasError()) {\n\t\t\treturn this.props.errorId || this.generatedErrorId;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetName() {\n\t\treturn this.props.name || this.generatedName;\n\t}\n\n\thasError() {\n\t\treturn !!this.labels.error;\n\t}\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tthis.labels = this.props.labels\n\t\t\t? assign({}, defaultProps.labels, this.props.labels)\n\t\t\t: defaultProps.labels;\n\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst children = React.Children.map(this.props.children, (child) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tname: this.getName(),\n\t\t\t\tonChange: this.props.onChange,\n\t\t\t\t'aria-describedby': this.getErrorId(),\n\t\t\t\tdisabled: this.props.disabled,\n\t\t\t})\n\t\t);\n\n\t\treturn (\n\t\t\t<fieldset\n\t\t\t\tclassName={classNames('slds-form-element', {\n\t\t\t\t\t'slds-has-error': this.labels.error,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<legend\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__legend',\n\t\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t\tassistiveText.label ? 'slds-assistive-text' : ''\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t{'*'}\n\t\t\t\t\t\t\t<div className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t{assistiveText.required}{' '}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{assistiveText.label ? assistiveText.label : this.labels.label}\n\t\t\t\t</legend>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-form-element__control',\n\t\t\t\t\t\tthis.props.className\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{this.props.variant === 'button-group' ? (\n\t\t\t\t\t\t<div style={this.props.style} className=\"slds-radio_button-group\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tchildren\n\t\t\t\t\t)}\n\n\t\t\t\t\t{this.labels.error ? (\n\t\t\t\t\t\t<div id={this.getErrorId()} className=\"slds-form-element__help\">\n\t\t\t\t\t\t\t{this.labels.error}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n\nRadioGroup.displayName = RADIO_GROUP;\nRadioGroup.propTypes = propTypes;\nRadioGroup.defaultProps = defaultProps;\n\nexport default RadioGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n/* eslint-disable import/no-mutable-exports */\n\nimport sunsetProperty from '../../utilities/warning/sunset-property';\nimport getComponentDocFn from '../../utilities/get-component-doc';\n\nlet checkProps = function checkPropsFunction() {};\n\nif (process.env.NODE_ENV !== 'production') {\n\tcheckProps = function checkPropsFunction(COMPONENT, props, jsonDoc) {\n\t\tconst createDocUrl = getComponentDocFn(jsonDoc);\n\t\t/* eslint-disable max-len */\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.iconCategory,\n\t\t\t'iconCategory',\n\t\t\t`Use \\`Icon\\` instead. ${createDocUrl('icon')}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.iconName,\n\t\t\t'iconName',\n\t\t\t`Use \\`Icon\\` instead. ${createDocUrl('icon')}`\n\t\t);\n\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.content,\n\t\t\t'content',\n\t\t\t`Use \\`labels.heading\\` and \\`labels.headingLink\\` instead.${createDocUrl(\n\t\t\t\t'labels'\n\t\t\t)}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.duration,\n\t\t\t'duration',\n\t\t\t`Only Toasts can auto-hide. ${createDocUrl()}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.isOpen,\n\t\t\t'isOpen',\n\t\t\t`Use a conditional outside of alert. ${createDocUrl()}`\n\t\t);\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.isOpen,\n\t\t\t'onDismiss',\n\t\t\t`Use \\`onRequestClose\\` instead. ${createDocUrl('onRequestClose')}`\n\t\t);\n\t\tsunsetProperty(COMPONENT, props.texture, 'texture', createDocUrl());\n\t\tsunsetProperty(\n\t\t\tCOMPONENT,\n\t\t\tprops.theme,\n\t\t\t'theme',\n\t\t\t`Use \\`variant\\` instead. ${createDocUrl('variant')}`\n\t\t);\n\t};\n}\n\nexport default checkProps;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Alert Component\n\n// Implements the [Alert design pattern](https://lightningdesignsystem.com/components/alert/) in React.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport assign from 'lodash.assign';\nimport classNames from '../../utilities/class-names';\nimport Button from '../button';\nimport Icon from '../icon';\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\nimport { ALERT } from '../../utilities/constants';\nimport DOMElementFocus from '../../utilities/dom-element-focus';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `closeButton`: This is a visually hidden label for the close button.\n\t * _Tested with snapshot testing._\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tcloseButton: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t}),\n\t/**\n\t * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t * _Tested with snapshot testing._\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Allows user to click a close button. Banners should be dismissible only if they communicate future impact to the system,\n\t * _Tested with snapshot testing._\n\t */\n\tdismissible: PropTypes.bool,\n\t/**\n\t * Icon of type `~/components/icon`. This icon will be cloned and additional props appended. The default icons are:\n\t * * info variant: `utility:info`\n\t * * error variant: `utility:error`\n\t * * offline variant: `utility:offline`\n\t * * warning variant: `utility:warning`\n\t *\n\t * _Tested with snapshot testing._\n\t */\n\ticon: PropTypes.node,\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `heading`: text within heading tag\n\t * * `headingLink`: Text of link that triggers `onClickHeadingLink`. Inline links should pass a keyed array of React components into `labels.heading`.\n\t *\n\t * _Tested with snapshot testing._\n\t */\n\tlabels: PropTypes.shape({\n\t\theading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t\theadingLink: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t}),\n\t/**\n\t * Triggered by link. _Tested with Mocha testing._\n\t */\n\tonClickHeadingLink: PropTypes.func,\n\t/**\n\t * Triggered by close button. This is a controlled component. _Tested with Mocha testing._\n\t */\n\tonRequestClose: PropTypes.func,\n\t/**\n\t * Custom styles to be passed to the component. _Tested with Mocha testing._\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * The type of alert. _Tested with snapshot testing._\n\t */\n\tvariant: PropTypes.oneOf(['error', 'info', 'offline', 'warning']).isRequired,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tcloseButton: 'Close',\n\t},\n\tlabels: {},\n\tvariant: 'info',\n};\n\n/**\n * Alert banners communicate a state that affects the entire system, not just a feature or page. It persists over a session and appears without the user initiating the action. View [banner guidelines](https://www.lightningdesignsystem.com/guidelines/messaging/components/banners/).\n */\n\nclass Alert extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisInitialRender: true,\n\t\t};\n\n\t\t// `checkProps` issues warnings to developers about properties (similar to React's built in development tools)\n\t\tcheckProps(ALERT, props, componentDoc);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tDOMElementFocus.returnFocusToStoredElement();\n\t}\n\n\tsaveButtonRef = (component) => {\n\t\tthis.closeButton = component;\n\t\tif (this.state.isInitialRender) {\n\t\t\tDOMElementFocus.storeActiveElement();\n\t\t\tif (this.closeButton) {\n\t\t\t\tthis.closeButton.focus();\n\t\t\t}\n\t\t\tthis.setState({ isInitialRender: false });\n\t\t}\n\t};\n\n\trender() {\n\t\t// Merge objects of strings with their default object\n\t\tconst assistiveText = assign(\n\t\t\t{},\n\t\t\tdefaultProps.assistiveText,\n\t\t\tthis.props.assistiveText\n\t\t);\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\n\t\t// BACKWARD COMPATIBILITY WITH NOTIFICATION\n\t\tconst heading = labels.heading || this.props.content; // eslint-disable-line react/prop-types\n\t\tconst onRequestClose = this.props.onRequestClose || this.props.onDismiss; // eslint-disable-line react/prop-types\n\n\t\tconst assistiveTextVariant = {\n\t\t\tinfo: 'info',\n\t\t\twarning: 'warning',\n\t\t\terror: 'error',\n\t\t\toffline: 'offline',\n\t\t};\n\n\t\tconst defaultIcons = {\n\t\t\tinfo: <Icon category=\"utility\" name=\"info\" />,\n\t\t\toffline: <Icon category=\"utility\" name=\"offline\" />,\n\t\t\twarning: <Icon category=\"utility\" name=\"warning\" />,\n\t\t\terror: <Icon category=\"utility\" name=\"error\" />,\n\t\t};\n\n\t\tlet icon = this.props.icon\n\t\t\t? this.props.icon\n\t\t\t: defaultIcons[this.props.variant];\n\n\t\t// BACKWARD COMPATIBILITY WITH NOTIFICATION\n\t\tif (this.props.iconName && this.props.iconCategory) {\n\t\t\t// eslint-disable-line react/prop-types\n\t\t\ticon = (\n\t\t\t\t<Icon category={this.props.iconCategory} name={this.props.iconName} />\n\t\t\t);\n\t\t}\n\n\t\tconst clonedIcon = React.cloneElement(icon, {\n\t\t\tcontainerClassName: 'slds-m-right_x-small',\n\t\t\tinverse: true,\n\t\t\tsize: 'x-small',\n\t\t});\n\n\t\t/* eslint-disable no-script-url */\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-notify slds-notify_alert slds-theme_alert-texture',\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-theme_info': this.props.variant === 'info',\n\t\t\t\t\t\t'slds-theme_warning': this.props.variant === 'warning',\n\t\t\t\t\t\t'slds-theme_error': this.props.variant === 'error',\n\t\t\t\t\t\t'slds-theme_offline': this.props.variant === 'offline',\n\t\t\t\t\t},\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t\trole=\"alert\"\n\t\t\t\tstyle={this.props.style}\n\t\t\t>\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{assistiveTextVariant[this.props.variant]}\n\t\t\t\t</span>\n\t\t\t\t{clonedIcon}\n\t\t\t\t<h2>\n\t\t\t\t\t{heading}{' '}\n\t\t\t\t\t{labels.headingLink ? (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tonClick={this.props.onClickHeadingLink}\n\t\t\t\t\t\t\thref=\"javascript:void(0);\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{labels.headingLink}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t) : null}\n\t\t\t\t</h2>\n\t\t\t\t{this.props.dismissible ? (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tassistiveText={{ icon: assistiveText.closeButton }}\n\t\t\t\t\t\tbuttonRef={this.saveButtonRef}\n\t\t\t\t\t\tclassName=\"slds-notify__close\"\n\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"close\"\n\t\t\t\t\t\ticonSize=\"medium\"\n\t\t\t\t\t\tinverse\n\t\t\t\t\t\tonClick={onRequestClose}\n\t\t\t\t\t\ttitle={assistiveText.closeButton}\n\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nAlert.defaultProps = defaultProps;\nAlert.displayName = ALERT;\nAlert.propTypes = propTypes;\n\nexport default Alert;\n","/* eslint-disable no-script-url */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Suspense, lazy } from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXObjectCombobox from './GRAXObjectCombobox';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\n\nimport {Button, Checkbox, Tooltip, Icon, Alert, RadioButtonGroup, Radio, Spinner} from '@salesforce/design-system-react';\n\nimport {orgid} from '../lib/grax-data-lake';\n\nconst GRAXFieldsCombobox = lazy(() => import('./GRAXFieldsCombobox'));\nconst GRAXRestoreDataTable = lazy(() => import('./GRAXRestoreDataTable'));\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\nconst BACKEDUP = 'Backed Up';\nconst ARCHIVED = 'Archived';\nconst BOTH = 'Both';\n\nclass GRAXRestoreArchiveFilter extends React.Component {\n\tconstructor(props) {\n        super(props);\n        \n\t\tthis.state = {\n            checked: BOTH\n        };\n    }\n\n    onChangeHandler(val) {\n        this.setState({\n            checked: val\n        });\n\n        if(this.props.onChange) {\n            this.props.onChange(val);\n        }\n    }\n    \n    render() {\n        const options = [BACKEDUP, ARCHIVED, BOTH];\n        \n\t\treturn (\n            <div className=\"slds-p-bottom_medium\">\n                <div className=\"slds-clearfix\">\n                    <div className=\"slds-float_left slds-p-right_xx-small\">\n                        <RadioButtonGroup\n                            onChange={(event) => this.onChangeHandler(event.target.value)}\n                            //disabled={this.props.disabled}\n                            required={this.props.required}\n                            name={this.props.name}\n                            errorId={this.props.errorId}\n                            disabled={this.props.disabled === true}\n                        >\n                            {_.map(options, function(option, i) {\n                                return (\n                                    <Radio\n                                        key={'option' + i}\n                                        id={'option' + i}\n                                        label={option}\n                                        value={option}\n                                        checked={this.state.checked === option}\n                                        variant=\"button-group\"\n                                    />\n                                );\n                            }.bind(this))}\n                        </RadioButtonGroup>\n                    </div>\n\n                    <div className=\"slds-float_left\" style={{\n                        margin: '0.41rem'\n                    }}>\n                        <Tooltip\n                            align=\"top left\"\n                            content={'Select one of the options, \"Backed Up\", \"Archived\", or \"Both\", below to display these records.'}\n                            variant=\"learnMore\"\n                        />\n                    </div>\n                </div>\n            </div>\n\t\t);\n\t}\n}\n\n\nexport default class GRAXRestore extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedDataIndex: null,\n            retrieved: false,\n            retrievedCounter: 0,\n            _sfRequestsDisabled: true,\n            _restoreChildrens: false,\n            _checkIsUserActive: true,\n            _useGRAXHistoryOnly: false,\n            _updateRecordIfExist: false,\n            _sendNotification: false,\n            _currentOrgRecords: true,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: null,\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => null),\n            _filterValuesFields: [],\n            _graxSortableFields: null,\n            objectHasCustomMapping: false,\n            _archiveFilterQuery: null\n        }\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n\n    getFilterQuery() {\n        var queryParts = _.concat(this.state._getFilterQuery(), this.state._archiveFilterQuery);\n\n        if(this.state._currentOrgRecords) {\n            queryParts.push('(doc.graxorgid.keyword: \"' + orgid + '\")');\n        }\n        \n        queryParts = _.remove(queryParts, function(queryPart) {\n            return queryPart != null;\n        });\n\n        if(queryParts && queryParts.length > 0) {\n            return queryParts.join(' AND ');\n        }\n\n        return null;\n    }\n    \n    render() {\n        return (\n            <div>\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Disclaimers\">\n                    <ol>\n                        <li>{'When restoring records in an environment please confirm that the following is true:'}</li>\n                        <ol className=\"slds-list_ordered\">\n                            <li>{'Ensure that the destination environment has the same customizations and metadata as the source environment'}</li>\n                            <li>{'Ensure that all workflows, APEX triggers, validation rules, process builders, duplication rules, etc. are disabled in the destination environment'}</li>\n                            <li>{'If restoring in a partial or developer Sandbox, ensure that there is ample storage space for the data you are intending to restore in the destination environment'}</li>\n                            <li>{'Ensure that your user has \"modify all data\" permission in the destination environment'}</li>\n                            <li>{'If you are attempting to restore records where the owner is inactive, ensure that your user has the permission \"Update records with inactive owners\" set to true in the destination environment'}</li>\n                        </ol>\n                    </ol>\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Settings\">\n                    <div className=\"slds-grid slds-wrap\">\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When disabled, only the parent record will be restored. When enabled, the parent and all related children will be enabled.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Restore Child Records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._restoreChildrens}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _restoreChildrens: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Restore Child Records?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Restore Parent Record Only',\n                                        toggleEnabled: 'Restore Child Records'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When disabled, the restore process queries your storage facility to determine if this record exists already in this SF environment. When enabled the process queries SF to see if this record already exists and will not create a duplicate.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Skip Salesforce Queries?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._sfRequestsDisabled}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _sfRequestsDisabled: !isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Skip Salesforce Queries?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Query storage facility',\n                                        toggleEnabled: 'Query Salesforce'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"When enabled, the user must have the setting &quot;Update Records with Inactive Owners&quot; set to true otherwise records assigned to an inactive user will NOT be created.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Assign Records to Inactive Users?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._checkIsUserActive}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _checkIsUserActive: !isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Assign Records to Inactive Users?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Assign records only to Active Users',\n                                        toggleEnabled: 'Assign records to Active or Inactive Users'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Set it to TRUE if you don't want to double check that the restored records still exist in the destination Org.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Use GRAXHistory only?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._useGRAXHistoryOnly}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _useGRAXHistoryOnly: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Use GRAXHistory only?\"\n\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Query SFDC to confirm record exists',\n                                        toggleEnabled: 'Query only GRAX History'\n                                    }}\n                                />\n                                \n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Set it to TRUE if you want to update the previously restored records in the destination Org.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Update records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._updateRecordIfExist}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _updateRecordIfExist: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Update records?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Only insert records',\n                                        toggleEnabled: 'Update records if exists'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Notify User via Email when Process Completes\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Send Notification?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={this.state._sendNotification}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _sendNotification: isChecked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Send Notification?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Don\\'t Send Notification',\n                                        toggleEnabled: 'Send Notification'\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_4-of-12\">\n                            <div className=\"slds-p-bottom_small\">\n                                <Tooltip\n                                    align=\"top left\"\n                                    content=\"Show records only from the current environment or all environments.\"\n                                >\n                                    <a href=\"javascript:void(0)\" style={{marginRight: '0.5rem'}}>\n                                        <Icon\n                                            assistiveText={{ label: 'Filter records?' }}\n                                            category=\"utility\"\n                                            name=\"info\"\n                                            size=\"x-small\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(isChecked) => {\n                                        this.setState({\n                                            _currentOrgRecords: !isChecked,\n                                            retrievedCounter: this.state.retrievedCounter + 1\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select the GRAX Table\">\n                    <GRAXObjectCombobox\n                        onSelect={(event, data) => {\n                            var objectHasCustomMapping = false;\n\n                            var selectedDataIndex = data[0];\n\n                            console.log(this.props.customMapping, selectedDataIndex);\n\n                            var objectType = selectedDataIndex.label;\n\n                            if(this.props.customMapping != null) {\n                                var objectTypeMapping = this.props.customMapping[\n                                    Object.keys(this.props.customMapping)\n                                        .find(k => k.toLowerCase() === objectType.toLowerCase())\n                                ];\n\n                                if(objectTypeMapping && Object.keys(objectTypeMapping).length > 0) {\n                                    objectHasCustomMapping = true;\n                                }\n                            }\n\n                            this.setState({\n                                selectedDataIndex: selectedDataIndex,\n                                objectHasCustomMapping: objectHasCustomMapping\n                            });\n                        }}\n                        excludeIds={['graxgrax_loggingindex']}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            this.setState({\n                                retrieved: false,\n                                selectedDataIndex: null,\n                                _graxFieldsSelection: null,\n                                _graxFieldsSelectionList: null,\n                                objectHasCustomMapping: false\n                            });\n                        }}\n                    />\n\n                    {this.state.objectHasCustomMapping ? (\n                        <div>\n                            <Alert\n                                dismissible\n                                labels={{\n                                    heading: 'The selected object has a custom mapping defined. To review this custom mapping, click on the \"Restore Mapping\" tab and then select the object.'\n                                }}\n                                onRequestClose={() => {\n                                    this.setState({ objectHasCustomMapping: false });\n                                }}\n                            />\n                        </div>\n                    ) : null}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n                \n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Search GRAX Table\">\n                    {\n                        this.state.selectedDataIndex != null\n                        ? (\n                            <Suspense\n                                fallback={(\n                                    <div style={{ position: 'relative', height: '2rem' }}>\n                                        <Spinner size=\"small\" variant=\"base\" />\n                                    </div>\n                                )}\n                            >\n                                <GRAXFieldsCombobox\n                                    dataIndex={this.state.selectedDataIndex.id}\n                                    onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                        console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                                        this.setState({\n                                            _graxFields: _graxFields,\n                                            _graxFieldsSelection: _graxFieldsSelection,\n                                            _graxFieldsSelectionList: _graxFieldsSelectionList,\n                                            _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                                if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                                    sortableFields.push(elasticField.id);\n                                                }\n                                \n                                                return sortableFields;\n                                            }, [])\n                                        });\n                                    }}\n                                    onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                        console.log('onChange', _graxFieldsSelection, _graxFieldsSelectionList);\n\n                                        var retrievedCounter = this.state.retrievedCounter;\n\n                                        if(_graxFieldsSelectionList.length > this.state._graxFieldsSelectionList.length) {\n                                            retrievedCounter++;\n                                        }\n\n                                        this.setState({\n                                            retrievedCounter: retrievedCounter,\n                                            _graxFieldsSelection: _graxFieldsSelection,\n                                            _graxFieldsSelectionList: _graxFieldsSelectionList\n                                        });\n                                    }}\n                                />\n                            </Suspense>\n                        )\n                        : 'No GRAX Table selected...'\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Records\">\n                    <GRAXRestoreArchiveFilter onChange={(val) => {\n                        var archiveFilterQuery;\n\n                        if(val === BOTH) {\n                            archiveFilterQuery = null;\n                        }\n\n                        if(val === BACKEDUP) {\n                            archiveFilterQuery = '(NOT doc.IsDeleted:true)';\n                        }\n\n                        if(val === ARCHIVED) {\n                            archiveFilterQuery = '(doc.IsDeleted:true)';\n                        }\n\n                        this.setState({\n                            _archiveFilterQuery: archiveFilterQuery,\n                            retrievedCounter: this.state.retrievedCounter + 1\n                        })\n                    }} />\n\n                    {/*<Input\n                        iconLeft={\n                            <InputIcon\n                                assistiveText=\"Search\"\n                                name=\"search\"\n                                category=\"utility\"\n                            />\n                        }\n                        assistiveText={{ label: 'Search Term' }}\n                        id=\"record-query\"\n                        placeholder=\"Search\"\n                    />*/}\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            SObjectType={this.state.selectedDataIndex.label}\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_small\">\n                        <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrieved: this.state.selectedDataIndex != null,\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} disabled={!this.hasFieldSelected()} />\n                    </div>\n\n                    {this.state.retrieved && this.state._graxFieldsSelectionList && (\n                        <Suspense\n                            fallback={(\n                                <div style={{ position: 'relative', height: '2rem' }}>\n                                    <Spinner size=\"small\" variant=\"base\" />\n                                </div>\n                            )}\n                        >\n                            <GRAXRestoreDataTable\n                                key={'GRAXRestoreDataTable_' + this.state.retrievedCounter}\n                                renderKey={'GRAXRestoreDataTable_' + this.state.retrievedCounter}\n                                columns={this.state._graxFieldsSelectionList}\n                                _graxFieldsSelection={this.state._graxFieldsSelection}\n                                hiddenColumns={this.state._filterValuesFields}\n                                dataIndex={this.state.selectedDataIndex.id}\n                                sfRequestsDisabled={this.state._sfRequestsDisabled}\n                                restoreChildrens={this.state._restoreChildrens}\n                                checkIsUserActive={this.state._checkIsUserActive}\n                                useGRAXHistoryOnly={this.state._useGRAXHistoryOnly}\n                                updateRecordIfExist={this.state._updateRecordIfExist}\n                                sendNotification={this.state._sendNotification}\n                                filterFunction={this.state._filterFunction}\n                                filterQuery={this.getFilterQuery()}\n                                sortableColumns={this.state._graxSortableFields}\n                            />\n                        </Suspense>\n                    )}\n                </SLDSSection>\n            </div>\n        );\n    }\n}"],"sourceRoot":""}