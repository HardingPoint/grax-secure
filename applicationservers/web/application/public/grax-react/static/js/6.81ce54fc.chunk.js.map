{"version":3,"sources":["components/GRAXHistoryDataTable.jsx","components/GRAXHistory.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/SLDSPaginator.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXCSVExportButton.jsx","components/GRAXFieldsCombobox.jsx"],"names":["GRAXHistoryDataTable","props","state","items","extraInfo","page","isLoaded","isLoading","filterValues","nextProps","nextState","this","renderKey","setState","$","ajax","type","url","baseUrl","GetParams","contentType","data","JSON","stringify","objectType","objectId","orgid","_select","_","union","columns","hiddenColumns","join","_limit","_from","_filterValues","success","results","filterFunction","map","item","i","forEach","val","key","startsWith","SF_DATETIME_REGEXP","test","m","moment","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","id","toString","total","size","totalRetrieved","bind","error","xhr","status","err","console","getDataHandler","style","position","variant","assistiveText","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","columnName","label","property","sortable","className","SLDSPaginator","totalItems","length","pageSize","onChangePage","isInitialLoad","GRAXCSVExportButton","params","source","objecttype","objectid","height","React","Component","GRAXHistory","paramsCompleted","_extraFields","_graxFields","_filterFunction","_filterValuesFields","retrieved","retrievedCounter","pageParams","window","location","search","match","SLDSSection","isCollapsible","isOpen","title","GRAXFieldsCombobox","dataIndex","toLowerCase","onLoad","e","_graxFieldsSelection","_graxFieldsSelectionList","log","onChange","GRAXFilterGeneration","SObjectType","filterableFieldOptions","onFilterValueChangeHandler","_getFilterQuery","extraOperators","isNegated","onClick","token","__grax__","_csrf","userid","undefined","action","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","authorization","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","handleToggle","onToggle","preventDefault","category","name","children","getPager","currentPage","isNarrow","startPage","endPage","totalPages","Math","ceil","startIndex","endIndex","min","pages","Array","keys","pager","setPage","iconCategory","iconName","iconPosition","disabled","index","Date","now","align","content","prevState","newTotalItems","newPageSize","newCurrentPage","defaultProps","GRAXSFieldCombobox","options","inputValue","selection","SObjectName","fieldName","picklistValues","value","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","event","onRequestRemoveSelectedOption","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","multiple","required","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","GRAXFilterableCombobox","_isMounted","isOpened","filterOptionsHandler","onOpen","onClose","_error","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","Object","_filterValuesList","getFilterValuesList","getFilterFunction","getFilterQuery","push","splice","dataList","isReturned","filterOperator","filterVal","isArray","split","filterIsNegated","isFilterMatch","itemVal","Boolean","String","includes","operatorByName","queryConditions","_filterVal","condition","inConditions","each","parseFloat","reduce","selectionIds","scope","data-label","width","find","defaultChecked","target","checked","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","portalsRoot","document","getElementById","GRAXCSVExportForm","ReactDOM","createPortal","formId","encType","margin","padding","border","display","form","selectedDataIndex","cookieSubfix","getMappedFieldList","selectedFieldList","setCookie","selectedFieldsCookie","getCookie","selectedFields","parse","sortBy","_selection","onLoadHandler","onChangeHandler"],"mappings":"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","file":"static/js/6.81ce54fc.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Spinner, DataTable, DataTableColumn } from \"@salesforce/design-system-react\";\nimport SLDSPaginator from \"./SLDSPaginator\";\nimport GRAXCSVExportButton from \"./GRAXCSVExportButton\";\n\nimport { $, baseUrl, GetParams } from \"../lib/grax-data-lake\";\nimport { moment, SF_DATETIME_REGEXP, DATE_FORMAT, DATETIME_FORMAT, TZ } from \"../lib/utils\";\n\nimport _ from \"lodash\";\n\nconst ROWSXPAGE = 25;\n\nexport default class GRAXHistoryDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      extraInfo: {},\n      page: 0,\n      isLoaded: false,\n      isLoading: false,\n\n      filterValues: []\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.renderKey !== nextProps.renderKey ||\n      this.state.items !== nextState.items ||\n      this.state.isLoaded !== nextState.isLoaded ||\n      this.state.isLoading !== nextState.isLoading\n    );\n  }\n\n  getDataHandler(page, filterValues) {\n    this.setState({\n      isLoading: true,\n      page: page,\n\n      filterValues: filterValues\n    });\n\n    $.ajax({\n      type: \"POST\",\n      //dataType: 'jsonp',\n      url: baseUrl + \"/grax-app/grax-data-lake/getTimeMachineVersions\" + GetParams({}),\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify({\n        objectType: this.props.objectType,\n        objectId: this.props.objectId,\n        orgid: this.props.orgid,\n        _select: _.union(this.props.columns, this.props.hiddenColumns).join(\",\") || \"Id\",\n        _limit: ROWSXPAGE,\n        _from: ROWSXPAGE * page,\n        _filterValues: filterValues\n      }),\n      success: function(data) {\n        var results = data.results;\n\n        if (this.props.filterFunction) {\n          results = this.props.filterFunction(results);\n        }\n\n        results = _.map(results, (item, i) => {\n          _.forEach(item, (val, key) => {\n            if (key.startsWith(\"_\")) {\n              if (typeof val == \"string\") {\n                if (SF_DATETIME_REGEXP.test(val)) {\n                  var m = moment(val);\n\n                  if (m.isValid()) {\n                    item[key] = m\n                      .tz(TZ)\n                      .format(m._i.indexOf(\":\") !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                  }\n                }\n              }\n\n              if (typeof val == \"boolean\") {\n                item[key] = val ? \"true\" : \"false\";\n              }\n            }\n          });\n\n          return {\n            ...item,\n            ...{ id: i.toString() }\n          };\n        });\n\n        this.setState({\n          page: 0,\n          data: results,\n          extraInfo: data.extraInfo || { total: 0, size: ROWSXPAGE, totalRetrieved: 0 },\n          items: results,\n          isLoaded: true,\n          isLoading: false\n        });\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoaded: true,\n          isLoading: false,\n          items: [],\n          error: err.toString()\n        });\n      }.bind(this)\n    });\n  }\n\n  componentDidMount() {\n    this.getDataHandler(0, this.props.filterValues);\n  }\n\n  render() {\n    return this.state.isLoaded ? (\n      <div>\n        <div style={{ position: \"relative\" }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n          <DataTable\n            assistiveText={{\n              actionsHeader: \"actions\",\n              columnSort: \"sort this column\",\n              columnSortedAscending: \"asc\",\n              columnSortedDescending: \"desc\",\n              selectAllRows: \"all rows\",\n              selectRow: \"select this row\"\n            }}\n            fixedLayout\n            items={this.state.items}\n            id=\"GRAXHistoryDataTable\"\n          >\n            {this.props.columns.map(columnName => (\n              <DataTableColumn\n                key={\"col\" + columnName}\n                id={columnName}\n                label={columnName} // TODO\n                property={columnName}\n                sortable={false}\n              />\n            ))}\n          </DataTable>\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n          <SLDSPaginator\n            totalItems={this.state.items.length > 0 ? this.state.extraInfo.total : 0}\n            pageSize={ROWSXPAGE}\n            onChangePage={(page, isInitialLoad) => {\n              if (!isInitialLoad) {\n                this.getDataHandler(page - 1, this.props.filterValues);\n              }\n            }}\n          />\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n          <GRAXCSVExportButton\n            params={{\n              source: \"s3\",\n              objecttype: this.props.objectType,\n              objectid: this.props.objectId,\n              orgid: this.props.orgid,\n              _select: _.union(this.props.columns, this.props.hiddenColumns).join(\",\"),\n              _filterValues: this.state.filterValues,\n              columns: this.props.columns\n            }}\n          />\n        </div>\n      </div>\n    ) : (\n      <div style={{ position: \"relative\", height: \"2rem\" }}>\n        <Spinner size=\"medium\" variant=\"brand\" />\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-useless-escape */\nimport React from \"react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport GRAXFieldsCombobox from \"./GRAXFieldsCombobox\";\nimport GRAXHistoryDataTable from \"./GRAXHistoryDataTable\"; // TODO\nimport GRAXFilterGeneration from \"./GRAXFilterGeneration\";\n\nimport { Button } from \"@salesforce/design-system-react\";\n\nimport { orgid, pageParams } from \"../lib/grax-data-lake\";\n\nexport default class GRAXHistory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      paramsCompleted: false,\n      orgid: null,\n      objectType: null,\n      objectId: null,\n      _extraFields: [],\n\n      _graxFields: null,\n      _filterFunction: null,\n      _filterValuesFields: null,\n      _filterValues: null,\n\n      retrieved: false,\n      retrievedCounter: 0\n    };\n  }\n\n  componentDidMount() {\n    var objectType =\n      pageParams.objectType || window.location.search.match(/[\\?&]objecttype\\=([^&]+)/)[1];\n    var objectId = pageParams.objectId || window.location.search.match(/[\\?&]objectid\\=([^&]+)/)[1];\n\n    if (orgid && objectType && objectId) {\n      this.setState({\n        paramsCompleted: true,\n        orgid: orgid,\n        objectType: objectType,\n        objectId: objectId\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.paramsCompleted) return \"Bad params.\";\n\n    return (\n      <div>\n        <SLDSSection isCollapsible={true} isOpen={true} title=\"Select Fields\">\n          <GRAXFieldsCombobox\n            dataIndex={\"grax\" + this.state.objectType.toLowerCase() + \"index\"}\n            onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n              console.log(\"onLoad\", _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n              this.setState({\n                _graxFields: _graxFields,\n                _extraFields: _graxFieldsSelectionList\n              });\n            }}\n            onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n              console.log(\"onChange\", _graxFieldsSelection, _graxFieldsSelectionList);\n\n              this.setState({\n                _extraFields: _graxFieldsSelectionList\n              });\n            }}\n          />\n\n          <div className=\"slds-m-bottom_large\" />\n        </SLDSSection>\n\n        <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Backups\">\n          <GRAXFilterGeneration\n            SObjectType={this.state.objectType}\n            filterableFieldOptions={this.state._graxFields}\n            onFilterValueChangeHandler={(\n              _filterFunction,\n              _filterValuesFields,\n              _getFilterQuery,\n              _filterValues\n            ) => {\n              this.setState({\n                _filterFunction: _filterFunction,\n                _filterValuesFields: _filterValuesFields,\n                _filterValues: _filterValues\n              });\n            }}\n            extraOperators={[{ id: \"_fieldChanged\", label: \"Field Changed\", isNegated: false }]}\n          />\n\n          <div className=\"slds-m-bottom_large\" />\n        </SLDSSection>\n\n        <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n          <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n            <Button\n              label=\"Retrieve\"\n              variant=\"brand\"\n              onClick={() => {\n                this.setState({\n                  retrieved: true,\n                  retrievedCounter: this.state.retrievedCounter + 1\n                });\n              }}\n            />\n          </div>\n\n          {this.state.retrieved && (\n            <GRAXHistoryDataTable\n              key={\"GRAXHistoryDataTable\" + this.state.retrievedCounter}\n              renderKey={\"GRAXHistoryDataTable\" + this.state.retrievedCounter}\n              columns={this.state._extraFields || \"LastModified\"}\n              hiddenColumns={this.state._filterValuesFields}\n              objectType={this.state.objectType}\n              objectId={this.state.objectId}\n              orgid={this.state.orgid}\n              filterFunction={this.state._filterFunction}\n              filterValues={this.state._filterValues}\n            />\n          )}\n        </SLDSSection>\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ButtonGroup, Button, Tooltip } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\n\nconst defaultProps = {\n  currentPage: 1,\n  pageSize: 10\n};\n\nconst getPager = (totalItems, currentPage, pageSize) => {\n  // default to first page\n  // eslint-disable-next-line no-param-reassign\n  currentPage = currentPage || 1;\n\n  // default page size is 10\n  // eslint-disable-next-line no-param-reassign\n  pageSize = pageSize || 10;\n\n  let isNarrow = false;\n\n  if (totalItems > 10000) {\n    // eslint-disable-next-line no-param-reassign\n    totalItems = 10000;\n    isNarrow = true;\n  }\n\n  // calculate total pages\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  let startPage;\n  let endPage;\n  if (totalPages <= 10) {\n    // less than 10 total pages so show all\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // more than 10 total pages so calculate start and end pages\n    // eslint-disable-next-line no-lonely-if\n    if (currentPage <= 6) {\n      startPage = 1;\n      endPage = 10;\n    } else if (isNarrow && currentPage + 3 >= totalPages) {\n      startPage = totalPages - 8;\n      endPage = totalPages;\n    } else if (currentPage + 4 >= totalPages) {\n      startPage = totalPages - 9;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - 5;\n      endPage = currentPage + 4;\n    }\n  }\n\n  // calculate start and end item indexes\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n  // create an array of pages to ng-repeat in the pager control\n  const pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n\n  // return object with all pager properties required by the view\n  return {\n    totalItems,\n    currentPage,\n    pageSize,\n    totalPages,\n    startPage,\n    endPage,\n    startIndex,\n    endIndex,\n    pages,\n    isNarrow\n  };\n};\n\nclass SLDSPaginator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pager: {}\n    };\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillMount() {\n    // set page if items array isn't empty\n    const { totalItems, currentPage } = this.props;\n    if (totalItems) {\n      this.setPage(currentPage, true);\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      totalItems: newTotalItems,\n      pageSize: newPageSize,\n      currentPage: newCurrentPage\n    } = nextProps;\n    const { totalItems, pageSize, page } = prevState.pager;\n    if (totalItems !== newTotalItems || pageSize !== newPageSize || newCurrentPage !== page) {\n      return { pager: getPager(newTotalItems, newCurrentPage, newPageSize) };\n    }\n    return null;\n  }\n\n  setPage(page, isInitialLoad) {\n    const { totalItems, pageSize } = this.props;\n    let { pager } = this.state;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    pager = getPager(totalItems, page, pageSize);\n\n    // update state\n    this.setState({ pager });\n\n    // call change page function in parent component\n    // eslint-disable-next-line react/destructuring-assignment\n    this.props.onChangePage(page, false || isInitialLoad);\n  }\n\n  render() {\n    const { pager } = this.state;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return (\n      <ButtonGroup>\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"left\"\n          iconPosition=\"left\"\n          label=\"First\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(1)}\n          disabled={pager.currentPage === 1}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronleft\"\n          iconPosition=\"left\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage - 1)}\n          disabled={pager.currentPage === 1}\n        />\n        {pager.pages.map((page, index) => {\n          return (\n            <Button\n              // eslint-disable-next-line react/no-array-index-key\n              key={`SLDSPaginator${Date.now()}${index}`}\n              label={page}\n              variant={pager.currentPage === page ? \"brand\" : \"neutral\"}\n              onClick={() => this.setPage(page)}\n            />\n          );\n        })}\n        {pager.isNarrow && pager.currentPage >= pager.totalPages - 3 && (\n          <Tooltip\n            align=\"top right\"\n            content=\"The list is too long, try adding more filters to optimize the results.\"\n          >\n            <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n          </Tooltip>\n        )}\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronright\"\n          iconPosition=\"right\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage + 1)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"right\"\n          iconPosition=\"right\"\n          label=\"Last\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.totalPages)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n      </ButtonGroup>\n    );\n  }\n}\n\nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams, token, orgid } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\",\n            token,\n            orgid\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}