{"version":3,"sources":["components/SLDSSection.jsx","components/GRAXEnvSetting.jsx","components/GRAXCloudGlobalConfigurationsForm.jsx","settings/GRAXCloudGlobalConfigurationsFormSettings.js"],"names":["SLDSSection","props","state","isOpen","undefined","isCollapsible","handleToggle","bind","e","this","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","GRAXEnvSettingCombobox","lazy","GRAXEnvSettingSwitch","GRAXEnvSettingInput","GRAXEnvSetting","getComponentToRender","type","defaultValue","setting","onChange","v","onChangeTrigger","helpTextTooltip","getHelpTextTooltip","Date","now","toString","inputValue","selection","selectedOption","_","startCase","camelCase","value","onBlur","getLabelFromName","helpText","align","content","fallback","variant","getLabel","getType","getDefaultValue","PureComponent","GRAXCloudGlobalConfigurationsForm","onGlobalConfigurationChange","globalConfigurations","set","triggerConfigurationChange","isLoading","error","configurations","console","log","cloneDeep","reduce","options","c","configurationName","dataSources","map","ds","organizationId","subTitle","GLOBAL_ENVIRONMENT_DEFAULTS","originalSetting","i","get","comboboxType","getOptions","getOrganizationsOptions","BULK_RESTORE_SETTINGS","module","exports","placeholder","multiple","MISC_ADMIN_SETTINGS"],"mappings":"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","file":"static/js/12.fff0a191.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React, { Suspense, lazy } from \"react\";\nimport _ from \"lodash\";\nimport { Tooltip, Spinner } from \"@salesforce/design-system-react\";\n\nconst GRAXEnvSettingCombobox = lazy(() => import(\"./GRAXEnvSettingCombobox\"));\nconst GRAXEnvSettingSwitch = lazy(() => import(\"./GRAXEnvSettingSwitch\"));\nconst GRAXEnvSettingInput = lazy(() => import(\"./GRAXEnvSettingInput\"));\n\nexport default class GRAXEnvSetting extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    if (this.props.id) {\n      this.id = this.props.id;\n    } else {\n      this.id = Date.now().toString();\n    }\n\n    this.state = {\n      inputValue: \"\",\n      selection: null,\n      selectedOption: null\n    };\n  }\n\n  getLabelFromName(name) {\n    return _.startCase(_.camelCase(name));\n  }\n\n  onChangeTrigger(value) {\n    const onChange = this.props.onChange || this.props.onBlur || (() => {});\n\n    onChange(value);\n  }\n\n  getType() {\n    return this.props.setting.type || \"text\";\n  }\n\n  getLabel() {\n    if (this.props.setting.label) {\n      return this.props.setting.label;\n    }\n\n    return this.getLabelFromName(this.props.setting.name);\n  }\n\n  getDefaultValue() {\n    return this.props.setting.defaultValue || this.props.defaultValue;\n  }\n\n  getHelpTextTooltip() {\n    if (this.props.setting.helpText) {\n      return (\n        <Tooltip\n          key={this.id + \"-helptext\"}\n          id={this.id + \"-helptext\"}\n          align=\"top left\"\n          content={this.props.setting.helpText}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  getComponentToRender = ({ label, type, defaultValue }) => {\n    if (type === \"combobox\") {\n      return (\n        <GRAXEnvSettingCombobox\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    if (type === \"boolean\") {\n      return (\n        <GRAXEnvSettingSwitch\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          helpTextTooltip={this.getHelpTextTooltip()}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    return (\n      <GRAXEnvSettingInput\n        key={this.id}\n        id={this.id}\n        type={type}\n        label={label}\n        setting={this.props.setting}\n        helpTextTooltip={this.getHelpTextTooltip()}\n        onChange={v => this.onChangeTrigger(v)}\n        defaultValue={defaultValue}\n      />\n    );\n  };\n\n  render() {\n    if (this.props.setting == null || this.props.id == null) return null;\n\n    return (\n      <Suspense fallback={<Spinner size=\"small\" variant=\"brand\" />}>\n        {this.getComponentToRender({\n          label: this.getLabel(),\n          type: this.getType(),\n          defaultValue: this.getDefaultValue()\n        })}\n      </Suspense>\n    );\n  }\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { Spinner } from \"@salesforce/design-system-react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport GRAXEnvSetting from \"./GRAXEnvSetting\";\n\nimport {\n  GLOBAL_ENVIRONMENT_DEFAULTS,\n  BULK_RESTORE_SETTINGS\n} from \"../settings/GRAXCloudGlobalConfigurationsFormSettings\";\n\nexport default class GRAXCloudGlobalConfigurationsForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n\n      configurations: {}\n    };\n\n    this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props.configurations);\n\n    this.setState({\n      configurations: _.cloneDeep(this.props.configurations),\n      globalConfigurations: _.cloneDeep(this.props.globalConfigurations),\n      isLoading: false\n    });\n  }\n\n  triggerConfigurationChange() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state.configurations, this.state.globalConfigurations);\n    }\n  }\n\n  getOrganizationsOptions() {\n    if (this.state.configurations == null) {\n      return [];\n    }\n\n    return _.reduce(\n      this.state.configurations,\n      (options, c, configurationName) => {\n        return [\n          ...options,\n          ...c.dataSources.map(ds => {\n            return {\n              id: ds.organizationId,\n              label: ds.organizationId,\n              subTitle: ds.name + \" - \" + configurationName\n            };\n          })\n        ];\n      },\n      []\n    );\n  }\n\n  onGlobalConfigurationChange = setting => {\n    return value => {\n      let globalConfigurations = this.state.globalConfigurations;\n\n      _.set(globalConfigurations, [setting.id], value);\n\n      this.setState({\n        globalConfigurations\n      });\n\n      this.triggerConfigurationChange();\n    };\n  };\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <div className=\"slds-p-around_medium\">\n        <SLDSSection title=\"Global Configurations\">\n          {_.map(GLOBAL_ENVIRONMENT_DEFAULTS, (originalSetting, i) => {\n            const globalConfigurations = this.state.globalConfigurations;\n            let setting = { ...originalSetting };\n\n            const key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            let defaultValue = _.get(globalConfigurations, [setting.id]);\n\n            if (setting.type === \"combobox\" && setting.comboboxType === \"org\") {\n              setting.getOptions = () => this.getOrganizationsOptions();\n            }\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                defaultValue={defaultValue}\n                onBlur={this.onGlobalConfigurationChange(setting)}\n              />\n            );\n          })}\n        </SLDSSection>\n\n        <SLDSSection title=\"Bulk Restore\" className=\"slds-p-top_large\">\n          {_.map(BULK_RESTORE_SETTINGS, (originalSetting, i) => {\n            const globalConfigurations = this.state.globalConfigurations;\n            let setting = { ...originalSetting };\n\n            const key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            let defaultValue = _.get(globalConfigurations, [setting.id]);\n\n            if (setting.type === \"combobox\" && setting.comboboxType === \"org\") {\n              setting.getOptions = () => this.getOrganizationsOptions();\n            }\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                defaultValue={defaultValue}\n                onBlur={this.onGlobalConfigurationChange(setting)}\n              />\n            );\n          })}\n        </SLDSSection>\n\n        {/*<SLDSSection title=\"Misc. Admin Settings\" className=\"slds-p-top_large\">\n          {_.map(MISC_ADMIN_SETTINGS, (setting, i) => {\n            var key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                onBlur={e => {\n                  console.log(e);\n                }}\n              />\n            );\n          })}\n        </SLDSSection>*/}\n      </div>\n    );\n  }\n}\n","const SELECT_ORGANIZATION = \"Select Organization\";\n\nmodule.exports = {\n  GLOBAL_ENVIRONMENT_DEFAULTS: [\n    {\n      id: \"asyncAttachmentProcessorOrganizationIds\",\n      name: \"GRAX_ENV_ASYNC_ATTACHMENT_PROCESSOR_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"asyncBulkLoadOrganizationIds\",\n      name: \"GRAX_ENV_ASYNC_BULK_LOAD_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"bulkRestoreDestinationOrganizationId\",\n      name: \"GRAX_ENV_BULK_RESTORE_DESTINATION_ORGANIZATION_ID\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"inline-listbox\",\n      multiple: false\n    },\n    {\n      id: \"bulkRestoreSourceOrganizationId\",\n      name: \"GRAX_ENV_BULK_RESTORE_SOURCE_ORGANIZATION_ID\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"inline-listbox\",\n      multiple: false\n    },\n    {\n      id: \"metadataBackupOrganizationIds\",\n      name: \"GRAX_ENV_METADATA_BACKUP_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"odataOrganizationIds\",\n      name: \"GRAX_ENV_ODATA_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"syncSalesforceEinsteinOrganizationIds\",\n      name: \"GRAX_ENV_SYNC_SALESFORCE_SOURCE_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: false\n    }\n  ],\n  BULK_RESTORE_SETTINGS: [\n    {\n      id: \"bulkRestoreSourceOrganizationId\",\n      name: \"SOURCE_SF\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      multiple: false\n    },\n    {\n      id: \"bulkRestoreDestinationOrganizationId\",\n      name: \"DESTINATION_SF\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      multiple: false\n    }\n    /*{\n    name: \"GRAX_ESMAXBULK\",\n    type: \"number\",\n    helpText: \"Enter the maximum number of records to be processed per Bulk API Batch.\"\n  },\n  {\n    name: \"GRAX_OBJECT_TYPES_TO_RESTORE\",\n    type: \"text\",\n    helpText: \"Set the API Name of Object(s) to restore, separated by comma.\"\n  },\n  {\n    name: \"GRAX_MAX_RESTORE\",\n    type: \"number\",\n    helpText: \"# of records per batch to be restored\"\n  }*/\n  ],\n  MISC_ADMIN_SETTINGS: [\n    /*{\n    name: \"ASYNCH_TIMER\",\n    // label: 'Aaynch Timer',\n    type: \"number\",\n    // defaultValue: 5,\n    helpText:\n      \"Frequency in which the Asyn job, which processes Attachments and Content Documents, will run (in minutes).\"\n  },\n  {\n    name: \"DATABASE_URL\",\n    type: \"text\"\n  },\n  {\n    name: \"DEBUGGING\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_APITOKEN\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_APIURL\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_APIVERSION\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_GATEWAYTOKEN\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_LICENSETOKEN\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_URL\",\n    type: \"text\"\n  },\n  {\n    name: \"GRAX_AUDITTRAIL_OFF\",\n    type: \"boolean\"\n  },\n  {\n    name: \"GRAX_S3_OFF\",\n    type: \"boolean\"\n  }*/\n  ]\n};\n"],"sourceRoot":""}