{"version":3,"sources":["components/GRAXSummaryChartsChart.jsx","components/GRAXSummaryChartsSimple.jsx","components/GRAXSummaryChartsAdvanced.jsx","components/GRAXSummaryCharts.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/GRAXDatePicker.jsx","public/js/jquery.sldsTree.js"],"names":["GRAXSummaryChartsChart","props","google","charts","load","setOnLoadCallback","drawChart","fromDate","Date","toDate","setHours","setMinutes","state","isLoading","summaryData","defaultChartSettings","width","left","showChartAttr","showRecords","showInserted","showUpdated","showArchived","chartFromDate","chartToDate","showAttributeFilter","hideChartOptions","this","chartObjectTopTen","sortedNames","otherSum","objIndexes","chartDataIndexes","chartData","counter","nameSet","Set","forEach","summary","key","summaryMap","add","Array","sort","a","b","item","obj","smyIndex","n","records","tempN","push","top10BackedUpObjects","i","length","rec","data","visualization","arrayToDataTable","options","JSON","parse","stringify","sliceVisibilityThreshold","PieChart","bind","chartObjectByDate","DataTable","addColumn","fromDateAxis","toDateAxis","objectsTotalValue","startTime","smyDate","smyDateFormated","formatStartTime","getHours","fill","undefined","v","f","addRows","interpolateNulls","pointSize","explorer","hAxis","title","format","viewWindow","min","max","viewWindowMode","vAxis","LineChart","chartSummaryTopTen","summaryIndexes","spName","summaryResults","top10BackedUpSummaries","chartSummaryByDate","sumRes","chartAttributeProgressByDate","attIndexes","attrNames","attrName","summarysTotalValue","selectedSummaries","attr","containsSelectedObjects","setSeconds","getFullYear","getMonth","toString","padStart","getDate","getMinutes","getSeconds","isStacked","ColumnChart","ret","chartSelection","call","setState","isBlank","chartEl","draw","selectChart","selection","chartInput","setDateFilter","formatDate","dt","chartOptions","label","id","size","variant","className","SLDSSection","isCollapsible","events","onChange","event","value","onRequestRemoveSelectedOption","onSelect","onChartSelect","labels","placeholder","comboboxFilterAndLimit","inputValue","limit","defaultChecked","isChecked","assistiveText","toggleDisabled","toggleEnabled","ref","nextProps","prevState","React","Component","GRAXSummaryChartsSimple","chart","createRef","summaryDataResults","_currentOrgRecords","objectInput","objectSelection","objectOptions","chartSelected","loadSummaries","query","getUTCTimeRangeFromUserDate","date","AND","orgid","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_index","_select","_q","_limit","_from","_sort","_sortType","_ignore_unavailable","success","results","loadSummaryData","error","xhr","status","err","console","summaryNames","name","refreshChart","selectedObjects","option","selectedObject","tempData","current","GRAXDatePicker","e","target","checked","onClick","CustomDataTableCell","children","href","spId","encodeURI","executionUniqueKey","rel","displayName","DataTableCell","GRAXSummaryChartsAdvanced","summaryDataSelected","itemsObjectsByDataRange","itemsObjectsByDataRangeSelection","summaryBreadownDTItems","summaryBreadownDTSelection","summaryDTItems","summaryDTSelection","summaryBDDTFromDate","summaryBDDTToDate","summaryDTFilters","currentChartSelected","fromDT","toDT","loadSummaryDataTable","loadSummaryBreakdownTable","loadObjectDataTable","getSelectedSummary","summaries4chart","index","summaryList","dtSummaries","includeArchived","includeInserted","includeUpdated","archived","inserted","updated","existIndex","filter","createdDate","CreatedDate","CreatedDateFormatted","moment","utc","tz","TZ","DATE_FORMAT","startTimeFormatted","DATETIME_FORMAT","summaryToShow","dtSummary","Id","allSummaries","objName","_allSumaries","startTimes","dateIndex","indexOf","dateData","summartDataResults","summaryIds","objNames","update","endTime","summaryDTHandleChanged","summaryBreadownDTHandleChanged","itemsObjectsByDataRangeHandleChanged","dataTableHandleSort","dtName","items","sortColumn","sortProperty","property","sortDirection","newState","val","isOpen","style","height","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedHeader","fixedLayout","selectRows","onRowChange","onSort","sortable","primaryColumn","renderAggregatedScheduleProcessSection","renderScheduleProcessBreakdownSection","renderObjectsSection","minHeight","renderFilterCriteriaSection","renderFilterSections","GRAXSummaryCharts","padding","token","window","__grax__","_csrf","pageParams","userid","params","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","authorization","test","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","handleToggle","onToggle","preventDefault","join","category","useState","isValidDate","setIsValidDate","formatter","datePickerFormatter","parser","datePickerParser","formattedDate","isValid","svgns","fn","sldsTree","extend","childs","attrs","root","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","onDiv","$div","append","onButton","$button","onFinish","$root","getTreeItemContent","level","disabled","toggleClass","icon","document","createElementNS","setAttribute","class","icon_use","setAttributeNS","path","appendChild","on","getTreeItemButton","getTreeItem","getTree","each","html","jQuery"],"mappings":"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","file":"static/js/10.643923f0.chunk.js","sourcesContent":["/* eslint-disable no-undef */\n/* global google */\nimport React from 'react';\n\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox } from '@salesforce/design-system-react';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSummaryChartsChart extends React.Component {\n    constructor(props) {\n        super(props);\n\n        google.charts.load('current', {'packages':['corechart']}); // Move to componentDidMount\n        google.charts.setOnLoadCallback( this.drawChart ); // Move to componentDidMount\n\n        let fromDate = this.props.fromDate?this.props.fromDate:new Date();\n        let toDate = this.props.toDate?this.props.toDate:new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            summaryData: this.props.summaryData,\n            defaultChartSettings: {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } },\n            showChartAttr: {\n                showRecords: true,\n                showInserted: true,\n                showUpdated: true,\n                showArchived: true\n            },\n\n            chartFromDate: fromDate,\n            chartToDate: toDate,\n            showAttributeFilter: true,\n            hideChartOptions: false\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState){\n        return nextProps;\n    }\n\n    componentDidMount() {\n        this.chartObjectTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let objIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n                    let smyIndex = chartDataIndexes[key];\n\n                    let n = (obj.records?obj.records:0);\n\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[key] = counter;\n                        chartData.push( [ key + ' ['+n+']', n] );\n                        counter++;\n                    }else{\n                        let tempN = chartData[smyIndex][1] + n;\n\n                        chartData[smyIndex] = [ key + ' ['+tempN+']', tempN];\n                    }\n\n                    otherSum += n;\n                };\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpObjects = [[\"Object\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpObjects.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpObjects.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpObjects);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartObjectByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                for( let key in summary.summaryMap ){\n                    nameSet.add(key);\n                };\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                for( let key in summary.summaryMap ){\n                    let obj = summary.summaryMap[key];\n\n                    if(!obj.startTime) {\n                      continue;\n                    }\n\n                    let n = (obj.records?obj.records:0);\n                    let smyDate = new Date(obj.startTime);\n                    let smyDateFormated = this.formatStartTime(smyDate);\n                    let smyIndex = chartDataIndexes[smyDate];\n\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                    if( !chartData[smyIndex][objIndexes[key]+1] ){\n                        chartData[smyIndex][objIndexes[key]+1] = 0;\n                    }\n                    chartData[smyIndex][objIndexes[key]+1] += n;\n                    if( !objectsTotalValue[key] ){\n                        objectsTotalValue[key] = 0;\n                    }\n                    objectsTotalValue[key] += n\n                };\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.pointSize = 5;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryTopTen = function(){\n            let summaryData = this.state.summaryData;\n            let otherSum = 0;\n            let summaryIndexes = {};\n            let chartDataIndexes = [];\n            let chartData = [];\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                summaryIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n\n            summaryData.forEach(function( summary ){\n                let smyIndex = chartDataIndexes[summary.spName];\n                let n = (summary.summaryResults.records?summary.summaryResults.records:0);\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    chartData.push( [ summary.spName + ' ['+n+']', n] );\n                }else{\n                    let tempN = chartData[smyIndex][1] + n;\n\n                    chartData[smyIndex] = [ summary.spName + ' ['+tempN+']', tempN];\n                }\n                otherSum += n;\n            });\n\n            chartData.sort(function(a, b){\n                return - a[1] + b[1];\n            });\n\n            let top10BackedUpSummaries = [[\"Summary\", \"Backed Up\"]];\n\n            for( let i=0; i<10 && i<chartData.length; i++){\n                let rec = chartData[ i ];\n                top10BackedUpSummaries.push( rec );\n                otherSum -= rec[1];\n            }\n\n            if( otherSum > 0 ){\n                top10BackedUpSummaries.push( [\"Others [\" + otherSum + \"]\", otherSum] );\n            }\n\n            let data = google.visualization.arrayToDataTable(top10BackedUpSummaries);\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.sliceVisibilityThreshold = 0;\n\n            // Display the chart inside the <div> element with id=\"piechart\"\n            return [ google.visualization.PieChart, data, options ];\n        }.bind(this);\n\n        this.chartSummaryByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let objIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let nameSet = new Set();\n            let sortedNames;\n\n            summaryData.forEach(function( summary ){\n                nameSet.add( summary.spName );\n            });\n\n            sortedNames = new Array(...nameSet);\n\n            sortedNames.sort(function(a, b){\n                return  a > b?-1:a < b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                objIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n\n            let objectsTotalValue = {};\n            /*\n            [\n                [\n                    {v: date, f: label},\n                    val1,\n                    val2,\n                    val3\n                ],\n                [...]\n            ]\n            */\n            summaryData.forEach(function(summary){\n                let sumRes = summary.summaryResults;\n\n                if(!sumRes.startTime) {\n                  return;\n                }\n\n                let n = (sumRes.records?sumRes.records:0);\n                let smyDate = new Date(sumRes.startTime);\n                let smyDateFormated = this.formatStartTime(smyDate);\n                let smyIndex = chartDataIndexes[smyDate];\n\n                if( !fromDateAxis || fromDateAxis >= smyDate ){\n                    fromDateAxis = new Date(smyDate);\n                    fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                }\n\n                if( !toDateAxis || toDateAxis <= smyDate ){\n                    toDateAxis = new Date(smyDate);\n                    toDateAxis.setHours(toDateAxis.getHours()+1);\n                }\n\n                if( !smyIndex && smyIndex !== 0 ){\n                    smyIndex = counter;\n                    chartDataIndexes[smyDate] = counter;\n                    chartData.push( new Array( sortedNames.length + 1 ).fill(undefined) );\n                    counter++;\n                }\n\n                chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated };\n                if( !chartData[smyIndex][objIndexes[summary.spName]+1] ){\n                    chartData[smyIndex][objIndexes[summary.spName]+1] = 0;\n                }\n                chartData[smyIndex][objIndexes[summary.spName]+1] += n;\n                if( !objectsTotalValue[summary.spName] ){\n                    objectsTotalValue[summary.spName] = 0;\n                }\n                objectsTotalValue[summary.spName] += n\n            }.bind(this));\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in objIndexes ){\n                data.addColumn('number', key + \" [\" + objectsTotalValue[key] + \"]\");\n            };\n\n            chartData.sort(function(a,b){\n                return a[0].v > b[0].v?1:a[0].v < b[0].v?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Time',\n                format: 'YYYY-dd-MM\\nhh:mm:ss',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                },\n                viewWindowMode: 'maximized'\n            };\n            options.vAxis = {\n                title: 'Backed up objects'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.LineChart, data, options ];\n        }.bind(this);\n\n        this.chartAttributeProgressByDate = function(){\n            let summaryData = this.state.summaryData;\n            let chartData = [];\n            let chartDataIndexes = [];\n            let attIndexes = {};\n\n            let data = new google.visualization.DataTable();\n            data.addColumn('date', 'Start Time');\n\n            let counter = 0;\n            let sortedNames = [];\n            let attrNames = [];\n\n            if( this.state.showChartAttr.showRecords ){ attrNames.push( \"records\" ); }\n            if( this.state.showChartAttr.showInserted ){ attrNames.push( \"inserted\" ); }\n            if( this.state.showChartAttr.showUpdated ){ attrNames.push( \"updated\" ); }\n            if( this.state.showChartAttr.showArchived ){ attrNames.push( \"archived\" ); }\n\n            attrNames.forEach(function(attrName){\n                sortedNames.push( attrName );\n            });\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            sortedNames.forEach(function(item){\n                attIndexes[item] = counter;\n                counter++;\n            });\n\n            counter = 0;\n            let fromDateAxis;\n            let toDateAxis;\n            let summarysTotalValue = {};\n            let selectedSummaries = new Set();\n\n            summaryData.forEach(function(summary){\n                let attr = {};\n                let summaryMap = summary.summaryMap;\n                let containsSelectedObjects = false;\n\n                for( let key in summaryMap ){\n                    let obj = summaryMap[key];\n                    if( obj ){\n                        attrNames.forEach( function(attrName){\n                            attr[attrName] = attr[attrName]?attr[attrName]:0;\n                            attr[attrName] += (obj[attrName]?obj[attrName]:0);\n                        } );\n                        containsSelectedObjects = true;\n                    }\n                };\n\n                if( containsSelectedObjects && summary.summaryResults.startTime ){\n                    let startTime = new Date(summary.summaryResults.startTime);\n                    startTime.setSeconds(0);\n\n                    let smyDate = startTime;\n                    let smyDateFormated = startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n                    let smyIndex = chartDataIndexes[smyDate];\n\n                    if( !fromDateAxis || fromDateAxis >= smyDate ){\n                        fromDateAxis = new Date(smyDate);\n                        fromDateAxis.setHours(fromDateAxis.getHours()-1);\n                    }\n\n                    if( !toDateAxis || toDateAxis <= smyDate ){\n                        toDateAxis = new Date(smyDate);\n                        toDateAxis.setHours(toDateAxis.getHours()+1);\n                    }\n\n                    if( !smyIndex && smyIndex !== 0 ){\n                        smyIndex = counter;\n                        chartDataIndexes[smyDate] = counter;\n                        chartData.push( new Array( attrNames.length + 1 ).fill(undefined) );\n                        counter++;\n                    }\n\n                    chartData[smyIndex][0] = {v: smyDate, f: smyDateFormated + \"\\n\" + summary.spName };\n\n                    attrNames.forEach(function(attrName){\n                        if( !chartData[smyIndex][attIndexes[attrName]+1] ){\n                            chartData[smyIndex][attIndexes[attrName]+1] = 0;\n                        }\n                        chartData[smyIndex][attIndexes[attrName]+1] += attr[attrName];\n\n                        if( !summarysTotalValue[attrName] ){\n                            summarysTotalValue[attrName] = 0;\n                        }\n                        summarysTotalValue[attrName] += attr[attrName];\n                    });\n\n                    selectedSummaries.add( summary.spName );\n                }\n            });\n\n            if( chartData.length === 0 ) return null;\n\n            for( let key in attIndexes ){\n                if( summarysTotalValue[key] !== undefined ){\n                    data.addColumn('number', key + \" [\" + summarysTotalValue[key] + \"]\");\n                }\n            };\n\n            chartData.sort(function(a,b){\n                return a[0] > b[0]?1:a[0] < b[0]?-1:0;\n            });\n\n            data.addRows( chartData );\n\n            // Optional; add a title and set the width and height of the chart\n            let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n            options.interpolateNulls = true;\n            options.isStacked = true;\n            options.explorer = {};\n            options.hAxis = {\n                title: 'Start Date',\n                format: 'YYYY-dd-MM\\n hh:mm:ss',\n                viewWindowMode: 'pretty',\n                viewWindow: {\n                    min: fromDateAxis,\n                    max: toDateAxis\n                }\n            };\n            options.vAxis = {\n                title: 'Attributes'\n            };\n\n            // Display the chart inside the <div> element\n            return [ google.visualization.ColumnChart, data, options ];\n        }.bind(this);\n\n        this.drawChart = function(){\n            let ret = this.state.chartSelection[0].call();\n\n            this.setState({\n                isLoading: false,\n                isBlank: ret == null\n            }, function(){\n                if( ret ){\n                    var chart = new ret[0]( this.chartEl );\n                    chart.draw(ret[1],ret[2]);\n                }\n            });\n        }.bind(this);\n\n        this.selectChart = function( selection ){\n            this.setState( {\n                chartInput : '',\n                chartSelection : selection\n            }, this.drawChart );\n        }.bind(this);\n\n        this.setDateFilter = function( fromDate, toDate ){\n            this.setState({\n                chartFromDate: fromDate,\n                chartToDate: toDate\n            });\n        }.bind(this);\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        let chartOptions = [{label: \"Object Top Ten\", id: \"chartObjectTopTen\", call : this.chartObjectTopTen },\n                    {label: \"Objects By Date\", id: \"chartObjectByDate\", call : this.chartObjectByDate},\n                    {label: \"Top Ten Processes\", id: \"chartSummaryTopTen\", call : this.chartSummaryTopTen},\n                    {label: \"Processes By Date\", id: \"chartSummaryByDate\", call : this.chartSummaryByDate},\n                    {label: \"Results by Date\", id: \"chartAttributeProgressByDate\", call : this.chartAttributeProgressByDate}\n        ];\n\n        this.setState({\n            isLoading: false,\n            chartOptions: chartOptions,\n            chartSelection: [chartOptions[0]]\n        });\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n            <div>\n                <div>\n                    { !this.state.hideChartOptions &&\n                    (<div className=\"slds-grid slds-wrap\">\n                        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                            <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n                                <div className=\"slds-grid slds-wrap\">\n\n                                    <div className={(this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter)?\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\":\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\"}>\n                                        <Combobox\n                                            events={{\n                                                onChange: (event, { value }) => {\n                                                    this.chartInput = value;\n                                                    this.setState( {\n                                                        chartInput : value\n                                                    }, this.drawChart );\n                                                },\n                                                onRequestRemoveSelectedOption: (event, data) => {\n                                                    this.setState( {\n                                                        chartInput : '',\n                                                        chartSelection : data.selection\n                                                    } );\n                                                },\n                                                onSelect: (event, data) => {\n                                                    this.selectChart( data.selection );\n\n                                                    if (this.props.onChartSelect) {\n                                                        this.props.onChartSelect(event, data.selection);\n                                                    }\n                                                },\n                                            }}\n\n                                            labels={{\n                                                label: 'Chart Type',\n                                                placeholder: '-- SELECT CHART TYPE --',\n                                            }}\n\n                                            options={comboboxFilterAndLimit({\n                                                inputValue: this.state.chartInput,\n                                                limit: 1000,\n                                                options: this.state.chartOptions,\n                                                selection: this.state.chartSelection\n                                            })}\n\n                                            selection={this.state.chartSelection}\n                                            value={this.state.chartInput}\n                                            variant=\"readonly\"\n                                        />\n                                    </div>\n\n                                    {this.state.chartSelection[0].id === 'chartAttributeProgressByDate' && this.state.showAttributeFilter && (\n                                    <div className=\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\">\n                                        <SLDSSection title=\"Display Values\" className=\"slds-p-left_small slds-m-top_none\" >\n                                            <div className=\"slds-grid slds-wrap\">\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showRecords}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showRecords = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Records',\n                                                            toggleEnabled: 'Records'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showInserted}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showInserted = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Inserted',\n                                                            toggleEnabled: 'Inserted'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showUpdated}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showUpdated = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Updated',\n                                                            toggleEnabled: 'Updated'\n                                                        }}\n                                                    />\n                                                </div>\n                                                <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                                    <Checkbox\n                                                        className=\"inline-block\"\n                                                        defaultChecked={this.state.showChartAttr.showArchived}\n                                                        onChange={(isChecked) => {\n                                                            let showChartAttr = this.state.showChartAttr;\n                                                            showChartAttr.showArchived = isChecked;\n                                                            this.setState({\n                                                                showChartAttr: showChartAttr,\n                                                                isLoading : false\n                                                            }, function(){ this.drawChart();} );\n                                                        }}\n                                                        assistiveText={{\n                                                            label: \"Remove empty?\"\n                                                        }}\n                                                        variant=\"toggle\"\n                                                        labels={{\n                                                            toggleDisabled: 'Archived',\n                                                            toggleEnabled: 'Archived'\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </SLDSSection>\n                                    </div>\n                                    )}\n                                </div>\n                            </SLDSSection>\n                        </div>\n                    </div>)}\n\n                    {this.state.isBlank ? null : <div ref={chartEl => this.chartEl = chartEl} />}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Combobox, Button } from \"@salesforce/design-system-react\";\n\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport $ from 'jquery';\nimport { comboboxFilterAndLimit, getUTCTimeRangeFromUserDate } from \"../lib/utils\";\n\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nexport default class GRAXSummaryChartsSimple extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chart = React.createRef();\n\n        this.summaryDataResults = [];\n        let fromDate = new Date();\n        let toDate = new Date();\n\n        fromDate.setHours(0);\n        fromDate.setMinutes(0);\n        toDate.setHours(23);\n        toDate.setMinutes(59);\n\n        this.state = {\n            isLoading: true,\n            fromDate: fromDate,\n            toDate: toDate,\n            _currentOrgRecords: true,\n\n            objectInput: '',\n            objectSelection: [],\n            objectOptions: [],\n\n            chartData: [],\n            chartSelected: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadSummaries =  function(){\n            this.setState({\n                isLoading: true\n            });\n\n            let fromDate = this.state.fromDate;\n            fromDate = fromDate.getFullYear() + '-' + (fromDate.getMonth()+1).toString().padStart(2,0) + '-' + fromDate.getDate().toString().padStart(2,0);\n            let toDate = this.state.toDate;\n            toDate = toDate.getFullYear() + '-' + (toDate.getMonth()+1).toString().padStart(2,0) + '-' + toDate.getDate().toString().padStart(2,0);\n\n            fromDate = getUTCTimeRangeFromUserDate({ date: fromDate })[0];\n            toDate = getUTCTimeRangeFromUserDate({ date: toDate })[1];\n\n            let query = {\"AND\": [\n              {\"GTE\": {\"summaryResults.startTime\": fromDate}},\n              {\"LTE\": {\"summaryResults.startTime\": toDate}}\n            ]};\n\n            if(this.state._currentOrgRecords) {\n              query.AND.push({\"KEQ\": {\"graxorgid\": orgid}});\n            }\n\n            $.ajax({\n                type: 'GET',\n\n                url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                    action:'load',\n                    dataIndex: 'graxgrax_backup_summaryindex',\n                    _index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n                    _select: 'summaryMap,spName,CreatedDate,summaryResults',\n                    _q: JSON.stringify(query),\n                    _limit: 1000,\n                    _from: 0,\n                    _sort: '',\n                    _sortType: '',\n                    _ignore_unavailable: true\n                }),\n\n                success: function(data) {\n                    // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n                    if( data.results ){\n                        this.summaryDataResults = data.results;\n                    }\n\n                    this.setState({\n                        isLoading: false\n                    }, function(){\n                        this.loadSummaryData();\n                    });\n                }.bind(this),\n                error: function(xhr, status, err) {\n                    console.error(xhr, status, err);\n\n                    this.setState({\n                        isLoading: false,\n                    });\n                }.bind(this)\n            });\n        };\n\n        this.loadSummaryData = function(){\n            let summaryData = this.summaryDataResults;\n            let summaryNames = new Set();\n            let sortedNames = [];\n\n            summaryData.forEach(function(summary){\n                for( let key in summary.summaryMap ){\n                    summaryNames.add( key );\n                }\n            });\n\n            sortedNames = new Array(...summaryNames);\n\n            sortedNames.sort(function(a, b){\n                return  a < b?-1:a > b?1:0;\n            });\n\n            let objectOptions = [{label:\"All\", id:\"ALL\"}];\n            sortedNames.forEach(function(name){\n                objectOptions.push( {label: name, id: name} );\n            });\n\n            this.setState({\n                isLoading: false,\n                objectOptions: objectOptions,\n                objectSelection: [objectOptions[0]]\n            }, this.refreshChart );\n        };\n\n        this.refreshChart = function(){\n            let summaryData = this.summaryDataResults;\n            let selectedObjects = [];\n            let chartData = [];\n\n            if( this.state.objectSelection && this.state.objectSelection[0].id !== \"ALL\" ){\n                selectedObjects.push( this.state.objectSelection[0].id );\n            }else{\n                this.state.objectOptions.forEach( function(option){\n                    selectedObjects.push( option.id );\n                } );\n            }\n\n\n            summaryData.forEach(function(summary){\n                selectedObjects.forEach( function( selectedObject ){\n                    if( summary.summaryMap[selectedObject] ){\n                        let tempData = {\n                            summaryMap: {\n                                [selectedObject]: {...summary.summaryMap[selectedObject]}\n                            },\n                            spName: summary.spName,\n                            summaryResults:{\n                                ...summary.summaryMap[selectedObject]\n                            }\n                        };\n\n                        chartData.push( tempData );\n                    }\n                });\n            });\n\n            this.setState({\n                isLoading: false,\n                chartData: chartData\n            },function(){\n                this.chart.current.drawChart();\n            }.bind(this));\n        }\n\n        this.chartSelection = function(selection){\n            this.setState( {\n                chartSelected: selection\n            } );\n        };\n\n        this.formatStartTime = function( startTime ){\n            return startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n        };\n\n        this.formatDate = function( dt ){\n            return dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n        }\n\n        this.setState({\n            isLoading: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLoading && (<Spinner size=\"large\" variant=\"brand\" />\n\t\t\t\t)}\n                <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Filter Criteria\" >\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n\n                                <dl className=\"slds-list_stacked\">\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                                        <label className=\"slds-form-element__label\" >From</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    fromDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.fromDate }\n                                        />\n                                    </dd>\n                                    <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                                        <label className=\"slds-form-element__label\" >To</label>\n                                    </dt>\n                                    <dd className=\"slds-item_detail\" >\n                                        <GRAXDatePicker\n                                            onChange={(event, data) => {\n                                                this.setState({\n                                                    toDate: data.date\n                                                });\n                                            }}\n                                            value={ this.state.toDate }\n                                        />\n                                    </dd>\n                                </dl>\n                            </div>\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n                                <Checkbox\n                                    className=\"inline-block\"\n                                    defaultChecked={!this.state._currentOrgRecords}\n                                    onChange={(e) => {\n                                        this.setState({\n                                            _currentOrgRecords: !e.target.checked\n                                        });\n                                    }}\n                                    assistiveText={{\n                                        label: \"Show records from all environments?\"\n                                    }}\n                                    variant=\"toggle\"\n                                    labels={{\n                                        toggleDisabled: 'Current Environment',\n                                        toggleEnabled: 'All connected SF environments'\n                                    }}\n                                />\n\n                                <div className=\"slds-float_right\">\n                                    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                                        this.loadSummaries();\n                                        this.chart.current.setDateFilter( this.state.fromDate, this.state.toDate );\n                                        this.setState( {\n                                            chartSelected: this.chart.current.state.chartSelection\n                                        } );\n                                    }} />\n                                </div>\n                            </div>\n                        </SLDSSection>\n                    </div>\n                    { this.state.objectOptions && (\n                    <div className=\"slds-col slds-size_1-of-1\">\n                        <SLDSSection title=\"Chart Options\" isCollapsible=\"true\" >\n\n                            <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                                <Combobox\n                                    events={{\n                                        onChange: (event, { value }) => {\n                                            this.setState( {\n                                                objectInput : value\n                                            }, this.refreshChart );\n                                        },\n                                        onRequestRemoveSelectedOption: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            } );\n                                        },\n                                        onSelect: (event, data) => {\n                                            this.setState( {\n                                                objectInput : '',\n                                                objectSelection : data.selection\n                                            }, this.refreshChart );\n                                        },\n                                    }}\n\n                                    labels={{\n                                        label: 'Salesforce Object',\n                                        placeholder: '-- SELECT SALESFORCE OBJECT --',\n                                    }}\n\n                                    options={comboboxFilterAndLimit({\n                                        inputValue: this.state.objectInput,\n                                        limit: 1000,\n                                        options: this.state.objectOptions,\n                                        selection: this.state.objectSelection\n                                    })}\n\n                                    selection={this.state.objectSelection}\n                                    value={this.state.objectInput}\n                                    variant=\"readonly\"\n                                />\n                            </div>\n\n                            {this.chart.current &&\n                            (<Combobox\n                                events={{\n                                    onChange: (event, { value }) => {\n                                        this.chart.current.chartInput = value;\n                                        this.chart.current.setState( {\n                                            chartInput : value\n                                        } );\n                                    },\n                                    onRequestRemoveSelectedOption: (event, data) => {\n                                        this.chart.current.selectChart(data.selection)\n                                    },\n                                    onSelect: (event, data) => {\n                                        if( data.selection.length > 0 ){\n                                            this.chart.current.selectChart(data.selection);\n\n                                            this.setState( {\n                                                chartSelected: data.selection\n                                            } );\n                                        }\n                                    },\n                                }}\n\n                                labels={{\n                                    label: 'Chart Type',\n                                    placeholder: '-- SELECT CHART TYPE --',\n                                }}\n\n                                options={comboboxFilterAndLimit({\n                                    inputValue: this.chart.current.state.chartInput,\n                                    limit: 1000,\n                                    options: this.chart.current.state.chartOptions,\n                                    selection: this.state.chartSelected?this.state.chartSelected:this.chart.current.state.chartSelection\n                                })}\n\n                                selection={this.state.chartSelected}\n                                value={this.chart.current.state.chartInput}\n                                variant=\"readonly\"\n                            />)}\n                        </SLDSSection>\n                    </div>) }\n                </div>\n\n                <GRAXSummaryChartsChart\n                    ref={this.chart}\n                    summaryData={this.state.chartData}\n                    showAttributeFilter={false}\n                    hideChartOptions={true}\n                    onChartSelect={(event, selection)=>{\n                        this.chartSelection( selection );\n                    }}\n                />\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport SLDSSection from './SLDSSection';\nimport { Spinner, Checkbox, Button, DataTable, DataTableColumn, DataTableCell } from '@salesforce/design-system-react';\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport {baseUrl, GetParams, orgid} from '../lib/grax-data-lake';\n\nimport {\n  moment,\n  getUTCTimeRangeFromUserDate,\n  DATE_FORMAT,\n  DATETIME_FORMAT,\n  TZ\n} from \"../lib/utils\";\n\nimport $ from 'jquery';\n\nimport '../public/js/jquery.sldsTree.js';\n\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\n\nconst CustomDataTableCell = ({ children, ...props }) => (\n\t<DataTableCell {...props}>\n\t\t<a\n\t\t\thref = {baseUrl + \"/grax-app/grax-data-lake/generateBackupSummary/\" + props.item.spId + \"/\" + encodeURI(props.item.executionUniqueKey) + \"?orgid=\" + orgid }\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n\t\t>\n\t\t\t{children}\n\t\t</a>\n\t</DataTableCell>\n);\nCustomDataTableCell.displayName = DataTableCell.displayName;\n\nexport default class GRAXSummaryChartsAdvanced extends React.Component {\n    constructor(props) {\n        super(props);\n\n\t\tthis.chart = React.createRef();\n\n\t\tthis.summaryDataResults = [];\n\t\tthis.summaryDataSelected = [];\n\t\tthis.itemsObjectsByDataRange = [];\n\t\tthis.itemsObjectsByDataRangeSelection = [];\n\t\tthis.summaryBreadownDTItems = [];\n\t\tthis.summaryBreadownDTSelection = [];\n\t\tthis.summaryDTItems = [];\n\t\tthis.summaryDTSelection = [];\n\t\tthis.chartOptions = [];\n\t\tthis.defaultChartSettings = {'width':\"100%\", 'height':600, \"chartArea\":{ width: \"70%\", left: \"5%\" } };\n\t\tthis.summaryBDDTFromDate = new Date();\n\t\tthis.summaryBDDTToDate = new Date();\n\n\t\tthis.state = {\n\t\t\tisLoading: true,\n\n\t\t\tchartData: [],\n\n\t\t\tchartSelection: [],\n\t\t\tchartInput: '',\n\t\t\tfromDate: new Date(),\n\t\t\ttoDate: new Date(),\n\t\t\t_currentOrgRecords: true,\n\n\t\t\tsummaryDTFilters: {\n\t\t\t\tshowRecords: true, showInserted: true, showUpdated: true, showArchived: true\n\t\t\t},\n\n\t\t\tinputValue: 'Select an option',\n\t\t\tselection: [],\n\t\t\tchecked: [],\n\n\t\t\terror: null\n        };\n    }\n\n    componentDidMount() {\n\t\ttry{\n\t\t\tthis.loadSummaries = function(){\n        this.summaryDTSelection = []\n        this.summaryBreadownDTSelection = []\n        this.itemsObjectsByDataRangeSelection = [];\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t});\n\n\t\t\t\tlet currentChartSelected = this.state.chartSelected;\n\n\t\t\t\tlet fromDT = this.state.fromDate;\n\t\t\t\tfromDT = fromDT.getFullYear() + '-' + (fromDT.getMonth()+1).toString().padStart(2,0) + '-' + fromDT.getDate().toString().padStart(2,0);\n\t\t\t\tlet toDT = this.state.toDate;\n\t\t\t\ttoDT = toDT.getFullYear() + '-' + (toDT.getMonth()+1).toString().padStart(2,0) + '-' + toDT.getDate().toString().padStart(2,0);\n\n        fromDT = getUTCTimeRangeFromUserDate({ date: fromDT })[0];\n        toDT = getUTCTimeRangeFromUserDate({ date: toDT })[1];\n\n        let query = {\"AND\": [\n          {\"GTE\": {\"summaryResults.startTime\": fromDT}},\n          {\"LTE\": {\"summaryResults.startTime\": toDT}}\n        ]};\n\n\t\t\t\tif(this.state._currentOrgRecords) {\n          query.AND.push({\"KEQ\": {\"graxorgid\": orgid}});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBDDTFromDate = this.state.fromDate;\n\t\t\t\tthis.summaryBDDTToDate = this.state.toDate;\n\n\t\t\t\t$.ajax({\n\t\t\t\t\ttype: 'GET',\n\n\t\t\t\t\turl: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n            action: 'load',\n            dataIndex: 'graxgrax_backup_summaryindex',\n\t\t\t\t\t\t_index: 'graxgrax_backup_summaryindex,graxgrax_summaryindex',\n\t\t\t\t\t\t_select: 'summaryMap,spName,spId,CreatedDate,summaryResults,executionUniqueKey',\n\t\t\t\t\t\t_q: JSON.stringify(query),\n\t\t\t\t\t\t_limit: 1000,\n\t\t\t\t\t\t_from: 0,\n\t\t\t\t\t\t_sort: '',\n            _sortType: '',\n            _ignore_unavailable: true\n\t\t\t\t\t}),\n\n\t\t\t\t\tsuccess: function(data) {\n\t\t\t\t\t\t// IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n\t\t\t\t\t\tif( data.results ){\n\t\t\t\t\t\t\tthis.summaryDataResults = data.results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t\tchartSelected: currentChartSelected\n\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\tthis.loadSummaryDataTable(); this.loadSummaryBreakdownTable(); this.loadObjectDataTable();\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\terror: function(xhr, status, err) {\n\t\t\t\t\t\tconsole.error(xhr, status, err);\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tthis.getSelectedSummary = function(){\n\t\t\t\tlet selectedSummaries = this.summaryBreadownDTSelection;\n\t\t\t\tlet summaryDataResults = this.summaryDataResults;\n\n\t\t\t\tlet summaries4chart = [];\n\n\t\t\t\tselectedSummaries.forEach(function(summary){\n\t\t\t\t\tsummaries4chart.push( summaryDataResults[summary.index] );\n\t\t\t\t\t/*summary.index.forEach(function(index){\n\t\t\t\t\t\tsummaries4chart.push( summaryDataResults[index] );\n\t\t\t\t\t});*/\n\t\t\t\t});\n\t\t\t\treturn summaries4chart;\n\t\t\t};\n\n\t\t\tthis.loadSummaryDataTable = function(){\n\t\t\t\tlet summaryList = this.summaryDataResults;\n\t\t\t\tlet dtSummaries = [];\n\t\t\t\tlet i=0;\n\n\t\t\t\tif( summaryList ){\n\t\t\t\t\tlet includeArchived = this.state.summaryDTFilters.showArchived;\n\t\t\t\t\t//let includeRecords = this.state.summaryDTFilters.showRecords;\n\t\t\t\t\tlet includeInserted = this.state.summaryDTFilters.showInserted;\n\t\t\t\t\tlet includeUpdated = this.state.summaryDTFilters.showUpdated;\n\n\t\t\t\t\tsummaryList.forEach(function( summary ){\n\n\t\t\t\t\t\tif( !( (includeArchived && summary.summaryResults.archived !== 0) ||\n\t\t\t\t\t\t\t//(includeRecords && summary.summaryResults.showRecords !== 0) ||\n\t\t\t\t\t\t\t(includeInserted && summary.summaryResults.inserted !== 0) ||\n\t\t\t\t\t\t\t(includeUpdated && summary.summaryResults.updated !== 0)) ){\n\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tlet existIndex = dtSummaries.filter( function(e){return e.name === summary.spName;} );\n\n\t\t\t\t\t\t\tlet archived = summary.summaryResults.archived;\n\t\t\t\t\t\t\tlet records = summary.summaryResults.records;\n\t\t\t\t\t\t\tlet inserted = summary.summaryResults.inserted;\n\t\t\t\t\t\t\tlet updated = summary.summaryResults.updated;\n\n\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\tif( existIndex && existIndex.length > 0 ){\n\t\t\t\t\t\t\t\texistIndex[0].index.push( i );\n\n\t\t\t\t\t\t\t\texistIndex[0].records += records;\n\t\t\t\t\t\t\t\texistIndex[0].inserted += inserted;\n\t\t\t\t\t\t\t\texistIndex[0].updated += updated;\n\t\t\t\t\t\t\t\texistIndex[0].archived += archived;\n\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tconst createdDate = new Date(summary.CreatedDate);\n                const startTime = new Date(summary.summaryResults.startTime);\n\n\t\t\t\t\t\t\t\tdtSummaries.push(\n\t\t\t\t\t\t\t\t\t{\tname: summary.spName,\n\t\t\t\t\t\t\t\t\t\tid: summary.spName,\n\t\t\t\t\t\t\t\t\t\tspId: summary.spId,\n\t\t\t\t\t\t\t\t\t\texecutionUniqueKey: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\t\t\tCreatedDate: summary.CreatedDate,\n\t\t\t\t\t\t\t\t\t\tCreatedDateFormatted: moment.utc(createdDate).tz(TZ).format(DATE_FORMAT),\n\t\t\t\t\t\t\t\t\t\tstartTime,\n\t\t\t\t\t\t\t\t\t\tstartTimeFormatted: moment.utc(startTime).tz(TZ).format(DATETIME_FORMAT),\n\t\t\t\t\t\t\t\t\t\trecords: records,\n\t\t\t\t\t\t\t\t\t\tinserted: inserted,\n\t\t\t\t\t\t\t\t\t\tupdated: updated,\n\t\t\t\t\t\t\t\t\t\tarchived: archived,\n\t\t\t\t\t\t\t\t\t\tindex: [i]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t});\n\n\t\t\t\t\tdtSummaries.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryDTItems = dtSummaries;\n\t\t\t}\n\n\t\t\tthis.loadSummaryBreakdownTable = function(){\n\t\t\t\tlet summaryToShow = this.summaryDTSelection;\n\t\t\t\tlet summaryDataResults = this.summaryDataResults;\n\t\t\t\tlet summaryBreadownDTItems = [];\n\n\t\t\t\tif( summaryToShow ){\n\n\t\t\t\t\tsummaryToShow.forEach(function(dtSummary){\n\t\t\t\t\t\tdtSummary.index.forEach(function(index){\n\t\t\t\t\t\t\tlet summary = summaryDataResults[index];\n\n\t\t\t\t\t\t\tlet archived = summary.summaryResults.archived;\n\t\t\t\t\t\t\tlet records = summary.summaryResults.records;\n\t\t\t\t\t\t\tlet inserted = summary.summaryResults.inserted;\n\t\t\t\t\t\t\tlet updated = summary.summaryResults.updated;\n\n\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\tconst createdDate = new Date(summary.CreatedDate);\n              const startTime = new Date(summary.summaryResults.startTime);\n\n\t\t\t\t\t\t\tsummaryBreadownDTItems.push({\n\t\t\t\t\t\t\t\tname: summary.spName,\n\t\t\t\t\t\t\t\tid: summary.Id,\n\t\t\t\t\t\t\t\texecutionUniqueKey: summary.executionUniqueKey,\n\t\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\t\tCreatedDate: summary.CreatedDate,\n\t\t\t\t\t\t\t\tCreatedDateFormatted: moment.utc(createdDate).tz(TZ).format(DATE_FORMAT),\n\t\t\t\t\t\t\t\tstartTime: summary.startTime,\n\t\t\t\t\t\t\t\tstartTimeFormatted: moment.utc(startTime).tz(TZ).format(DATETIME_FORMAT),\n\t\t\t\t\t\t\t\trecords: records,\n\t\t\t\t\t\t\t\tinserted: inserted,\n\t\t\t\t\t\t\t\tupdated: updated,\n\t\t\t\t\t\t\t\tarchived: archived\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.summaryBreadownDTItems = summaryBreadownDTItems;\n\t\t\t}\n\n\t\t\tthis.loadObjectDataTable = function(){\n\t\t\t\tlet summaryToShow = this.getSelectedSummary();\n\t\t\t\tlet itemsObjectsByDataRange = [];\n\n\t\t\t\tif( summaryToShow ){\n\t\t\t\t\tlet allSummaries = {};\n\n\t\t\t\t\tsummaryToShow.forEach( function( summaryData ){\n\t\t\t\t\t\tvar summaryMap = summaryData.summaryMap;\n\n\t\t\t\t\t\tlet smyDate = new Date(summaryData.summaryResults.startTime );\n\n\t\t\t\t\t\tfor( var objName in summaryMap ){\n\t\t\t\t\t\t\tif( typeof summaryMap[objName] == \"object\" ){\n\t\t\t\t\t\t\t\tlet archived = summaryMap[objName].archived;\n\t\t\t\t\t\t\t\tlet records = summaryMap[objName].records;\n\t\t\t\t\t\t\t\tlet inserted = summaryMap[objName].inserted;\n\t\t\t\t\t\t\t\tlet updated = summaryMap[objName].updated;\n\n\t\t\t\t\t\t\t\tarchived = archived?archived:0;\n\t\t\t\t\t\t\t\trecords = records?records:0;\n\t\t\t\t\t\t\t\tinserted = inserted?inserted:0;\n\t\t\t\t\t\t\t\tupdated = updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet _allSumaries = allSummaries[objName];\n\n\t\t\t\t\t\t\t\tif( !_allSumaries ){\n\t\t\t\t\t\t\t\t\t_allSumaries = {};\n\t\t\t\t\t\t\t\t\t_allSumaries.name = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.id = objName;\n\t\t\t\t\t\t\t\t\t_allSumaries.archived = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.records = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.inserted = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.updated = 0;\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_allSumaries.archived += archived?archived:0;\n\t\t\t\t\t\t\t\t_allSumaries.records += records?records:0;\n\t\t\t\t\t\t\t\t_allSumaries.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\t_allSumaries.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tlet dateIndex = _allSumaries.startTimes.indexOf( smyDate );\n\n\t\t\t\t\t\t\t\tif( dateIndex < 0 ){\n\t\t\t\t\t\t\t\t\tdateIndex = _allSumaries.startTimes.length;\n\n\t\t\t\t\t\t\t\t\t_allSumaries.startTimes.push({\n\t\t\t\t\t\t\t\t\t\tstartTime: smyDate,\n\t\t\t\t\t\t\t\t\t\tarchived : 0,\n\t\t\t\t\t\t\t\t\t\trecords : 0,\n\t\t\t\t\t\t\t\t\t\tinserted : 0,\n\t\t\t\t\t\t\t\t\t\tupdated : 0\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet dateData = _allSumaries.startTimes[dateIndex];\n\t\t\t\t\t\t\t\tdateData.archived += archived?archived:0;\n\t\t\t\t\t\t\t\tdateData.records += records?records:0;\n\t\t\t\t\t\t\t\tdateData.inserted += inserted?inserted:0;\n\t\t\t\t\t\t\t\tdateData.updated += updated?updated:0;\n\n\t\t\t\t\t\t\t\tallSummaries[objName] = _allSumaries;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Top Ten Data\n\t\t\t\t\tfor( var objName in allSummaries ){\n\t\t\t\t\t\titemsObjectsByDataRange.push( allSummaries[objName] );\n\t\t\t\t\t}\n\n\t\t\t\t\titemsObjectsByDataRange.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\n\t\t\t\t\t// itemsObjectsByDataRangeSelection = itemsObjectsByDataRange;\n\t\t\t\t}\n\n\t\t\t\tthis.itemsObjectsByDataRange = itemsObjectsByDataRange;\n\t\t\t\t// this.itemsObjectsByDataRangeSelection = itemsObjectsByDataRangeSelection;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t}, this.refreshChart );\n\t\t\t}.bind(this);\n\n\t\t\tthis.refreshChart = function(){\n\t\t\t\tlet chartData = [];\n\n\t\t\t\tlet summartDataResults = this.summaryDataResults;\n\t\t\t\t//let summaryDTSelection = this.summaryDTSelection;\n\t\t\t\tlet summaryBreadownDTSelection = this.summaryBreadownDTSelection;\n\t\t\t\tlet itemsObjectsByDataRangeSelection = this.itemsObjectsByDataRangeSelection;\n\n\t\t\t\tlet summaryIds = {};\n\t\t\t\tsummaryBreadownDTSelection.forEach( function(summary){\n\t\t\t\t\tsummaryIds[summary.id] = summary.id;\n\t\t\t\t});\n\n\t\t\t\tlet objNames = {};\n\t\t\t\titemsObjectsByDataRangeSelection.forEach(function(obj){\n\t\t\t\t\tobjNames[obj.name] = obj.name;\n\t\t\t\t});\n\n\t\t\t\tsummartDataResults.forEach( function(summary){\n\t\t\t\t\tlet tempData = {};\n\t\t\t\t\tif( summaryIds[summary.Id] ){\n\t\t\t\t\t\ttempData.summaryMap = {};\n\t\t\t\t\t\ttempData.spName = summary.spName;\n                        tempData.summaryResults= {\n\t\t\t\t\t\t\tarchived: 0,\n\t\t\t\t\t\t\trecords: 0,\n\t\t\t\t\t\t\tinserted: 0,\n\t\t\t\t\t\t\tupdate: 0,\n\t\t\t\t\t\t\tstartTime: summary.summaryResults.startTime,\n\t\t\t\t\t\t\tendTime: summary.summaryResults.endTime\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor( let key in summary.summaryMap ){\n\t\t\t\t\t\t\tif( objNames[key] ){\n\t\t\t\t\t\t\t\tlet summaryMap = summary.summaryMap;\n\t\t\t\t\t\t\t\ttempData.summaryMap[key] = summaryMap[key];\n\t\t\t\t\t\t\t\ttempData.summaryResults.archived = summaryMap[key].archived?summaryMap[key].archived:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.records = summaryMap[key].records?summaryMap[key].records:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.inserted = summaryMap[key].inserted?summaryMap[key].inserted:0;\n\t\t\t\t\t\t\t\ttempData.summaryResults.update = summaryMap[key].update?summaryMap[key].update:0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchartData.push( tempData );\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tchartData: chartData\n\t\t\t\t}, function(){\n\t\t\t\t\tthis.chart.current.drawChart();\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryDTHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState( {\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){ */\n\t\t\t\t\tthis.summaryDTSelection = data.selection;\n\t\t\t\t\tthis.loadSummaryBreakdownTable();\n\t\t\t\t\tthis.loadObjectDataTable();\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//} );\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.summaryBreadownDTHandleChanged = function(event, data){\n\t\t\t\tthis.summaryBreadownDTSelection = data.selection;\n\t\t\t\tthis.loadObjectDataTable();\n\t\t\t\t//this.drawChart();\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.itemsObjectsByDataRangeHandleChanged = function( event, data ){\n\t\t\t\t/*this.setState({\n\t\t\t\t\tisLoading: true\n\t\t\t\t}, function(){*/\n\t\t\t\t\tthis.itemsObjectsByDataRangeSelection = data.selection;\n\n\t\t\t\t\tthis.refreshChart();\n\t\t\t\t\t//this.drawChart();\n\t\t\t\t//});\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tthis.dataTableHandleSort = ( dtName, items, sortColumn, ...rest) => {\n\t\t\t\tconst sortProperty = sortColumn.property;\n\t\t\t\tconst sortDirection = sortColumn.sortDirection;\n\t\t\t\tconst newState = {\n\t\t\t\t\t[dtName+\"Column\"]: sortProperty,\n\t\t\t\t\t[dtName+\"Direction\"]: {\n\t\t\t\t\t\t[sortProperty]: sortDirection,\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// needs to work in both directions\n\t\t\t\titems = items.sort((a, b) => {\n\t\t\t\t\tlet val = 0;\n\n\t\t\t\t\tif (a[sortProperty] > b[sortProperty]) {\n\t\t\t\t\t\tval = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a[sortProperty] < b[sortProperty]) {\n\t\t\t\t\t\tval = -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sortDirection === 'desc') {\n\t\t\t\t\t\tval *= -1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn val;\n\t\t\t\t});\n\n\t\t\t\tthis.setState(newState);\n\t\t\t};\n\n\t\t\tthis.formatStartTime = function( startTime ){\n\t\t\t\treturn startTime.getFullYear()+\"-\"+(startTime.getMonth()+1).toString().padStart(2,\"0\")+\"-\"+startTime.getDate().toString().padStart(2,\"0\")+\" \"+startTime.getHours().toString().padStart(2,\"0\")+\":\"+startTime.getMinutes().toString().padStart(2,\"0\")+\":\"+startTime.getSeconds().toString().padStart(2,\"0\");\n\t\t\t};\n\n\t\t\tthis.formatDate = function( dt ){\n\t\t\t\treturn dt.getMonth()+1+'/'+dt.getDate()+'/'+dt.getFullYear();\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false\n\t\t\t});\n\n\t\t}catch(e){}\n\n    }\n\n    renderAggregatedScheduleProcessSection() {\n      return (\n        <SLDSSection\n          title=\"Step 1: Aggregated GRAX Schedule Process\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.summaryDTItems}\n                  id=\"DataTable_Summaries\"\n                  selection={this.summaryDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryDTHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\"DataTable_Summaries\", this.summaryDTItems, sortColumn);\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  >\n                    <CustomDataTableCell />\n                  </DataTableColumn>\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n\n            <div className=\"slds-col slds-size_2-of-12 slds-medium-size_2-of-12 slds-large-size_2-of-12\">\n              <div>\n                <SLDSSection title=\"Display Values\" className=\"slds-p-left_small slds-m-top_none\">\n                  <div className=\"slds-grid slds-wrap\">\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showInserted}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showInserted = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Inserted\",\n                          toggleEnabled: \"Inserted\"\n                        }}\n                      />\n                    </div>\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showUpdated}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showUpdated = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Updated\",\n                          toggleEnabled: \"Updated\"\n                        }}\n                      />\n                    </div>\n                    <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-2 slds-x-large-size_1-of-4\">\n                      <Checkbox\n                        className=\"inline-block\"\n                        defaultChecked={this.state.summaryDTFilters.showArchived}\n                        onChange={e => {\n                          let summaryDTFilters = this.state.summaryDTFilters;\n                          summaryDTFilters.showArchived = e.target.checked;\n                          this.setState(\n                            {\n                              summaryDTFilters: summaryDTFilters,\n                              isLoading: true\n                            },\n                            () => {\n                              this.loadSummaryDataTable();\n                              this.loadSummaryBreakdownTable();\n                              this.loadObjectDataTable();\n                            }\n                          );\n                        }}\n                        assistiveText={{\n                          label: \"Remove empty?\"\n                        }}\n                        variant=\"toggle\"\n                        labels={{\n                          toggleDisabled: \"Archived\",\n                          toggleEnabled: \"Archived\"\n                        }}\n                      />\n                    </div>\n                  </div>\n                </SLDSSection>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderScheduleProcessBreakdownSection() {\n      return (\n        <SLDSSection\n          title=\"Step 2: GRAX Schedule Process Breakdown\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.summaryBreadownDTItems}\n                  id=\"DataTable_SummaryBreakdown\"\n                  selection={this.summaryBreadownDTSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.summaryBreadownDTHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_SummaryBreakdown\",\n                      this.summaryBreadownDTItems,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn\n                    label=\"GRAX Schedule Process\"\n                    sortable\n                    primaryColumn\n                    property=\"name\"\n                  />\n                  <DataTableColumn\n                    label=\"Execution Unique Key\"\n                    sortable\n                    property=\"executionUniqueKey\"\n                  />\n                  <DataTableColumn label=\"Start Time\" sortable property=\"startTimeFormatted\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderObjectsSection() {\n      return (\n        <SLDSSection\n          title=\"Step 3: Objects\"\n          className=\"slds-p-top_large\"\n          isCollapsible={true}\n          isOpen={true}\n        >\n          <div className=\"slds-grid slds-wrap\">\n            <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n              <div style={{ height: 300 }}>\n                <DataTable\n                  assistiveText={{\n                    actionsHeader: \"actions\",\n                    columnSort: \"sort this column\",\n                    columnSortedAscending: \"asc\",\n                    columnSortedDescending: \"desc\",\n                    selectAllRows: \"all rows\",\n                    selectRow: \"select this row\"\n                  }}\n                  fixedHeader\n                  fixedLayout\n                  items={this.itemsObjectsByDataRange}\n                  id=\"DataTable_ObjectsInSummary\"\n                  selection={this.itemsObjectsByDataRangeSelection}\n                  selectRows=\"checkbox\"\n                  onRowChange={this.itemsObjectsByDataRangeHandleChanged}\n                  onSort={(sortColumn) => {\n                    this.dataTableHandleSort(\n                      \"DataTable_ObjectsInSummary\",\n                      this.itemsObjectsByDataRange,\n                      sortColumn\n                    );\n                  }}\n                >\n                  <DataTableColumn label=\"Object Name\" sortable primaryColumn property=\"name\" />\n\n                  <DataTableColumn label=\"Records\" sortable property=\"records\" />\n\n                  <DataTableColumn label=\"Inserted\" sortable property=\"inserted\" />\n\n                  <DataTableColumn label=\"Updated\" sortable property=\"updated\" />\n\n                  <DataTableColumn label=\"Archived\" sortable property=\"archived\" />\n                </DataTable>\n              </div>\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterCriteriaSection() {\n      return (\n        <SLDSSection title=\"Filter Criteria\">\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n            <dl className=\"slds-list_stacked\">\n              <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n                <label className=\"slds-form-element__label\">From</label>\n              </dt>\n              <dd className=\"slds-item_detail\">\n                <GRAXDatePicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      fromDate: data.date\n                    });\n                  }}\n                  value={this.state.fromDate}\n                />\n              </dd>\n              <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n                <label className=\"slds-form-element__label\">To</label>\n              </dt>\n              <dd className=\"slds-item_detail\">\n                <GRAXDatePicker\n                  onChange={(event, data) => {\n                    this.setState({\n                      toDate: data.date\n                    });\n                  }}\n                  value={this.state.toDate}\n                />\n              </dd>\n            </dl>\n          </div>\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n            <Checkbox\n              className=\"inline-block\"\n              defaultChecked={!this.state._currentOrgRecords}\n              onChange={e => {\n                this.setState({\n                  _currentOrgRecords: !e.target.checked\n                });\n              }}\n              assistiveText={{\n                label: \"Show records from all environments?\"\n              }}\n              variant=\"toggle\"\n              labels={{\n                toggleDisabled: \"Current Environment\",\n                toggleEnabled: \"All connected SF environments\"\n              }}\n            />\n            <div className=\"slds-float_right\">\n              <Button\n                label=\"Retrieve\"\n                variant=\"brand\"\n                onClick={() => {\n                  this.loadSummaries();\n                  this.chart.current.setDateFilter(this.state.fromDate, this.state.toDate);\n                }}\n              />\n            </div>\n          </div>\n        </SLDSSection>\n      );\n    }\n\n    renderFilterSections() {\n      if (!this.itemsObjectsByDataRange) return null;\n\n      return (\n        <div>\n          {this.summaryDataResults.length > 0 ? this.renderAggregatedScheduleProcessSection() : null}\n          {this.summaryDTSelection.length > 0 ? this.renderScheduleProcessBreakdownSection() : null}\n          {this.summaryBreadownDTSelection.length > 0 ? this.renderObjectsSection() : null}\n        </div>\n      );\n    }\n\n    render() {\n      return (\n        <div style={{ minHeight: 2000 }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n\n          {this.renderFilterCriteriaSection()}\n          {this.renderFilterSections()}\n\n          <GRAXSummaryChartsChart ref={this.chart} summaryData={this.state.chartData} />\n        </div>\n      );\n    }\n}\n","import React from 'react';\n\nimport { Tabs, TabsPanel, Spinner } from '@salesforce/design-system-react';\n\n// import '../public/js/jquery.sldsTree.js';\n\n// import '../public/js/googlecharts.js';\nimport GRAXSummaryChartsSimple from './GRAXSummaryChartsSimple';\nimport GRAXSummaryChartsAdvanced from './GRAXSummaryChartsAdvanced';\n\nexport default class GRAXSummaryCharts extends React.Component {\n    constructor(props) {\n        super(props);\n\t\t\n\t\tthis.state = {\n            isLoading: true\n        };\n    }\n\n    componentDidMount() {\n\t\tthis.setState({\n\t\t\tisLoading: false\n\t\t});\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        return (\n\t\t\t<div style={{ minHeight: 1000 }} >\n\t\t\t\t<Tabs variant={this.props.variant} id=\"tabs-simple-advanced\" >\n\t\t\t\t\t<TabsPanel label=\"Simple\">\n\t\t\t\t\t\t<GRAXSummaryChartsSimple />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t\t<TabsPanel label=\"Advanced\" style={{padding:0}} >\n\t\t\t\t\t\t<GRAXSummaryChartsAdvanced />\n\t\t\t\t\t</TabsPanel>\n\t\t\t\t</Tabs>\n\t\t\t</div>\n        )\n    }\n}\n","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      // load token\n      // anticipates that the API token is in the referrer\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\";\n\nimport { Datepicker } from \"@salesforce/design-system-react\";\n\nimport { moment, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst GRAXDatePicker = props => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  return (\n    <div className=\"slds-is-relative\">\n      <Datepicker\n        formatter={datePickerFormatter}\n        parser={datePickerParser}\n        // eslint-disable-next-line\n        {...props}\n        onChange={(event, data) => {\n          setIsValidDate(data.formattedDate === \"\" || moment(data.date).isValid());\n\n          if (props.onChange != null) {\n            props.onChange(event, data);\n          }\n        }}\n      />\n      {isValidDate === false ? (\n        <div className=\"slds-text-color_error\">\n          The date is invalid. Please select/write a valid date.\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GRAXDatePicker;\n","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));"],"sourceRoot":""}