{"version":3,"sources":["lib/grax-data-lake.js","components/SLDSSection.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/SLDSPaginator.jsx","components/GRAXFieldsCombobox.jsx","components/GRAXObjectCombobox.jsx","components/GRAXDeleteDataTable.jsx","components/GRAXDelete.jsx"],"names":["isDev","baseUrl","token","window","__grax__","_csrf","orgid","pageParams","userid","GetParams","params","undefined","action","$","param","ajaxSetup","beforeSend","xhr","settings","method","setRequestHeader","authorization","type","test","this","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","console","error","status","showError","statusText","responseText","SLDSSection","props","state","isOpen","isCollapsible","handleToggle","bind","e","setState","onToggle","preventDefault","title","className","id","key","join","onClick","assistiveText","label","category","name","size","children","React","Component","GRAXSFieldCombobox","options","inputValue","selection","isLoaded","ajax","url","SObjectName","fieldName","data","_select","success","_","map","picklistValues","item","i","value","onLoad","err","toString","length","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onChange","event","onRequestRemoveSelectedOption","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","variant","multiple","required","style","position","height","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","_isMounted","isOpened","log","filterOptionsHandler","onOpen","onClose","GRAXFilterGeneration","_filterValues","_error","_filterValuesFields","filterableFieldOptions","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","keys","_filterValuesList","getFilterValuesList","onFilterValueChangeHandler","getFilterFunction","getFilterQuery","push","splice","dataList","isReturned","forEach","filterOperator","filterVal","Array","isArray","split","filterIsNegated","isFilterMatch","itemVal","Boolean","moment","format","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","reduce","selectionIds","scope","data-label","width","indexOf","find","defaultChecked","target","checked","SObjectType","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","disabled","SLDSPaginator","pager","totalItems","setPage","currentPage","page","isInitialLoad","pageSize","totalPages","getPager","onChangePage","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","iconCategory","iconName","iconPosition","index","Date","now","align","content","defaultProps","selectedDataIndex","cookieSubfix","GRAXFieldsCombobox","getMappedFieldList","selectedFieldList","setCookie","JSON","stringify","dataIndex","val","selectedFieldsCookie","getCookie","selectedFields","parse","sortBy","_selection","onLoadHandler","onChangeHandler","GRAXObjectCombobox","excludeIds","GRAXDeleteDataTable","sortColumn","sortDirection","chunks","items","extraInfo","isLoading","deleteConfirmIsOpen","deleteConfirmIsChecked","deleteConfirmCallback","deleteConfirmTotal","nextProps","nextState","renderKey","_sort","union","columns","hiddenColumns","_q","filterQuery","_limit","_from","_includeMetadata","results","filterFunction","SF_DATETIME_REGEXP","m","isValid","tz","TZ","_i","DATETIME_FORMAT","DATE_FORMAT","total","totalRetrieved","getDataHandler","slice","property","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onRowChange","handleChanged","onSort","handleSort","selectRows","columnName","isSorted","sortable","sortableColumns","confirm","contentType","pick","alert","dismissible","footer","prompt","dismissOnClickOutside","ELASTIC_SORTABLE_TYPES","GRAXDelete","retrieved","retrievedCounter","_graxFields","_graxFieldsSelection","_graxFieldsSelectionList","_filterFunction","_getFilterQuery","_graxSortableFields","sortableFields","elasticField","hasFieldSelected"],"mappings":"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","file":"static/js/8.a66f97b2.chunk.js","sourcesContent":["/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nconst devBaseUrl = \"https://grax-datalake-demo2.herokuapp.com\";\n\nexport const baseUrl = isDev ? devBaseUrl : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", pageParams.authorization);\n    } else {\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonGroup, Button, Tooltip} from '@salesforce/design-system-react';\n \nconst propTypes = {\n    totalItems: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    pageSize: PropTypes.number,\n}\n \nconst defaultProps = {\n    currentPage: 1,\n    pageSize: 10\n}\n \nclass SLDSPaginator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pager: {}\n        };\n    }\n \n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.totalItems) {\n            this.setPage(this.props.currentPage, true);\n        }\n    }\n \n    setPage(page, isInitialLoad) {\n        var { totalItems, pageSize } = this.props;\n        var pager = this.state.pager;\n \n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n \n        // get new pager object for specified page\n        pager = this.getPager(totalItems, page, pageSize);\n \n        // update state\n        this.setState({ pager: pager });\n \n        // call change page function in parent component\n        this.props.onChangePage(page, false || isInitialLoad);\n    }\n \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n \n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        var isNarrow = false;\n\n        if(totalItems > 10000) {\n            totalItems = 10000;\n            isNarrow = true;\n        }\n \n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n \n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (isNarrow && (currentPage + 3) >= totalPages) {\n                startPage = totalPages - 8;\n                endPage = totalPages;\n            } else if ((currentPage + 4) >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n \n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages,\n            isNarrow: isNarrow\n        };\n    }\n \n    render() {\n        var pager = this.state.pager;\n \n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n \n        return (\n            <ButtonGroup>\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"left\"\n\t\t\t\t\t\ticonPosition=\"left\" label=\"First\" variant=\"neutral\" onClick={() => this.setPage(1)} disabled={pager.currentPage === 1} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronleft\"\n\t\t\t\t\t\ticonPosition=\"left\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage - 1)} disabled={pager.currentPage === 1} />\n                {pager.pages.map((page, index) => {\n                    return (\n                        <Button key={'SLDSPaginator' + Date.now() + index} label={page} variant={pager.currentPage === page ? 'brand' : 'neutral'} onClick={() => this.setPage(page)} />\n                    )\n                })}\n                {pager.isNarrow && pager.currentPage >= (pager.totalPages - 3) && (\n                    <Tooltip\n                        align=\"top right\"\n                        content=\"The list is too long, try adding more filters to optimize the results.\"\n                    >\n                        <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n                    </Tooltip>\n                )}\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\t\ticonPosition=\"right\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage + 1)} disabled={pager.currentPage === pager.totalPages} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"right\"\n\t\t\t\t\t\ticonPosition=\"right\" label=\"Last\" variant=\"neutral\" onClick={() => this.setPage(pager.totalPages)} disabled={pager.currentPage === pager.totalPages} />\n            </ButtonGroup>\n        );\n    }\n}\n \nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypes' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this.props.excludeIds) {\n                    data = _.filter(data, (item) => {\n                        return this.props.excludeIds.indexOf(item.id) === -1;\n                    });\n                }\n\n                this.setState({\n                    options: data,\n                    isLoaded: true\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>                    \n                    <Combobox\n                        classNameMenu={'scrollable-GRAXObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Search GRAX Table',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-restricted-globals */\nimport React from \"react\";\n\nimport {\n  Spinner,\n  Button,\n  DataTable,\n  DataTableColumn,\n  Modal,\n  Checkbox\n} from \"@salesforce/design-system-react\";\nimport SLDSPaginator from \"./SLDSPaginator\";\n\nimport { $, baseUrl, GetParams } from \"../lib/grax-data-lake\";\nimport { moment, SF_DATETIME_REGEXP, DATE_FORMAT, DATETIME_FORMAT, TZ } from \"../lib/utils\";\n\nimport _ from \"lodash\";\n\nconst ROWSXPAGE = 100;\n\nexport default class GRAXDeleteDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortColumn: \"Id\",\n      sortDirection: \"asc\",\n      chunks: [],\n      items: [],\n      extraInfo: {},\n      page: 0,\n      selection: [],\n      isLoaded: false,\n      isLoading: false,\n      deleteConfirmIsOpen: false,\n      deleteConfirmIsChecked: false,\n      deleteConfirmCallback: () => {},\n      deleteConfirmTotal: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.renderKey !== nextProps.renderKey ||\n      this.state.items !== nextState.items ||\n      this.state.selection !== nextState.selection ||\n      this.state.isLoaded !== nextState.isLoaded ||\n      this.state.isLoading !== nextState.isLoading ||\n      this.state.sortColumn !== nextState.sortColumn ||\n      this.state.sortDirection !== nextState.sortDirection ||\n      this.state.deleteConfirmIsOpen !== nextState.deleteConfirmIsOpen ||\n      this.state.deleteConfirmIsChecked !== nextState.deleteConfirmIsChecked\n    );\n  }\n\n  getDataHandler(page, sortColumn, sortDirection) {\n    const _sort = sortColumn + \" \" + sortDirection;\n\n    this.setState({\n      isLoading: true,\n      page: page,\n      sortColumn: sortColumn,\n      sortDirection: sortDirection\n    });\n\n    $.ajax({\n      type: \"GET\",\n      //dataType: 'jsonp',\n      url:\n        baseUrl +\n        \"/grax-app/grax-data-lake\" +\n        GetParams({\n          action: \"load\",\n          dataIndex: this.props.dataIndex,\n          _select:\n            _.union(this.props.columns, this.props.hiddenColumns, [\n              \"Id\",\n              \"graxorgid\",\n              \"attributes.type\"\n            ]).join(\",\") || \"Id\",\n          _q: this.props.filterQuery,\n          _limit: ROWSXPAGE,\n          _from: ROWSXPAGE * page,\n          _sort: _sort,\n          _includeMetadata: true\n        }),\n      /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n      success: (data) => {\n        let results = data.results;\n\n        if (this.props.filterFunction) {\n          results = this.props.filterFunction(results);\n        }\n\n        results = _.map(results, (item, i) => {\n          _.forEach(item, (val, key) => {\n            if (typeof val == \"string\") {\n              if (SF_DATETIME_REGEXP.test(val)) {\n                const m = moment(val);\n\n                if (m.isValid()) {\n                  item[key] = m\n                    .tz(TZ)\n                    .format(m._i.indexOf(\":\") !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                }\n              }\n            }\n\n            if (typeof val == \"boolean\") {\n              item[key] = val ? \"true\" : \"false\";\n            }\n          });\n\n          return {\n            ...item,\n            ...{ id: i.toString() }\n          };\n        });\n\n        this.setState({\n          page: 0,\n          data: results,\n          extraInfo: data.extraInfo || { total: 0, size: ROWSXPAGE, totalRetrieved: 0 },\n          items: results,\n          isLoaded: true,\n          isLoading: false\n        });\n      },\n      error: (xhr, status, err) => {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoaded: true,\n          isLoading: false,\n          items: [],\n          error: err.toString()\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n  }\n\n  handleChanged(event, data) {\n    this.setState({ selection: data.selection.slice(0, 10) });\n    console.log(event, data);\n  }\n\n  handleSort(sortColumn, ...rest) {\n    if (sortColumn.property) {\n      this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n    }\n  }\n\n  render() {\n    return this.state.isLoaded ? (\n      <div>\n        <div style={{ position: \"relative\" }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n          <DataTable\n            assistiveText={{\n              actionsHeader: \"actions\",\n              columnSort: \"sort this column\",\n              columnSortedAscending: \"asc\",\n              columnSortedDescending: \"desc\",\n              selectAllRows: \"all rows\",\n              selectRow: \"select this row\"\n            }}\n            fixedLayout\n            items={this.state.items}\n            id=\"GRAXDeleteDataTable\"\n            onRowChange={this.handleChanged.bind(this)}\n            onSort={this.handleSort.bind(this)}\n            selection={this.state.selection}\n            selectRows={true}\n          >\n            {this.props.columns.map(columnName => (\n              <DataTableColumn\n                key={\"col\" + columnName}\n                id={columnName}\n                isSorted={this.state.sortColumn === columnName}\n                label={columnName} // TODO\n                property={columnName}\n                sortable={\n                  this.props.sortableColumns == null ||\n                  this.props.sortableColumns.indexOf(columnName) !== -1\n                }\n                sortDirection={this.state.sortDirection}\n              />\n            ))}\n          </DataTable>\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n          <SLDSPaginator\n            totalItems={this.state.items.length > 0 ? this.state.extraInfo.total : 0}\n            pageSize={ROWSXPAGE}\n            onChangePage={(page, isInitialLoad) => {\n              if (!isInitialLoad) {\n                this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n              }\n            }}\n          />\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n          <Button\n            label=\"Delete Selection\"\n            disabled={this.state.selection.length < 1 || this.state.isLoading}\n            onClick={() => {\n              this.setState({\n                deleteConfirmIsOpen: true,\n                deleteConfirmIsChecked: false,\n                deleteConfirmTotal: this.state.selection.length,\n                deleteConfirmCallback: () => {\n                  if (\n                    this.state.deleteConfirmIsChecked &&\n                    confirm(\"Are you sure that you want to delete the selected records?\")\n                  ) {\n                    $.ajax({\n                      type: \"POST\",\n                      url:\n                        baseUrl +\n                        \"/grax-app/grax-data-lake/deleteAPI\" +\n                        GetParams({\n                          action: \"delete\"\n                        }),\n                      contentType: \"application/json; charset=utf-8\",\n                      data: JSON.stringify(\n                        _.map(this.state.selection, item => {\n                          return _.pick(item, [\n                            \"Id\",\n                            \"graxorgid\",\n                            \"_id\",\n                            \"_type\",\n                            \"_index\",\n                            \"attributes.type\"\n                          ]);\n                        })\n                      ),\n                      success: data => {\n                        alert(data.state);\n                      }\n                    });\n\n                    this.setState({\n                      selection: [],\n                      deleteConfirmIsOpen: false,\n                      deleteConfirmCallback: () => {},\n                      deleteConfirmTotal: 0\n                    });\n                  }\n                }\n              });\n            }}\n          />\n\n          {/*<Button label=\"Delete All\" disabled={this.state.isLoading} onClick={() => {\n                        this.setState({\n                            deleteConfirmIsOpen: true,\n                            deleteConfirmIsChecked: false,\n                            deleteConfirmTotal: this.state.extraInfo.total,\n                            deleteConfirmCallback: (() => {\n                                if(this.state.deleteConfirmIsChecked && confirm('Are you sure that you want to delete the filtered records?')) {\n                                    $.ajax({\n                                        type: 'POST',\n                                        url: baseUrl + '/grax-app/grax-data-lake/deleteAll' + GetParams({\n                                            action: 'delete',\n                                        }),\n                                        contentType: \"application/json; charset=utf-8\",\n                                        data: JSON.stringify({\n                                            dataIndex: this.props.dataIndex,\n                                            _q: this.props.filterQuery,\n                                            _sort: this.state.sortColumn + ' ' + this.state.sortDirection\n                                        }),\n                                        success: function(data) {\n                                            alert(data.state);\n                                        }.bind(this)\n                                    });\n\n                                    this.setState({\n                                        selection: [],\n                                        deleteConfirmIsOpen: false,\n                                        deleteConfirmCallback: (() => {}),\n                                        deleteConfirmTotal: 0\n                                    });\n                                }\n                            })\n                        });\n                    }} />*/}\n        </div>\n\n        <Modal\n          dismissible={true}\n          footer={[\n            <div key=\"agree\" className=\"slds-p-bottom_small\">\n              <Checkbox\n                assistiveText={{\n                  label: \"I understand the risks\"\n                }}\n                id=\"delete-confirm\"\n                labels={{\n                  label: \"I understand the risks\"\n                }}\n                onChange={e => {\n                  this.setState({\n                    deleteConfirmIsChecked: e.target.checked\n                  });\n                }}\n              />\n            </div>,\n            <Button\n              key=\"cancelBtn\"\n              label=\"Cancel\"\n              onClick={() => {\n                this.setState({\n                  deleteConfirmIsOpen: false,\n                  deleteConfirmIsChecked: false\n                });\n              }}\n            />,\n            <Button\n              key=\"deleteBtn\"\n              label=\"Delete\"\n              onClick={this.state.deleteConfirmCallback}\n              variant=\"destructive\"\n              disabled={!this.state.deleteConfirmIsChecked}\n            />\n          ]}\n          isOpen={this.state.deleteConfirmIsOpen}\n          onRequestClose={() => {\n            this.setState({\n              deleteConfirmIsOpen: false,\n              deleteConfirmIsChecked: false\n            });\n          }}\n          prompt=\"error\"\n          size=\"medium\"\n          align=\"top\"\n          dismissOnClickOutside={false}\n          title={\n            <span>\n              Delete <b>{this.state.deleteConfirmTotal}</b> record(s)\n            </span>\n          }\n        >\n          <div className=\"slds-m-around_medium\">\n            Please confirm that you want to delete these record(s) from your GRAX Datalake.\n            <br />\n            After you confirm deletion, these records are NOT recoverable.\n          </div>\n        </Modal>\n      </div>\n    ) : (\n      <div style={{ position: \"relative\", height: \"2rem\" }}>\n        <Spinner size=\"medium\" variant=\"brand\" />\n      </div>\n    );\n  }\n}\n","///* global $ */\nimport React from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXObjectCombobox from './GRAXObjectCombobox';\nimport GRAXFieldsCombobox from './GRAXFieldsCombobox';\nimport GRAXDeleteDataTable from './GRAXDeleteDataTable';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\n\nimport {Button} from '@salesforce/design-system-react';\n\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\n\nexport default class GRAXDelete extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedDataIndex: null,\n            retrieved: false,\n            retrievedCounter: 0,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: null,\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => null),\n            _filterValuesFields: [],\n            _graxSortableFields: null\n        }\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n    \n    render() {\n        return (\n            <div>\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select the GRAX Table\">\n                    <GRAXObjectCombobox\n                        onSelect={(event, data) => {\n                            this.setState({\n                                selectedDataIndex: data[0]\n                            });\n                        }}\n                        excludeIds={['graxgrax_loggingindex']}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            this.setState({\n                                retrieved: false,\n                                selectedDataIndex: null,\n                                _graxFieldsSelection: null,\n                                _graxFieldsSelectionList: null\n                            });\n                        }}\n                    />\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n                \n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Search GRAX Table\">\n                    {\n                        this.state.selectedDataIndex != null\n                        ? (\n                            <GRAXFieldsCombobox\n                                dataIndex={this.state.selectedDataIndex.id}\n                                onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                    console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                                    this.setState({\n                                        _graxFields: _graxFields,\n                                        _graxFieldsSelection: _graxFieldsSelection,\n                                        _graxFieldsSelectionList: _graxFieldsSelectionList,\n                                        _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                            if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                                sortableFields.push(elasticField.id);\n                                            }\n                            \n                                            return sortableFields;\n                                        }, [])\n                                    });\n                                }}\n                                onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                    console.log('onChange', _graxFieldsSelection, _graxFieldsSelectionList);\n\n                                    var retrievedCounter = this.state.retrievedCounter;\n\n                                    if(_graxFieldsSelectionList.length > this.state._graxFieldsSelectionList.length) {\n                                        retrievedCounter++;\n                                    }\n\n                                    this.setState({\n                                        retrievedCounter: retrievedCounter,\n                                        _graxFieldsSelection: _graxFieldsSelection,\n                                        _graxFieldsSelectionList: _graxFieldsSelectionList\n                                    });\n                                }}\n                            />\n                        )\n                        : 'No GRAX Table selected...'\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Records\">\n                    {/*<Input\n                        iconLeft={\n                            <InputIcon\n                                assistiveText=\"Search\"\n                                name=\"search\"\n                                category=\"utility\"\n                            />\n                        }\n                        assistiveText={{ label: 'Search Term' }}\n                        id=\"record-query\"\n                        placeholder=\"Search\"\n                    />*/}\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            SObjectType={this.state.selectedDataIndex.label}\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n\t\t\t\t\t    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrieved: this.state.selectedDataIndex != null,\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} disabled={!this.hasFieldSelected()} />\n                    </div>\n\n                    {this.state.retrieved && this.state._graxFieldsSelectionList && (\n                        <GRAXDeleteDataTable\n                            key={'GRAXDeleteDataTable_' + this.state.retrievedCounter}\n                            renderKey={'GRAXDeleteDataTable_' + this.state.retrievedCounter}\n                            columns={this.state._graxFieldsSelectionList}\n                            hiddenColumns={this.state._filterValuesFields}\n                            dataIndex={this.state.selectedDataIndex.id}\n                            filterFunction={this.state._filterFunction}\n                            filterQuery={this.state._getFilterQuery()}\n                            sortableColumns={this.state._graxSortableFields}\n                        />\n                    )}\n                </SLDSSection>\n            </div>\n        );\n    }\n}"],"sourceRoot":""}