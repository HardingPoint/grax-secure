{"version":3,"sources":["lib/grax-data-lake.js","components/SLDSSection.jsx","components/GRAXDatePicker.jsx","public/js/jquery.sldsTree.js","lib/summaryChartData.js","lib/summaryChartsUtils.js","components/GRAXSummaryChartsChart.jsx","components/GRAXSummaryChartsAdvanced.jsx"],"names":["baseUrl","token","window","__grax__","_csrf","orgid","pageParams","userid","GetParams","params","undefined","action","$","param","ajaxSetup","beforeSend","xhr","settings","method","setRequestHeader","authorization","type","test","this","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","console","error","status","showError","statusText","responseText","SLDSSection","props","isOpen","isCollapsible","state","handleToggle","bind","e","onToggle","setState","prevState","preventDefault","id","key","title","helpText","className","children","titleElement","join","onClick","assistiveText","label","category","name","size","React","Component","GRAXDatePicker","useState","isValidDate","setIsValidDate","formatter","datePickerFormatter","parser","datePickerParser","onChange","event","data","formattedDate","moment","date","isValid","svgns","fn","sldsTree","options","extend","items","childs","attrs","root","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","item","onDiv","$div","append","onButton","$button","onFinish","$root","getTreeItemContent","level","attr","disabled","toggleClass","icon","document","createElementNS","setAttribute","class","icon_use","setAttributeNS","path","appendChild","on","i","getTreeItemButton","length","getTreeItem","getTree","each","html","jQuery","legacyAPILogged","formatDates","fromDT","fromDate","getFullYear","getMonth","toString","padStart","getDate","toDT","toDate","getUTCTimeRangeFromUserDate","summaryChartData","callback","gp","start","end","Id","gspid","ajax","url","success","err","log","readyState","loadV1SummaryData","contentType","JSON","stringify","source","info","err_message","description","package_name","query","AND","INVALID_DATE","push","GTE","LTE","KEQ","graxorgid","spId","dataIndex","_index","_select","_q","_limit","_from","_sort","_sortType","_ignore_unavailable","results","loadLegacySummaryData","objectsToExcludeFromSummary","module","exports","isObjectExcludedFromSummary","objectName","indexOf","toLowerCase","GRAXSummaryChartsChart","Date","setHours","setMinutes","chartOptions","call","chartObjectTopTen","chartObjectByDate","chartSummaryTopTen","chartSummaryByDate","chartAttributeProgressByDate","isLoading","summaryData","defaultChartSettings","width","height","chartArea","left","showChartAttr","showRecords","showInserted","showUpdated","showArchived","chartFromDate","chartToDate","showAttributeFilter","hideChartOptions","chartSelection","google","charts","setOnLoadCallback","drawChart","sortedNames","otherSum","objIndexes","chartDataIndexes","chartData","counter","nameSet","Set","forEach","summary","summaryMap","add","Array","sort","a","b","obj","smyIndex","n","records","tempN","top10BackedUpObjects","rec","visualization","arrayToDataTable","parse","sliceVisibilityThreshold","PieChart","DataTable","addColumn","fromDateAxis","toDateAxis","objectsTotalValue","startTime","smyDate","smyDateFormated","formatStartTime","getHours","fill","v","f","addRows","interpolateNulls","pointSize","explorer","hAxis","format","viewWindow","min","max","viewWindowMode","vAxis","LineChart","summaryIndexes","spName","summaryResults","top10BackedUpSummaries","sumRes","attIndexes","attrNames","attrName","summarysTotalValue","selectedSummaries","containsSelectedObjects","setSeconds","getMinutes","getSeconds","isStacked","ColumnChart","ret","isBlank","chartEl","draw","selection","chartInput","dt","variant","events","value","onRequestRemoveSelectedOption","onSelect","selectChart","onChartSelect","labels","placeholder","comboboxFilterAndLimit","inputValue","limit","defaultChecked","isChecked","toggleDisabled","toggleEnabled","ref","nextProps","CustomDataTableCell","href","encodeURI","executionUniqueKey","target","rel","displayName","DataTableCell","MomentFormattedCell","DATE_FORMAT","utc","tz","TZ","RECORD_SUMMARIES_VARIANT","GRAXSummaryChartsAdvanced","chart","createRef","summaryDataResults","summaryDataSelected","itemsObjectsByDataRange","itemsObjectsByDataRangeSelection","summaryBreakdownDTItems","summaryBreakdownDTSelection","summaryDTItems","summaryDTSelection","displayValuesOptions","displayValuesSelection","renderCounter","filterParams","_currentOrgRecords","summaryDTFilters","checked","loadSummaries","currentChartSelected","chartSelected","gspId","loadSummaryDataTable","loadSummaryBreakdownTable","loadObjectDataTable","getScheduleProcessBreakdownSelection","summaries4chart","index","summaryList","dtSummaries","displayValuesOption","inserted","updated","archived","CreatedDate","existIndex","filter","summaryToShow","dtSummary","objectsList","Object","keys","dataTableRefreshSort","property","sortDirection","updateState","getSelectedSummary","allSummaries","objName","_allSumaries","startTimes","dateIndex","dateData","refreshChart","summartDataResults","summaryIds","objNames","tempData","update","endTime","current","setDateFilter","summaryBreakdownDTHandleChanged","itemsObjectsByDataRangeHandleChanged","getObjectsSelection","dtName","sortColumn","callSortFunction","sortProperty","newState","dataTableSortFunction","direction","val","dataTableId","displayValuesInput","style","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedHeader","fixedLayout","selectRows","onRowChange","summaryDTHandleChanged","onSort","dataTableHandleSort","sortable","primaryColumn","isSorted","getIsDatatableSortedColumn","currentStepSelection","parentStepSelection","currentStepItems","reduce","accumulator","find","x","parentItem","currentItem","getSummaryBreakdownDTItems","sectionTitle","DATETIME_FORMAT","getItemsObjectsByDataRange","renderAggregatedScheduleProcessSection","renderScheduleProcessBreakdownSection","renderObjectsSection","minHeight","renderFilterCriteriaSection","renderFilterSections","defaultProps"],"mappings":"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","file":"static/js/2.b7ee6eb9.chunk.js","sourcesContent":["/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      // load token\n      // anticipates that the API token is in the referrer\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","/* eslint-disable */\nimport React from \"react\";\nimport { Icon } from \"@salesforce/design-system-react\";\n\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool,\n  isCollapsible: PropTypes.bool,\n  onToggle: PropTypes.func,\n  title: PropTypes.string.isRequired,\n  helpText: PropTypes.any,\n  id: PropTypes.string,\n  key: PropTypes.string,\n  children: PropTypes.any.isRequired\n};\n\nclass SLDSSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { isOpen, isCollapsible } = props;\n\n    this.state = {\n      isOpen: isOpen === true ? true : false || isCollapsible === undefined\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(e) {\n    const { onToggle } = this.props;\n\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n\n    if (onToggle) {\n      onToggle(isOpen);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { id, key, isCollapsible, title, helpText, className, children } = this.props;\n    const { isOpen } = this.state;\n\n    const titleElement = (\n      <span\n        className={`slds-truncate${isCollapsible ? \"\" : \" slds-p-horizontal_small\"}`}\n        title={title}\n      >\n        {title}\n        {helpText}\n      </span>\n    );\n\n    return (\n      <div\n        id={id || key}\n        className={[\"slds-section\", isOpen && \"slds-is-open\", className].join(\n          \" \"\n        )}\n      >\n        <h3 className=\"slds-section__title slds-theme_shade\">\n          {isCollapsible ? (\n            <button type=\"button\" className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n              <Icon\n                assistiveText={{ label: title }}\n                category=\"utility\"\n                name=\"switch\"\n                size=\"x-small\"\n                className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n              />\n              {titleElement}\n            </button>\n          ) : (\n            titleElement\n          )}\n        </h3>\n        {isOpen && <div className=\"slds-section__content\">{children}</div>}\n      </div>\n    );\n  }\n}\n\nSLDSSection.propTypes = propTypes;\n\nexport default SLDSSection;\n","/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\";\n\nimport { Datepicker } from \"@salesforce/design-system-react\";\n\nimport { moment, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst GRAXDatePicker = props => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  return (\n    <div className=\"slds-is-relative\">\n      <Datepicker\n        formatter={datePickerFormatter}\n        parser={datePickerParser}\n        // eslint-disable-next-line\n        {...props}\n        onChange={(event, data) => {\n          setIsValidDate(data.formattedDate === \"\" || moment(data.date).isValid());\n\n          if (props.onChange != null) {\n            props.onChange(event, data);\n          }\n        }}\n      />\n      {isValidDate === false ? (\n        <div className=\"slds-text-color_error\">\n          The date is invalid. Please select/write a valid date.\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GRAXDatePicker;\n","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));","import $ from 'jquery';\n\nimport { baseUrl, GetParams } from './grax-data-lake';\nimport { getUTCTimeRangeFromUserDate, INVALID_DATE } from './utils';\n\nlet legacyAPILogged = false;\n/**\n * Loads summary Data from Postgres or Elastic\n *\n * @export\n * @param { Object } params - Search Parameters\n * @param { String } params.orgid - SF Organization ID\n * @param { String } params.gspid - Grax Scheduled Process ID *\n * @param { Date } params.fromDate - Date to search From\n * @param { Date } params.toDate - Date to search To\n * @param { callback } (success, data) - callback with boolean of success or failure and data array of results *\n */\nfunction summaryChartData(params, callback) {\n  loadV1SummaryData(params, (success, data) => {\n    if (success) {\n      callback(true, data);\n    } else {\n      if (!legacyAPILogged) {\n        $.ajax({\n          type: \"POST\",\n          skipFail: true, // don't panic if this call fails, an attempt was made\n          url: `${baseUrl}/grax-app/grax-data-lake/sendLog`,\n          contentType: \"application/json; charset=utf-8\",\n          data: JSON.stringify({\n            source: \"summaryChartData\",\n            info: \"loadLegacySummaryData\",\n            err_message: \"loadLegacySummaryData\",\n            description: \"Loading Chart Summary Data from legacy API\",\n            package_name: \"summarycharts\",\n          }),\n        });\n        legacyAPILogged = true;\n      }\n      loadLegacySummaryData(params, callback);\n    }\n  });\n}\n\nfunction formatDates(params) {\n  let fromDT = params.fromDate;\n  fromDT = `${fromDT.getFullYear()}-${(fromDT.getMonth() + 1)\n    .toString()\n    .padStart(2, 0)}-${fromDT.getDate().toString().padStart(2, 0)}`;\n  let toDT = params.toDate;\n  toDT = `${toDT.getFullYear()}-${(toDT.getMonth() + 1)\n    .toString()\n    .padStart(2, 0)}-${toDT.getDate().toString().padStart(2, 0)}`;\n\n  // eslint-disable-next-line prefer-destructuring\n  fromDT = getUTCTimeRangeFromUserDate({ date: fromDT })[0];\n  // eslint-disable-next-line prefer-destructuring\n  toDT = getUTCTimeRangeFromUserDate({ date: toDT })[1];\n\n  return { fromDT, toDT };\n}\n\nfunction loadV1SummaryData(params, callback) {\n  const { fromDT, toDT } = formatDates(params);\n  const gp = GetParams({\n    action: \"load\",\n    start: `${fromDT}Z`,\n    end: `${toDT}Z`,\n    orgid: params.orgid,\n    Id: params.gspid,\n  });\n  $.ajax({\n    type: \"GET\",\n    url: `${baseUrl}/api/v1/report/backup${gp}`,\n    skipFail: true, // don't panic if this call fails, fall back to the legacy API\n    success: (data) => {\n      // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n      callback(true, data || []);\n    },\n    error: (xhr, textStatus, err) => {\n      console.log(`readyState: ${xhr.readyState}`);\n      console.log(`responseText: ${xhr.responseText}`);\n      console.log(`status: ${xhr.status}`);\n      console.log(`text status: ${textStatus}`);\n      console.log(`error: ${err}`);\n      callback(false, []);\n    },\n  });\n}\n\nfunction loadLegacySummaryData(params, callback) {\n  const query = { AND: [] };\n  const { fromDT, toDT } = formatDates(params);\n  if (fromDT !== INVALID_DATE) {\n    query.AND.push({ GTE: { \"summaryResults.startTime\": fromDT } });\n  }\n\n  if (toDT !== INVALID_DATE) {\n    query.AND.push({ LTE: { \"summaryResults.startTime\": toDT } });\n  }\n\n  if (params.orgid !== \"\") {\n    query.AND.push({ KEQ: { graxorgid: params.orgid } });\n  }\n\n  if (params.gspid != null) {\n    query.AND.push({ KEQ: { spId: params.gspid } });\n  }\n\n  const gp = GetParams({\n    action: \"load\",\n    dataIndex: \"graxgrax_backup_summaryindex\",\n    _index: \"graxgrax_backup_summaryindex,graxgrax_summaryindex\",\n    _select: \"summaryMap,spName,spId,CreatedDate,summaryResults,executionUniqueKey\",\n    _q: JSON.stringify(query),\n    _limit: 1000,\n    _from: 0,\n    _sort: \"\",\n    _sortType: \"\",\n    _ignore_unavailable: true,\n  });\n\n  $.ajax({\n    type: \"GET\",\n    url: `${baseUrl}/grax-app/grax-data-lake${gp}`,\n    success: (data) => {\n      // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n      if (data.results) {\n        callback(true, data.results);\n      } else {\n        callback(true, []);\n      }\n    },\n    error: (xhr, textStatus, err) => {\n      console.log(`readyState: ${xhr.readyState}`);\n      console.log(`responseText: ${xhr.responseText}`);\n      console.log(`status: ${xhr.status}`);\n      console.log(`text status: ${textStatus}`);\n      console.log(`error: ${err}`);\n      callback(false, []);\n    },\n  });\n}\n\nexport default summaryChartData;\n","const objectsToExcludeFromSummary = [\"grax_data_record__c\", \"grax__grax_data_record__c\"];\n\n/**\n * Check if the objectName is excluded from Summaries\n *\n * @export\n * @param { String } objectName - Salesforce Object Name\n * @returns { Boolean }\n */\nfunction isObjectExcludedFromSummary(objectName) {\n  return objectsToExcludeFromSummary.indexOf(objectName.toLowerCase()) !== -1;\n}\n\nmodule.exports = { isObjectExcludedFromSummary };\n","/* eslint-disable no-undef */\n/* global google */\nimport React from \"react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport { Spinner, Checkbox, Combobox } from \"@salesforce/design-system-react\";\n\nimport { comboboxFilterAndLimit } from \"../lib/utils\";\n\nexport default class GRAXSummaryChartsChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let fromDate = this.props.fromDate ? this.props.fromDate : new Date();\n    let toDate = this.props.toDate ? this.props.toDate : new Date();\n\n    fromDate.setHours(0);\n    fromDate.setMinutes(0);\n    toDate.setHours(23);\n    toDate.setMinutes(59);\n\n    const chartOptions = [\n      { label: \"Object Top Ten\", id: \"chartObjectTopTen\", call: () => this.chartObjectTopTen() },\n      { label: \"Objects By Date\", id: \"chartObjectByDate\", call: () => this.chartObjectByDate() },\n      {\n        label: \"Top Ten Processes\",\n        id: \"chartSummaryTopTen\",\n        call: () => this.chartSummaryTopTen(),\n      },\n      {\n        label: \"Processes By Date\",\n        id: \"chartSummaryByDate\",\n        call: () => this.chartSummaryByDate(),\n      },\n      {\n        label: \"Results by Date\",\n        id: \"chartAttributeProgressByDate\",\n        call: () => this.chartAttributeProgressByDate(),\n      },\n    ];\n\n    this.state = {\n      isLoading: true,\n      summaryData: this.props.summaryData,\n      defaultChartSettings: { width: \"100%\", height: 600, chartArea: { width: \"70%\", left: \"5%\" } },\n      showChartAttr: {\n        showRecords: true,\n        showInserted: true,\n        showUpdated: true,\n        showArchived: true,\n      },\n\n      chartFromDate: fromDate,\n      chartToDate: toDate,\n      showAttributeFilter: true,\n      hideChartOptions: false,\n      chartOptions: chartOptions,\n      chartSelection: [chartOptions[0]],\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return nextProps;\n  }\n\n  componentDidMount() {\n    // google.charts.load('current', {'packages':['corechart']});\n\n    google.charts.setOnLoadCallback(() => {\n      this.setState(\n        {\n          isLoading: false,\n        },\n        () => {\n          this.drawChart();\n        }\n      );\n    });\n  }\n\n  chartObjectTopTen() {\n    let summaryData = this.state.summaryData;\n    let otherSum = 0;\n    let objIndexes = {};\n    let chartDataIndexes = [];\n    let chartData = [];\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        nameSet.add(key);\n      }\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      objIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        let obj = summary.summaryMap[key];\n        let smyIndex = chartDataIndexes[key];\n\n        let n = obj.records ? obj.records : 0;\n\n        if (!smyIndex && smyIndex !== 0) {\n          smyIndex = counter;\n          chartDataIndexes[key] = counter;\n          chartData.push([key + \" [\" + n + \"]\", n]);\n          counter++;\n        } else {\n          let tempN = chartData[smyIndex][1] + n;\n\n          chartData[smyIndex] = [key + \" [\" + tempN + \"]\", tempN];\n        }\n\n        otherSum += n;\n      }\n    });\n\n    chartData.sort((a, b) => {\n      return -a[1] + b[1];\n    });\n\n    let top10BackedUpObjects = [[\"Object\", \"Backed Up\"]];\n\n    for (let i = 0; i < 10 && i < chartData.length; i++) {\n      let rec = chartData[i];\n      top10BackedUpObjects.push(rec);\n      otherSum -= rec[1];\n    }\n\n    if (otherSum > 0) {\n      top10BackedUpObjects.push([\"Others [\" + otherSum + \"]\", otherSum]);\n    }\n\n    let data = google.visualization.arrayToDataTable(top10BackedUpObjects);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.sliceVisibilityThreshold = 0;\n\n    // Display the chart inside the <div> element with id=\"piechart\"\n    return [google.visualization.PieChart, data, options];\n  }\n\n  chartObjectByDate() {\n    let summaryData = this.state.summaryData;\n    let chartData = [];\n    let chartDataIndexes = [];\n    let objIndexes = {};\n\n    let data = new google.visualization.DataTable();\n    data.addColumn(\"date\", \"Start Time\");\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        nameSet.add(key);\n      }\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      objIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n    let fromDateAxis;\n    let toDateAxis;\n\n    let objectsTotalValue = {};\n    /*\n        [\n            [\n                {v: date, f: label},\n                val1,\n                val2,\n                val3\n            ],\n            [...]\n        ]\n        */\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        let obj = summary.summaryMap[key];\n\n        if (!obj.startTime) {\n          continue;\n        }\n\n        let n = obj.records ? obj.records : 0;\n        let smyDate = new Date(obj.startTime);\n        let smyDateFormated = this.formatStartTime(smyDate);\n        let smyIndex = chartDataIndexes[smyDate];\n\n        if (!fromDateAxis || fromDateAxis >= smyDate) {\n          fromDateAxis = new Date(smyDate);\n          fromDateAxis.setHours(fromDateAxis.getHours() - 1);\n        }\n\n        if (!toDateAxis || toDateAxis <= smyDate) {\n          toDateAxis = new Date(smyDate);\n          toDateAxis.setHours(toDateAxis.getHours() + 1);\n        }\n\n        if (!smyIndex && smyIndex !== 0) {\n          smyIndex = counter;\n          chartDataIndexes[smyDate] = counter;\n          chartData.push(new Array(sortedNames.length + 1).fill(undefined));\n          counter++;\n        }\n\n        chartData[smyIndex][0] = { v: smyDate, f: smyDateFormated };\n        if (!chartData[smyIndex][objIndexes[key] + 1]) {\n          chartData[smyIndex][objIndexes[key] + 1] = 0;\n        }\n        chartData[smyIndex][objIndexes[key] + 1] += n;\n        if (!objectsTotalValue[key]) {\n          objectsTotalValue[key] = 0;\n        }\n        objectsTotalValue[key] += n;\n      }\n    });\n\n    if (chartData.length === 0) return null;\n\n    for (let key in objIndexes) {\n      data.addColumn(\"number\", key + \" [\" + objectsTotalValue[key] + \"]\");\n    }\n\n    chartData.sort((a, b) => {\n      return a[0].v > b[0].v ? 1 : a[0].v < b[0].v ? -1 : 0;\n    });\n\n    data.addRows(chartData);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.interpolateNulls = true;\n    options.pointSize = 5;\n    options.explorer = {};\n    options.hAxis = {\n      title: \"Start Time\",\n      format: \"YYYY-dd-MM\\nhh:mm:ss\",\n      viewWindow: {\n        min: fromDateAxis,\n        max: toDateAxis,\n      },\n      viewWindowMode: \"maximized\",\n    };\n    options.vAxis = {\n      title: \"Backed up objects\",\n    };\n\n    // Display the chart inside the <div> element\n    return [google.visualization.LineChart, data, options];\n  }\n\n  chartSummaryTopTen() {\n    let summaryData = this.state.summaryData;\n    let otherSum = 0;\n    let summaryIndexes = {};\n    let chartDataIndexes = [];\n    let chartData = [];\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      nameSet.add(summary.spName);\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      summaryIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n\n    summaryData.forEach((summary) => {\n      let smyIndex = chartDataIndexes[summary.spName];\n      let n = summary.summaryResults.records ? summary.summaryResults.records : 0;\n\n      if (!smyIndex && smyIndex !== 0) {\n        chartData.push([summary.spName + \" [\" + n + \"]\", n]);\n      } else {\n        let tempN = chartData[smyIndex][1] + n;\n\n        chartData[smyIndex] = [summary.spName + \" [\" + tempN + \"]\", tempN];\n      }\n      otherSum += n;\n    });\n\n    chartData.sort((a, b) => {\n      return -a[1] + b[1];\n    });\n\n    let top10BackedUpSummaries = [[\"Summary\", \"Backed Up\"]];\n\n    for (let i = 0; i < 10 && i < chartData.length; i++) {\n      let rec = chartData[i];\n      top10BackedUpSummaries.push(rec);\n      otherSum -= rec[1];\n    }\n\n    if (otherSum > 0) {\n      top10BackedUpSummaries.push([\"Others [\" + otherSum + \"]\", otherSum]);\n    }\n\n    let data = google.visualization.arrayToDataTable(top10BackedUpSummaries);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.sliceVisibilityThreshold = 0;\n\n    // Display the chart inside the <div> element with id=\"piechart\"\n    return [google.visualization.PieChart, data, options];\n  }\n\n  chartSummaryByDate() {\n    let summaryData = this.state.summaryData;\n    let chartData = [];\n    let chartDataIndexes = [];\n    let objIndexes = {};\n\n    let data = new google.visualization.DataTable();\n    data.addColumn(\"date\", \"Start Time\");\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      nameSet.add(summary.spName);\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      objIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n    let fromDateAxis;\n    let toDateAxis;\n\n    let objectsTotalValue = {};\n    /*\n        [\n            [\n                {v: date, f: label},\n                val1,\n                val2,\n                val3\n            ],\n            [...]\n        ]\n        */\n    summaryData.forEach((summary) => {\n      let sumRes = summary.summaryResults;\n\n      if (!sumRes.startTime) {\n        return;\n      }\n\n      let n = sumRes.records ? sumRes.records : 0;\n      let smyDate = new Date(sumRes.startTime);\n      let smyDateFormated = this.formatStartTime(smyDate);\n      let smyIndex = chartDataIndexes[smyDate];\n\n      if (!fromDateAxis || fromDateAxis >= smyDate) {\n        fromDateAxis = new Date(smyDate);\n        fromDateAxis.setHours(fromDateAxis.getHours() - 1);\n      }\n\n      if (!toDateAxis || toDateAxis <= smyDate) {\n        toDateAxis = new Date(smyDate);\n        toDateAxis.setHours(toDateAxis.getHours() + 1);\n      }\n\n      if (!smyIndex && smyIndex !== 0) {\n        smyIndex = counter;\n        chartDataIndexes[smyDate] = counter;\n        chartData.push(new Array(sortedNames.length + 1).fill(undefined));\n        counter++;\n      }\n\n      chartData[smyIndex][0] = { v: smyDate, f: smyDateFormated };\n      if (!chartData[smyIndex][objIndexes[summary.spName] + 1]) {\n        chartData[smyIndex][objIndexes[summary.spName] + 1] = 0;\n      }\n      chartData[smyIndex][objIndexes[summary.spName] + 1] += n;\n      if (!objectsTotalValue[summary.spName]) {\n        objectsTotalValue[summary.spName] = 0;\n      }\n      objectsTotalValue[summary.spName] += n;\n    });\n\n    if (chartData.length === 0) return null;\n\n    for (let key in objIndexes) {\n      data.addColumn(\"number\", key + \" [\" + objectsTotalValue[key] + \"]\");\n    }\n\n    chartData.sort((a, b) => {\n      return a[0].v > b[0].v ? 1 : a[0].v < b[0].v ? -1 : 0;\n    });\n\n    data.addRows(chartData);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.interpolateNulls = true;\n    options.explorer = {};\n    options.hAxis = {\n      title: \"Start Time\",\n      format: \"YYYY-dd-MM\\nhh:mm:ss\",\n      viewWindow: {\n        min: fromDateAxis,\n        max: toDateAxis,\n      },\n      viewWindowMode: \"maximized\",\n    };\n    options.vAxis = {\n      title: \"Backed up objects\",\n    };\n\n    // Display the chart inside the <div> element\n    return [google.visualization.LineChart, data, options];\n  }\n\n  chartAttributeProgressByDate() {\n    let summaryData = this.state.summaryData;\n    let chartData = [];\n    let chartDataIndexes = [];\n    let attIndexes = {};\n\n    let data = new google.visualization.DataTable();\n    data.addColumn(\"date\", \"Start Time\");\n\n    let counter = 0;\n    let sortedNames = [];\n    let attrNames = [];\n\n    if (this.state.showChartAttr.showRecords) {\n      attrNames.push(\"records\");\n    }\n    if (this.state.showChartAttr.showInserted) {\n      attrNames.push(\"inserted\");\n    }\n    if (this.state.showChartAttr.showUpdated) {\n      attrNames.push(\"updated\");\n    }\n    if (this.state.showChartAttr.showArchived) {\n      attrNames.push(\"archived\");\n    }\n\n    attrNames.forEach((attrName) => {\n      sortedNames.push(attrName);\n    });\n\n    sortedNames.sort((a, b) => {\n      return a < b ? -1 : a > b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      attIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n    let fromDateAxis;\n    let toDateAxis;\n    let summarysTotalValue = {};\n    let selectedSummaries = new Set();\n\n    summaryData.forEach((summary) => {\n      let attr = {};\n      let summaryMap = summary.summaryMap;\n      let containsSelectedObjects = false;\n\n      for (let key in summaryMap) {\n        let obj = summaryMap[key];\n        if (obj) {\n          attrNames.forEach((attrName) => {\n            attr[attrName] = attr[attrName] ? attr[attrName] : 0;\n            attr[attrName] += obj[attrName] ? obj[attrName] : 0;\n          });\n          containsSelectedObjects = true;\n        }\n      }\n\n      if (containsSelectedObjects && summary.summaryResults.startTime) {\n        let startTime = new Date(summary.summaryResults.startTime);\n        startTime.setSeconds(0);\n\n        let smyDate = startTime;\n        let smyDateFormated =\n          startTime.getFullYear() +\n          \"-\" +\n          (startTime.getMonth() + 1).toString().padStart(2, \"0\") +\n          \"-\" +\n          startTime.getDate().toString().padStart(2, \"0\") +\n          \" \" +\n          startTime.getHours().toString().padStart(2, \"0\") +\n          \":\" +\n          startTime.getMinutes().toString().padStart(2, \"0\") +\n          \":\" +\n          startTime.getSeconds().toString().padStart(2, \"0\");\n        let smyIndex = chartDataIndexes[smyDate];\n\n        if (!fromDateAxis || fromDateAxis >= smyDate) {\n          fromDateAxis = new Date(smyDate);\n          fromDateAxis.setHours(fromDateAxis.getHours() - 1);\n        }\n\n        if (!toDateAxis || toDateAxis <= smyDate) {\n          toDateAxis = new Date(smyDate);\n          toDateAxis.setHours(toDateAxis.getHours() + 1);\n        }\n\n        if (!smyIndex && smyIndex !== 0) {\n          smyIndex = counter;\n          chartDataIndexes[smyDate] = counter;\n          chartData.push(new Array(attrNames.length + 1).fill(undefined));\n          counter++;\n        }\n\n        chartData[smyIndex][0] = { v: smyDate, f: smyDateFormated + \"\\n\" + summary.spName };\n\n        attrNames.forEach((attrName) => {\n          if (!chartData[smyIndex][attIndexes[attrName] + 1]) {\n            chartData[smyIndex][attIndexes[attrName] + 1] = 0;\n          }\n          chartData[smyIndex][attIndexes[attrName] + 1] += attr[attrName];\n\n          if (!summarysTotalValue[attrName]) {\n            summarysTotalValue[attrName] = 0;\n          }\n          summarysTotalValue[attrName] += attr[attrName];\n        });\n\n        selectedSummaries.add(summary.spName);\n      }\n    });\n\n    if (chartData.length === 0) return null;\n\n    for (let key in attIndexes) {\n      if (summarysTotalValue[key] !== undefined) {\n        data.addColumn(\"number\", key + \" [\" + summarysTotalValue[key] + \"]\");\n      }\n    }\n\n    chartData.sort((a, b) => {\n      return a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0;\n    });\n\n    data.addRows(chartData);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.interpolateNulls = true;\n    options.isStacked = true;\n    options.explorer = {};\n    options.hAxis = {\n      title: \"Start Date\",\n      format: \"YYYY-dd-MM\\n hh:mm:ss\",\n      viewWindowMode: \"pretty\",\n      viewWindow: {\n        min: fromDateAxis,\n        max: toDateAxis,\n      },\n    };\n    options.vAxis = {\n      title: \"Attributes\",\n    };\n\n    // Display the chart inside the <div> element\n    return [google.visualization.ColumnChart, data, options];\n  }\n\n  drawChart() {\n    let ret = this.state.chartSelection[0].call();\n\n    this.setState(\n      {\n        isLoading: false,\n        isBlank: ret == null,\n      },\n      () => {\n        if (ret) {\n          var chart = new ret[0](this.chartEl);\n          chart.draw(ret[1], ret[2]);\n        }\n      }\n    );\n  }\n\n  selectChart(selection) {\n    this.setState(\n      {\n        chartInput: \"\",\n        chartSelection: selection,\n      },\n      this.drawChart\n    );\n  }\n\n  setDateFilter(fromDate, toDate) {\n    this.setState({\n      chartFromDate: fromDate,\n      chartToDate: toDate,\n    });\n  }\n\n  formatStartTime(startTime) {\n    return (\n      startTime.getFullYear() +\n      \"-\" +\n      (startTime.getMonth() + 1).toString().padStart(2, \"0\") +\n      \"-\" +\n      startTime.getDate().toString().padStart(2, \"0\") +\n      \" \" +\n      startTime.getHours().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getMinutes().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getSeconds().toString().padStart(2, \"0\")\n    );\n  }\n\n  formatDate(dt) {\n    return dt.getMonth() + 1 + \"/\" + dt.getDate() + \"/\" + dt.getFullYear();\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <div>\n        <div>\n          {!this.state.hideChartOptions && (\n            <div className=\"slds-grid slds-wrap\">\n              <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                <SLDSSection title=\"Chart Options\" isCollapsible=\"true\">\n                  <div className=\"slds-grid slds-wrap\">\n                    <div\n                      className={\n                        this.state.chartSelection[0].id === \"chartAttributeProgressByDate\" &&\n                        this.state.showAttributeFilter\n                          ? \"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\"\n                          : \"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\"\n                      }\n                    >\n                      <Combobox\n                        events={{\n                          onChange: (event, { value }) => {\n                            this.chartInput = value;\n                            this.setState(\n                              {\n                                chartInput: value,\n                              },\n                              this.drawChart\n                            );\n                          },\n                          onRequestRemoveSelectedOption: (event, data) => {\n                            this.setState({\n                              chartInput: \"\",\n                              chartSelection: data.selection,\n                            });\n                          },\n                          onSelect: (event, data) => {\n                            this.selectChart(data.selection);\n\n                            if (this.props.onChartSelect) {\n                              this.props.onChartSelect(event, data.selection);\n                            }\n                          },\n                        }}\n                        labels={{\n                          label: \"Chart Type\",\n                          placeholder: \"-- SELECT CHART TYPE --\",\n                        }}\n                        options={comboboxFilterAndLimit({\n                          inputValue: this.state.chartInput,\n                          limit: 1000,\n                          options: this.state.chartOptions,\n                          selection: this.state.chartSelection,\n                        })}\n                        selection={this.state.chartSelection}\n                        value={this.state.chartInput}\n                        variant=\"readonly\"\n                      />\n                    </div>\n\n                    {this.state.chartSelection[0].id === \"chartAttributeProgressByDate\" &&\n                      this.state.showAttributeFilter && (\n                        <div className=\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\">\n                          <SLDSSection\n                            title=\"Display Values\"\n                            className=\"slds-p-left_small slds-m-top_none\"\n                          >\n                            <div className=\"slds-grid slds-wrap\">\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showRecords}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showRecords = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => this.drawChart()\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Records\",\n                                    toggleEnabled: \"Records\",\n                                  }}\n                                />\n                              </div>\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showInserted}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showInserted = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => this.drawChart()\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Inserted\",\n                                    toggleEnabled: \"Inserted\",\n                                  }}\n                                />\n                              </div>\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showUpdated}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showUpdated = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => this.drawChart()\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Updated\",\n                                    toggleEnabled: \"Updated\",\n                                  }}\n                                />\n                              </div>\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showArchived}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showArchived = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => {\n                                        this.drawChart();\n                                      }\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Archived\",\n                                    toggleEnabled: \"Archived\",\n                                  }}\n                                />\n                              </div>\n                            </div>\n                          </SLDSSection>\n                        </div>\n                      )}\n                  </div>\n                </SLDSSection>\n              </div>\n            </div>\n          )}\n\n          {this.state.isBlank ? null : <div ref={(chartEl) => (this.chartEl = chartEl)} />}\n        </div>\n      </div>\n    );\n  }\n}\n","import '../public/js/jquery.sldsTree.js';\n\nimport {\n    Button,\n    Checkbox,\n    Combobox,\n    DataTable,\n    DataTableCell,\n    DataTableColumn,\n    Spinner,\n} from '@salesforce/design-system-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { baseUrl, orgid } from '../lib/grax-data-lake';\nimport summaryChartData from '../lib/summaryChartData';\nimport { isObjectExcludedFromSummary } from '../lib/summaryChartsUtils';\nimport { comboboxFilterAndLimit, DATE_FORMAT, DATETIME_FORMAT, moment, TZ } from '../lib/utils';\nimport GRAXDatePicker from './GRAXDatePicker';\nimport GRAXSummaryChartsChart from './GRAXSummaryChartsChart';\nimport SLDSSection from './SLDSSection';\n\nconst CustomDataTableCell = ({ children, ...props }) => (\n  <DataTableCell {...props}>\n    <a\n      href={\n        baseUrl +\n        \"/grax-app/grax-data-lake/generateBackupSummary/\" +\n        props.item.spId +\n        \"/\" +\n        encodeURI(props.item.executionUniqueKey) +\n        \"?orgid=\" +\n        orgid\n      }\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </a>\n  </DataTableCell>\n);\nCustomDataTableCell.displayName = DataTableCell.displayName;\n\nconst MomentFormattedCell = ({ children, format = DATE_FORMAT, ...props }) => {\n  const { startTime } = props.item;\n\n  return <DataTableCell {...props}>{moment.utc(startTime).tz(TZ).format(format)}</DataTableCell>;\n};\nMomentFormattedCell.displayName = DataTableCell.displayName;\n\nexport const RECORD_SUMMARIES_VARIANT = \"record_summaries\";\n\nexport default class GRAXSummaryChartsAdvanced extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.chart = React.createRef();\n\n    this.summaryDataResults = [];\n    this.summaryDataSelected = [];\n    this.itemsObjectsByDataRange = [];\n    this.itemsObjectsByDataRangeSelection = [];\n    this.summaryBreakdownDTItems = [];\n    this.summaryBreakdownDTSelection = [];\n    this.summaryDTItems = [];\n    this.summaryDTSelection = [];\n    this.chartOptions = [];\n    this.defaultChartSettings = {\n      width: \"100%\",\n      height: 600,\n      chartArea: { width: \"70%\", left: \"5%\" },\n    };\n\n    this.displayValuesOptions = [\n      { id: \"all\", label: \"Show all\" },\n      { id: \"inserted\", label: \"Only show schedule processes that have at least 1 insert\" },\n      { id: \"updated\", label: \"Only show schedule processes that have at least 1 update\" },\n      { id: \"archived\", label: \"Only show schedule processes that have at least 1 archive\" },\n    ];\n\n    const displayValuesSelection = [this.displayValuesOptions[0]];\n\n    this.state = {\n      isLoading: true,\n      renderCounter: 0,\n\n      chartData: [],\n\n      chartSelection: [],\n      chartInput: \"\",\n      fromDate: props.filterParams.fromDate,\n      toDate: props.filterParams.toDate,\n      _currentOrgRecords: true,\n\n      summaryDTFilters: {\n        showRecords: true,\n        showInserted: true,\n        showUpdated: true,\n        showArchived: true,\n      },\n\n      inputValue: \"Select an option\",\n      selection: [],\n      checked: [],\n\n      displayValuesSelection,\n\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      this.loadSummaries();\n    } else {\n      this.setState({\n        isLoading: false,\n      });\n    }\n  }\n\n  loadSummaries() {\n    let currentChartSelected = this.state.chartSelected;\n      summaryChartData({\n        orgid: this.state._currentOrgRecords ? orgid : null,\n        fromDate: this.state.fromDate,\n        toDate:this.state.toDate,\n        gspid: this.props.filterParams.gspId,\n    }, (success, data) => {\n        if (success){\n            this.summaryDataResults = data\n            this.setState(\n                {\n                  isLoading: false,\n                  chartSelected: currentChartSelected,\n                },\n                () => {\n                  this.loadSummaryDataTable();\n                  this.loadSummaryBreakdownTable();\n                  this.loadObjectDataTable();\n                });\n        } else {\n           this.setState({\n                isLoading: false,\n            });\n        }\n    })\n  }\n\n  getSelectedSummary() {\n    this.summaryBreakdownDTSelection = this.getScheduleProcessBreakdownSelection(\n      this.summaryBreakdownDTSelection\n    );\n\n    const selectedSummaries = this.summaryBreakdownDTSelection;\n    const summaryDataResults = this.summaryDataResults;\n\n    const summaries4chart = [];\n\n    selectedSummaries.forEach((summary) => {\n      summaries4chart.push(summaryDataResults[summary.index]);\n      /*summary.index.forEach(function(index){\n          summaries4chart.push( summaryDataResults[index] );\n        });*/\n    });\n\n    return summaries4chart;\n  }\n\n  loadSummaryDataTable() {\n    const summaryList = this.summaryDataResults;\n    const dtSummaries = [];\n\n    if (summaryList) {\n      const [\n        displayValuesOption = this.displayValuesOptions[0],\n      ] = this.state.displayValuesSelection;\n\n      let i = 0;\n\n      summaryList.forEach((summary) => {\n        const { summaryResults = {} } = summary;\n        const { records = 0, inserted = 0, updated = 0, archived = 0 } = summaryResults;\n\n        if (\n          (displayValuesOption.id === \"archived\" && archived === 0) ||\n          (displayValuesOption.id === \"inserted\" && inserted === 0) ||\n          (displayValuesOption.id === \"updated\" && updated === 0)\n        ) {\n          return;\n        }\n\n        const { spId, spName, executionUniqueKey, CreatedDate } = summary;\n\n        const existIndex = dtSummaries.filter((e) => e.name === spName);\n\n        if (existIndex && existIndex.length > 0) {\n          existIndex[0].index.push(i);\n\n          existIndex[0].records += records;\n          existIndex[0].inserted += inserted;\n          existIndex[0].updated += updated;\n          existIndex[0].archived += archived;\n        } else {\n          const startTime = new Date(summaryResults.startTime);\n\n          dtSummaries.push({\n            name: spName,\n            id: spName,\n            spId,\n            executionUniqueKey,\n            CreatedDate,\n            startTime,\n            records,\n            inserted,\n            updated,\n            archived,\n            index: [i],\n          });\n        }\n        i++;\n      });\n    }\n\n    this.summaryDTItems = dtSummaries;\n\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      this.summaryDTSelection = this.summaryDTItems;\n    }\n  }\n\n  loadSummaryBreakdownTable() {\n    const summaryToShow = this.summaryDTSelection;\n    const summaryDataResults = this.summaryDataResults;\n    const summaryBreakdownDTItems = [];\n\n    if (summaryToShow) {\n      summaryToShow.forEach((dtSummary) => {\n        dtSummary.index.forEach((index) => {\n          let summary = summaryDataResults[index];\n\n          let archived = summary.summaryResults.archived;\n          let records = summary.summaryResults.records;\n          let inserted = summary.summaryResults.inserted;\n          let updated = summary.summaryResults.updated;\n\n          archived = archived ? archived : 0;\n          records = records ? records : 0;\n          inserted = inserted ? inserted : 0;\n          updated = updated ? updated : 0;\n\n          const startTime = new Date(summary.summaryResults.startTime);\n\n          summaryBreakdownDTItems.push({\n            spId: summary.spId,\n            name: summary.spName,\n            Id: summary.Id,\n            id: summary.executionUniqueKey,\n            executionUniqueKey: summary.executionUniqueKey,\n            index: index,\n            CreatedDate: summary.CreatedDate,\n            startTime,\n            records,\n            inserted,\n            updated,\n            archived,\n            objectsList: summary.summaryMap ? Object.keys(summary.summaryMap) : [],\n          });\n        });\n      });\n    }\n\n    this.summaryBreakdownDTItems = summaryBreakdownDTItems;\n\n    this.dataTableRefreshSort(\"DataTable_SummaryBreakdown\", this.summaryBreakdownDTItems, {\n        property: \"startTime\",\n        sortDirection: \"desc\",\n    });\n  }\n\n  loadObjectDataTable(updateState = true) {\n    let summaryToShow = this.getSelectedSummary();\n    let itemsObjectsByDataRange = [];\n\n    if (summaryToShow) {\n      let allSummaries = {};\n\n      summaryToShow.forEach((summaryData) => {\n        var summaryMap = summaryData.summaryMap;\n\n        let smyDate = new Date(summaryData.summaryResults.startTime);\n\n        for (var objName in summaryMap) {\n          if (typeof summaryMap[objName] == \"object\" && !isObjectExcludedFromSummary(objName)) {\n            let archived = summaryMap[objName].archived;\n            let records = summaryMap[objName].records;\n            let inserted = summaryMap[objName].inserted;\n            let updated = summaryMap[objName].updated;\n\n            archived = archived ? archived : 0;\n            records = records ? records : 0;\n            inserted = inserted ? inserted : 0;\n            updated = updated ? updated : 0;\n\n            let _allSumaries = allSummaries[objName];\n\n            if (!_allSumaries) {\n              _allSumaries = {};\n              _allSumaries.name = objName;\n              _allSumaries.id = objName;\n              _allSumaries.archived = 0;\n              _allSumaries.records = 0;\n              _allSumaries.inserted = 0;\n              _allSumaries.updated = 0;\n              _allSumaries.startTimes = [];\n            }\n            _allSumaries.archived += archived ? archived : 0;\n            _allSumaries.records += records ? records : 0;\n            _allSumaries.inserted += inserted ? inserted : 0;\n            _allSumaries.updated += updated ? updated : 0;\n\n            let dateIndex = _allSumaries.startTimes.indexOf(smyDate);\n\n            if (dateIndex < 0) {\n              dateIndex = _allSumaries.startTimes.length;\n\n              _allSumaries.startTimes.push({\n                startTime: smyDate,\n                archived: 0,\n                records: 0,\n                inserted: 0,\n                updated: 0,\n              });\n            }\n\n            let dateData = _allSumaries.startTimes[dateIndex];\n            dateData.archived += archived ? archived : 0;\n            dateData.records += records ? records : 0;\n            dateData.inserted += inserted ? inserted : 0;\n            dateData.updated += updated ? updated : 0;\n\n            allSummaries[objName] = _allSumaries;\n          }\n        }\n      });\n\n      // Top Ten Data\n      for (var objName in allSummaries) {\n        itemsObjectsByDataRange.push(allSummaries[objName]);\n      }\n\n      // itemsObjectsByDataRangeSelection = itemsObjectsByDataRange;\n    }\n\n    this.itemsObjectsByDataRange = itemsObjectsByDataRange;\n\n    this.dataTableRefreshSort(\"DataTable_ObjectsInSummary\", this.itemsObjectsByDataRange, {\n      property: \"name\",\n      sortDirection: \"asc\",\n    });\n    // this.itemsObjectsByDataRangeSelection = itemsObjectsByDataRangeSelection;\n\n    if (updateState) {\n      this.setState(\n        {\n          isLoading: false,\n          renderCounter: this.state.renderCounter + 1,\n        },\n        this.refreshChart\n      );\n    }\n  }\n\n  getItemsObjectsByDataRange() {\n    this.loadObjectDataTable(false);\n\n    return this.itemsObjectsByDataRange;\n  }\n\n  refreshChart() {\n    const chartData = [];\n\n    const summartDataResults = this.summaryDataResults;\n    // const summaryDTSelection = this.summaryDTSelection;\n    const summaryBreakdownDTSelection = this.summaryBreakdownDTSelection;\n    const itemsObjectsByDataRangeSelection = this.itemsObjectsByDataRangeSelection;\n\n    const summaryIds = {};\n    summaryBreakdownDTSelection.forEach((summary) => {\n      summaryIds[summary.Id] = summary.Id;\n    });\n\n    const objNames = {};\n    itemsObjectsByDataRangeSelection.forEach((obj) => {\n      objNames[obj.name] = obj.name;\n    });\n\n    summartDataResults.forEach((summary) => {\n      const tempData = {};\n      if (summaryIds[summary.Id]) {\n        tempData.summaryMap = {};\n        tempData.spName = summary.spName;\n        tempData.summaryResults = {\n          archived: 0,\n          records: 0,\n          inserted: 0,\n          update: 0,\n          startTime: summary.summaryResults.startTime,\n          endTime: summary.summaryResults.endTime,\n        };\n\n        for (let key in summary.summaryMap) {\n          if (objNames[key]) {\n            let summaryMap = summary.summaryMap;\n            tempData.summaryMap[key] = summaryMap[key];\n            tempData.summaryResults.archived = summaryMap[key].archived\n              ? summaryMap[key].archived\n              : 0;\n            tempData.summaryResults.records = summaryMap[key].records ? summaryMap[key].records : 0;\n            tempData.summaryResults.inserted = summaryMap[key].inserted\n              ? summaryMap[key].inserted\n              : 0;\n            tempData.summaryResults.update = summaryMap[key].update ? summaryMap[key].update : 0;\n          }\n        }\n\n        chartData.push(tempData);\n      }\n    });\n\n    this.setState(\n      {\n        isLoading: false,\n        renderCounter: this.state.renderCounter + 1,\n        chartData,\n      },\n      () => {\n        this.chart.current.setDateFilter(this.state.fromDate, this.state.toDate);\n        this.chart.current.drawChart();\n      }\n    );\n  }\n\n  summaryDTHandleChanged(event, data) {\n    /*this.setState( {\n        isLoading: true\n      }, function(){ */\n    this.summaryDTSelection = data.selection;\n\n    this.loadSummaryBreakdownTable();\n    this.summaryBreakdownDTHandleChanged(null, {\n      selection: this.summaryBreakdownDTSelection,\n    });\n    //this.drawChart();\n    //} );\n\n    this.setState({\n      isLoading: false,\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  summaryBreakdownDTHandleChanged(event, data) {\n    this.summaryBreakdownDTSelection = this.getScheduleProcessBreakdownSelection(data.selection);\n    this.loadObjectDataTable();\n    this.itemsObjectsByDataRangeHandleChanged(null, {\n      selection: this.itemsObjectsByDataRangeSelection,\n    });\n    //this.drawChart();\n\n    this.setState({\n      isLoading: false,\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  itemsObjectsByDataRangeHandleChanged(event, data) {\n    /*this.setState({\n        isLoading: true\n      }, function(){*/\n    this.itemsObjectsByDataRangeSelection = this.getObjectsSelection(data.selection);\n\n    this.refreshChart();\n    //this.drawChart();\n    //});\n    this.setState({\n      isLoading: false,\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  dataTableHandleSort(dtName, items, sortColumn, callSortFunction = true) {\n    const sortProperty = sortColumn.property;\n    const sortDirection = sortColumn.sortDirection;\n    const newState = {\n      [dtName + \"Column\"]: sortProperty,\n      [dtName + \"Direction\"]: {\n        [sortProperty]: sortDirection,\n      },\n    };\n\n    if (callSortFunction) {\n      this.dataTableSortFunction(items, sortProperty, sortDirection);\n    }\n\n    this.setState(newState);\n  }\n\n  dataTableRefreshSort(dtName, items, sortColumn) {\n    const sortProperty = this.state[dtName + \"Column\"] || sortColumn.property;\n    const direction = this.state[dtName + \"Direction\"] || {\n      [sortColumn.property]: sortColumn.sortDirection,\n    };\n\n    if (sortProperty != null && direction != null) {\n      const sortDirection = direction[sortProperty] || \"asc\";\n\n      this.dataTableSortFunction(items, sortProperty, sortDirection);\n    }\n  }\n\n  dataTableSortFunction(items, sortProperty, sortDirection) {\n    items.sort((a, b) => {\n      let val = 0;\n\n      if (a[sortProperty] > b[sortProperty]) {\n        val = 1;\n      }\n      if (a[sortProperty] < b[sortProperty]) {\n        val = -1;\n      }\n\n      if (sortDirection === \"desc\") {\n        val *= -1;\n      }\n\n      return val;\n    });\n  }\n\n  getIsDatatableSortedColumn(dtName, sortProperty) {\n    return this.state[dtName + \"Column\"] === sortProperty;\n  }\n\n  formatStartTime(startTime) {\n    return (\n      startTime.getFullYear() +\n      \"-\" +\n      (startTime.getMonth() + 1).toString().padStart(2, \"0\") +\n      \"-\" +\n      startTime.getDate().toString().padStart(2, \"0\") +\n      \" \" +\n      startTime.getHours().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getMinutes().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getSeconds().toString().padStart(2, \"0\")\n    );\n  }\n\n  formatDate(dt) {\n    return dt.getMonth() + 1 + \"/\" + dt.getDate() + \"/\" + dt.getFullYear();\n  }\n\n  cleanFilterTables() {\n    this.summaryBreakdownDTItems = [];\n    this.summaryDTSelection = [];\n    this.summaryBreakdownDTSelection = [];\n    this.itemsObjectsByDataRangeSelection = [];\n    this.itemsObjectsByDataRange = [];\n\n    this.setState({\n      chartData: [],\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  renderAggregatedScheduleProcessSection() {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      return null;\n    }\n\n    const dataTableId = \"DataTable_Summaries\";\n\n    return (\n      <SLDSSection\n        title=\"Step 1: Aggregated GRAX Schedule Process\"\n        className=\"slds-p-top_large\"\n        isCollapsible={true}\n        isOpen={true}\n      >\n        <div className=\"slds-grid slds-wrap\">\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1 slds-p-horizontal_xx-small\">\n            <Combobox\n              events={{\n                onChange: (event, { value }) => {\n                  this.displayValuesInput = value;\n                  this.setState({\n                    displayValuesInput: value,\n                  });\n                },\n                onRequestRemoveSelectedOption: (event, data) => {\n                  this.setState(\n                    {\n                      displayValuesInput: \"\",\n                      displayValuesSelection: data.selection,\n                    },\n                    () => {\n                      this.loadSummaryDataTable();\n                      this.loadSummaryBreakdownTable();\n                      this.loadObjectDataTable();\n                    }\n                  );\n                },\n                onSelect: (event, data) => {\n                  this.setState(\n                    {\n                      displayValuesSelection: data.selection,\n                    },\n                    () => {\n                      this.loadSummaryDataTable();\n                      this.loadSummaryBreakdownTable();\n                      this.loadObjectDataTable();\n                    }\n                  );\n                },\n              }}\n              labels={{\n                label: \"Display Values\",\n                placeholder: \"-- SELECT OPTION --\",\n              }}\n              options={comboboxFilterAndLimit({\n                inputValue: this.state.displayValuesInput,\n                limit: 1000,\n                options: this.displayValuesOptions,\n                selection: this.state.displayValuesSelection,\n              })}\n              selection={this.state.displayValuesSelection}\n              value={this.state.displayValuesInput}\n              variant=\"readonly\"\n            />\n          </div>\n\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1 slds-p-top_small\">\n            <div style={{ height: 300 }}>\n              <DataTable\n                assistiveText={{\n                  actionsHeader: \"actions\",\n                  columnSort: \"sort this column\",\n                  columnSortedAscending: \"asc\",\n                  columnSortedDescending: \"desc\",\n                  selectAllRows: \"all rows\",\n                  selectRow: \"select this row\",\n                }}\n                fixedHeader\n                fixedLayout\n                items={this.summaryDTItems}\n                id={dataTableId}\n                selection={this.summaryDTSelection}\n                selectRows=\"checkbox\"\n                onRowChange={(e, data) => this.summaryDTHandleChanged(e, data)}\n                onSort={(sortColumn) => {\n                  this.dataTableHandleSort(dataTableId, this.summaryDTItems, sortColumn);\n                }}\n              >\n                <DataTableColumn\n                  label=\"GRAX Schedule Process\"\n                  sortable\n                  primaryColumn\n                  property=\"name\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"name\")}\n                />\n\n                <DataTableColumn\n                  label=\"Records\"\n                  sortable\n                  property=\"records\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"records\")}\n                />\n\n                <DataTableColumn\n                  label=\"Inserted\"\n                  sortable\n                  property=\"inserted\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"inserted\")}\n                />\n\n                <DataTableColumn\n                  label=\"Updated\"\n                  sortable\n                  property=\"updated\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"updated\")}\n                />\n\n                <DataTableColumn\n                  label=\"Archived\"\n                  sortable\n                  property=\"archived\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"archived\")}\n                />\n              </DataTable>\n            </div>\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  getScheduleProcessBreakdownSelection(currentStepSelection, data) {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      this.summaryDTSelection = this.summaryDTItems;\n      // this.summaryBreakdownDTSelection = this.getSummaryBreakdownDTItems();\n\n      // return this.summaryBreakdownDTSelection;\n    }\n\n    const parentStepSelection = this.summaryDTSelection;\n    const currentStepItems = this.summaryBreakdownDTItems;\n\n    return currentStepSelection.reduce((accumulator, item) => {\n      const parentItem = parentStepSelection.find((x) => x.name === item.name);\n\n      if (parentItem !== undefined) {\n        return [...accumulator, currentStepItems.find((x) => x.id === item.id)];\n      }\n\n      return accumulator;\n    }, []);\n  }\n\n  getSummaryBreakdownDTItems() {\n    this.loadSummaryBreakdownTable();\n\n    const parentStepSelection = this.summaryDTSelection;\n    const currentStepItems = this.summaryBreakdownDTItems;\n\n    this.summaryBreakdownDTItems = currentStepItems.reduce((accumulator, item) => {\n      const parentItem = parentStepSelection.find((x) => x.name === item.name);\n      const currentItem = accumulator.find((x) => x.executionUniqueKey === item.executionUniqueKey);\n\n      if (parentItem !== undefined && currentItem === undefined) {\n        return [...accumulator, item];\n      }\n\n      return accumulator;\n    }, []);\n\n    return this.summaryBreakdownDTItems;\n  }\n\n  renderScheduleProcessBreakdownSection() {\n    const dataTableId = \"DataTable_SummaryBreakdown\";\n    const summaryBreakdownDTItems = this.getSummaryBreakdownDTItems();\n\n    let sectionTitle = \"Step 2: GRAX Schedule Process Breakdown\";\n\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      sectionTitle = \"Executions\";\n    }\n\n    return (\n      <SLDSSection\n        title={sectionTitle}\n        className=\"slds-p-top_large\"\n        isCollapsible={true}\n        isOpen={true}\n      >\n        <div className=\"slds-grid slds-wrap\">\n          <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n            <div style={{ height: 300 }}>\n              <DataTable\n                assistiveText={{\n                  actionsHeader: \"actions\",\n                  columnSort: \"sort this column\",\n                  columnSortedAscending: \"asc\",\n                  columnSortedDescending: \"desc\",\n                  selectAllRows: \"all rows\",\n                  selectRow: \"select this row\",\n                }}\n                fixedHeader\n                fixedLayout\n                items={summaryBreakdownDTItems}\n                id={dataTableId}\n                selection={this.summaryBreakdownDTSelection}\n                selectRows=\"checkbox\"\n                onRowChange={(e, data) => this.summaryBreakdownDTHandleChanged(e, data)}\n                onSort={(sortColumn) => {\n                  this.dataTableHandleSort(dataTableId, summaryBreakdownDTItems, sortColumn, false);\n                }}\n              >\n                <DataTableColumn\n                  label=\"GRAX Schedule Process\"\n                  sortable\n                  primaryColumn\n                  property=\"name\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"name\")}\n                >\n                  <CustomDataTableCell />\n                </DataTableColumn>\n\n                <DataTableColumn\n                  label=\"Execution Unique Key\"\n                  sortable\n                  property=\"executionUniqueKey\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"executionUniqueKey\")}\n                />\n\n                <DataTableColumn\n                  label=\"Start Time\"\n                  sortable\n                  property=\"startTime\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"startTime\")}\n                >\n                  <MomentFormattedCell format={DATETIME_FORMAT} />\n                </DataTableColumn>\n\n                <DataTableColumn\n                  label=\"Records\"\n                  sortable\n                  property=\"records\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"records\")}\n                />\n\n                <DataTableColumn\n                  label=\"Inserted\"\n                  sortable\n                  property=\"inserted\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"inserted\")}\n                />\n\n                <DataTableColumn\n                  label=\"Updated\"\n                  sortable\n                  property=\"updated\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"updated\")}\n                />\n\n                <DataTableColumn\n                  label=\"Archived\"\n                  sortable\n                  property=\"archived\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"archived\")}\n                />\n              </DataTable>\n            </div>\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  getObjectsSelection(currentStepSelection) {\n    const parentStepSelection = this.summaryBreakdownDTSelection;\n    const currentStepItems = this.itemsObjectsByDataRange;\n\n    return currentStepSelection.reduce((accumulator, item) => {\n      const parentItem = parentStepSelection.find((x) => x.objectsList.indexOf(item.name) !== -1);\n\n      if (parentItem !== undefined) {\n        return [...accumulator, currentStepItems.find((x) => x.id === item.id)];\n      }\n\n      return accumulator;\n    }, []);\n  }\n\n  renderObjectsSection() {\n    const dataTableId = \"DataTable_ObjectsInSummary\";\n    const itemsObjectsByDataRange = this.getItemsObjectsByDataRange();\n\n    let sectionTitle = \"Step 3: Objects\";\n\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      sectionTitle = \"Objects\";\n    }\n\n    return (\n      <SLDSSection\n        title={sectionTitle}\n        className=\"slds-p-top_large\"\n        isCollapsible={true}\n        isOpen={true}\n      >\n        <div className=\"slds-grid slds-wrap\">\n          <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n            <div style={{ height: 300 }}>\n              <DataTable\n                assistiveText={{\n                  actionsHeader: \"actions\",\n                  columnSort: \"sort this column\",\n                  columnSortedAscending: \"asc\",\n                  columnSortedDescending: \"desc\",\n                  selectAllRows: \"all rows\",\n                  selectRow: \"select this row\",\n                }}\n                fixedHeader\n                fixedLayout\n                items={itemsObjectsByDataRange}\n                id={dataTableId}\n                selection={this.itemsObjectsByDataRangeSelection}\n                selectRows=\"checkbox\"\n                onRowChange={(e, data) => this.itemsObjectsByDataRangeHandleChanged(e, data)}\n                onSort={(sortColumn) => {\n                  this.dataTableHandleSort(dataTableId, itemsObjectsByDataRange, sortColumn, false);\n                }}\n              >\n                <DataTableColumn\n                  label=\"Object Name\"\n                  sortable\n                  primaryColumn\n                  property=\"name\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"name\")}\n                />\n\n                <DataTableColumn\n                  label=\"Records\"\n                  sortable\n                  property=\"records\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"records\")}\n                />\n\n                <DataTableColumn\n                  label=\"Inserted\"\n                  sortable\n                  property=\"inserted\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"inserted\")}\n                />\n\n                <DataTableColumn\n                  label=\"Updated\"\n                  sortable\n                  property=\"updated\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"updated\")}\n                />\n\n                <DataTableColumn\n                  label=\"Archived\"\n                  sortable\n                  property=\"archived\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"archived\")}\n                />\n              </DataTable>\n            </div>\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  renderFilterCriteriaSection() {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      return null;\n    }\n\n    return (\n      <SLDSSection title=\"Filter Criteria\">\n        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n          <dl className=\"slds-list_stacked\">\n            <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n              <label className=\"slds-form-element__label\">From</label>\n            </dt>\n            <dd className=\"slds-item_detail\">\n              <GRAXDatePicker\n                onChange={(event, data) => {\n                  this.setState({\n                    fromDate: data.date,\n                  });\n                }}\n                value={this.state.fromDate}\n              />\n            </dd>\n            <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n              <label className=\"slds-form-element__label\">To</label>\n            </dt>\n            <dd className=\"slds-item_detail\">\n              <GRAXDatePicker\n                onChange={(event, data) => {\n                  this.setState({\n                    toDate: data.date,\n                  });\n                }}\n                value={this.state.toDate}\n              />\n            </dd>\n          </dl>\n        </div>\n        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n          <Checkbox\n            className=\"inline-block\"\n            defaultChecked={!this.state._currentOrgRecords}\n            onChange={(e) => {\n              this.setState({\n                _currentOrgRecords: !e.target.checked,\n              });\n            }}\n            assistiveText={{\n              label: \"Show records from all environments?\",\n            }}\n            variant=\"toggle\"\n            labels={{\n              toggleDisabled: \"Current Environment\",\n              toggleEnabled: \"All connected SF environments\",\n            }}\n          />\n          <div className=\"slds-float_right\">\n            <Button\n              label=\"Retrieve\"\n              variant=\"brand\"\n              onClick={() => {\n                this.loadSummaries();\n              }}\n            />\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  renderFilterSections() {\n    if (!this.itemsObjectsByDataRange) return null;\n\n    return (\n      <div>\n        {this.summaryDataResults.length > 0 ? this.renderAggregatedScheduleProcessSection() : null}\n        {this.summaryDTSelection.length > 0 ? this.renderScheduleProcessBreakdownSection() : null}\n        {this.summaryBreakdownDTSelection.length > 0 ? this.renderObjectsSection() : null}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ minHeight: 2000 }}>\n        {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n\n        {this.renderFilterCriteriaSection()}\n        {this.renderFilterSections()}\n\n        <GRAXSummaryChartsChart\n          ref={this.chart}\n          summaryData={this.state.chartData}\n          renderCounter={this.state.renderCounter}\n        />\n      </div>\n    );\n  }\n}\n\nGRAXSummaryChartsAdvanced.propTypes = {\n  variant: PropTypes.string,\n  filterParams: PropTypes.shape({\n    fromDate: PropTypes.instanceOf(Date),\n    toDate: PropTypes.instanceOf(Date),\n    gspId: PropTypes.string,\n  }),\n};\n\nGRAXSummaryChartsAdvanced.defaultProps = {\n  variant: \"normal\",\n  filterParams: {\n    fromDate: new Date(),\n    toDate: new Date(),\n    gspId: null,\n  },\n};\n"],"sourceRoot":""}