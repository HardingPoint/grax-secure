{"version":3,"sources":["components/GRAXEnvSetting.jsx","components/GRAXCloudGlobalConfigurationsForm.jsx","settings/GRAXCloudGlobalConfigurationsFormSettings.js","components/SLDSSection.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"names":["GRAXEnvSettingCombobox","lazy","GRAXEnvSettingSwitch","GRAXEnvSettingInput","GRAXEnvSetting","props","getComponentToRender","label","type","defaultValue","key","id","setting","onChange","v","onChangeTrigger","helpTextTooltip","getHelpTextTooltip","Date","now","toString","state","inputValue","selection","selectedOption","name","_","startCase","camelCase","value","this","onBlur","getLabelFromName","helpText","align","content","fallback","size","variant","getLabel","getType","getDefaultValue","React","PureComponent","GRAXCloudGlobalConfigurationsForm","onGlobalConfigurationChange","globalConfigurations","set","setState","triggerConfigurationChange","isLoading","error","configurations","bind","console","log","cloneDeep","reduce","options","c","configurationName","dataSources","map","ds","organizationId","subTitle","className","title","GLOBAL_ENVIRONMENT_DEFAULTS","originalSetting","i","get","comboboxType","getOptions","getOrganizationsOptions","BULK_RESTORE_SETTINGS","Component","module","exports","placeholder","multiple","MISC_ADMIN_SETTINGS","SLDSSection","isOpen","undefined","isCollapsible","handleToggle","e","onToggle","preventDefault","join","onClick","assistiveText","category","children","_toConsumableArray","arr","Array","isArray","arr2","length","iter","Symbol","iterator","Object","prototype","call","from","TypeError","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"mappings":"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","file":"static/js/17.f9de6d97.chunk.js","sourcesContent":["import React, { Suspense, lazy } from \"react\";\nimport _ from \"lodash\";\nimport { Tooltip, Spinner } from \"@salesforce/design-system-react\";\n\nconst GRAXEnvSettingCombobox = lazy(() => import(\"./GRAXEnvSettingCombobox\"));\nconst GRAXEnvSettingSwitch = lazy(() => import(\"./GRAXEnvSettingSwitch\"));\nconst GRAXEnvSettingInput = lazy(() => import(\"./GRAXEnvSettingInput\"));\n\nexport default class GRAXEnvSetting extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    if (this.props.id) {\n      this.id = this.props.id;\n    } else {\n      this.id = Date.now().toString();\n    }\n\n    this.state = {\n      inputValue: \"\",\n      selection: null,\n      selectedOption: null\n    };\n  }\n\n  getLabelFromName(name) {\n    return _.startCase(_.camelCase(name));\n  }\n\n  onChangeTrigger(value) {\n    const onChange = this.props.onChange || this.props.onBlur || (() => {});\n\n    onChange(value);\n  }\n\n  getType() {\n    return this.props.setting.type || \"text\";\n  }\n\n  getLabel() {\n    if (this.props.setting.label) {\n      return this.props.setting.label;\n    }\n\n    return this.getLabelFromName(this.props.setting.name);\n  }\n\n  getDefaultValue() {\n    return this.props.setting.defaultValue || this.props.defaultValue;\n  }\n\n  getHelpTextTooltip() {\n    if (this.props.setting.helpText) {\n      return (\n        <Tooltip\n          key={this.id + \"-helptext\"}\n          id={this.id + \"-helptext\"}\n          align=\"top left\"\n          content={this.props.setting.helpText}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  getComponentToRender = ({ label, type, defaultValue }) => {\n    if (type === \"combobox\") {\n      return (\n        <GRAXEnvSettingCombobox\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    if (type === \"boolean\") {\n      return (\n        <GRAXEnvSettingSwitch\n          key={this.id}\n          id={this.id}\n          label={label}\n          setting={this.props.setting}\n          helpTextTooltip={this.getHelpTextTooltip()}\n          onChange={v => this.onChangeTrigger(v)}\n          defaultValue={defaultValue}\n        />\n      );\n    }\n\n    return (\n      <GRAXEnvSettingInput\n        key={this.id}\n        id={this.id}\n        type={type}\n        label={label}\n        setting={this.props.setting}\n        helpTextTooltip={this.getHelpTextTooltip()}\n        onChange={v => this.onChangeTrigger(v)}\n        defaultValue={defaultValue}\n      />\n    );\n  };\n\n  render() {\n    if (this.props.setting == null || this.props.id == null) return null;\n\n    return (\n      <Suspense fallback={<Spinner size=\"small\" variant=\"brand\" />}>\n        {this.getComponentToRender({\n          label: this.getLabel(),\n          type: this.getType(),\n          defaultValue: this.getDefaultValue()\n        })}\n      </Suspense>\n    );\n  }\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { Spinner } from \"@salesforce/design-system-react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport GRAXEnvSetting from \"./GRAXEnvSetting\";\n\nimport {\n  GLOBAL_ENVIRONMENT_DEFAULTS,\n  BULK_RESTORE_SETTINGS\n} from \"../settings/GRAXCloudGlobalConfigurationsFormSettings\";\n\nexport default class GRAXCloudGlobalConfigurationsForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n\n      configurations: {}\n    };\n\n    this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props.configurations);\n\n    this.setState({\n      configurations: _.cloneDeep(this.props.configurations),\n      globalConfigurations: _.cloneDeep(this.props.globalConfigurations),\n      isLoading: false\n    });\n  }\n\n  triggerConfigurationChange() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state.configurations, this.state.globalConfigurations);\n    }\n  }\n\n  getOrganizationsOptions() {\n    if (this.state.configurations == null) {\n      return [];\n    }\n\n    return _.reduce(\n      this.state.configurations,\n      (options, c, configurationName) => {\n        return [\n          ...options,\n          ...c.dataSources.map(ds => {\n            return {\n              id: ds.organizationId,\n              label: ds.organizationId,\n              subTitle: ds.name + \" - \" + configurationName\n            };\n          })\n        ];\n      },\n      []\n    );\n  }\n\n  onGlobalConfigurationChange = setting => {\n    return value => {\n      let globalConfigurations = this.state.globalConfigurations;\n\n      _.set(globalConfigurations, [setting.id], value);\n\n      this.setState({\n        globalConfigurations\n      });\n\n      this.triggerConfigurationChange();\n    };\n  };\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <div className=\"slds-p-around_medium\">\n        <SLDSSection title=\"Global Configurations\">\n          {_.map(GLOBAL_ENVIRONMENT_DEFAULTS, (originalSetting, i) => {\n            const globalConfigurations = this.state.globalConfigurations;\n            let setting = { ...originalSetting };\n\n            const key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            let defaultValue = _.get(globalConfigurations, [setting.id]);\n\n            if (setting.type === \"combobox\" && setting.comboboxType === \"org\") {\n              setting.getOptions = () => this.getOrganizationsOptions();\n            }\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                defaultValue={defaultValue}\n                onBlur={this.onGlobalConfigurationChange(setting)}\n              />\n            );\n          })}\n        </SLDSSection>\n\n        <SLDSSection title=\"Bulk Restore\" className=\"slds-p-top_large\">\n          {_.map(BULK_RESTORE_SETTINGS, (originalSetting, i) => {\n            const globalConfigurations = this.state.globalConfigurations;\n            let setting = { ...originalSetting };\n\n            const key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            let defaultValue = _.get(globalConfigurations, [setting.id]);\n\n            if (setting.type === \"combobox\" && setting.comboboxType === \"org\") {\n              setting.getOptions = () => this.getOrganizationsOptions();\n            }\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                defaultValue={defaultValue}\n                onBlur={this.onGlobalConfigurationChange(setting)}\n              />\n            );\n          })}\n        </SLDSSection>\n\n        {/*<SLDSSection title=\"Misc. Admin Settings\" className=\"slds-p-top_large\">\n          {_.map(MISC_ADMIN_SETTINGS, (setting, i) => {\n            var key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                onBlur={e => {\n                  console.log(e);\n                }}\n              />\n            );\n          })}\n        </SLDSSection>*/}\n      </div>\n    );\n  }\n}\n","const SELECT_ORGANIZATION = \"Select Organization\";\n\nmodule.exports = {\n  GLOBAL_ENVIRONMENT_DEFAULTS: [\n    {\n      id: \"asyncAttachmentProcessorOrganizationIds\",\n      name: \"GRAX_ENV_ASYNC_ATTACHMENT_PROCESSOR_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"asyncBulkLoadOrganizationIds\",\n      name: \"GRAX_ENV_ASYNC_BULK_LOAD_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"bulkRestoreDestinationOrganizationId\",\n      name: \"GRAX_ENV_BULK_RESTORE_DESTINATION_ORGANIZATION_ID\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"inline-listbox\",\n      multiple: false\n    },\n    {\n      id: \"bulkRestoreSourceOrganizationId\",\n      name: \"GRAX_ENV_BULK_RESTORE_SOURCE_ORGANIZATION_ID\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"inline-listbox\",\n      multiple: false\n    },\n    {\n      id: \"metadataBackupOrganizationIds\",\n      name: \"GRAX_ENV_METADATA_BACKUP_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"odataOrganizationIds\",\n      name: \"GRAX_ENV_ODATA_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: true\n    },\n    {\n      id: \"syncSalesforceEinsteinOrganizationIds\",\n      name: \"GRAX_ENV_SYNC_SALESFORCE_SOURCE_ORGANIZATION_IDS\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      variant: \"base\",\n      multiple: false\n    }\n  ],\n  BULK_RESTORE_SETTINGS: [\n    {\n      id: \"bulkRestoreSourceOrganizationId\",\n      name: \"SOURCE_SF\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      multiple: false\n    },\n    {\n      id: \"bulkRestoreDestinationOrganizationId\",\n      name: \"DESTINATION_SF\",\n      type: \"combobox\",\n      comboboxType: \"org\",\n      placeholder: SELECT_ORGANIZATION,\n      multiple: false\n    }\n    /*{\n    name: \"GRAX_ESMAXBULK\",\n    type: \"number\",\n    helpText: \"Enter the maximum number of records to be processed per Bulk API Batch.\"\n  },\n  {\n    name: \"GRAX_OBJECT_TYPES_TO_RESTORE\",\n    type: \"text\",\n    helpText: \"Set the API Name of Object(s) to restore, separated by comma.\"\n  },\n  {\n    name: \"GRAX_MAX_RESTORE\",\n    type: \"number\",\n    helpText: \"# of records per batch to be restored\"\n  }*/\n  ],\n  MISC_ADMIN_SETTINGS: [\n    /*{\n    name: \"ASYNCH_TIMER\",\n    // label: 'Aaynch Timer',\n    type: \"number\",\n    // defaultValue: 5,\n    helpText:\n      \"Frequency in which the Asyn job, which processes Attachments and Content Documents, will run (in minutes).\"\n  },\n  {\n    name: \"DATABASE_URL\",\n    type: \"text\"\n  },\n  {\n    name: \"DEBUGGING\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_APITOKEN\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_APIURL\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_APIVERSION\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_GATEWAYTOKEN\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_LICENSETOKEN\",\n    type: \"text\"\n  },\n  {\n    name: \"ENGAGEMENTGRAPH_URL\",\n    type: \"text\"\n  },\n  {\n    name: \"GRAX_AUDITTRAIL_OFF\",\n    type: \"boolean\"\n  },\n  {\n    name: \"GRAX_S3_OFF\",\n    type: \"boolean\"\n  }*/\n  ]\n};\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}"],"sourceRoot":""}