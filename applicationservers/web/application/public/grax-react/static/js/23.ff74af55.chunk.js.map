{"version":3,"sources":["components/GRAXFieldsCombobox.jsx"],"names":["selectedDataIndex","cookieSubfix","GRAXFieldsCombobox","props","_this","Object","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","options","inputValue","selection","id","label","type","isLoaded","error","getMappedFieldList","bind","_Users_brianna_LA_consulting_harding_point_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","_","map","item","event","selectedFieldList","onLoad","onChange","setCookie","JSON","stringify","_this2","_isMounted","dataIndex","$","ajax","url","baseUrl","GetParams","action","data","success","val","key","setState","selectedFieldsCookie","getCookie","startsWith","selectedFields","parse","length","sortBy","reduce","_selection","indexOf","push","onLoadHandler","xhr","status","err","console","toString","_this3","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","Fragment","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_9__","classNameMenu","events","_ref","value","onRequestRemoveSelectedOption","onChangeHandler","onSelect","onRequestClose","labels","placeholder","comboboxFilterAndLimit","limit","required","multiple","style","position","height","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_8__","size","variant","React","Component"],"mappings":"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","file":"static/js/23.ff74af55.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}