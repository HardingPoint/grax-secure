{"version":3,"sources":["components/GRAXCloudConfigurationsDataTable.jsx"],"names":["GRAXCloudConfigurationForm","lazy","GRAXCloudSFLoginForm","GRAXCloudBulkRestoreForm","GRAXCloudGlobalConfigurationsForm","NEW_SETTING","NEW_BULK_PROCESS","GRAX_ICON","src","className","style","width","height","alignSelf","alt","SF_ICON","assistiveText","icon","category","name","size","variant","fill","ACTIONS","GRAXCloudTree","maxWidth","minWidth","undefined","this","props","label","aria-labelledby","role","children","React","PureComponent","GRAXCloudTreeNode","state","isOpen","isCollapsible","isEditable","toggleHandler","bind","clickHandler","editHandler","length","setState","isLoaded","onToggle","isToggleOnClick","onClick","onEdit","Fragment","id","key","aria-level","level","aria-expanded","tabIndex","content","iconCategory","iconName","iconSize","title","GRAXCloudConfigurationsDataTable","isLoading","error","globalConfigurations","configurations","modalSize","isModalOpen","isConfigurationFormOpened","isSFLoginFormOpened","isBulkRestoreFormOpened","selectedConfigurationName","configurationName","configuration","selectedDataSourceName","dataSource","selectedBulkProcesseName","bulkProcessName","bulkProcess","configurationCollapsibleOpen","collapsiblesOpenByConfiguration","isGlobalConfigurationsFormOpened","configurationsCopy","globalConfigurationsCopy","actionHandler","action","params","generateConfigurationStructure","_","cloneDeep","dataSourceIndex","trim","alert","console","log","dataSources","push","remove","onChange","isEmpty","Object","keys","flexGrow","fallback","dialogLabel","footer","dismissOnClickOutside","onRequestClose","align","ariaHideApp","onLogin","JSON","stringify","heading","empty","map","kebabCase","i","uniqueId","e","Component"],"mappings":"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","file":"static/js/28.da40b7f4.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { Spinner, Card, CardEmpty, Button, Modal, Icon} from '@salesforce/design-system-react';\n\nimport _ from 'lodash';\n\nconst GRAXCloudConfigurationForm = lazy(() => import('./GRAXCloudConfigurationForm'));\nconst GRAXCloudSFLoginForm = lazy(() => import('./GRAXCloudSFLoginForm'));\nconst GRAXCloudBulkRestoreForm = lazy(() => import('./GRAXCloudBulkRestoreForm'));\nconst GRAXCloudGlobalConfigurationsForm = lazy(() => import('./GRAXCloudGlobalConfigurationsForm'));\n\n\nconst NEW_SETTING = 'New Configuration';\nconst NEW_DATASOURCE = 'New Data Source';\n\nconst NEW_BULK_PROCESS = 'New Bulk Process';\n\n/*const GRAX_ICON = (\n    <img src=\"./assets/icons/custom/grax-x.svg\" className=\"slds-m-right_x-small\" style={{\n        width: '14px',\n        height: '14px',\n        alignSelf: 'center'\n    }} alt=\"GRAX\" />\n);*/\n\nconst GRAX_ICON = (\n    <img src=\"./grax-x.svg\" className=\"slds-m-right_x-small\" style={{\n        width: '14px',\n        height: '14px',\n        alignSelf: 'center'\n    }} alt=\"\" />\n);\n\nconst SF_ICON = (\n    <Icon\n        assistiveText={{ icon: 'Expand' }}\n        category=\"utility\"\n        name=\"salesforce1\"\n        size=\"xx-small\"\n        variant=\"icon\"\n        className=\"slds-m-right_x-small\"\n        style={{\n            fill: '#009EDB'\n        }}\n    />\n);\n\nconst MAGIC_ICON = (\n    <Icon\n        assistiveText={{ icon: 'Expand' }}\n        category=\"utility\"\n        name=\"magicwand\"\n        size=\"xx-small\"\n        variant=\"icon\"\n        className=\"slds-m-right_x-small\"\n    />\n);\n\nconst ACTIONS = {\n    // CLOSE_MODAL: null,\n\n    ADD_CONFIGURATION: 0,\n    EDIT_CONFIGURATION: 1,\n    DELETE_CONFIGURATION: 2,\n    \n    ADD_SF_ENVIRONMENT: 3,\n    EDIT_SF_ENVIRONMENT: 4,\n    DELETE_SF_ENVIRONMENT: 5,\n\n    SAVE_CONFIGURATION: 6,\n    SAVE_SF_ENVIRONMENT: 7,\n\n    CLOSE_CONFIGURATION: 8,\n    CLOSE_SF_ENVIRONMENT: 9,\n\n    CLOSE_MODAL: 10,\n\n    OPEN_CONFIGURATION: 11,\n    OPEN_SF_ENVIRONMENT: 12,\n\n    ON_CHANGE_CONFIGURATIONS_TRIGGER: 13,\n\n    ADD_BULK_PROCESS: 14,\n    EDIT_BULK_PROCESS: 15,\n    DELETE_BULK_PROCESS: 16,\n\n    OPEN_BULK_PROCESS: 17,\n    CLOSE_BULK_PROCESS: 18,\n\n    EDIT_GLOBAL_CONFIGURATIONS: 19,\n    SAVE_GLOBAL_CONFIGURATIONS: 20,\n    CLOSE_GLOBAL_CONFIGURATIONS: 21\n};\n\n\nclass GRAXCloudTree extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"slds-tree_container\" style={{\n                maxWidth: 'none',\n                minWidth: 'none'\n            }}>\n                {this.props.label !== undefined ? (\n                    <h4 className=\"slds-tree__group-header\">{this.props.label}</h4>\n                ) : null}\n                <ul aria-labelledby=\"treeheading\" className=\"slds-tree\" role=\"tree\">\n                    {this.props.children}\n                </ul>\n            </div>\n        );\n    }\n}\n\nclass GRAXCloudTreeNode extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false,\n            isCollapsible: false,\n\n            isEditable: true\n        }\n\n        this.toggleHandler = this.toggleHandler.bind(this);\n        this.clickHandler = this.clickHandler.bind(this);\n        this.editHandler = this.editHandler.bind(this);\n    }\n\n    componentDidMount() {\n        var isOpen = false;\n        var isCollapsible = false;\n        var isEditable = false;\n\n        if(this.props.isOpen) {\n            isOpen = this.props.isOpen;\n        }\n\n        if(this.props.children !== undefined && this.props.children.length > 0) {\n            isCollapsible = true;\n        }\n\n        if(this.props.isCollapsible) {\n            isCollapsible = this.props.isCollapsible;\n        }\n\n        if(this.props.isEditable) {\n            isEditable = this.props.isEditable;\n        }\n\n        this.setState({\n            isOpen: isOpen,\n            isLoaded: isOpen,\n            isCollapsible: isCollapsible,\n            isEditable: isEditable\n        });\n    }\n\n    toggleHandler() {\n        var isOpen = !this.state.isOpen;\n        var isLoaded = this.state.isLoaded || isOpen;\n\n        this.setState({\n            isOpen: isOpen,\n            isLoaded: isLoaded\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n    }\n\n    clickHandler() {\n        if(this.props.isToggleOnClick === true) {\n            this.toggleHandler();\n        }\n\n        if(this.props.onClick) {\n            this.props.onClick();\n        }\n    }\n\n    editHandler() {\n        if(this.props.onEdit) {\n            this.props.onEdit();\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <li id={this.props.id} key={this.props.id} aria-level={this.props.level} aria-expanded={this.state.isOpen} role=\"treeitem\" tabIndex=\"0\">\n                    <div className={'slds-tree__item' + (this.props.content !== undefined ? ' slds-tree__item--no-hover' : '')}>\n                        <Button\n                            assistiveText={{ icon: 'Expand' }}\n                            iconCategory=\"utility\"\n                            iconName=\"chevronright\"\n                            iconSize=\"small\"\n                            className={'slds-m-right_x-small' + (!this.state.isCollapsible ? ' slds-is-disabled' : '')}\n                            variant=\"icon\"\n                            onClick={this.toggleHandler}\n                        />\n                        {this.props.icon !== undefined ? (\n                            <div className=\"slds-m-right_x-small slds-tree__item--icon\">\n                                {this.props.icon}\n                            </div>\n                        ) : null}\n                        {this.props.content !== undefined ? this.props.content : (\n                            <span className=\"slds-has-flexi-truncate\" onClick={this.clickHandler}>\n                                <span className=\"slds-tree__item-label slds-truncate\" title={this.props.label}>\n                                    {this.props.label}\n                                </span>\n                            </span>\n                        )}\n                        {this.state.isEditable ? <button className=\"slds-button slds-button_icon slds-m-right_x-small\" title=\"Edit\" onClick={this.editHandler}>\n                            <Icon\n                                assistiveText={{ icon: 'Expand' }}\n                                category=\"utility\"\n                                name=\"edit\"\n                                size=\"xx-small\"\n                                variant=\"icon\"\n                            />\n                        </button> : null}\n                    </div>\n\n                    {this.state.isLoaded ? <ul role=\"group\">\n                        {this.props.children}\n                    </ul> : null}\n                </li>\n            </React.Fragment>\n        );\n    }\n}\n\n\n\nexport default class GRAXCloudConfigurationsDataTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            error: null,\n            globalConfigurations: {},\n            configurations: {},\n\n            modalSize: 'large',\n            isModalOpen: false,\n            isConfigurationFormOpened: false,\n            \n            isSFLoginFormOpened: false,\n\n            isBulkRestoreFormOpened: false,\n\n            selectedConfigurationName: null,\n            configurationName: NEW_SETTING,\n            configuration: null,\n\n            selectedDataSourceName: null,\n            dataSource: null,\n\n            selectedBulkProcesseName: null,\n            bulkProcessName: NEW_BULK_PROCESS,\n            bulkProcess: null,\n\n            configurationCollapsibleOpen: null,\n            collapsiblesOpenByConfiguration: {},\n\n            isGlobalConfigurationsFormOpened: false,\n            configurationsCopy: null,\n            globalConfigurationsCopy: null\n        };\n\n        this.actionHandler = this.actionHandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            globalConfigurations: this.props.globalConfigurations,\n            configurations: this.props.configurations,\n            isLoading: false\n        });\n    }\n\n    generateConfigurationStructure() {\n        return {\n            \"dataSources\": [\n                /*{\n                    \"userName\": null,\n                    \"password\": null,\n                    \"token\": null,\n                    \"url\": null,\n                    \"organizationId\": null,\n                    \"provider\": \"salesforce\",\n                    \"name\": null\n                }*/\n            ],\n            \"elastic\": [\n                /*{\n                    \"provider\": null,\n                    \"name\": null,\n                    \"url\": null\n                }*/\n            ],\n            \"storage\": [\n                /*{\n                    \"provider\": null,\n                    \"name\": null,\n                    \"accessKey\": null,\n                    \"secretAccessKey\": null,\n                    \"bucket\": null,\n                    \"region\": null\n                }*/\n            ]\n        };\n    }\n\n    actionHandler(action, params) {\n        var configurations = this.state.configurations;\n\n        if(action === ACTIONS.OPEN_CONFIGURATION) {\n            this.setState({\n                isModalOpen: true,\n                modalSize: 'medium',\n                isConfigurationFormOpened: true\n            });\n        }\n\n        if(action === ACTIONS.ADD_CONFIGURATION) {\n            this.actionHandler(ACTIONS.OPEN_CONFIGURATION);\n\n            this.setState({\n                selectedConfigurationName: null,\n                configurationName: NEW_SETTING,\n                configuration: this.generateConfigurationStructure()\n            });\n        }\n\n        if(action === ACTIONS.EDIT_CONFIGURATION) {\n            this.actionHandler(ACTIONS.OPEN_CONFIGURATION);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                configurationName: params.configurationName,\n                configuration: _.cloneDeep(params.configuration)\n            });\n        }\n\n        if(action === ACTIONS.OPEN_SF_ENVIRONMENT) {\n            this.setState({\n                isModalOpen: true,\n                modalSize: 'medium',\n                isSFLoginFormOpened: true\n            });\n        }\n\n        if(action === ACTIONS.OPEN_BULK_PROCESS) {\n            this.setState({\n                isModalOpen: true,\n                modalSize: 'medium',\n                isBulkRestoreFormOpened: true\n            });\n        }\n\n        if(action === ACTIONS.EDIT_SF_ENVIRONMENT) {\n            this.actionHandler(ACTIONS.OPEN_SF_ENVIRONMENT);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                configuration: params.configuration,\n                dataSource: params.dataSource,\n                dataSourceIndex: params.dataSourceIndex\n            });\n        }\n\n        if(action === ACTIONS.EDIT_BULK_PROCESS) {\n            this.actionHandler(ACTIONS.OPEN_BULK_PROCESS);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                bulkProcess: params.bulkProcess\n            });\n        }\n\n        if(action === ACTIONS.ADD_SF_ENVIRONMENT) {\n            this.actionHandler(ACTIONS.OPEN_SF_ENVIRONMENT);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                configuration: params.configuration,\n                dataSourceIndex: params.dataSourceIndex\n            });\n        }\n\n        if(action === ACTIONS.ADD_BULK_PROCESS) {\n            this.actionHandler(ACTIONS.OPEN_BULK_PROCESS);\n\n            this.setState({\n                configuration: params.configuration,\n                selectedBulkProcesseName: params.configurationName,\n                bulkProcess: {\n                    name: NEW_BULK_PROCESS\n                }\n            });\n        }\n\n        if(action === ACTIONS.SAVE_CONFIGURATION) {\n            if(this.state.configurationName != null && this.state.configurationName.trim() === '') {\n                alert('The Name cannot be blank.');\n\n                return;\n            }\n\n            if(configurations[this.state.configurationName] && this.state.configurationName !== this.state.selectedConfigurationName){\n                alert('Name in use...');\n\n                return;\n            }\n\n            if(this.state.selectedConfigurationName != null) {\n                delete configurations[this.state.selectedConfigurationName];\n            }\n\n            configurations[this.state.configurationName] = this.state.configuration;\n\n            this.setState({\n                action: action,\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_CONFIGURATION);\n        }\n\n        if(action === ACTIONS.DELETE_CONFIGURATION) {\n            delete configurations[this.state.selectedConfigurationName];\n\n            this.setState({\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_CONFIGURATION);\n        }\n\n        if(action === ACTIONS.CLOSE_CONFIGURATION) {\n            this.setState({\n                isModalOpen: false,\n                isConfigurationFormOpened: false,\n                selectedConfigurationName: null,\n                configurationName: null\n            });\n        }\n\n        if(action === ACTIONS.SAVE_SF_ENVIRONMENT) {\n            const dataSourceIndex = params.dataSourceIndex;\n\n            const dataSource = params.dataSource;\n\n            console.log('dataSourceIndex: ', dataSourceIndex);\n            console.log('params..selectedConfigurationName: ', params.selectedConfigurationName);\n            console.log('configurations[params.selectedConfigurationName]: ', configurations[params.selectedConfigurationName]);\n            console.log('dataSource: ', dataSource);\n\n            if(!dataSource) {\n                alert('Invalid dataSource');\n\n                return;\n            }\n\n            if(dataSource != null && dataSource.name.trim() === '') {\n                alert('The Name cannot be blank.');\n\n                return;\n            }\n\n\n            if(dataSourceIndex != null) {\n                configurations[params.selectedConfigurationName].dataSources[dataSourceIndex] = dataSource;\n            } else {\n                configurations[params.selectedConfigurationName].dataSources.push(dataSource);\n            }\n\n            this.setState({\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_SF_ENVIRONMENT);\n        }\n\n        if(action === ACTIONS.DELETE_SF_ENVIRONMENT) {\n            _.remove(configurations[this.state.selectedConfigurationName].dataSources, (dataSource) => {\n                return dataSource.name === this.state.dataSource.name;\n            });\n\n            this.setState({\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_SF_ENVIRONMENT);\n        }\n\n        if(action === ACTIONS.CLOSE_SF_ENVIRONMENT) {\n            this.setState({\n                isModalOpen: false,\n                isSFLoginFormOpened: false,\n                selectedConfigurationName: null,\n                dataSource: null\n            });\n        }\n\n        if(action === ACTIONS.CLOSE_BULK_PROCESS) {\n            this.setState({\n                isModalOpen: false,\n                isBulkRestoreFormOpened: false,\n                selectedBulkProcesseName: null,\n                bulkProcess: null\n            });\n        }\n\n\n        if(action === ACTIONS.EDIT_GLOBAL_CONFIGURATIONS) {\n            this.setState({\n                isModalOpen: true,\n                isGlobalConfigurationsFormOpened: true\n            });\n        }\n\n\n        if(action === ACTIONS.CLOSE_GLOBAL_CONFIGURATIONS) {\n            this.setState({\n                isModalOpen: false,\n                isGlobalConfigurationsFormOpened: false\n            });\n        }\n\n        if(action === ACTIONS.SAVE_GLOBAL_CONFIGURATIONS) {\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_GLOBAL_CONFIGURATIONS);\n        }\n\n\n        if(action === ACTIONS.CLOSE_MODAL) {\n            this.actionHandler(ACTIONS.CLOSE_CONFIGURATION);\n            this.actionHandler(ACTIONS.CLOSE_SF_ENVIRONMENT);\n            this.actionHandler(ACTIONS.CLOSE_BULK_PROCESS);\n            this.actionHandler(ACTIONS.CLOSE_GLOBAL_CONFIGURATIONS);\n        }\n\n        if(action === ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER) {\n            if(this.props.onChange) {\n                this.props.onChange(this.state.globalConfigurations, this.state.configurations);\n            }\n        }\n\n        this.setState({\n            action: action\n        });\n\n        console.log('this.state.configurations: ', this.state.configurations);\n        console.log('this.state.globalConfigurations: ', this.state.globalConfigurations);\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        const isEmpty = this.state.configurations == null || Object.keys(this.state.configurations).length === 0;\n\n        return (\n            <div className=\"slds-grid slds-grid_vertical\" style={{flexGrow: 1}}>\n                {this.state.isModalOpen ? (\n                    <Suspense fallback={<Spinner size=\"large\" variant=\"brand\" />}>\n                        <Modal\n                            assistiveText={{ dialogLabel: 'Configuration Form' }}\n                            isOpen={this.state.isModalOpen}\n                            footer={[\n                                (this.state.isConfigurationFormOpened ? (\n                                    <React.Fragment key={'modal-action-' + this.state.action}>\n                                        <Button key=\"configuration-save\" label=\"Save\" variant=\"brand\" onClick={() => {\n                                            this.actionHandler(ACTIONS.SAVE_CONFIGURATION);\n                                        }} />\n\n                                        {this.state.action === ACTIONS.EDIT_CONFIGURATION ? (\n                                            <Button variant=\"destructive\" label=\"Delete\" onClick={() => {\n                                                this.actionHandler(ACTIONS.DELETE_CONFIGURATION);\n                                            }} />\n                                        ) : null}\n                                    </React.Fragment>\n                                ) : null),\n\n                                (this.state.isSFLoginFormOpened ? (\n                                    <React.Fragment key={'modal-action-' + this.state.action}>\n                                        <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                            this.actionHandler(ACTIONS.SAVE_SF_ENVIRONMENT, {\n                                                dataSourceIndex: this.state.dataSourceIndex,\n                                                dataSource: this.state.dataSource,\n                                                configuration: this.state.configuration,\n                                                selectedConfigurationName: this.state.selectedConfigurationName\n                                            });\n                                        }} />\n\n                                        {this.state.action === ACTIONS.EDIT_SF_ENVIRONMENT ? (\n                                            <Button variant=\"destructive\" label=\"Delete\" onClick={() => {\n                                                this.actionHandler(ACTIONS.DELETE_SF_ENVIRONMENT);\n                                            }} />\n                                        ) : null}\n                                    </React.Fragment>\n                                ) : null),\n\n                                (this.state.isBulkRestoreFormOpened ? (\n                                    <React.Fragment key={'modal-action-' + this.state.action}>\n                                        <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                            this.actionHandler(ACTIONS.CLOSE_BULK_PROCESS);\n                                        }} />\n\n                                        {this.state.action === ACTIONS.EDIT_SF_ENVIRONMENT ? (\n                                            <Button variant=\"destructive\" label=\"Delete\" onClick={() => {\n                                                this.actionHandler(ACTIONS.CLOSE_BULK_PROCESS);\n                                            }} />\n                                        ) : null}\n                                    </React.Fragment>\n                                ) : null),\n\n                                (this.state.isGlobalConfigurationsFormOpened ? (\n                                    <React.Fragment key={'modal-action-' + this.state.action}>\n                                        <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                            this.actionHandler(ACTIONS.SAVE_GLOBAL_CONFIGURATIONS);\n                                        }} />\n                                    </React.Fragment>\n                                ) : null),\n\n                                <Button key=\"configuration-cancel\" label=\"Cancel\" onClick={() => {\n                                    this.actionHandler(ACTIONS.CLOSE_MODAL);\n                                }} />\n                            ]}\n                            dismissOnClickOutside={false}\n                            onRequestClose={() => {\n                                this.actionHandler(ACTIONS.CLOSE_MODAL);\n                            }}\n                            align=\"top\"\n                            size={this.state.modalSize}\n                            ariaHideApp={false}\n                        >\n                            {this.state.isConfigurationFormOpened ? (\n                                <GRAXCloudConfigurationForm title={this.state.configurationName} configuration={this.state.configuration} onChange={(title, configuration) => {\n                                    console.log(title, configuration);\n                                    \n                                    this.setState({\n                                        configurationName: title,\n                                        configuration: configuration\n                                    });\n                                }} />\n                            ) : null}\n\n                            {this.state.isSFLoginFormOpened ? (\n                                <GRAXCloudSFLoginForm dataSource={this.state.dataSource} configuration={this.state.configuration} dataSourceIndex={this.state.dataSourceIndex} onChange={(configuration, dataSource) => {\n                                    this.setState({\n                                        dataSource: dataSource\n                                    });\n                                }} onLogin={(configuration, dataSource) => {\n                                    console.log(JSON.stringify(dataSource));\n                                }} />\n                            ) : null},\n\n                            {this.state.isBulkRestoreFormOpened ? (\n                                <GRAXCloudBulkRestoreForm globalConfigurations={this.state.globalConfigurations} configuration={this.state.configuration} onChange={(name, globalConfigurations, bulkProcess) => {\n                                    console.log(name);\n                                    console.log(globalConfigurations);\n                                    console.log(JSON.stringify(bulkProcess));\n                                }} onLogin={(bulkProcess) => {\n                                    console.log(JSON.stringify(bulkProcess));\n                                }} />\n                            ) : null}\n\n                            {this.state.isGlobalConfigurationsFormOpened ? (\n                                <GRAXCloudGlobalConfigurationsForm globalConfigurations={this.state.globalConfigurations} configurations={this.state.configurations} onChange={(configurations, globalConfigurations) => {\n                                    console.log(configurations, globalConfigurations);\n                                    \n                                    this.setState({\n                                        configurations,\n                                        globalConfigurations\n                                    });\n                                }} />\n                            ) : null}\n                        </Modal>\n                    </Suspense>\n                ) : null}\n\n                <Card\n                    id=\"grax-cloud-configurations\"\n                    heading=\"GRAX Configurations\"\n                    empty={\n                        isEmpty ? (\n                            <CardEmpty heading=\"No GRAX Configurations\">\n                                <Button label=\"Add Configuration\" onClick={() => {\n                                    this.actionHandler(ACTIONS.ADD_CONFIGURATION);\n                                }} />\n                            </CardEmpty>\n                        ) : null\n                    }\n                    style={{flexGrow: 1}}\n                >\n                    <div id=\"grax-cloud-configurations-accordion\" className=\"slds-p-around_medium\">\n                        <GRAXCloudTree>\n                            <GRAXCloudTreeNode\n                                isCollapsible={false}\n                                id=\"grax-cloud-global-configurations\"\n                                key=\"grax-cloud-global-configurations\"\n                                label=\"Global Configurations\"\n                                level={1}\n                                isEditable={true}\n                                icon={GRAX_ICON}\n                                onEdit={() => {\n                                    this.actionHandler(ACTIONS.EDIT_GLOBAL_CONFIGURATIONS, {\n                                        configurations: this.state.configurations\n                                    });\n                                }}\n                            />\n\n                            {_.map(this.state.configurations, (configuration, configurationName) => {\n                                // var key = _.uniqueId('grax-cloud-configurations-accordion-');\n                                var key = 'grax-cloud-configurations-accordion-' + _.kebabCase(configurationName);\n\n                                return (\n                                    <GRAXCloudTreeNode\n                                        isOpen={this.state.configurationCollapsibleOpen === configurationName}\n                                        isCollapsible={true}\n                                        id={key}\n                                        key={key}\n                                        onToggle={(isOpen) => {\n                                            this.setState({\n                                                configurationCollapsibleOpen: isOpen ? configurationName : null\n                                            });\n                                        }}\n                                        isToggleOnClick={true}\n                                        label={configurationName}\n                                        level={1}\n                                        isEditable={true}\n                                        icon={GRAX_ICON}\n                                        onEdit={() => {\n                                            this.actionHandler(ACTIONS.EDIT_CONFIGURATION, {\n                                                configurationName: configurationName,\n                                                configuration: configuration\n                                            });\n                                        }}\n                                    >\n                                        <GRAXCloudTreeNode\n                                            id={'grax-cloud-configurations-sfconnection-accordion-item'}\n                                            key={'grax-cloud-configurations-sfconnection-accordion-item'}\n                                            label={'SFDC Configurations'}\n                                            level={2}\n                                            isEditable={false}\n                                            //icon={SF_ICON}\n\n                                            isCollapsible={true}\n                                            isOpen={false}\n                                            isToggleOnClick={true}\n                                        >\n\n                                            {_.map(configuration.dataSources, (dataSource, i) => {\n                                                if(dataSource == null) return null;\n\n                                                var key = _.uniqueId('grax-cloud-configurations-accordion-item');\n                                                \n                                                return (\n                                                    <GRAXCloudTreeNode\n                                                        id={key}\n                                                        key={key}\n                                                        label={dataSource.name}\n                                                        level={3}\n                                                        isEditable={true}\n                                                        icon={SF_ICON}\n                                                        onEdit={() => {\n                                                            this.actionHandler(ACTIONS.EDIT_SF_ENVIRONMENT, {\n                                                                configurationName: configurationName,\n                                                                configuration: configuration,\n                                                                dataSourceIndex: i,\n                                                                dataSource: dataSource\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            })}\n\n                                            <GRAXCloudTreeNode\n                                                content={\n                                                    <Button\n                                                        label=\"Add SFDC Configuration\"\n                                                        onClick={(e) => {\n                                                            this.actionHandler(ACTIONS.ADD_SF_ENVIRONMENT, {\n                                                                configurationName: configurationName,\n                                                                configuration: configuration,\n                                                                dataSourceIndex: configuration.dataSources.length\n                                                            });\n                                                        }}\n                                                    />\n                                                }\n                                                level={3}\n                                            />\n\n                                        </GRAXCloudTreeNode>\n\n\n\n\n\n\n                                        {/*<GRAXCloudTreeNode\n                                            id={'grax-cloud-configurations-bulkrestoreconnections-accordion-item'}\n                                            key={'grax-cloud-configurations-bulkrestoreconnections-accordion-item'}\n                                            label={'Bulk Restore Connections'}\n                                            level={2}\n                                            isEditable={false}\n                                            //icon={SF_ICON}\n\n                                            isCollapsible={true}\n                                            isOpen={false}\n                                            isToggleOnClick={true}\n                                        >\n\n                                            {_.map(configuration.bulkProcesses, (bulkProcess, i) => {\n                                                var key = _.uniqueId('grax-cloud-configurations-bulkrestore-accordion-item');\n                                                \n                                                return (\n                                                    <GRAXCloudTreeNode\n                                                        id={key}\n                                                        key={key}\n                                                        label={bulkProcess.name}\n                                                        level={3}\n                                                        isEditable={true}\n                                                        icon={MAGIC_ICON}\n                                                        onEdit={() => {\n                                                            this.actionHandler(ACTIONS.EDIT_BULK_PROCESS, {\n                                                                configuration: configuration,\n                                                                configurationName: configurationName,\n                                                                bulkProcess: bulkProcess\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            })}\n\n                                            <GRAXCloudTreeNode\n                                                content={\n                                                    <Button\n                                                        label=\"Add Bulk Restore Connection\"\n                                                        onClick={(e) => {\n                                                            this.actionHandler(ACTIONS.ADD_BULK_PROCESS, {\n                                                                configuration: configuration,\n                                                                configurationName: configurationName\n                                                            });\n                                                        }}\n                                                    />\n                                                }\n                                                level={3}\n                                            />\n\n                                            </GRAXCloudTreeNode>*/}\n\n                                        \n                                    </GRAXCloudTreeNode>\n                                )\n                            })}\n\n                            <GRAXCloudTreeNode\n                                content={\n                                    <Button\n                                        label=\"Add GRAX Configuration\"\n                                        onClick={() => {\n                                            this.actionHandler(ACTIONS.ADD_CONFIGURATION);\n                                        }}\n                                    />\n                                }\n                                level={1}\n                            />\n\n                        </GRAXCloudTree>\n                    </div>\n                </Card>\n            </div>\n        )\n    }\n}"],"sourceRoot":""}