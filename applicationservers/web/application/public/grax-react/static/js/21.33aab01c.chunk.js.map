{"version":3,"sources":["../../../../.tmp-es/components/combobox/filter.js","../../../../../.tmp-es/components/icon/input-icon/index.jsx","../../../../../.tmp-es/components/input/private/inner-input.jsx","components/GRAXEnvSettingCombobox.jsx","../../../.tmp-es/utilities/object.js","../../../../../.tmp-es/components/tooltip/private/field-level-help-tooltip.jsx"],"names":["inputValue","limit","options","selection","inputValueRegExp","RegExp","escapeRegExp","searchTermFound","option","isSeparator","notAlreadySelected","sel","InputIcon","props","category","iconPosition","name","path","onClick","variant","rest","variants","combobox","className","aria-hidden","classNames","base","isFunction","iconCategory","iconName","iconPath","PropTypes","propTypes","assistiveText","spinner","string","autoComplete","containerClassName","containerProps","disabled","fixedTextLeft","fixedTextRight","hasSpinner","iconLeft","iconRight","id","inlineHelpText","inputRef","isStatic","label","onBlur","onChange","onFocus","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onSelect","onSubmit","placeholder","minLength","minValue","maxLength","maxValue","readOnly","required","role","step","style","tabIndex","type","value","defaultValue","defaultProps","InnerInput","ariaProps","getAriaProps","min","max","ref","isInput","size","GRAXEnvSettingCombobox","getSelectionIds","isMultiple","_","compact","map","v","length","getOptions","setting","multiple","state","getSelection","selectedOption","this","console","log","reduce","results","o","indexOf","push","key","events","e","setState","onRequestRemoveSelectedOption","data","labels","getPlaceholder","comboboxFilterAndLimit","getVariant","React","PureComponent","removeUndefined","obj","newObj","Object","triggerLearnMoreIcon","fieldLevelHelpTooltip","isRequired","triggerClassName","triggerStyle","position","FieldLevelHelpTooltip","objectHelpers"],"mappings":"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","file":"static/js/21.33aab01c.chunk.js","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport escapeRegExp from 'lodash.escaperegexp';\n\n/**\n * SLDS recommends auto-complete/search inputs menus have a limit of 10 items.\n */\nconst filter = ({ inputValue, limit = 10, options, selection }) => {\n\tconst inputValueRegExp = new RegExp(escapeRegExp(inputValue), 'ig');\n\t// eslint-disable-next-line fp/no-mutating-methods\n\treturn options\n\t\t.filter((option) => {\n\t\t\tconst searchTermFound = option.label\n\t\t\t\t? option.label.match(inputValueRegExp)\n\t\t\t\t: false;\n\t\t\tconst isSeparator = option.type === 'separator';\n\t\t\tconst notAlreadySelected = !selection.some((sel) => sel.id === option.id);\n\n\t\t\treturn (\n\t\t\t\t(!inputValue || isSeparator || searchTermFound) && notAlreadySelected\n\t\t\t);\n\t\t})\n\t\t.splice(0, limit);\n};\nexport default filter;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from 'classnames';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ## Children\nimport UtilityIcon from '../../utilities/utility-icon';\nimport Button from '../../button';\n\n// ## Constants\nimport { ICON_INPUT } from '../../../utilities/constants';\n\n/**\n * A wrapper for icons that will be rendered inside of an Input\n *\n * If the `onClick` function prop is provided, the `design-system-react/components/button` component is used.\n * If not, the icon will be an instance of `design-system-react/components/utilities/utility-icon`.\n * Checkout out the appropriate component to see what props can be passed along via the `{...props}` rest operator\n */\nconst InputIcon = (props) => {\n\tconst {\n\t\tcategory,\n\t\ticonPosition,\n\t\tname,\n\t\tpath,\n\t\tonClick,\n\t\tvariant,\n\t\t...rest\n\t} = props;\n\n\t// need to pass click event up on SVG\n\n\tconst variants = {\n\t\tcombobox: (\n\t\t\t<span className=\"slds-icon_container slds-input__icon slds-input__icon_right\">\n\t\t\t\t<UtilityIcon\n\t\t\t\t\taria-hidden\n\t\t\t\t\tcategory={category}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-icon slds-icon_x-small slds-icon-text-default'\n\t\t\t\t\t)}\n\t\t\t\t\tname={name}\n\t\t\t\t\tpath={path}\n\t\t\t\t\t{...rest}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t),\n\t\tbase: (\n\t\t\t<UtilityIcon\n\t\t\t\taria-hidden\n\t\t\t\tcategory={category}\n\t\t\t\tclassName={classNames('slds-input__icon slds-icon-text-default', {\n\t\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t\t})}\n\t\t\t\tname={name}\n\t\t\t\tpath={path}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t),\n\t};\n\n\treturn isFunction(onClick) ? (\n\t\t<Button\n\t\t\tclassName={classNames('slds-input__icon', {\n\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t})}\n\t\t\ticonCategory={category}\n\t\t\ticonName={name}\n\t\t\ticonPath={path}\n\t\t\tonClick={onClick}\n\t\t\tvariant=\"icon\"\n\t\t\t{...rest}\n\t\t/>\n\t) : (\n\t\tvariants[variant]\n\t);\n};\n\nInputIcon.displayName = ICON_INPUT;\n\nInputIcon.propTypes = {\n\t/**\n\t * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n\t */\n\tcategory: PropTypes.string,\n\t/**\n\t * This is only needed if an input contains two icons, the Input component handles this prop for you.\n\t */\n\ticonPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings.\n\t */\n\tpath: PropTypes.string,\n\t/**\n\t * This event fires when the icon is clicked.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Changes styles of the InputIcon.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'combobox']),\n};\n\nInputIcon.defaultProps = {\n\tcategory: 'utility',\n\tvariant: 'base',\n};\n\nexport default InputIcon;\n","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable jsx-a11y/aria-activedescendant-has-tabindex */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport Spinner from '../../../components/spinner';\n\nimport getAriaProps from '../../../utilities/get-aria-props';\n\nconst COUNTER = 'counter';\n\nconst propTypes = {\n\t'aria-activedescendant': PropTypes.string,\n\t'aria-autocomplete': PropTypes.string,\n\t/**\n\t * An HTML ID that is shared with ARIA-supported devices with the\n\t * `aria-controls` attribute in order to relate the input with\n\t * another region of the page. An example would be a select box\n\t * that shows or hides a panel.\n\t */\n\t'aria-controls': PropTypes.string,\n\t'aria-describedby': PropTypes.string,\n\t'aria-expanded': PropTypes.bool,\n\t'aria-haspopup': PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n\t'aria-labelledby': PropTypes.string,\n\t/**\n\t * An HTML ID that is shared with ARIA-supported devices with the\n\t * `aria-controls` attribute in order to relate the input with\n\t * another region of the page. An example would be a search field\n\t * that shows search results.\n\t */\n\t'aria-owns': PropTypes.string,\n\t'aria-required': PropTypes.bool,\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `spinner`: Assistive text on the spinner.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tspinner: PropTypes.string,\n\t}),\n\t/**\n\t * Disabled brower's autocomplete when \"off\" is used.\n\t */\n\tautoComplete: PropTypes.string,\n\t/**\n\t * Class names to be added to the `input` element.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Class names to be added to the outer container `div` of the input.\n\t */\n\tcontainerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Props to be added to the outer container `div` of the input (excluding `containerClassName`).\n\t */\n\tcontainerProps: PropTypes.object,\n\t/**\n\t * Disables the input and prevents editing the contents.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Displays text or node to the left of the input. This follows the fixed text input UX pattern.\n\t */\n\tfixedTextLeft: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * Displays text or node to the right of the input. This follows the fixed text input UX pattern.\n\t */\n\tfixedTextRight: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * If true, loading spinner appears inside input on right hand side.\n\t */\n\thasSpinner: PropTypes.bool,\n\t/**\n\t * Left aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n\t */\n\ticonLeft: PropTypes.node,\n\t/**\n\t * Right aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n\t */\n\ticonRight: PropTypes.node,\n\t/**\n\t * Every input must have a unique ID in order to support keyboard navigation and ARIA support.\n\t */\n\tid: PropTypes.string.isRequired,\n\t/**\n\t * Displays help text under the input.\n\t */\n\tinlineHelpText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />\n\t */\n\tinputRef: PropTypes.func,\n\t/**\n\t * Displays the value of the input statically. This follows the static input UX pattern.\n\t */\n\tisStatic: PropTypes.bool,\n\t/**\n\t * This label appears above the input.\n\t */\n\tlabel: PropTypes.string,\n\tonBlur: PropTypes.func,\n\t/**\n\t * This callback fires when the input changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * This event fires when the input is clicked.\n\t */\n\tonClick: PropTypes.func,\n\tonFocus: PropTypes.func,\n\tonInput: PropTypes.func,\n\tonInvalid: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tonSelect: PropTypes.func,\n\tonSubmit: PropTypes.func,\n\t/**\n\t * Text that will appear in an empty input.\n\t */\n\tplaceholder: PropTypes.string,\n\tminLength: PropTypes.string,\n\t/**\n\t * Specifies minimum accepted value for an input of type \"number\"\n\t */\n\tminValue: PropTypes.number,\n\tmaxLength: PropTypes.string,\n\t/**\n\t * Specifies maximum accepted value for an input of type \"number\"\n\t */\n\tmaxValue: PropTypes.number,\n\t/**\n\t * Name of the submitted form parameter.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Specifies `readOnly` for `input` node.\n\t */\n\treadOnly: PropTypes.bool,\n\t/**\n\t * Highlights the input as a required field (does not perform any validation).\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * `role` to be added to `input` node\n\t */\n\trole: PropTypes.string,\n\t/**\n\t * Determines the step size upon increment or decrement. Can be set to decimal values.\n\t */\n\tstep: PropTypes.number,\n\t/**\n\t * Style object to be added to `input` node\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * Specifies `tabIndex` for `input` node\n\t */\n\ttabIndex: PropTypes.string,\n\t/**\n\t * The `<Input>` element includes support for all HTML5 types.\n\t */\n\ttype: PropTypes.oneOf([\n\t\t'text',\n\t\t'password',\n\t\t'datetime',\n\t\t'datetime-local',\n\t\t'date',\n\t\t'month',\n\t\t'time',\n\t\t'week',\n\t\t'number',\n\t\t'email',\n\t\t'url',\n\t\t'search',\n\t\t'tel',\n\t\t'color',\n\t]),\n\t/**\n\t * The input is a controlled component, and will always display this value.\n\t */\n\tvalue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\t/**\n\t * Which UX pattern of input? The default is `base` while other option is `counter`\n\t */\n\tvariant: PropTypes.oneOf(['base', COUNTER]),\n\t/**\n\t * This is the initial value of an uncontrolled form element and is present only to provide\n\t * compatibility with hybrid framework applications that are not entirely React. It should only\n\t * be used in an application without centralized state (Redux, Flux). \"Controlled components\"\n\t * with centralized state is highly recommended.\n\t * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n\t */\n\tdefaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tspinner: 'Loading ...',\n\t},\n\ttype: 'text',\n};\n\n/*\n * This component was created to allow the DIV wrapped input to be used within other components such as combobox. This components API is not public.\n */\nconst InnerInput = (props) => {\n\tconst ariaProps = getAriaProps(props);\n\tariaProps['aria-describedby'] = props.hasSpinner\n\t\t? `loading-status-icon ${props['aria-describedby']}`\n\t\t: props['aria-describedby'];\n\n\tconst {\n\t\tclassName: containerClassName,\n\t\t...containerProps\n\t} = props.containerProps;\n\n\tconst assistiveText = {\n\t\t...defaultProps.assistiveText,\n\t\t...props.assistiveText,\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames(containerClassName, {\n\t\t\t\t'slds-input-has-icon':\n\t\t\t\t\tprops.variant !== COUNTER && (props.iconLeft || props.iconRight),\n\t\t\t\t'slds-input-has-icon_left': props.iconLeft && !props.iconRight,\n\t\t\t\t'slds-input-has-icon_right': !props.iconLeft && props.iconRight,\n\t\t\t\t'slds-input-has-icon_left-right':\n\t\t\t\t\tprops.variant !== COUNTER && props.iconLeft && props.iconRight,\n\t\t\t\t'slds-input-has-fixed-addon':\n\t\t\t\t\tprops.fixedTextLeft || props.fixedTextRight,\n\t\t\t\t'slds-has-divider_bottom': props.isStatic,\n\t\t\t})}\n\t\t\t{...containerProps}\n\t\t>\n\t\t\t{props.iconLeft && props.iconLeft}\n\t\t\t{props.fixedTextLeft && (\n\t\t\t\t<span className=\"slds-form-element__addon\">{props.fixedTextLeft}</span>\n\t\t\t)}\n\n\t\t\t{!props.isStatic && (\n\t\t\t\t<input\n\t\t\t\t\tautoComplete={props.autoComplete}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-input',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'slds-text-align_left':\n\t\t\t\t\t\t\t\tprops.variant === COUNTER && props.readOnly,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprops.className\n\t\t\t\t\t)}\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tid={props.id}\n\t\t\t\t\tmin={props.minValue}\n\t\t\t\t\tminLength={props.minLength}\n\t\t\t\t\tmax={props.maxValue}\n\t\t\t\t\tmaxLength={props.maxLength}\n\t\t\t\t\tname={props.name}\n\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\tonChange={props.onChange}\n\t\t\t\t\tonClick={props.onClick}\n\t\t\t\t\tonFocus={props.onFocus}\n\t\t\t\t\tonInput={props.onInput}\n\t\t\t\t\tonInvalid={props.onInvalid}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tonSelect={props.onSelect}\n\t\t\t\t\tonSubmit={props.onSubmit}\n\t\t\t\t\tplaceholder={props.placeholder}\n\t\t\t\t\treadOnly={props.readOnly}\n\t\t\t\t\tref={props.inputRef}\n\t\t\t\t\trequired={props.required}\n\t\t\t\t\trole={props.role}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tstyle={props.style}\n\t\t\t\t\ttabIndex={props.tabIndex}\n\t\t\t\t\ttype={props.type}\n\t\t\t\t\t{...ariaProps}\n\t\t\t\t\t/* A form element should not have both value and defaultValue props. */\n\t\t\t\t\t{...(props.value !== undefined\n\t\t\t\t\t\t? { value: props.value }\n\t\t\t\t\t\t: { defaultValue: props.defaultValue })}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{props.hasSpinner ? (\n\t\t\t\t<div className=\"slds-input__icon-group slds-input__icon-group_right\">\n\t\t\t\t\t<Spinner\n\t\t\t\t\t\tassistiveText={{ label: assistiveText.spinner }}\n\t\t\t\t\t\tid=\"loading-status-icon\"\n\t\t\t\t\t\tisInput\n\t\t\t\t\t\tsize=\"x-small\"\n\t\t\t\t\t\tvariant=\"brand\"\n\t\t\t\t\t/>\n\t\t\t\t\t{props.iconRight && props.iconRight}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\tprops.iconRight && props.iconRight\n\t\t\t)}\n\n\t\t\t{props.fixedTextRight && (\n\t\t\t\t<span className=\"slds-form-element__addon\">{props.fixedTextRight}</span>\n\t\t\t)}\n\n\t\t\t{/* eslint-disable jsx-a11y/no-static-element-interactions */}\n\t\t\t{props.isStatic && (\n\t\t\t\t<span\n\t\t\t\t\tclassName={classNames('slds-form-element__static', 'slds-grid', {\n\t\t\t\t\t\t'slds-grid_align-spread': props.variant !== COUNTER,\n\t\t\t\t\t})}\n\t\t\t\t\tonClick={props.onClick}\n\t\t\t\t>\n\t\t\t\t\t{props.value}\n\t\t\t\t\t{props.inlineEditTrigger}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t\t{/* eslint-enable jsx-a11y/no-static-element-interactions */}\n\n\t\t\t{props.inlineHelpText && (\n\t\t\t\t<div className=\"slds-form-element__help\">{props.inlineHelpText}</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nInnerInput.displayName = 'SLDSInnerInput';\nInnerInput.propTypes = propTypes;\nInnerInput.defaultProps = defaultProps;\n\nexport default InnerInput;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { Combobox, comboboxFilterAndLimit } from \"@salesforce/design-system-react\";\n\nexport default class GRAXEnvSettingCombobox extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.options = this.getOptions();\n    this.isMultiple = !!this.props.setting.multiple;\n    this.state = {\n      inputValue: \"\",\n      selection: this.getSelection(),\n      selectedOption: null\n    };\n  }\n\n  getOptions() {\n    return this.props.setting.getOptions != null\n      ? this.props.setting.getOptions()\n      : this.props.setting.options || [];\n  }\n\n  getSelection() {\n    if (this.props.getSelection != null) {\n      return _.compact(this.props.setting.getSelection());\n    }\n\n    let selection = this.props.defaultValue;\n\n    if (selection == null) {\n      return [];\n    }\n\n    const options = this.options;\n\n    if (this.props.variant === \"inline-listbox\") {\n      selection = [selection];\n    }\n\n    console.log(\"selection: \", selection);\n\n    return _.compact(options.reduce((results, o) => {\n      if (selection.indexOf(o.id) !== -1) {\n        results.push(o);\n      }\n\n      return results;\n    }, []));\n  }\n\n  getPlaceholder() {\n    if (this.props.setting.placeholder) {\n      return this.props.setting.placeholder;\n    }\n\n    return \"Search\";\n  }\n\n  getVariant() {\n    if (this.props.setting.variant) {\n      return this.props.setting.variant;\n    }\n\n    return this.isMultiple ? \"base\" : \"inline-listbox\";\n  }\n\n  getSelectionIds = selection => {\n    if (!this.isMultiple) {\n      return selection.length > 0 ? selection[0].id : null;\n    }\n\n    return _.compact(selection.map(v => v.id));\n  };\n\n  render() {\n    return (\n      <Combobox\n        key={this.props.id}\n        id={this.props.id}\n        events={{\n          onChange: (e, { value }) => {\n            this.setState({ inputValue: value });\n          },\n          onRequestRemoveSelectedOption: (e, data) => {\n            this.setState({\n              inputValue: \"\",\n              selection: data.selection\n            });\n\n            this.props.onChange(this.getSelectionIds(data.selection), data.selection);\n          },\n          onSubmit: () => {},\n          onSelect: (e, data) => {\n            this.setState({\n              inputValue: \"\",\n              selection: data.selection\n            });\n\n            this.props.onChange(this.getSelectionIds(data.selection), data.selection);\n          }\n        }}\n        labels={{\n          label: this.props.label,\n          placeholder: this.getPlaceholder()\n        }}\n        options={comboboxFilterAndLimit({\n          inputValue: this.state.inputValue,\n          options: this.options,\n          selection: this.state.selection\n        })}\n        selection={this.state.selection}\n        value={this.state.inputValue}\n        variant={this.getVariant()}\n        multiple={this.isMultiple}\n      />\n    );\n  }\n}\n","/*\n * Remove keys with undefined values. This is useful \n * for merging object props like `assistiveText` and `labels` \n * and keeping default prop values.\n */\n\nconst removeUndefined = (obj) => {\n\tconst newObj = {};\n\tObject.keys(obj).forEach((prop) => {\n\t\tif (typeof obj[prop] !== 'undefined') {\n\t\t\tnewObj[prop] = obj[prop];\n\t\t}\n\t});\n\treturn newObj;\n};\n\nconst helpers = { removeUndefined };\n\nexport default helpers;\n","/*\n * Field Level Help Tooltip for input labels\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tooltip from '../index';\nimport objectHelpers from '../../../utilities/object';\n\nconst propTypes = {\n\t/*\n\t * Assistive Text object from parent component such as Input, Combobox, etc.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttriggerLearnMoreIcon: PropTypes.string,\n\t}),\n\t/*\n\t * Tooltip from external prop\n\t */\n\tfieldLevelHelpTooltip: PropTypes.node.isRequired,\n};\n\nconst defaultProps = {\n\ttriggerClassName: 'slds-form-element__icon',\n\t// This allows `position: absolute` Tooltips to align properly.\n\t// If not present, tooltip will always be below the info icon // instead of above it.\n\ttriggerStyle: { position: 'static' },\n\tvariant: 'learnMore',\n};\n\nconst FieldLevelHelpTooltip = ({ fieldLevelHelpTooltip, assistiveText = {} }) =>\n\tfieldLevelHelpTooltip ? (\n\t\t<Tooltip\n\t\t\t{...{\n\t\t\t\t// internal default props\n\t\t\t\t...defaultProps,\n\t\t\t\t// props from external developer\n\t\t\t\t...fieldLevelHelpTooltip.props,\n\t\t\t\t// allow backwards compatibility with Input's\n\t\t\t\t// assistiveText.fieldLevelHelpButton\n\t\t\t\t// `Input` used to have an `assistiveText.fieldLevelHelpButton`\n\t\t\t\t// prop and that prop needs to override the default Tooltip\n\t\t\t\t// \"Help\" string.\n\t\t\t\tassistiveText: {\n\t\t\t\t\t...fieldLevelHelpTooltip.props.assistiveText,\n\t\t\t\t\t...objectHelpers.removeUndefined(assistiveText),\n\t\t\t\t},\n\t\t\t}}\n\t\t/>\n\t) : null;\n\nFieldLevelHelpTooltip.propTypes = propTypes;\nFieldLevelHelpTooltip.displayName = 'FieldLevelHelpTooltip';\n\nexport default FieldLevelHelpTooltip;\n"],"sourceRoot":""}