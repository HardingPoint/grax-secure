{"version":3,"sources":["lib/grax-data-lake.js","components/SLDSSection.jsx","components/GRAXDatePicker.jsx","public/js/jquery.sldsTree.js","lib/summaryChartsUtils.js","components/GRAXSummaryChartsChart.jsx","components/GRAXSummaryChartsAdvanced.jsx"],"names":["baseUrl","token","window","__grax__","_csrf","orgid","pageParams","userid","GetParams","params","undefined","action","$","param","ajaxSetup","beforeSend","xhr","settings","method","setRequestHeader","authorization","type","test","this","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","console","error","status","showError","statusText","responseText","SLDSSection","props","isOpen","isCollapsible","state","handleToggle","bind","e","onToggle","setState","prevState","preventDefault","id","key","title","helpText","className","children","titleElement","join","onClick","assistiveText","label","category","name","size","React","Component","GRAXDatePicker","useState","isValidDate","setIsValidDate","formatter","datePickerFormatter","parser","datePickerParser","onChange","event","data","formattedDate","moment","date","isValid","svgns","fn","sldsTree","options","extend","items","childs","attrs","root","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","item","onDiv","$div","append","onButton","$button","onFinish","$root","getTreeItemContent","level","attr","disabled","toggleClass","icon","document","createElementNS","setAttribute","class","icon_use","setAttributeNS","path","appendChild","on","i","getTreeItemButton","length","getTreeItem","getTree","each","html","jQuery","objectsToExcludeFromSummary","module","exports","isObjectExcludedFromSummary","objectName","indexOf","toLowerCase","GRAXSummaryChartsChart","fromDate","Date","toDate","setHours","setMinutes","chartOptions","call","chartObjectTopTen","chartObjectByDate","chartSummaryTopTen","chartSummaryByDate","chartAttributeProgressByDate","isLoading","summaryData","defaultChartSettings","width","height","chartArea","left","showChartAttr","showRecords","showInserted","showUpdated","showArchived","chartFromDate","chartToDate","showAttributeFilter","hideChartOptions","chartSelection","google","charts","setOnLoadCallback","drawChart","sortedNames","otherSum","objIndexes","chartDataIndexes","chartData","counter","nameSet","Set","forEach","summary","summaryMap","add","Array","sort","a","b","obj","smyIndex","n","records","tempN","push","top10BackedUpObjects","rec","visualization","arrayToDataTable","JSON","parse","stringify","sliceVisibilityThreshold","PieChart","DataTable","addColumn","fromDateAxis","toDateAxis","objectsTotalValue","startTime","smyDate","smyDateFormated","formatStartTime","getHours","fill","v","f","addRows","interpolateNulls","pointSize","explorer","hAxis","format","viewWindow","min","max","viewWindowMode","vAxis","LineChart","summaryIndexes","spName","summaryResults","top10BackedUpSummaries","sumRes","attIndexes","attrNames","attrName","summarysTotalValue","selectedSummaries","containsSelectedObjects","setSeconds","getFullYear","getMonth","toString","padStart","getDate","getMinutes","getSeconds","isStacked","ColumnChart","ret","isBlank","chartEl","draw","selection","chartInput","dt","variant","events","value","onRequestRemoveSelectedOption","onSelect","selectChart","onChartSelect","labels","placeholder","comboboxFilterAndLimit","inputValue","limit","defaultChecked","isChecked","toggleDisabled","toggleEnabled","ref","nextProps","CustomDataTableCell","href","spId","encodeURI","executionUniqueKey","target","rel","displayName","DataTableCell","RECORD_SUMMARIES_VARIANT","GRAXSummaryChartsAdvanced","chart","createRef","summaryDataResults","summaryDataSelected","itemsObjectsByDataRange","itemsObjectsByDataRangeSelection","summaryBreakdownDTItems","summaryBreakdownDTSelection","summaryDTItems","summaryDTSelection","displayValuesOptions","displayValuesSelection","renderCounter","filterParams","_currentOrgRecords","summaryDTFilters","checked","loadSummaries","currentChartSelected","chartSelected","fromDT","toDT","query","AND","getUTCTimeRangeFromUserDate","INVALID_DATE","GTE","LTE","KEQ","graxorgid","gspId","ajax","url","dataIndex","_index","_select","_q","_limit","_from","_sort","_sortType","_ignore_unavailable","success","results","loadSummaryDataTable","loadSummaryBreakdownTable","loadObjectDataTable","err","getScheduleProcessBreakdownSelection","summaries4chart","index","summaryList","dtSummaries","displayValuesOption","inserted","updated","archived","CreatedDate","existIndex","filter","createdDate","CreatedDateFormatted","utc","tz","TZ","DATE_FORMAT","startTimeFormatted","DATETIME_FORMAT","summaryToShow","dtSummary","Id","objectsList","Object","keys","dataTableRefreshSort","property","sortDirection","updateState","getSelectedSummary","allSummaries","objName","_allSumaries","startTimes","dateIndex","dateData","refreshChart","summartDataResults","summaryIds","objNames","tempData","update","endTime","current","setDateFilter","summaryBreakdownDTHandleChanged","itemsObjectsByDataRangeHandleChanged","getObjectsSelection","dtName","sortColumn","callSortFunction","sortProperty","newState","dataTableSortFunction","direction","val","dataTableId","displayValuesInput","style","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedHeader","fixedLayout","selectRows","onRowChange","summaryDTHandleChanged","onSort","dataTableHandleSort","sortable","primaryColumn","isSorted","getIsDatatableSortedColumn","currentStepSelection","parentStepSelection","currentStepItems","reduce","accumulator","find","x","parentItem","currentItem","getSummaryBreakdownDTItems","sectionTitle","getItemsObjectsByDataRange","renderAggregatedScheduleProcessSection","renderScheduleProcessBreakdownSection","renderObjectsSection","minHeight","renderFilterCriteriaSection","renderFilterSections","defaultProps"],"mappings":"wGAAA,oOAmBO,IAEMA,EAAmD,GAEnDC,EAAQC,OAAOC,SAASF,MACxBG,EAAQF,OAAOC,SAASC,MACxBC,EAAQH,OAAOC,SAASE,MAIxBC,GAHSJ,OAAOC,SAASI,OAGZL,OAAOC,SAASG,YAAc,IAEjD,SAASE,EAAUC,GAMxB,OALe,OAAXA,QAA8BC,IAAXD,IAAsBA,EAAS,IAEhC,OAAlBA,EAAOE,aAAqCD,IAAlBD,EAAOE,QAA0C,KAAlBF,EAAOE,SAClEF,EAAOE,OAAS,QAEX,IAAMC,IAAEC,MAAMJ,GAOvBG,IAAEE,UAAU,CACVC,WAAY,SAASC,EAAKC,GAL5B,IAAwBC,EAMpBF,EAAIG,iBAAiB,YAAad,GAEF,MAA5BC,EAAWc,cACbJ,EAAIG,iBAAiB,gBAAiB,SAAWb,EAAWc,eAI5DJ,EAAIG,iBAAiB,gBAAiB,UAAYlB,GAbhCiB,EAgBAD,EAASI,KAdxB,6BAA6BC,KAAKJ,IAcAK,KAAKC,aAC1CR,EAAIG,iBAAiB,cAAef,GAGtCY,EAAIS,iBAAkB,GAEI,IAAtBR,EAASS,UACXV,EAAIW,MAAK,SAACC,EAAOC,EAAYC,GAC3BC,QAAQC,MAAMJ,GAEO,MAAjBA,EAAMK,QAAkC,cAAhBH,GAC1B5B,OAAOgC,UAAUN,EAAMO,WAAa,KAAOP,EAAMQ,qB,qGClDrDC,E,kDACJ,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GADW,IAGTC,EAA0BD,EAA1BC,OAAQC,EAAkBF,EAAlBE,cAHC,OAKjB,EAAKC,MAAQ,CACXF,QAAmB,IAAXA,QAAoD7B,IAAlB8B,GAG5C,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBATH,E,yDAYNC,GAAI,IACPC,EAAatB,KAAKe,MAAlBO,SAERtB,KAAKuB,UAAS,SAAAC,GAAS,MAAK,CAC1BR,QAASQ,EAAUR,WAGjBM,GACFA,EAASN,QAGXK,EAAEI,mB,+BAGM,IAAD,EACkEzB,KAAKe,MAAtEW,EADD,EACCA,GAAIC,EADL,EACKA,IAAKV,EADV,EACUA,cAAeW,EADzB,EACyBA,MAAOC,EADhC,EACgCA,SAAUC,EAD1C,EAC0CA,UAAWC,EADrD,EACqDA,SACpDf,EAAWhB,KAAKkB,MAAhBF,OAEFgB,EACJ,0BACEF,UAAS,uBAAkBb,EAAgB,GAAK,4BAChDW,MAAOA,GAENA,EACAC,GAIL,OACE,yBACEH,GAAIA,GAAMC,EACVG,UAAW,CAAC,eAAgBd,GAAU,eAAgBc,GAAWG,KAC/D,MAGF,wBAAIH,UAAU,wCACXb,EACC,4BAAQnB,KAAK,SAASgC,UAAU,yCAAyCI,QAASlC,KAAKmB,cACrF,kBAAC,IAAD,CACEgB,cAAe,CAAEC,MAAOR,GACxBS,SAAS,UACTC,KAAK,SACLC,KAAK,UACLT,UAAU,6EAEXE,GAGHA,GAGHhB,GAAU,yBAAKc,UAAU,yBAAyBC,Q,GAhEjCS,IAAMC,WAwEjB3B,O,6ECvDA4B,IA3BQ,SAAA3B,GAAU,IAAD,EACQ4B,oBAAS,GADjB,mBACvBC,EADuB,KACVC,EADU,KAG9B,OACE,yBAAKf,UAAU,oBACb,kBAAC,IAAD,eACEgB,UAAWC,IACXC,OAAQC,KAEJlC,EAJN,CAKEmC,SAAU,SAACC,EAAOC,GAChBP,EAAsC,KAAvBO,EAAKC,eAAwBC,YAAOF,EAAKG,MAAMC,WAExC,MAAlBzC,EAAMmC,UACRnC,EAAMmC,SAASC,EAAOC,QAIX,IAAhBR,EACC,yBAAKd,UAAU,yBAAf,0DAGE,Q,iCC7BV,cAEC,SAASzC,GACT,IAAIoE,EAAQ,6BAGTpE,EAAEqE,GAAGC,SAAW,SAASC,GACxB,IAEIlE,EAAWL,EAAEwE,QAAO,EAAM,CAC1BT,KAAM,GACNU,MAAO,CACNpC,GAAI,KACJU,MAAO,QACP2B,OAAQ,UAETC,MAAO,CACZC,KAAM,CAAC,MAAS,uBAChBC,GAAI,CAAC,MAAS,aACdC,GAAI,CACH,KAAQ,WACR,aAAc,IACd,gBAAiB,SAElBC,IAAK,CAAC,MAAS,mBACfC,OAAQ,CACP,MAAS,oDACT,cAAe,OACf,SAAY,OAGdC,aAAc,CACb,SAAY,oBAEbC,WAAY,CACX,MAAS,4CACT,KAAQ,8DAEHC,KAAM,SAASC,EAAKX,EAAOpE,KAC3BgF,KAAM,SAASC,EAAKC,EAAMlF,KAC1BmF,MAAO,SAASC,EAAMF,EAAMlF,GAC3BoF,EAAKC,OAAOH,EAAKlF,EAASoE,MAAM1B,SAEjC4C,SAAU,SAASC,EAASL,EAAMlF,KAC/BwF,SAAU,SAASC,EAAOrB,EAAOpE,MAClCkE,GA6BCwB,EAAqB,SAASR,EAAMS,EAAOZ,EAAKE,GACnD,IAAIG,EAAOzF,EAAE,SAASiG,KAAK5F,EAASsE,MAAMI,KAM1C,OAJNU,EAAKC,OA9BwB,SAASH,EAAMW,EAAUZ,GAChD,IAAIM,EAAU5F,EAAE,YAAYiG,KAAK5F,EAASsE,MAAMK,QAAQmB,YAAY9F,EAAS4E,aAAaiB,SAAUA,GAEhGE,EAAOC,SAASC,gBAAgBlC,EAAO,OAC3CgC,EAAKG,aAAa,QAASlG,EAAS6E,WAAWsB,OAC/CJ,EAAKG,aAAa,cAAe,QAEjC,IAAIE,EAAWJ,SAASC,gBAAgBlC,EAAO,OAiB/C,OAhBAqC,EAASC,eAnDH,+BAmD2B,aAAcrG,EAAS6E,WAAWyB,MAEnEP,EAAKQ,YAAYH,GAEpBb,EAAQF,OAAOU,GAEZR,EAAQiB,GAAG,SAAS,SAAS7E,GAC5BsD,EAAIW,KAAK,iBAAiB,SAASa,EAAGb,GAClC,QAAkB,SAATA,MAGbjE,EAAEI,oBAGH/B,EAASsF,SAASC,EAASL,EAAMlF,GAE1BuF,EAMDmB,CAAkBxB,GAAOA,EAAKlF,EAASoE,MAAMC,SAAWa,EAAKlF,EAASoE,MAAMC,QAAQsC,OAAS,EAAG1B,IAEtGjF,EAASmF,MAAMC,EAAMF,EAAMlF,GAEpBoF,GAGJwB,EAAc,SAAS1B,EAAMS,EAAOZ,GACvC,IAAIE,EAAMtF,EAAE,QAAQiG,KAAK5F,EAASsE,MAAMG,IASxC,OAPAQ,EAAIW,KAAK,CAAC,aAAcD,IAAQN,OAAOK,EAAmBR,EAAMS,EAAOZ,EAAKE,IACzEC,EAAKlF,EAASoE,MAAMC,SACtBY,EAAII,OAAOwB,EAAQ3B,EAAKlF,EAASoE,MAAMC,QAASsB,EAAM,IAGvD3F,EAASgF,KAAKC,EAAKC,EAAMlF,GAElBiF,GAGJ4B,EAAU,SAASzC,EAAOuB,GAC7B,IAAIZ,EAAMpF,EAAE,QAAQiG,KAAK5F,EAASsE,MAAME,IAUxC,OARGmB,EAAQ,GAAGZ,EAAIa,KAAK,CAAC,KAAQ,UAEhCjG,EAAEmH,KAAK1C,GAAO,SAASqC,EAAGvB,GACzBH,EAAIM,OAAOuB,EAAY1B,EAAMS,OAG9B3F,EAAS8E,KAAKC,EAAKX,EAAOpE,GAEnB+E,GAOR,OA5GSzE,KAwGHsF,KAAK5F,EAASsE,MAAMC,MAAMwC,KAAKF,EAAQ7G,EAAS0D,KAAM,IAE5D1D,EAASwF,SA1GAlF,KA0GgBN,EAAS0D,KAAM1D,GA1G/BM,MALhB,CAFD,OAsHE0G,I,kBCtHF,IAAMC,EAA8B,CAAC,sBAAuB,6BAa5DC,EAAOC,QAAU,CAAEC,4BAJnB,SAAqCC,GACnC,OAA0E,IAAnEJ,EAA4BK,QAAQD,EAAWE,kB,iLCDnCC,E,kDACnB,WAAYnG,GAAQ,IAAD,sBAGjB,IAAIoG,GAFJ,cAAMpG,IAEcA,MAAMoG,SAAW,EAAKpG,MAAMoG,SAAW,IAAIC,KAC3DC,EAAS,EAAKtG,MAAMsG,OAAS,EAAKtG,MAAMsG,OAAS,IAAID,KAEzDD,EAASG,SAAS,GAClBH,EAASI,WAAW,GACpBF,EAAOC,SAAS,IAChBD,EAAOE,WAAW,IAElB,IAAMC,EAAe,CACnB,CAAEpF,MAAO,iBAAkBV,GAAI,oBAAqB+F,KAAM,kBAAM,EAAKC,sBACrE,CAAEtF,MAAO,kBAAmBV,GAAI,oBAAqB+F,KAAM,kBAAM,EAAKE,sBACtE,CACEvF,MAAO,oBACPV,GAAI,qBACJ+F,KAAM,kBAAM,EAAKG,uBAEnB,CACExF,MAAO,oBACPV,GAAI,qBACJ+F,KAAM,kBAAM,EAAKI,uBAEnB,CACEzF,MAAO,kBACPV,GAAI,+BACJ+F,KAAM,kBAAM,EAAKK,kCA3BJ,OA+BjB,EAAK5G,MAAQ,CACX6G,WAAW,EACXC,YAAa,EAAKjH,MAAMiH,YACxBC,qBAAsB,CAAEC,MAAO,OAAQC,OAAQ,IAAKC,UAAW,CAAEF,MAAO,MAAOG,KAAM,OACrFC,cAAe,CACbC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,cAAc,GAGhBC,cAAexB,EACfyB,YAAavB,EACbwB,qBAAqB,EACrBC,kBAAkB,EAClBtB,aAAcA,EACduB,eAAgB,CAACvB,EAAa,KA/Cf,E,gEAuDE,IAAD,OAGlBwB,OAAOC,OAAOC,mBAAkB,WAC9B,EAAK3H,SACH,CACEwG,WAAW,IAEb,WACE,EAAKoB,oB,0CAOX,IAQIC,EARApB,EAAchI,KAAKkB,MAAM8G,YACzBqB,EAAW,EACXC,EAAa,GACbC,EAAmB,GACnBC,EAAY,GAEZC,EAAU,EACVC,EAAU,IAAIC,IAGlB3B,EAAY4B,SAAQ,SAACC,GACnB,IAAK,IAAIlI,KAAOkI,EAAQC,WACtBJ,EAAQK,IAAIpI,OAIhByH,EAAW,YAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAACC,EAAGC,GACnB,OAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,KAGlCf,EAAYQ,SAAQ,SAAChF,GACnB0E,EAAW1E,GAAQ6E,EACnBA,OAGFA,EAAU,EAEVzB,EAAY4B,SAAQ,SAACC,GACnB,IAAK,IAAIlI,KAAOkI,EAAQC,WAAY,CAClC,IAAIM,EAAMP,EAAQC,WAAWnI,GACzB0I,EAAWd,EAAiB5H,GAE5B2I,EAAIF,EAAIG,QAAUH,EAAIG,QAAU,EAEpC,GAAKF,GAAyB,IAAbA,EAKV,CACL,IAAIG,EAAQhB,EAAUa,GAAU,GAAKC,EAErCd,EAAUa,GAAY,CAAC1I,EAAM,KAAO6I,EAAQ,IAAKA,QAPjDH,EAAWZ,EACXF,EAAiB5H,GAAO8H,EACxBD,EAAUiB,KAAK,CAAC9I,EAAM,KAAO2I,EAAI,IAAKA,IACtCb,IAOFJ,GAAYiB,MAIhBd,EAAUS,MAAK,SAACC,EAAGC,GACjB,OAAQD,EAAE,GAAKC,EAAE,MAKnB,IAFA,IAAIO,EAAuB,CAAC,CAAC,SAAU,cAE9BvE,EAAI,EAAGA,EAAI,IAAMA,EAAIqD,EAAUnD,OAAQF,IAAK,CACnD,IAAIwE,EAAMnB,EAAUrD,GACpBuE,EAAqBD,KAAKE,GAC1BtB,GAAYsB,EAAI,GAGdtB,EAAW,GACbqB,EAAqBD,KAAK,CAAC,WAAapB,EAAW,IAAKA,IAG1D,IAAIjG,EAAO4F,OAAO4B,cAAcC,iBAAiBH,GAG7C9G,EAAUkH,KAAKC,MAAMD,KAAKE,UAAUhL,KAAKkB,MAAM+G,uBAInD,OAHArE,EAAQqH,yBAA2B,EAG5B,CAACjC,OAAO4B,cAAcM,SAAU9H,EAAMQ,K,0CAG1B,IAAD,OACdoE,EAAchI,KAAKkB,MAAM8G,YACzBwB,EAAY,GACZD,EAAmB,GACnBD,EAAa,GAEblG,EAAO,IAAI4F,OAAO4B,cAAcO,UACpC/H,EAAKgI,UAAU,OAAQ,cAEvB,IAEIhC,EAoBAiC,EACAC,EAvBA7B,EAAU,EACVC,EAAU,IAAIC,IAGlB3B,EAAY4B,SAAQ,SAACC,GACnB,IAAK,IAAIlI,KAAOkI,EAAQC,WACtBJ,EAAQK,IAAIpI,OAIhByH,EAAW,YAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAACC,EAAGC,GACnB,OAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,KAGlCf,EAAYQ,SAAQ,SAAChF,GACnB0E,EAAW1E,GAAQ6E,EACnBA,OAGFA,EAAU,EAIV,IAAI8B,EAAoB,GAsDxB,GA1CAvD,EAAY4B,SAAQ,SAACC,GACnB,IAAK,IAAIlI,KAAOkI,EAAQC,WAAY,CAClC,IAAIM,EAAMP,EAAQC,WAAWnI,GAE7B,GAAKyI,EAAIoB,UAAT,CAIA,IAAIlB,EAAIF,EAAIG,QAAUH,EAAIG,QAAU,EAChCkB,EAAU,IAAIrE,KAAKgD,EAAIoB,WACvBE,EAAkB,EAAKC,gBAAgBF,GACvCpB,EAAWd,EAAiBkC,KAE3BJ,GAAgBA,GAAgBI,KACnCJ,EAAe,IAAIjE,KAAKqE,IACXnE,SAAS+D,EAAaO,WAAa,KAG7CN,GAAcA,GAAcG,KAC/BH,EAAa,IAAIlE,KAAKqE,IACXnE,SAASgE,EAAWM,WAAa,GAGzCvB,GAAyB,IAAbA,IACfA,EAAWZ,EACXF,EAAiBkC,GAAWhC,EAC5BD,EAAUiB,KAAK,IAAIT,MAAMZ,EAAY/C,OAAS,GAAGwF,UAAK1M,IACtDsK,KAGFD,EAAUa,GAAU,GAAK,CAAEyB,EAAGL,EAASM,EAAGL,GACrClC,EAAUa,GAAUf,EAAW3H,GAAO,KACzC6H,EAAUa,GAAUf,EAAW3H,GAAO,GAAK,GAE7C6H,EAAUa,GAAUf,EAAW3H,GAAO,IAAM2I,EACvCiB,EAAkB5J,KACrB4J,EAAkB5J,GAAO,GAE3B4J,EAAkB5J,IAAQ2I,OAIL,IAArBd,EAAUnD,OAAc,OAAO,KAEnC,IAAK,IAAI1E,KAAO2H,EACdlG,EAAKgI,UAAU,SAAUzJ,EAAM,KAAO4J,EAAkB5J,GAAO,KAGjE6H,EAAUS,MAAK,SAACC,EAAGC,GACjB,OAAOD,EAAE,GAAG4B,EAAI3B,EAAE,GAAG2B,EAAI,EAAI5B,EAAE,GAAG4B,EAAI3B,EAAE,GAAG2B,GAAK,EAAI,KAGtD1I,EAAK4I,QAAQxC,GAGb,IAAI5F,EAAUkH,KAAKC,MAAMD,KAAKE,UAAUhL,KAAKkB,MAAM+G,uBAkBnD,OAjBArE,EAAQqI,kBAAmB,EAC3BrI,EAAQsI,UAAY,EACpBtI,EAAQuI,SAAW,GACnBvI,EAAQwI,MAAQ,CACdxK,MAAO,aACPyK,OAAQ,uBACRC,WAAY,CACVC,IAAKlB,EACLmB,IAAKlB,GAEPmB,eAAgB,aAElB7I,EAAQ8I,MAAQ,CACd9K,MAAO,qBAIF,CAACoH,OAAO4B,cAAc+B,UAAWvJ,EAAMQ,K,2CAI9C,IAQIwF,EARApB,EAAchI,KAAKkB,MAAM8G,YACzBqB,EAAW,EACXuD,EAAiB,GACjBrD,EAAmB,GACnBC,EAAY,GAEZC,EAAU,EACVC,EAAU,IAAIC,IAGlB3B,EAAY4B,SAAQ,SAACC,GACnBH,EAAQK,IAAIF,EAAQgD,YAGtBzD,EAAW,YAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAACC,EAAGC,GACnB,OAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,KAGlCf,EAAYQ,SAAQ,SAAChF,GACnBgI,EAAehI,GAAQ6E,EACvBA,OAGFA,EAAU,EAEVzB,EAAY4B,SAAQ,SAACC,GACnB,IAAIQ,EAAWd,EAAiBM,EAAQgD,QACpCvC,EAAIT,EAAQiD,eAAevC,QAAUV,EAAQiD,eAAevC,QAAU,EAE1E,GAAKF,GAAyB,IAAbA,EAEV,CACL,IAAIG,EAAQhB,EAAUa,GAAU,GAAKC,EAErCd,EAAUa,GAAY,CAACR,EAAQgD,OAAS,KAAOrC,EAAQ,IAAKA,QAJ5DhB,EAAUiB,KAAK,CAACZ,EAAQgD,OAAS,KAAOvC,EAAI,IAAKA,IAMnDjB,GAAYiB,KAGdd,EAAUS,MAAK,SAACC,EAAGC,GACjB,OAAQD,EAAE,GAAKC,EAAE,MAKnB,IAFA,IAAI4C,EAAyB,CAAC,CAAC,UAAW,cAEjC5G,EAAI,EAAGA,EAAI,IAAMA,EAAIqD,EAAUnD,OAAQF,IAAK,CACnD,IAAIwE,EAAMnB,EAAUrD,GACpB4G,EAAuBtC,KAAKE,GAC5BtB,GAAYsB,EAAI,GAGdtB,EAAW,GACb0D,EAAuBtC,KAAK,CAAC,WAAapB,EAAW,IAAKA,IAG5D,IAAIjG,EAAO4F,OAAO4B,cAAcC,iBAAiBkC,GAG7CnJ,EAAUkH,KAAKC,MAAMD,KAAKE,UAAUhL,KAAKkB,MAAM+G,uBAInD,OAHArE,EAAQqH,yBAA2B,EAG5B,CAACjC,OAAO4B,cAAcM,SAAU9H,EAAMQ,K,2CAGzB,IAAD,OACfoE,EAAchI,KAAKkB,MAAM8G,YACzBwB,EAAY,GACZD,EAAmB,GACnBD,EAAa,GAEblG,EAAO,IAAI4F,OAAO4B,cAAcO,UACpC/H,EAAKgI,UAAU,OAAQ,cAEvB,IAEIhC,EAkBAiC,EACAC,EArBA7B,EAAU,EACVC,EAAU,IAAIC,IAGlB3B,EAAY4B,SAAQ,SAACC,GACnBH,EAAQK,IAAIF,EAAQgD,YAGtBzD,EAAW,YAAOY,MAAP,YAAgBN,KAEfO,MAAK,SAACC,EAAGC,GACnB,OAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,KAGlCf,EAAYQ,SAAQ,SAAChF,GACnB0E,EAAW1E,GAAQ6E,EACnBA,OAGFA,EAAU,EAIV,IAAI8B,EAAoB,GAoDxB,GAxCAvD,EAAY4B,SAAQ,SAACC,GACnB,IAAImD,EAASnD,EAAQiD,eAErB,GAAKE,EAAOxB,UAAZ,CAIA,IAAIlB,EAAI0C,EAAOzC,QAAUyC,EAAOzC,QAAU,EACtCkB,EAAU,IAAIrE,KAAK4F,EAAOxB,WAC1BE,EAAkB,EAAKC,gBAAgBF,GACvCpB,EAAWd,EAAiBkC,KAE3BJ,GAAgBA,GAAgBI,KACnCJ,EAAe,IAAIjE,KAAKqE,IACXnE,SAAS+D,EAAaO,WAAa,KAG7CN,GAAcA,GAAcG,KAC/BH,EAAa,IAAIlE,KAAKqE,IACXnE,SAASgE,EAAWM,WAAa,GAGzCvB,GAAyB,IAAbA,IACfA,EAAWZ,EACXF,EAAiBkC,GAAWhC,EAC5BD,EAAUiB,KAAK,IAAIT,MAAMZ,EAAY/C,OAAS,GAAGwF,UAAK1M,IACtDsK,KAGFD,EAAUa,GAAU,GAAK,CAAEyB,EAAGL,EAASM,EAAGL,GACrClC,EAAUa,GAAUf,EAAWO,EAAQgD,QAAU,KACpDrD,EAAUa,GAAUf,EAAWO,EAAQgD,QAAU,GAAK,GAExDrD,EAAUa,GAAUf,EAAWO,EAAQgD,QAAU,IAAMvC,EAClDiB,EAAkB1B,EAAQgD,UAC7BtB,EAAkB1B,EAAQgD,QAAU,GAEtCtB,EAAkB1B,EAAQgD,SAAWvC,MAGd,IAArBd,EAAUnD,OAAc,OAAO,KAEnC,IAAK,IAAI1E,KAAO2H,EACdlG,EAAKgI,UAAU,SAAUzJ,EAAM,KAAO4J,EAAkB5J,GAAO,KAGjE6H,EAAUS,MAAK,SAACC,EAAGC,GACjB,OAAOD,EAAE,GAAG4B,EAAI3B,EAAE,GAAG2B,EAAI,EAAI5B,EAAE,GAAG4B,EAAI3B,EAAE,GAAG2B,GAAK,EAAI,KAGtD1I,EAAK4I,QAAQxC,GAGb,IAAI5F,EAAUkH,KAAKC,MAAMD,KAAKE,UAAUhL,KAAKkB,MAAM+G,uBAiBnD,OAhBArE,EAAQqI,kBAAmB,EAC3BrI,EAAQuI,SAAW,GACnBvI,EAAQwI,MAAQ,CACdxK,MAAO,aACPyK,OAAQ,uBACRC,WAAY,CACVC,IAAKlB,EACLmB,IAAKlB,GAEPmB,eAAgB,aAElB7I,EAAQ8I,MAAQ,CACd9K,MAAO,qBAIF,CAACoH,OAAO4B,cAAc+B,UAAWvJ,EAAMQ,K,qDAI9C,IAAIoE,EAAchI,KAAKkB,MAAM8G,YACzBwB,EAAY,GACZD,EAAmB,GACnB0D,EAAa,GAEb7J,EAAO,IAAI4F,OAAO4B,cAAcO,UACpC/H,EAAKgI,UAAU,OAAQ,cAEvB,IA+BIC,EACAC,EAhCA7B,EAAU,EACVL,EAAc,GACd8D,EAAY,GAEZlN,KAAKkB,MAAMoH,cAAcC,aAC3B2E,EAAUzC,KAAK,WAEbzK,KAAKkB,MAAMoH,cAAcE,cAC3B0E,EAAUzC,KAAK,YAEbzK,KAAKkB,MAAMoH,cAAcG,aAC3ByE,EAAUzC,KAAK,WAEbzK,KAAKkB,MAAMoH,cAAcI,cAC3BwE,EAAUzC,KAAK,YAGjByC,EAAUtD,SAAQ,SAACuD,GACjB/D,EAAYqB,KAAK0C,MAGnB/D,EAAYa,MAAK,SAACC,EAAGC,GACnB,OAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,KAGlCf,EAAYQ,SAAQ,SAAChF,GACnBqI,EAAWrI,GAAQ6E,EACnBA,OAGFA,EAAU,EAGV,IAAI2D,EAAqB,GACrBC,EAAoB,IAAI1D,IAwE5B,GAtEA3B,EAAY4B,SAAQ,SAACC,GACnB,IAAIvE,EAAO,GACPwE,EAAaD,EAAQC,WACrBwD,GAA0B,EAHC,WAKtB3L,GACP,IAAIyI,EAAMN,EAAWnI,GACjByI,IACF8C,EAAUtD,SAAQ,SAACuD,GACjB7H,EAAK6H,GAAY7H,EAAK6H,GAAY7H,EAAK6H,GAAY,EACnD7H,EAAK6H,IAAa/C,EAAI+C,GAAY/C,EAAI+C,GAAY,KAEpDG,GAA0B,IAP9B,IAAK,IAAI3L,KAAOmI,EAAa,EAApBnI,GAWT,GAAI2L,GAA2BzD,EAAQiD,eAAetB,UAAW,CAC/D,IAAIA,EAAY,IAAIpE,KAAKyC,EAAQiD,eAAetB,WAChDA,EAAU+B,WAAW,GAErB,IAAI9B,EAAUD,EACVE,EACFF,EAAUgC,cACV,KACChC,EAAUiC,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAClD,IACAnC,EAAUoC,UAAUF,WAAWC,SAAS,EAAG,KAC3C,IACAnC,EAAUI,WAAW8B,WAAWC,SAAS,EAAG,KAC5C,IACAnC,EAAUqC,aAAaH,WAAWC,SAAS,EAAG,KAC9C,IACAnC,EAAUsC,aAAaJ,WAAWC,SAAS,EAAG,KAC5CtD,EAAWd,EAAiBkC,KAE3BJ,GAAgBA,GAAgBI,KACnCJ,EAAe,IAAIjE,KAAKqE,IACXnE,SAAS+D,EAAaO,WAAa,KAG7CN,GAAcA,GAAcG,KAC/BH,EAAa,IAAIlE,KAAKqE,IACXnE,SAASgE,EAAWM,WAAa,GAGzCvB,GAAyB,IAAbA,IACfA,EAAWZ,EACXF,EAAiBkC,GAAWhC,EAC5BD,EAAUiB,KAAK,IAAIT,MAAMkD,EAAU7G,OAAS,GAAGwF,UAAK1M,IACpDsK,KAGFD,EAAUa,GAAU,GAAK,CAAEyB,EAAGL,EAASM,EAAGL,EAAkB,KAAO7B,EAAQgD,QAE3EK,EAAUtD,SAAQ,SAACuD,GACZ3D,EAAUa,GAAU4C,EAAWE,GAAY,KAC9C3D,EAAUa,GAAU4C,EAAWE,GAAY,GAAK,GAElD3D,EAAUa,GAAU4C,EAAWE,GAAY,IAAM7H,EAAK6H,GAEjDC,EAAmBD,KACtBC,EAAmBD,GAAY,GAEjCC,EAAmBD,IAAa7H,EAAK6H,MAGvCE,EAAkBtD,IAAIF,EAAQgD,YAIT,IAArBrD,EAAUnD,OAAc,OAAO,KAEnC,IAAK,IAAI1E,KAAOsL,OACkB9N,IAA5BiO,EAAmBzL,IACrByB,EAAKgI,UAAU,SAAUzJ,EAAM,KAAOyL,EAAmBzL,GAAO,KAIpE6H,EAAUS,MAAK,SAACC,EAAGC,GACjB,OAAOD,EAAE,GAAKC,EAAE,GAAK,EAAID,EAAE,GAAKC,EAAE,IAAM,EAAI,KAG9C/G,EAAK4I,QAAQxC,GAGb,IAAI5F,EAAUkH,KAAKC,MAAMD,KAAKE,UAAUhL,KAAKkB,MAAM+G,uBAkBnD,OAjBArE,EAAQqI,kBAAmB,EAC3BrI,EAAQmK,WAAY,EACpBnK,EAAQuI,SAAW,GACnBvI,EAAQwI,MAAQ,CACdxK,MAAO,aACPyK,OAAQ,wBACRI,eAAgB,SAChBH,WAAY,CACVC,IAAKlB,EACLmB,IAAKlB,IAGT1H,EAAQ8I,MAAQ,CACd9K,MAAO,cAIF,CAACoH,OAAO4B,cAAcoD,YAAa5K,EAAMQ,K,kCAGrC,IAAD,OACNqK,EAAMjO,KAAKkB,MAAM6H,eAAe,GAAGtB,OAEvCzH,KAAKuB,SACH,CACEwG,WAAW,EACXmG,QAAgB,MAAPD,IAEX,WACMA,GACU,IAAIA,EAAI,GAAG,EAAKE,SACtBC,KAAKH,EAAI,GAAIA,EAAI,S,kCAMnBI,GACVrO,KAAKuB,SACH,CACE+M,WAAY,GACZvF,eAAgBsF,GAElBrO,KAAKmJ,a,oCAIKhC,EAAUE,GACtBrH,KAAKuB,SAAS,CACZoH,cAAexB,EACfyB,YAAavB,M,sCAIDmE,GACd,OACEA,EAAUgC,cACV,KACChC,EAAUiC,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAClD,IACAnC,EAAUoC,UAAUF,WAAWC,SAAS,EAAG,KAC3C,IACAnC,EAAUI,WAAW8B,WAAWC,SAAS,EAAG,KAC5C,IACAnC,EAAUqC,aAAaH,WAAWC,SAAS,EAAG,KAC9C,IACAnC,EAAUsC,aAAaJ,WAAWC,SAAS,EAAG,O,iCAIvCY,GACT,OAAOA,EAAGd,WAAa,EAAI,IAAMc,EAAGX,UAAY,IAAMW,EAAGf,gB,+BAGjD,IAAD,OACP,OAAIxN,KAAKkB,MAAM6G,UACN,kBAAC,IAAD,CAASxF,KAAK,QAAQiM,QAAQ,UAIrC,6BACE,8BACIxO,KAAKkB,MAAM4H,kBACX,yBAAKhH,UAAU,uBACb,yBAAKA,UAAU,4EACb,kBAAC,IAAD,CAAaF,MAAM,gBAAgBX,cAAc,QAC/C,yBAAKa,UAAU,uBACb,yBACEA,UACsC,iCAApC9B,KAAKkB,MAAM6H,eAAe,GAAGrH,IAC7B1B,KAAKkB,MAAM2H,oBACP,2EACA,4EAGN,kBAAC,IAAD,CACE4F,OAAQ,CACNvL,SAAU,SAACC,EAAD,GAAuB,IAAbuL,EAAY,EAAZA,MAClB,EAAKJ,WAAaI,EAClB,EAAKnN,SACH,CACE+M,WAAYI,GAEd,EAAKvF,YAGTwF,8BAA+B,SAACxL,EAAOC,GACrC,EAAK7B,SAAS,CACZ+M,WAAY,GACZvF,eAAgB3F,EAAKiL,aAGzBO,SAAU,SAACzL,EAAOC,GAChB,EAAKyL,YAAYzL,EAAKiL,WAElB,EAAKtN,MAAM+N,eACb,EAAK/N,MAAM+N,cAAc3L,EAAOC,EAAKiL,aAI3CU,OAAQ,CACN3M,MAAO,aACP4M,YAAa,2BAEfpL,QAASqL,YAAuB,CAC9BC,WAAYlP,KAAKkB,MAAMoN,WACvBa,MAAO,IACPvL,QAAS5D,KAAKkB,MAAMsG,aACpB6G,UAAWrO,KAAKkB,MAAM6H,iBAExBsF,UAAWrO,KAAKkB,MAAM6H,eACtB2F,MAAO1O,KAAKkB,MAAMoN,WAClBE,QAAQ,cAIyB,iCAApCxO,KAAKkB,MAAM6H,eAAe,GAAGrH,IAC5B1B,KAAKkB,MAAM2H,qBACT,yBAAK/G,UAAU,4EACb,kBAAC,IAAD,CACEF,MAAM,iBACNE,UAAU,qCAEV,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oJACb,kBAAC,IAAD,CACEA,UAAU,eACVsN,eAAgBpP,KAAKkB,MAAMoH,cAAcC,YACzCrF,SAAU,SAACmM,GACT,IAAI/G,EAAgB,EAAKpH,MAAMoH,cAC/BA,EAAcC,YAAc8G,EAC5B,EAAK9N,SACH,CACE+G,cAAeA,EACfP,WAAW,IAEb,kBAAM,EAAKoB,gBAGfhH,cAAe,CACbC,MAAO,iBAEToM,QAAQ,SACRO,OAAQ,CACNO,eAAgB,UAChBC,cAAe,cAIrB,yBAAKzN,UAAU,oJACb,kBAAC,IAAD,CACEA,UAAU,eACVsN,eAAgBpP,KAAKkB,MAAMoH,cAAcE,aACzCtF,SAAU,SAACmM,GACT,IAAI/G,EAAgB,EAAKpH,MAAMoH,cAC/BA,EAAcE,aAAe6G,EAC7B,EAAK9N,SACH,CACE+G,cAAeA,EACfP,WAAW,IAEb,kBAAM,EAAKoB,gBAGfhH,cAAe,CACbC,MAAO,iBAEToM,QAAQ,SACRO,OAAQ,CACNO,eAAgB,WAChBC,cAAe,eAIrB,yBAAKzN,UAAU,oJACb,kBAAC,IAAD,CACEA,UAAU,eACVsN,eAAgBpP,KAAKkB,MAAMoH,cAAcG,YACzCvF,SAAU,SAACmM,GACT,IAAI/G,EAAgB,EAAKpH,MAAMoH,cAC/BA,EAAcG,YAAc4G,EAC5B,EAAK9N,SACH,CACE+G,cAAeA,EACfP,WAAW,IAEb,kBAAM,EAAKoB,gBAGfhH,cAAe,CACbC,MAAO,iBAEToM,QAAQ,SACRO,OAAQ,CACNO,eAAgB,UAChBC,cAAe,cAIrB,yBAAKzN,UAAU,oJACb,kBAAC,IAAD,CACEA,UAAU,eACVsN,eAAgBpP,KAAKkB,MAAMoH,cAAcI,aACzCxF,SAAU,SAACmM,GACT,IAAI/G,EAAgB,EAAKpH,MAAMoH,cAC/BA,EAAcI,aAAe2G,EAC7B,EAAK9N,SACH,CACE+G,cAAeA,EACfP,WAAW,IAEb,WACE,EAAKoB,gBAIXhH,cAAe,CACbC,MAAO,iBAEToM,QAAQ,SACRO,OAAQ,CACNO,eAAgB,WAChBC,cAAe,sBAcxCvP,KAAKkB,MAAMgN,QAAU,KAAO,yBAAKsB,IAAK,SAACrB,GAAD,OAAc,EAAKA,QAAUA,U,gDAvxB5CsB,EAAWjO,GACzC,OAAOiO,M,GArDyCjN,IAAMC,Y,mUCyBpDiN,EAAsB,SAAC,GAAD,IAAG3N,EAAH,EAAGA,SAAahB,EAAhB,mCAC1B,kBAAC,IAAkBA,EACjB,uBACE4O,KACElR,IACA,kDACAsC,EAAM6D,KAAKgL,KACX,IACAC,UAAU9O,EAAM6D,KAAKkL,oBACrB,UACAhR,IAEFiR,OAAO,SACPC,IAAI,uBAEHjO,KAIP2N,EAAoBO,YAAcC,IAAcD,YAEzC,IAAME,EAA2B,mBAEnBC,E,kDACnB,WAAYrP,GAAQ,IAAD,uBACjB,cAAMA,IAEDsP,MAAQ7N,IAAM8N,YAEnB,EAAKC,mBAAqB,GAC1B,EAAKC,oBAAsB,GAC3B,EAAKC,wBAA0B,GAC/B,EAAKC,iCAAmC,GACxC,EAAKC,wBAA0B,GAC/B,EAAKC,4BAA8B,GACnC,EAAKC,eAAiB,GACtB,EAAKC,mBAAqB,GAC1B,EAAKtJ,aAAe,GACpB,EAAKS,qBAAuB,CAC1BC,MAAO,OACPC,OAAQ,IACRC,UAAW,CAAEF,MAAO,MAAOG,KAAM,OAGnC,EAAK0I,qBAAuB,CAC1B,CAAErP,GAAI,MAAOU,MAAO,YACpB,CAAEV,GAAI,WAAYU,MAAO,4DACzB,CAAEV,GAAI,UAAWU,MAAO,4DACxB,CAAEV,GAAI,WAAYU,MAAO,8DAG3B,IAAM4O,EAAyB,CAAC,EAAKD,qBAAqB,IA3BzC,OA6BjB,EAAK7P,MAAQ,CACX6G,WAAW,EACXkJ,cAAe,EAEfzH,UAAW,GAEXT,eAAgB,GAChBuF,WAAY,GACZnH,SAAUpG,EAAMmQ,aAAa/J,SAC7BE,OAAQtG,EAAMmQ,aAAa7J,OAC3B8J,oBAAoB,EAEpBC,iBAAkB,CAChB7I,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,cAAc,GAGhBwG,WAAY,mBACZb,UAAW,GACXgD,QAAS,GAETL,yBAEAvQ,MAAO,MAtDQ,E,gEA2DbT,KAAKe,MAAMyN,UAAY2B,EACzBnQ,KAAKsR,gBAELtR,KAAKuB,SAAS,CACZwG,WAAW,M,sCAKA,IAAD,OACd/H,KAAK8Q,mBAAqB,GAC1B9Q,KAAK4Q,4BAA8B,GACnC5Q,KAAK0Q,iCAAmC,GAExC1Q,KAAKuB,SAAS,CACZwG,WAAW,IAGb,IAAIwJ,EAAuBvR,KAAKkB,MAAMsQ,cAElCC,EAASzR,KAAKkB,MAAMiG,SACxBsK,EACEA,EAAOjE,cACP,KACCiE,EAAOhE,WAAa,GAAGC,WAAWC,SAAS,EAAG,GAC/C,IACA8D,EAAO7D,UAAUF,WAAWC,SAAS,EAAG,GAC1C,IAAI+D,EAAO1R,KAAKkB,MAAMmG,OACtBqK,EACEA,EAAKlE,cACL,KACCkE,EAAKjE,WAAa,GAAGC,WAAWC,SAAS,EAAG,GAC7C,IACA+D,EAAK9D,UAAUF,WAAWC,SAAS,EAAG,GAExC,IAAIgE,EAAQ,CAAEC,IAAK,IAEnBH,EAASI,YAA4B,CAAEtO,KAAMkO,IAAU,GACvDC,EAAOG,YAA4B,CAAEtO,KAAMmO,IAAQ,GAE/CD,IAAWK,KACbH,EAAMC,IAAInH,KAAK,CAAEsH,IAAK,CAAE,2BAA4BN,KAGlDC,IAASI,KACXH,EAAMC,IAAInH,KAAK,CAAEuH,IAAK,CAAE,2BAA4BN,KAGlD1R,KAAKkB,MAAMiQ,oBACbQ,EAAMC,IAAInH,KAAK,CAAEwH,IAAK,CAAEC,UAAWpT,OAGA,MAAjCkB,KAAKe,MAAMmQ,aAAaiB,OAC1BR,EAAMC,IAAInH,KAAK,CAAEwH,IAAK,CAAErC,KAAM5P,KAAKe,MAAMmQ,aAAaiB,SAGxD9S,IAAE+S,KAAK,CACLtS,KAAM,MAENuS,IACE5T,IACA,2BACAQ,YAAU,CACRG,OAAQ,OACRkT,UAAW,+BACXC,OAAQ,qDACRC,QAAS,uEACTC,GAAI3H,KAAKE,UAAU2G,GACnBe,OAAQ,IACRC,MAAO,EACPC,MAAO,GACPC,UAAW,GACXC,qBAAqB,IAGzBC,QAAS,SAAC3P,GAEJA,EAAK4P,UACP,EAAKzC,mBAAqBnN,EAAK4P,SAGjC,EAAKzR,SACH,CACEwG,WAAW,EACXyJ,cAAeD,IAEjB,WACE,EAAK0B,uBACL,EAAKC,4BACL,EAAKC,0BAIX1S,MAAO,SAAChB,EAAKiB,EAAQ0S,GACnB5S,QAAQC,MAAMhB,EAAKiB,EAAQ0S,GAE3B,EAAK7R,SAAS,CACZwG,WAAW,S,2CAOjB/H,KAAK4Q,4BAA8B5Q,KAAKqT,qCACtCrT,KAAK4Q,6BAGP,IAAMvD,EAAoBrN,KAAK4Q,4BACzBL,EAAqBvQ,KAAKuQ,mBAE1B+C,EAAkB,GASxB,OAPAjG,EAAkBzD,SAAQ,SAACC,GACzByJ,EAAgB7I,KAAK8F,EAAmB1G,EAAQ0J,WAM3CD,I,6CAIP,IAAME,EAAcxT,KAAKuQ,mBACnBkD,EAAc,GAEpB,GAAID,EAAa,CAAC,IAAD,cAGXxT,KAAKkB,MAAM8P,uBAHA,MAEb0C,OAFa,MAES1T,KAAK+Q,qBAAqB,GAFnC,EAKX5K,EAAI,EAERqN,EAAY5J,SAAQ,SAACC,GAAa,IAAD,EACCA,EAAxBiD,sBADuB,MACN,GADM,IAEkCA,EAAzDvC,eAFuB,MAEb,EAFa,IAEkCuC,EAA5C6G,gBAFU,MAEC,EAFD,IAEkC7G,EAA9B8G,eAFJ,MAEc,EAFd,IAEkC9G,EAAjB+G,gBAFjB,MAE4B,EAF5B,EAI/B,KAC8B,aAA3BH,EAAoBhS,IAAkC,IAAbmS,GACd,aAA3BH,EAAoBhS,IAAkC,IAAbiS,GACd,YAA3BD,EAAoBhS,IAAgC,IAAZkS,GAH3C,CAJ+B,IAYvBhE,EAAkD/F,EAAlD+F,KAAM/C,EAA4ChD,EAA5CgD,OAAQiD,EAAoCjG,EAApCiG,mBAAoBgE,EAAgBjK,EAAhBiK,YAEpCC,EAAaN,EAAYO,QAAO,SAAC3S,GAAD,OAAOA,EAAEiB,OAASuK,KAExD,GAAIkH,GAAcA,EAAW1N,OAAS,EACpC0N,EAAW,GAAGR,MAAM9I,KAAKtE,GAEzB4N,EAAW,GAAGxJ,SAAWA,EACzBwJ,EAAW,GAAGJ,UAAYA,EAC1BI,EAAW,GAAGH,SAAWA,EACzBG,EAAW,GAAGF,UAAYA,MACrB,CACL,IAAMI,EAAc,IAAI7M,KAAK0M,GACvBtI,EAAY,IAAIpE,KAAK0F,EAAetB,WAE1CiI,EAAYhJ,KAAK,CACfnI,KAAMuK,EACNnL,GAAImL,EACJ+C,OACAE,qBACAgE,cACAI,qBAAsB5Q,IAAO6Q,IAAIF,GAAaG,GAAGC,KAAIhI,OAAOiI,KAC5D9I,YACA+I,mBAAoBjR,IAAO6Q,IAAI3I,GAAW4I,GAAGC,KAAIhI,OAAOmI,KACxDjK,UACAoJ,WACAC,UACAC,WACAN,MAAO,CAACpN,KAGZA,QAIJnG,KAAK6Q,eAAiB4C,EAElBzT,KAAKe,MAAMyN,UAAY2B,IACzBnQ,KAAK8Q,mBAAqB9Q,KAAK6Q,kB,kDAKjC,IAAM4D,EAAgBzU,KAAK8Q,mBACrBP,EAAqBvQ,KAAKuQ,mBAC1BI,EAA0B,GAE5B8D,GACFA,EAAc7K,SAAQ,SAAC8K,GACrBA,EAAUnB,MAAM3J,SAAQ,SAAC2J,GACvB,IAAI1J,EAAU0G,EAAmBgD,GAE7BM,EAAWhK,EAAQiD,eAAe+G,SAClCtJ,EAAUV,EAAQiD,eAAevC,QACjCoJ,EAAW9J,EAAQiD,eAAe6G,SAClCC,EAAU/J,EAAQiD,eAAe8G,QAErCC,EAAWA,GAAsB,EACjCtJ,EAAUA,GAAoB,EAC9BoJ,EAAWA,GAAsB,EACjCC,EAAUA,GAAoB,EAE9B,IAAMK,EAAc,IAAI7M,KAAKyC,EAAQiK,aAC/BtI,EAAY,IAAIpE,KAAKyC,EAAQiD,eAAetB,WAElDmF,EAAwBlG,KAAK,CAC3BmF,KAAM/F,EAAQ+F,KACdtN,KAAMuH,EAAQgD,OACd8H,GAAI9K,EAAQ8K,GACZjT,GAAImI,EAAQiG,mBACZA,mBAAoBjG,EAAQiG,mBAC5ByD,MAAOA,EACPO,YAAajK,EAAQiK,YACrBI,qBAAsB5Q,IAAO6Q,IAAIF,GAAaG,GAAGC,KAAIhI,OAAOiI,KAC5D9I,UAAW3B,EAAQ2B,UACnB+I,mBAAoBjR,IAAO6Q,IAAI3I,GAAW4I,GAAGC,KAAIhI,OAAOmI,KACxDjK,UACAoJ,WACAC,UACAC,WACAe,YAAa/K,EAAQC,WAAa+K,OAAOC,KAAKjL,EAAQC,YAAc,WAM5E9J,KAAK2Q,wBAA0BA,EAE/B3Q,KAAK+U,qBAAqB,6BAA8B/U,KAAK2Q,wBAAyB,CACpFqE,SAAU,OACVC,cAAe,U,4CAIsB,IAArBC,IAAoB,yDAClCT,EAAgBzU,KAAKmV,qBACrB1E,EAA0B,GAE9B,GAAIgE,EAAe,CACjB,IAAIW,EAAe,GA8DnB,IAAK,IAAIC,KA5DTZ,EAAc7K,SAAQ,SAAC5B,GACrB,IAAI8B,EAAa9B,EAAY8B,WAEzB2B,EAAU,IAAIrE,KAAKY,EAAY8E,eAAetB,WAElD,IAAK,IAAI6J,KAAWvL,EAClB,GAAkC,iBAAvBA,EAAWuL,KAAyBvO,sCAA4BuO,GAAU,CACnF,IAAIxB,EAAW/J,EAAWuL,GAASxB,SAC/BtJ,EAAUT,EAAWuL,GAAS9K,QAC9BoJ,EAAW7J,EAAWuL,GAAS1B,SAC/BC,EAAU9J,EAAWuL,GAASzB,QAElCC,EAAWA,GAAsB,EACjCtJ,EAAUA,GAAoB,EAC9BoJ,EAAWA,GAAsB,EACjCC,EAAUA,GAAoB,EAE9B,IAAI0B,EAAeF,EAAaC,GAE3BC,KACHA,EAAe,IACFhT,KAAO+S,EACpBC,EAAa5T,GAAK2T,EAClBC,EAAazB,SAAW,EACxByB,EAAa/K,QAAU,EACvB+K,EAAa3B,SAAW,EACxB2B,EAAa1B,QAAU,EACvB0B,EAAaC,WAAa,IAE5BD,EAAazB,UAAYA,GAAsB,EAC/CyB,EAAa/K,SAAWA,GAAoB,EAC5C+K,EAAa3B,UAAYA,GAAsB,EAC/C2B,EAAa1B,SAAWA,GAAoB,EAE5C,IAAI4B,EAAYF,EAAaC,WAAWvO,QAAQyE,GAE5C+J,EAAY,IACdA,EAAYF,EAAaC,WAAWlP,OAEpCiP,EAAaC,WAAW9K,KAAK,CAC3Be,UAAWC,EACXoI,SAAU,EACVtJ,QAAS,EACToJ,SAAU,EACVC,QAAS,KAIb,IAAI6B,EAAWH,EAAaC,WAAWC,GACvCC,EAAS5B,UAAYA,GAAsB,EAC3C4B,EAASlL,SAAWA,GAAoB,EACxCkL,EAAS9B,UAAYA,GAAsB,EAC3C8B,EAAS7B,SAAWA,GAAoB,EAExCwB,EAAaC,GAAWC,MAMVF,EAClB3E,EAAwBhG,KAAK2K,EAAaC,IAM9CrV,KAAKyQ,wBAA0BA,EAE/BzQ,KAAK+U,qBAAqB,6BAA8B/U,KAAKyQ,wBAAyB,CACpFuE,SAAU,OACVC,cAAe,QAIbC,GACFlV,KAAKuB,SACH,CACEwG,WAAW,EACXkJ,cAAejR,KAAKkB,MAAM+P,cAAgB,GAE5CjR,KAAK0V,gB,mDAQT,OAFA1V,KAAKmT,qBAAoB,GAElBnT,KAAKyQ,0B,qCAGE,IAAD,OACPjH,EAAY,GAEZmM,EAAqB3V,KAAKuQ,mBAE1BK,EAA8B5Q,KAAK4Q,4BACnCF,EAAmC1Q,KAAK0Q,iCAExCkF,EAAa,GACnBhF,EAA4BhH,SAAQ,SAACC,GACnC+L,EAAW/L,EAAQ8K,IAAM9K,EAAQ8K,MAGnC,IAAMkB,EAAW,GACjBnF,EAAiC9G,SAAQ,SAACQ,GACxCyL,EAASzL,EAAI9H,MAAQ8H,EAAI9H,QAG3BqT,EAAmB/L,SAAQ,SAACC,GAC1B,IAAMiM,EAAW,GACjB,GAAIF,EAAW/L,EAAQ8K,IAAK,CAY1B,IAAK,IAAIhT,KAXTmU,EAAShM,WAAa,GACtBgM,EAASjJ,OAAShD,EAAQgD,OAC1BiJ,EAAShJ,eAAiB,CACxB+G,SAAU,EACVtJ,QAAS,EACToJ,SAAU,EACVoC,OAAQ,EACRvK,UAAW3B,EAAQiD,eAAetB,UAClCwK,QAASnM,EAAQiD,eAAekJ,SAGlBnM,EAAQC,WACtB,GAAI+L,EAASlU,GAAM,CACjB,IAAImI,EAAaD,EAAQC,WACzBgM,EAAShM,WAAWnI,GAAOmI,EAAWnI,GACtCmU,EAAShJ,eAAe+G,SAAW/J,EAAWnI,GAAKkS,SAC/C/J,EAAWnI,GAAKkS,SAChB,EACJiC,EAAShJ,eAAevC,QAAUT,EAAWnI,GAAK4I,QAAUT,EAAWnI,GAAK4I,QAAU,EACtFuL,EAAShJ,eAAe6G,SAAW7J,EAAWnI,GAAKgS,SAC/C7J,EAAWnI,GAAKgS,SAChB,EACJmC,EAAShJ,eAAeiJ,OAASjM,EAAWnI,GAAKoU,OAASjM,EAAWnI,GAAKoU,OAAS,EAIvFvM,EAAUiB,KAAKqL,OAInB9V,KAAKuB,SACH,CACEwG,WAAW,EACXkJ,cAAejR,KAAKkB,MAAM+P,cAAgB,EAC1CzH,cAEF,WACE,EAAK6G,MAAM4F,QAAQC,cAAc,EAAKhV,MAAMiG,SAAU,EAAKjG,MAAMmG,QACjE,EAAKgJ,MAAM4F,QAAQ9M,iB,6CAKFhG,EAAOC,GAI5BpD,KAAK8Q,mBAAqB1N,EAAKiL,UAE/BrO,KAAKkT,4BACLlT,KAAKmW,gCAAgC,KAAM,CACzC9H,UAAWrO,KAAK4Q,8BAKlB5Q,KAAKuB,SAAS,CACZwG,WAAW,EACXkJ,cAAejR,KAAKkB,MAAM+P,cAAgB,M,sDAId9N,EAAOC,GACrCpD,KAAK4Q,4BAA8B5Q,KAAKqT,qCAAqCjQ,EAAKiL,WAClFrO,KAAKmT,sBACLnT,KAAKoW,qCAAqC,KAAM,CAC9C/H,UAAWrO,KAAK0Q,mCAIlB1Q,KAAKuB,SAAS,CACZwG,WAAW,EACXkJ,cAAejR,KAAKkB,MAAM+P,cAAgB,M,2DAIT9N,EAAOC,GAI1CpD,KAAK0Q,iCAAmC1Q,KAAKqW,oBAAoBjT,EAAKiL,WAEtErO,KAAK0V,eAGL1V,KAAKuB,SAAS,CACZwG,WAAW,EACXkJ,cAAejR,KAAKkB,MAAM+P,cAAgB,M,0CAI1BqF,EAAQxS,EAAOyS,GAAsC,IAAD,EAAzBC,IAAyB,yDAChEC,EAAeF,EAAWvB,SAC1BC,EAAgBsB,EAAWtB,cAC3ByB,GAAQ,mBACXJ,EAAS,SAAWG,GADT,cAEXH,EAAS,YAFE,eAGTG,EAAexB,IAHN,GAOVuB,GACFxW,KAAK2W,sBAAsB7S,EAAO2S,EAAcxB,GAGlDjV,KAAKuB,SAASmV,K,2CAGKJ,EAAQxS,EAAOyS,GAClC,IAAME,EAAezW,KAAKkB,MAAMoV,EAAS,WAAaC,EAAWvB,SAC3D4B,EAAY5W,KAAKkB,MAAMoV,EAAS,cAApB,eACfC,EAAWvB,SAAWuB,EAAWK,WAGpC,GAAoB,MAAhBH,GAAqC,MAAbG,EAAmB,CAC7C,IAAM3B,EAAgB2B,EAAUH,IAAiB,MAEjDzW,KAAK2W,sBAAsB7S,EAAO2S,EAAcxB,M,4CAI9BnR,EAAO2S,EAAcxB,GACzCnR,EAAMmG,MAAK,SAACC,EAAGC,GACb,IAAI0M,EAAM,EAaV,OAXI3M,EAAEuM,GAAgBtM,EAAEsM,KACtBI,EAAM,GAEJ3M,EAAEuM,GAAgBtM,EAAEsM,KACtBI,GAAO,GAGa,SAAlB5B,IACF4B,IAAQ,GAGHA,O,iDAIgBP,EAAQG,GACjC,OAAOzW,KAAKkB,MAAMoV,EAAS,YAAcG,I,sCAG3BjL,GACd,OACEA,EAAUgC,cACV,KACChC,EAAUiC,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAClD,IACAnC,EAAUoC,UAAUF,WAAWC,SAAS,EAAG,KAC3C,IACAnC,EAAUI,WAAW8B,WAAWC,SAAS,EAAG,KAC5C,IACAnC,EAAUqC,aAAaH,WAAWC,SAAS,EAAG,KAC9C,IACAnC,EAAUsC,aAAaJ,WAAWC,SAAS,EAAG,O,iCAIvCY,GACT,OAAOA,EAAGd,WAAa,EAAI,IAAMc,EAAGX,UAAY,IAAMW,EAAGf,gB,0CAIzDxN,KAAK2Q,wBAA0B,GAC/B3Q,KAAK8Q,mBAAqB,GAC1B9Q,KAAK4Q,4BAA8B,GACnC5Q,KAAK0Q,iCAAmC,GACxC1Q,KAAKyQ,wBAA0B,GAE/BzQ,KAAKuB,SAAS,CACZiI,UAAW,GACXyH,cAAejR,KAAKkB,MAAM+P,cAAgB,M,+DAIJ,IAAD,OACvC,GAAIjR,KAAKe,MAAMyN,UAAY2B,EACzB,OAAO,KAGT,IAAM2G,EAAc,sBAEpB,OACE,kBAAC,IAAD,CACElV,MAAM,2CACNE,UAAU,mBACVb,eAAe,EACfD,QAAQ,GAER,yBAAKc,UAAU,uBACb,yBAAKA,UAAU,uGACb,kBAAC,IAAD,CACE2M,OAAQ,CACNvL,SAAU,SAACC,EAAD,GAAuB,IAAbuL,EAAY,EAAZA,MAClB,EAAKqI,mBAAqBrI,EAC1B,EAAKnN,SAAS,CACZwV,mBAAoBrI,KAGxBC,8BAA+B,SAACxL,EAAOC,GACrC,EAAK7B,SACH,CACEwV,mBAAoB,GACpB/F,uBAAwB5N,EAAKiL,YAE/B,WACE,EAAK4E,uBACL,EAAKC,4BACL,EAAKC,0BAIXvE,SAAU,SAACzL,EAAOC,GAChB,EAAK7B,SACH,CACEyP,uBAAwB5N,EAAKiL,YAE/B,WACE,EAAK4E,uBACL,EAAKC,4BACL,EAAKC,2BAKbpE,OAAQ,CACN3M,MAAO,iBACP4M,YAAa,uBAEfpL,QAASqL,YAAuB,CAC9BC,WAAYlP,KAAKkB,MAAM6V,mBACvB5H,MAAO,IACPvL,QAAS5D,KAAK+Q,qBACd1C,UAAWrO,KAAKkB,MAAM8P,yBAExB3C,UAAWrO,KAAKkB,MAAM8P,uBACtBtC,MAAO1O,KAAKkB,MAAM6V,mBAClBvI,QAAQ,cAIZ,yBAAK1M,UAAU,6FACb,yBAAKkV,MAAO,CAAE7O,OAAQ,MACpB,kBAAC,IAAD,CACEhG,cAAe,CACb8U,cAAe,UACfC,WAAY,mBACZC,sBAAuB,MACvBC,uBAAwB,OACxBC,cAAe,WACfC,UAAW,mBAEbC,aAAW,EACXC,aAAW,EACX1T,MAAO9D,KAAK6Q,eACZnP,GAAIoV,EACJzI,UAAWrO,KAAK8Q,mBAChB2G,WAAW,WACXC,YAAa,SAACrW,EAAG+B,GAAJ,OAAa,EAAKuU,uBAAuBtW,EAAG+B,IACzDwU,OAAQ,SAACrB,GACP,EAAKsB,oBAAoBf,EAAa,EAAKjG,eAAgB0F,KAG7D,kBAAC,IAAD,CACEnU,MAAM,wBACN0V,UAAQ,EACRC,eAAa,EACb/C,SAAS,OACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,UAGzD,kBAAC,IAAD,CACE1U,MAAM,UACN0V,UAAQ,EACR9C,SAAS,UACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,aAGzD,kBAAC,IAAD,CACE1U,MAAM,WACN0V,UAAQ,EACR9C,SAAS,WACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,cAGzD,kBAAC,IAAD,CACE1U,MAAM,UACN0V,UAAQ,EACR9C,SAAS,UACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,aAGzD,kBAAC,IAAD,CACE1U,MAAM,WACN0V,UAAQ,EACR9C,SAAS,WACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,qB,2DAUlCoB,EAAsB9U,GACrDpD,KAAKe,MAAMyN,UAAY2B,IACzBnQ,KAAK8Q,mBAAqB9Q,KAAK6Q,gBAMjC,IAAMsH,EAAsBnY,KAAK8Q,mBAC3BsH,EAAmBpY,KAAK2Q,wBAE9B,OAAOuH,EAAqBG,QAAO,SAACC,EAAa1T,GAG/C,YAAmBzF,IAFAgZ,EAAoBI,MAAK,SAACC,GAAD,OAAOA,EAAElW,OAASsC,EAAKtC,QAG3D,GAAN,mBAAWgW,GAAX,CAAwBF,EAAiBG,MAAK,SAACC,GAAD,OAAOA,EAAE9W,KAAOkD,EAAKlD,QAG9D4W,IACN,M,mDAIHtY,KAAKkT,4BAEL,IAAMiF,EAAsBnY,KAAK8Q,mBAC3BsH,EAAmBpY,KAAK2Q,wBAa9B,OAXA3Q,KAAK2Q,wBAA0ByH,EAAiBC,QAAO,SAACC,EAAa1T,GACnE,IAAM6T,EAAaN,EAAoBI,MAAK,SAACC,GAAD,OAAOA,EAAElW,OAASsC,EAAKtC,QAC7DoW,EAAcJ,EAAYC,MAAK,SAACC,GAAD,OAAOA,EAAE1I,qBAAuBlL,EAAKkL,sBAE1E,YAAmB3Q,IAAfsZ,QAA4CtZ,IAAhBuZ,EACxB,GAAN,mBAAWJ,GAAX,CAAwB1T,IAGnB0T,IACN,IAEItY,KAAK2Q,0B,8DAG2B,IAAD,OAChCmG,EAAc,6BACdnG,EAA0B3Q,KAAK2Y,6BAEjCC,EAAe,0CAMnB,OAJI5Y,KAAKe,MAAMyN,UAAY2B,IACzByI,EAAe,cAIf,kBAAC,IAAD,CACEhX,MAAOgX,EACP9W,UAAU,mBACVb,eAAe,EACfD,QAAQ,GAER,yBAAKc,UAAU,uBACb,yBAAKA,UAAU,kFACb,yBAAKkV,MAAO,CAAE7O,OAAQ,MACpB,kBAAC,IAAD,CACEhG,cAAe,CACb8U,cAAe,UACfC,WAAY,mBACZC,sBAAuB,MACvBC,uBAAwB,OACxBC,cAAe,WACfC,UAAW,mBAEbC,aAAW,EACXC,aAAW,EACX1T,MAAO6M,EACPjP,GAAIoV,EACJzI,UAAWrO,KAAK4Q,4BAChB6G,WAAW,WACXC,YAAa,SAACrW,EAAG+B,GAAJ,OAAa,EAAK+S,gCAAgC9U,EAAG+B,IAClEwU,OAAQ,SAACrB,GACP,EAAKsB,oBAAoBf,EAAanG,EAAyB4F,GAAY,KAG7E,kBAAC,IAAD,CACEnU,MAAM,wBACN0V,UAAQ,EACRC,eAAa,EACb/C,SAAS,OACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,SAEvD,kBAACpH,EAAD,OAGF,kBAAC,IAAD,CACEtN,MAAM,uBACN0V,UAAQ,EACR9C,SAAS,qBACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,wBAGzD,kBAAC,IAAD,CACE1U,MAAM,aACN0V,UAAQ,EACR9C,SAAS,qBACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,wBAGzD,kBAAC,IAAD,CACE1U,MAAM,UACN0V,UAAQ,EACR9C,SAAS,UACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,aAGzD,kBAAC,IAAD,CACE1U,MAAM,WACN0V,UAAQ,EACR9C,SAAS,WACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,cAGzD,kBAAC,IAAD,CACE1U,MAAM,UACN0V,UAAQ,EACR9C,SAAS,UACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,aAGzD,kBAAC,IAAD,CACE1U,MAAM,WACN0V,UAAQ,EACR9C,SAAS,WACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,qB,0CAUnDoB,GAClB,IAAMC,EAAsBnY,KAAK4Q,4BAC3BwH,EAAmBpY,KAAKyQ,wBAE9B,OAAOyH,EAAqBG,QAAO,SAACC,EAAa1T,GAG/C,YAAmBzF,IAFAgZ,EAAoBI,MAAK,SAACC,GAAD,OAA6C,IAAtCA,EAAE5D,YAAY5N,QAAQpC,EAAKtC,SAGtE,GAAN,mBAAWgW,GAAX,CAAwBF,EAAiBG,MAAK,SAACC,GAAD,OAAOA,EAAE9W,KAAOkD,EAAKlD,QAG9D4W,IACN,M,6CAGmB,IAAD,OACfxB,EAAc,6BACdrG,EAA0BzQ,KAAK6Y,6BAEjCD,EAAe,kBAMnB,OAJI5Y,KAAKe,MAAMyN,UAAY2B,IACzByI,EAAe,WAIf,kBAAC,IAAD,CACEhX,MAAOgX,EACP9W,UAAU,mBACVb,eAAe,EACfD,QAAQ,GAER,yBAAKc,UAAU,uBACb,yBAAKA,UAAU,kFACb,yBAAKkV,MAAO,CAAE7O,OAAQ,MACpB,kBAAC,IAAD,CACEhG,cAAe,CACb8U,cAAe,UACfC,WAAY,mBACZC,sBAAuB,MACvBC,uBAAwB,OACxBC,cAAe,WACfC,UAAW,mBAEbC,aAAW,EACXC,aAAW,EACX1T,MAAO2M,EACP/O,GAAIoV,EACJzI,UAAWrO,KAAK0Q,iCAChB+G,WAAW,WACXC,YAAa,SAACrW,EAAG+B,GAAJ,OAAa,EAAKgT,qCAAqC/U,EAAG+B,IACvEwU,OAAQ,SAACrB,GACP,EAAKsB,oBAAoBf,EAAarG,EAAyB8F,GAAY,KAG7E,kBAAC,IAAD,CACEnU,MAAM,cACN0V,UAAQ,EACRC,eAAa,EACb/C,SAAS,OACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,UAGzD,kBAAC,IAAD,CACE1U,MAAM,UACN0V,UAAQ,EACR9C,SAAS,UACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,aAGzD,kBAAC,IAAD,CACE1U,MAAM,WACN0V,UAAQ,EACR9C,SAAS,WACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,cAGzD,kBAAC,IAAD,CACE1U,MAAM,UACN0V,UAAQ,EACR9C,SAAS,UACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,aAGzD,kBAAC,IAAD,CACE1U,MAAM,WACN0V,UAAQ,EACR9C,SAAS,WACTgD,SAAUhY,KAAKiY,2BAA2BnB,EAAa,qB,oDAUxC,IAAD,OAC5B,OAAI9W,KAAKe,MAAMyN,UAAY2B,EAClB,KAIP,kBAAC,IAAD,CAAavO,MAAM,mBACjB,yBAAKE,UAAU,4EACb,wBAAIA,UAAU,qBACZ,wBAAIA,UAAU,qDAAqDF,MAAM,QACvE,2BAAOE,UAAU,4BAAjB,SAEF,wBAAIA,UAAU,oBACZ,kBAAC,IAAD,CACEoB,SAAU,SAACC,EAAOC,GAChB,EAAK7B,SAAS,CACZ4F,SAAU/D,EAAKG,QAGnBmL,MAAO1O,KAAKkB,MAAMiG,YAGtB,wBAAIrF,UAAU,qDAAqDF,MAAM,MACvE,2BAAOE,UAAU,4BAAjB,OAEF,wBAAIA,UAAU,oBACZ,kBAAC,IAAD,CACEoB,SAAU,SAACC,EAAOC,GAChB,EAAK7B,SAAS,CACZ8F,OAAQjE,EAAKG,QAGjBmL,MAAO1O,KAAKkB,MAAMmG,YAK1B,yBAAKvF,UAAU,6FACb,kBAAC,IAAD,CACEA,UAAU,eACVsN,gBAAiBpP,KAAKkB,MAAMiQ,mBAC5BjO,SAAU,SAAC7B,GACT,EAAKE,SAAS,CACZ4P,oBAAqB9P,EAAE0O,OAAOsB,WAGlClP,cAAe,CACbC,MAAO,uCAEToM,QAAQ,SACRO,OAAQ,CACNO,eAAgB,sBAChBC,cAAe,mCAGnB,yBAAKzN,UAAU,oBACb,kBAAC,IAAD,CACEM,MAAM,WACNoM,QAAQ,QACRtM,QAAS,WACP,EAAKoP,wB,6CAUjB,OAAKtR,KAAKyQ,wBAGR,6BACGzQ,KAAKuQ,mBAAmBlK,OAAS,EAAIrG,KAAK8Y,yCAA2C,KACrF9Y,KAAK8Q,mBAAmBzK,OAAS,EAAIrG,KAAK+Y,wCAA0C,KACpF/Y,KAAK4Q,4BAA4BvK,OAAS,EAAIrG,KAAKgZ,uBAAyB,MANvC,O,+BAY1C,OACE,yBAAKhC,MAAO,CAAEiC,UAAW,MACtBjZ,KAAKkB,MAAM6G,WAAa,kBAAC,IAAD,CAASxF,KAAK,QAAQiM,QAAQ,UAEtDxO,KAAKkZ,8BACLlZ,KAAKmZ,uBAEN,kBAAC,IAAD,CACE3J,IAAKxP,KAAKqQ,MACVrI,YAAahI,KAAKkB,MAAMsI,UACxByH,cAAejR,KAAKkB,MAAM+P,qB,GAniCmBzO,IAAMC,WAmjC7D2N,EAA0BgJ,aAAe,CACvC5K,QAAS,SACT0C,aAAc,CACZ/J,SAAU,IAAIC,KACdC,OAAQ,IAAID,KACZ+K,MAAO","file":"static/js/2.38316cc5.chunk.js","sourcesContent":["/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      // load token\n      // anticipates that the API token is in the referrer\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","/* eslint-disable */\nimport React from \"react\";\nimport { Icon } from \"@salesforce/design-system-react\";\n\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isOpen: PropTypes.bool,\n  isCollapsible: PropTypes.bool,\n  onToggle: PropTypes.func,\n  title: PropTypes.string.isRequired,\n  helpText: PropTypes.any,\n  id: PropTypes.string,\n  key: PropTypes.string,\n  children: PropTypes.any.isRequired\n};\n\nclass SLDSSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { isOpen, isCollapsible } = props;\n\n    this.state = {\n      isOpen: isOpen === true ? true : false || isCollapsible === undefined\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(e) {\n    const { onToggle } = this.props;\n\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n\n    if (onToggle) {\n      onToggle(isOpen);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { id, key, isCollapsible, title, helpText, className, children } = this.props;\n    const { isOpen } = this.state;\n\n    const titleElement = (\n      <span\n        className={`slds-truncate${isCollapsible ? \"\" : \" slds-p-horizontal_small\"}`}\n        title={title}\n      >\n        {title}\n        {helpText}\n      </span>\n    );\n\n    return (\n      <div\n        id={id || key}\n        className={[\"slds-section\", isOpen && \"slds-is-open\", className].join(\n          \" \"\n        )}\n      >\n        <h3 className=\"slds-section__title slds-theme_shade\">\n          {isCollapsible ? (\n            <button type=\"button\" className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n              <Icon\n                assistiveText={{ label: title }}\n                category=\"utility\"\n                name=\"switch\"\n                size=\"x-small\"\n                className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n              />\n              {titleElement}\n            </button>\n          ) : (\n            titleElement\n          )}\n        </h3>\n        {isOpen && <div className=\"slds-section__content\">{children}</div>}\n      </div>\n    );\n  }\n}\n\nSLDSSection.propTypes = propTypes;\n\nexport default SLDSSection;\n","/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\";\n\nimport { Datepicker } from \"@salesforce/design-system-react\";\n\nimport { moment, datePickerFormatter, datePickerParser } from \"../lib/utils\";\n\nconst GRAXDatePicker = props => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  return (\n    <div className=\"slds-is-relative\">\n      <Datepicker\n        formatter={datePickerFormatter}\n        parser={datePickerParser}\n        // eslint-disable-next-line\n        {...props}\n        onChange={(event, data) => {\n          setIsValidDate(data.formattedDate === \"\" || moment(data.date).isValid());\n\n          if (props.onChange != null) {\n            props.onChange(event, data);\n          }\n        }}\n      />\n      {isValidDate === false ? (\n        <div className=\"slds-text-color_error\">\n          The date is invalid. Please select/write a valid date.\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GRAXDatePicker;\n","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));","const objectsToExcludeFromSummary = [\"grax_data_record__c\", \"grax__grax_data_record__c\"];\n\n/**\n * Check if the objectName is excluded from Summaries\n *\n * @export\n * @param { String } objectName - Salesforce Object Name\n * @returns { Boolean }\n */\nfunction isObjectExcludedFromSummary(objectName) {\n  return objectsToExcludeFromSummary.indexOf(objectName.toLowerCase()) !== -1;\n}\n\nmodule.exports = { isObjectExcludedFromSummary };\n","/* eslint-disable no-undef */\n/* global google */\nimport React from \"react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport { Spinner, Checkbox, Combobox } from \"@salesforce/design-system-react\";\n\nimport { comboboxFilterAndLimit } from \"../lib/utils\";\n\nexport default class GRAXSummaryChartsChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let fromDate = this.props.fromDate ? this.props.fromDate : new Date();\n    let toDate = this.props.toDate ? this.props.toDate : new Date();\n\n    fromDate.setHours(0);\n    fromDate.setMinutes(0);\n    toDate.setHours(23);\n    toDate.setMinutes(59);\n\n    const chartOptions = [\n      { label: \"Object Top Ten\", id: \"chartObjectTopTen\", call: () => this.chartObjectTopTen() },\n      { label: \"Objects By Date\", id: \"chartObjectByDate\", call: () => this.chartObjectByDate() },\n      {\n        label: \"Top Ten Processes\",\n        id: \"chartSummaryTopTen\",\n        call: () => this.chartSummaryTopTen(),\n      },\n      {\n        label: \"Processes By Date\",\n        id: \"chartSummaryByDate\",\n        call: () => this.chartSummaryByDate(),\n      },\n      {\n        label: \"Results by Date\",\n        id: \"chartAttributeProgressByDate\",\n        call: () => this.chartAttributeProgressByDate(),\n      },\n    ];\n\n    this.state = {\n      isLoading: true,\n      summaryData: this.props.summaryData,\n      defaultChartSettings: { width: \"100%\", height: 600, chartArea: { width: \"70%\", left: \"5%\" } },\n      showChartAttr: {\n        showRecords: true,\n        showInserted: true,\n        showUpdated: true,\n        showArchived: true,\n      },\n\n      chartFromDate: fromDate,\n      chartToDate: toDate,\n      showAttributeFilter: true,\n      hideChartOptions: false,\n      chartOptions: chartOptions,\n      chartSelection: [chartOptions[0]],\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return nextProps;\n  }\n\n  componentDidMount() {\n    // google.charts.load('current', {'packages':['corechart']});\n\n    google.charts.setOnLoadCallback(() => {\n      this.setState(\n        {\n          isLoading: false,\n        },\n        () => {\n          this.drawChart();\n        }\n      );\n    });\n  }\n\n  chartObjectTopTen() {\n    let summaryData = this.state.summaryData;\n    let otherSum = 0;\n    let objIndexes = {};\n    let chartDataIndexes = [];\n    let chartData = [];\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        nameSet.add(key);\n      }\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      objIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        let obj = summary.summaryMap[key];\n        let smyIndex = chartDataIndexes[key];\n\n        let n = obj.records ? obj.records : 0;\n\n        if (!smyIndex && smyIndex !== 0) {\n          smyIndex = counter;\n          chartDataIndexes[key] = counter;\n          chartData.push([key + \" [\" + n + \"]\", n]);\n          counter++;\n        } else {\n          let tempN = chartData[smyIndex][1] + n;\n\n          chartData[smyIndex] = [key + \" [\" + tempN + \"]\", tempN];\n        }\n\n        otherSum += n;\n      }\n    });\n\n    chartData.sort((a, b) => {\n      return -a[1] + b[1];\n    });\n\n    let top10BackedUpObjects = [[\"Object\", \"Backed Up\"]];\n\n    for (let i = 0; i < 10 && i < chartData.length; i++) {\n      let rec = chartData[i];\n      top10BackedUpObjects.push(rec);\n      otherSum -= rec[1];\n    }\n\n    if (otherSum > 0) {\n      top10BackedUpObjects.push([\"Others [\" + otherSum + \"]\", otherSum]);\n    }\n\n    let data = google.visualization.arrayToDataTable(top10BackedUpObjects);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.sliceVisibilityThreshold = 0;\n\n    // Display the chart inside the <div> element with id=\"piechart\"\n    return [google.visualization.PieChart, data, options];\n  }\n\n  chartObjectByDate() {\n    let summaryData = this.state.summaryData;\n    let chartData = [];\n    let chartDataIndexes = [];\n    let objIndexes = {};\n\n    let data = new google.visualization.DataTable();\n    data.addColumn(\"date\", \"Start Time\");\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        nameSet.add(key);\n      }\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      objIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n    let fromDateAxis;\n    let toDateAxis;\n\n    let objectsTotalValue = {};\n    /*\n        [\n            [\n                {v: date, f: label},\n                val1,\n                val2,\n                val3\n            ],\n            [...]\n        ]\n        */\n    summaryData.forEach((summary) => {\n      for (let key in summary.summaryMap) {\n        let obj = summary.summaryMap[key];\n\n        if (!obj.startTime) {\n          continue;\n        }\n\n        let n = obj.records ? obj.records : 0;\n        let smyDate = new Date(obj.startTime);\n        let smyDateFormated = this.formatStartTime(smyDate);\n        let smyIndex = chartDataIndexes[smyDate];\n\n        if (!fromDateAxis || fromDateAxis >= smyDate) {\n          fromDateAxis = new Date(smyDate);\n          fromDateAxis.setHours(fromDateAxis.getHours() - 1);\n        }\n\n        if (!toDateAxis || toDateAxis <= smyDate) {\n          toDateAxis = new Date(smyDate);\n          toDateAxis.setHours(toDateAxis.getHours() + 1);\n        }\n\n        if (!smyIndex && smyIndex !== 0) {\n          smyIndex = counter;\n          chartDataIndexes[smyDate] = counter;\n          chartData.push(new Array(sortedNames.length + 1).fill(undefined));\n          counter++;\n        }\n\n        chartData[smyIndex][0] = { v: smyDate, f: smyDateFormated };\n        if (!chartData[smyIndex][objIndexes[key] + 1]) {\n          chartData[smyIndex][objIndexes[key] + 1] = 0;\n        }\n        chartData[smyIndex][objIndexes[key] + 1] += n;\n        if (!objectsTotalValue[key]) {\n          objectsTotalValue[key] = 0;\n        }\n        objectsTotalValue[key] += n;\n      }\n    });\n\n    if (chartData.length === 0) return null;\n\n    for (let key in objIndexes) {\n      data.addColumn(\"number\", key + \" [\" + objectsTotalValue[key] + \"]\");\n    }\n\n    chartData.sort((a, b) => {\n      return a[0].v > b[0].v ? 1 : a[0].v < b[0].v ? -1 : 0;\n    });\n\n    data.addRows(chartData);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.interpolateNulls = true;\n    options.pointSize = 5;\n    options.explorer = {};\n    options.hAxis = {\n      title: \"Start Time\",\n      format: \"YYYY-dd-MM\\nhh:mm:ss\",\n      viewWindow: {\n        min: fromDateAxis,\n        max: toDateAxis,\n      },\n      viewWindowMode: \"maximized\",\n    };\n    options.vAxis = {\n      title: \"Backed up objects\",\n    };\n\n    // Display the chart inside the <div> element\n    return [google.visualization.LineChart, data, options];\n  }\n\n  chartSummaryTopTen() {\n    let summaryData = this.state.summaryData;\n    let otherSum = 0;\n    let summaryIndexes = {};\n    let chartDataIndexes = [];\n    let chartData = [];\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      nameSet.add(summary.spName);\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      summaryIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n\n    summaryData.forEach((summary) => {\n      let smyIndex = chartDataIndexes[summary.spName];\n      let n = summary.summaryResults.records ? summary.summaryResults.records : 0;\n\n      if (!smyIndex && smyIndex !== 0) {\n        chartData.push([summary.spName + \" [\" + n + \"]\", n]);\n      } else {\n        let tempN = chartData[smyIndex][1] + n;\n\n        chartData[smyIndex] = [summary.spName + \" [\" + tempN + \"]\", tempN];\n      }\n      otherSum += n;\n    });\n\n    chartData.sort((a, b) => {\n      return -a[1] + b[1];\n    });\n\n    let top10BackedUpSummaries = [[\"Summary\", \"Backed Up\"]];\n\n    for (let i = 0; i < 10 && i < chartData.length; i++) {\n      let rec = chartData[i];\n      top10BackedUpSummaries.push(rec);\n      otherSum -= rec[1];\n    }\n\n    if (otherSum > 0) {\n      top10BackedUpSummaries.push([\"Others [\" + otherSum + \"]\", otherSum]);\n    }\n\n    let data = google.visualization.arrayToDataTable(top10BackedUpSummaries);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.sliceVisibilityThreshold = 0;\n\n    // Display the chart inside the <div> element with id=\"piechart\"\n    return [google.visualization.PieChart, data, options];\n  }\n\n  chartSummaryByDate() {\n    let summaryData = this.state.summaryData;\n    let chartData = [];\n    let chartDataIndexes = [];\n    let objIndexes = {};\n\n    let data = new google.visualization.DataTable();\n    data.addColumn(\"date\", \"Start Time\");\n\n    let counter = 0;\n    let nameSet = new Set();\n    let sortedNames;\n\n    summaryData.forEach((summary) => {\n      nameSet.add(summary.spName);\n    });\n\n    sortedNames = new Array(...nameSet);\n\n    sortedNames.sort((a, b) => {\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      objIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n    let fromDateAxis;\n    let toDateAxis;\n\n    let objectsTotalValue = {};\n    /*\n        [\n            [\n                {v: date, f: label},\n                val1,\n                val2,\n                val3\n            ],\n            [...]\n        ]\n        */\n    summaryData.forEach((summary) => {\n      let sumRes = summary.summaryResults;\n\n      if (!sumRes.startTime) {\n        return;\n      }\n\n      let n = sumRes.records ? sumRes.records : 0;\n      let smyDate = new Date(sumRes.startTime);\n      let smyDateFormated = this.formatStartTime(smyDate);\n      let smyIndex = chartDataIndexes[smyDate];\n\n      if (!fromDateAxis || fromDateAxis >= smyDate) {\n        fromDateAxis = new Date(smyDate);\n        fromDateAxis.setHours(fromDateAxis.getHours() - 1);\n      }\n\n      if (!toDateAxis || toDateAxis <= smyDate) {\n        toDateAxis = new Date(smyDate);\n        toDateAxis.setHours(toDateAxis.getHours() + 1);\n      }\n\n      if (!smyIndex && smyIndex !== 0) {\n        smyIndex = counter;\n        chartDataIndexes[smyDate] = counter;\n        chartData.push(new Array(sortedNames.length + 1).fill(undefined));\n        counter++;\n      }\n\n      chartData[smyIndex][0] = { v: smyDate, f: smyDateFormated };\n      if (!chartData[smyIndex][objIndexes[summary.spName] + 1]) {\n        chartData[smyIndex][objIndexes[summary.spName] + 1] = 0;\n      }\n      chartData[smyIndex][objIndexes[summary.spName] + 1] += n;\n      if (!objectsTotalValue[summary.spName]) {\n        objectsTotalValue[summary.spName] = 0;\n      }\n      objectsTotalValue[summary.spName] += n;\n    });\n\n    if (chartData.length === 0) return null;\n\n    for (let key in objIndexes) {\n      data.addColumn(\"number\", key + \" [\" + objectsTotalValue[key] + \"]\");\n    }\n\n    chartData.sort((a, b) => {\n      return a[0].v > b[0].v ? 1 : a[0].v < b[0].v ? -1 : 0;\n    });\n\n    data.addRows(chartData);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.interpolateNulls = true;\n    options.explorer = {};\n    options.hAxis = {\n      title: \"Start Time\",\n      format: \"YYYY-dd-MM\\nhh:mm:ss\",\n      viewWindow: {\n        min: fromDateAxis,\n        max: toDateAxis,\n      },\n      viewWindowMode: \"maximized\",\n    };\n    options.vAxis = {\n      title: \"Backed up objects\",\n    };\n\n    // Display the chart inside the <div> element\n    return [google.visualization.LineChart, data, options];\n  }\n\n  chartAttributeProgressByDate() {\n    let summaryData = this.state.summaryData;\n    let chartData = [];\n    let chartDataIndexes = [];\n    let attIndexes = {};\n\n    let data = new google.visualization.DataTable();\n    data.addColumn(\"date\", \"Start Time\");\n\n    let counter = 0;\n    let sortedNames = [];\n    let attrNames = [];\n\n    if (this.state.showChartAttr.showRecords) {\n      attrNames.push(\"records\");\n    }\n    if (this.state.showChartAttr.showInserted) {\n      attrNames.push(\"inserted\");\n    }\n    if (this.state.showChartAttr.showUpdated) {\n      attrNames.push(\"updated\");\n    }\n    if (this.state.showChartAttr.showArchived) {\n      attrNames.push(\"archived\");\n    }\n\n    attrNames.forEach((attrName) => {\n      sortedNames.push(attrName);\n    });\n\n    sortedNames.sort((a, b) => {\n      return a < b ? -1 : a > b ? 1 : 0;\n    });\n\n    sortedNames.forEach((item) => {\n      attIndexes[item] = counter;\n      counter++;\n    });\n\n    counter = 0;\n    let fromDateAxis;\n    let toDateAxis;\n    let summarysTotalValue = {};\n    let selectedSummaries = new Set();\n\n    summaryData.forEach((summary) => {\n      let attr = {};\n      let summaryMap = summary.summaryMap;\n      let containsSelectedObjects = false;\n\n      for (let key in summaryMap) {\n        let obj = summaryMap[key];\n        if (obj) {\n          attrNames.forEach((attrName) => {\n            attr[attrName] = attr[attrName] ? attr[attrName] : 0;\n            attr[attrName] += obj[attrName] ? obj[attrName] : 0;\n          });\n          containsSelectedObjects = true;\n        }\n      }\n\n      if (containsSelectedObjects && summary.summaryResults.startTime) {\n        let startTime = new Date(summary.summaryResults.startTime);\n        startTime.setSeconds(0);\n\n        let smyDate = startTime;\n        let smyDateFormated =\n          startTime.getFullYear() +\n          \"-\" +\n          (startTime.getMonth() + 1).toString().padStart(2, \"0\") +\n          \"-\" +\n          startTime.getDate().toString().padStart(2, \"0\") +\n          \" \" +\n          startTime.getHours().toString().padStart(2, \"0\") +\n          \":\" +\n          startTime.getMinutes().toString().padStart(2, \"0\") +\n          \":\" +\n          startTime.getSeconds().toString().padStart(2, \"0\");\n        let smyIndex = chartDataIndexes[smyDate];\n\n        if (!fromDateAxis || fromDateAxis >= smyDate) {\n          fromDateAxis = new Date(smyDate);\n          fromDateAxis.setHours(fromDateAxis.getHours() - 1);\n        }\n\n        if (!toDateAxis || toDateAxis <= smyDate) {\n          toDateAxis = new Date(smyDate);\n          toDateAxis.setHours(toDateAxis.getHours() + 1);\n        }\n\n        if (!smyIndex && smyIndex !== 0) {\n          smyIndex = counter;\n          chartDataIndexes[smyDate] = counter;\n          chartData.push(new Array(attrNames.length + 1).fill(undefined));\n          counter++;\n        }\n\n        chartData[smyIndex][0] = { v: smyDate, f: smyDateFormated + \"\\n\" + summary.spName };\n\n        attrNames.forEach((attrName) => {\n          if (!chartData[smyIndex][attIndexes[attrName] + 1]) {\n            chartData[smyIndex][attIndexes[attrName] + 1] = 0;\n          }\n          chartData[smyIndex][attIndexes[attrName] + 1] += attr[attrName];\n\n          if (!summarysTotalValue[attrName]) {\n            summarysTotalValue[attrName] = 0;\n          }\n          summarysTotalValue[attrName] += attr[attrName];\n        });\n\n        selectedSummaries.add(summary.spName);\n      }\n    });\n\n    if (chartData.length === 0) return null;\n\n    for (let key in attIndexes) {\n      if (summarysTotalValue[key] !== undefined) {\n        data.addColumn(\"number\", key + \" [\" + summarysTotalValue[key] + \"]\");\n      }\n    }\n\n    chartData.sort((a, b) => {\n      return a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0;\n    });\n\n    data.addRows(chartData);\n\n    // Optional; add a title and set the width and height of the chart\n    let options = JSON.parse(JSON.stringify(this.state.defaultChartSettings));\n    options.interpolateNulls = true;\n    options.isStacked = true;\n    options.explorer = {};\n    options.hAxis = {\n      title: \"Start Date\",\n      format: \"YYYY-dd-MM\\n hh:mm:ss\",\n      viewWindowMode: \"pretty\",\n      viewWindow: {\n        min: fromDateAxis,\n        max: toDateAxis,\n      },\n    };\n    options.vAxis = {\n      title: \"Attributes\",\n    };\n\n    // Display the chart inside the <div> element\n    return [google.visualization.ColumnChart, data, options];\n  }\n\n  drawChart() {\n    let ret = this.state.chartSelection[0].call();\n\n    this.setState(\n      {\n        isLoading: false,\n        isBlank: ret == null,\n      },\n      () => {\n        if (ret) {\n          var chart = new ret[0](this.chartEl);\n          chart.draw(ret[1], ret[2]);\n        }\n      }\n    );\n  }\n\n  selectChart(selection) {\n    this.setState(\n      {\n        chartInput: \"\",\n        chartSelection: selection,\n      },\n      this.drawChart\n    );\n  }\n\n  setDateFilter(fromDate, toDate) {\n    this.setState({\n      chartFromDate: fromDate,\n      chartToDate: toDate,\n    });\n  }\n\n  formatStartTime(startTime) {\n    return (\n      startTime.getFullYear() +\n      \"-\" +\n      (startTime.getMonth() + 1).toString().padStart(2, \"0\") +\n      \"-\" +\n      startTime.getDate().toString().padStart(2, \"0\") +\n      \" \" +\n      startTime.getHours().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getMinutes().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getSeconds().toString().padStart(2, \"0\")\n    );\n  }\n\n  formatDate(dt) {\n    return dt.getMonth() + 1 + \"/\" + dt.getDate() + \"/\" + dt.getFullYear();\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <div>\n        <div>\n          {!this.state.hideChartOptions && (\n            <div className=\"slds-grid slds-wrap\">\n              <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n                <SLDSSection title=\"Chart Options\" isCollapsible=\"true\">\n                  <div className=\"slds-grid slds-wrap\">\n                    <div\n                      className={\n                        this.state.chartSelection[0].id === \"chartAttributeProgressByDate\" &&\n                        this.state.showAttributeFilter\n                          ? \"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\"\n                          : \"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\"\n                      }\n                    >\n                      <Combobox\n                        events={{\n                          onChange: (event, { value }) => {\n                            this.chartInput = value;\n                            this.setState(\n                              {\n                                chartInput: value,\n                              },\n                              this.drawChart\n                            );\n                          },\n                          onRequestRemoveSelectedOption: (event, data) => {\n                            this.setState({\n                              chartInput: \"\",\n                              chartSelection: data.selection,\n                            });\n                          },\n                          onSelect: (event, data) => {\n                            this.selectChart(data.selection);\n\n                            if (this.props.onChartSelect) {\n                              this.props.onChartSelect(event, data.selection);\n                            }\n                          },\n                        }}\n                        labels={{\n                          label: \"Chart Type\",\n                          placeholder: \"-- SELECT CHART TYPE --\",\n                        }}\n                        options={comboboxFilterAndLimit({\n                          inputValue: this.state.chartInput,\n                          limit: 1000,\n                          options: this.state.chartOptions,\n                          selection: this.state.chartSelection,\n                        })}\n                        selection={this.state.chartSelection}\n                        value={this.state.chartInput}\n                        variant=\"readonly\"\n                      />\n                    </div>\n\n                    {this.state.chartSelection[0].id === \"chartAttributeProgressByDate\" &&\n                      this.state.showAttributeFilter && (\n                        <div className=\"slds-col slds-size_1-of-2 slds-medium-size_1-of-2 slds-large-size_1-of-2\">\n                          <SLDSSection\n                            title=\"Display Values\"\n                            className=\"slds-p-left_small slds-m-top_none\"\n                          >\n                            <div className=\"slds-grid slds-wrap\">\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showRecords}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showRecords = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => this.drawChart()\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Records\",\n                                    toggleEnabled: \"Records\",\n                                  }}\n                                />\n                              </div>\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showInserted}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showInserted = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => this.drawChart()\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Inserted\",\n                                    toggleEnabled: \"Inserted\",\n                                  }}\n                                />\n                              </div>\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showUpdated}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showUpdated = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => this.drawChart()\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Updated\",\n                                    toggleEnabled: \"Updated\",\n                                  }}\n                                />\n                              </div>\n                              <div className=\"slds-align_absolute-center slds-m-bottom_small slds-col slds-size_1-of-2 slds-medium-size_1-of-4 slds-large-size_1-of-4 slds-x-large-size_1-of-4\">\n                                <Checkbox\n                                  className=\"inline-block\"\n                                  defaultChecked={this.state.showChartAttr.showArchived}\n                                  onChange={(isChecked) => {\n                                    let showChartAttr = this.state.showChartAttr;\n                                    showChartAttr.showArchived = isChecked;\n                                    this.setState(\n                                      {\n                                        showChartAttr: showChartAttr,\n                                        isLoading: false,\n                                      },\n                                      () => {\n                                        this.drawChart();\n                                      }\n                                    );\n                                  }}\n                                  assistiveText={{\n                                    label: \"Remove empty?\",\n                                  }}\n                                  variant=\"toggle\"\n                                  labels={{\n                                    toggleDisabled: \"Archived\",\n                                    toggleEnabled: \"Archived\",\n                                  }}\n                                />\n                              </div>\n                            </div>\n                          </SLDSSection>\n                        </div>\n                      )}\n                  </div>\n                </SLDSSection>\n              </div>\n            </div>\n          )}\n\n          {this.state.isBlank ? null : <div ref={(chartEl) => (this.chartEl = chartEl)} />}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport {\n  Spinner,\n  Checkbox,\n  Button,\n  DataTable,\n  DataTableColumn,\n  DataTableCell,\n  Combobox,\n} from \"@salesforce/design-system-react\";\nimport GRAXDatePicker from \"./GRAXDatePicker\";\n\nimport { baseUrl, GetParams, orgid } from \"../lib/grax-data-lake\";\n\nimport {\n  moment,\n  getUTCTimeRangeFromUserDate,\n  DATE_FORMAT,\n  DATETIME_FORMAT,\n  TZ,\n  comboboxFilterAndLimit,\n  INVALID_DATE,\n} from \"../lib/utils\";\n\nimport $ from \"jquery\";\n\nimport \"../public/js/jquery.sldsTree.js\";\n\nimport { isObjectExcludedFromSummary } from \"../lib/summaryChartsUtils\";\nimport GRAXSummaryChartsChart from \"./GRAXSummaryChartsChart\";\n\nconst CustomDataTableCell = ({ children, ...props }) => (\n  <DataTableCell {...props}>\n    <a\n      href={\n        baseUrl +\n        \"/grax-app/grax-data-lake/generateBackupSummary/\" +\n        props.item.spId +\n        \"/\" +\n        encodeURI(props.item.executionUniqueKey) +\n        \"?orgid=\" +\n        orgid\n      }\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </a>\n  </DataTableCell>\n);\nCustomDataTableCell.displayName = DataTableCell.displayName;\n\nexport const RECORD_SUMMARIES_VARIANT = \"record_summaries\";\n\nexport default class GRAXSummaryChartsAdvanced extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.chart = React.createRef();\n\n    this.summaryDataResults = [];\n    this.summaryDataSelected = [];\n    this.itemsObjectsByDataRange = [];\n    this.itemsObjectsByDataRangeSelection = [];\n    this.summaryBreakdownDTItems = [];\n    this.summaryBreakdownDTSelection = [];\n    this.summaryDTItems = [];\n    this.summaryDTSelection = [];\n    this.chartOptions = [];\n    this.defaultChartSettings = {\n      width: \"100%\",\n      height: 600,\n      chartArea: { width: \"70%\", left: \"5%\" },\n    };\n\n    this.displayValuesOptions = [\n      { id: \"all\", label: \"Show all\" },\n      { id: \"inserted\", label: \"Only show schedule processes that have at least 1 insert\" },\n      { id: \"updated\", label: \"Only show schedule processes that have at least 1 update\" },\n      { id: \"archived\", label: \"Only show schedule processes that have at least 1 archive\" },\n    ];\n\n    const displayValuesSelection = [this.displayValuesOptions[0]];\n\n    this.state = {\n      isLoading: true,\n      renderCounter: 0,\n\n      chartData: [],\n\n      chartSelection: [],\n      chartInput: \"\",\n      fromDate: props.filterParams.fromDate,\n      toDate: props.filterParams.toDate,\n      _currentOrgRecords: true,\n\n      summaryDTFilters: {\n        showRecords: true,\n        showInserted: true,\n        showUpdated: true,\n        showArchived: true,\n      },\n\n      inputValue: \"Select an option\",\n      selection: [],\n      checked: [],\n\n      displayValuesSelection,\n\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      this.loadSummaries();\n    } else {\n      this.setState({\n        isLoading: false,\n      });\n    }\n  }\n\n  loadSummaries() {\n    this.summaryDTSelection = [];\n    this.summaryBreakdownDTSelection = [];\n    this.itemsObjectsByDataRangeSelection = [];\n\n    this.setState({\n      isLoading: true,\n    });\n\n    let currentChartSelected = this.state.chartSelected;\n\n    let fromDT = this.state.fromDate;\n    fromDT =\n      fromDT.getFullYear() +\n      \"-\" +\n      (fromDT.getMonth() + 1).toString().padStart(2, 0) +\n      \"-\" +\n      fromDT.getDate().toString().padStart(2, 0);\n    let toDT = this.state.toDate;\n    toDT =\n      toDT.getFullYear() +\n      \"-\" +\n      (toDT.getMonth() + 1).toString().padStart(2, 0) +\n      \"-\" +\n      toDT.getDate().toString().padStart(2, 0);\n\n    let query = { AND: [] };\n\n    fromDT = getUTCTimeRangeFromUserDate({ date: fromDT })[0];\n    toDT = getUTCTimeRangeFromUserDate({ date: toDT })[1];\n\n    if (fromDT !== INVALID_DATE) {\n      query.AND.push({ GTE: { \"summaryResults.startTime\": fromDT } });\n    }\n\n    if (toDT !== INVALID_DATE) {\n      query.AND.push({ LTE: { \"summaryResults.startTime\": toDT } });\n    }\n\n    if (this.state._currentOrgRecords) {\n      query.AND.push({ KEQ: { graxorgid: orgid } });\n    }\n\n    if (this.props.filterParams.gspId != null) {\n      query.AND.push({ KEQ: { spId: this.props.filterParams.gspId } });\n    }\n\n    $.ajax({\n      type: \"GET\",\n\n      url:\n        baseUrl +\n        \"/grax-app/grax-data-lake\" +\n        GetParams({\n          action: \"load\",\n          dataIndex: \"graxgrax_backup_summaryindex\",\n          _index: \"graxgrax_backup_summaryindex,graxgrax_summaryindex\",\n          _select: \"summaryMap,spName,spId,CreatedDate,summaryResults,executionUniqueKey\",\n          _q: JSON.stringify(query),\n          _limit: 1000,\n          _from: 0,\n          _sort: \"\",\n          _sortType: \"\",\n          _ignore_unavailable: true,\n        }),\n\n      success: (data) => {\n        // IF NO data.results THEN LOAD FOR WORKING ONLY LOCALLY\n        if (data.results) {\n          this.summaryDataResults = data.results;\n        }\n\n        this.setState(\n          {\n            isLoading: false,\n            chartSelected: currentChartSelected,\n          },\n          () => {\n            this.loadSummaryDataTable();\n            this.loadSummaryBreakdownTable();\n            this.loadObjectDataTable();\n          }\n        );\n      },\n      error: (xhr, status, err) => {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoading: false,\n        });\n      },\n    });\n  }\n\n  getSelectedSummary() {\n    this.summaryBreakdownDTSelection = this.getScheduleProcessBreakdownSelection(\n      this.summaryBreakdownDTSelection\n    );\n\n    const selectedSummaries = this.summaryBreakdownDTSelection;\n    const summaryDataResults = this.summaryDataResults;\n\n    const summaries4chart = [];\n\n    selectedSummaries.forEach((summary) => {\n      summaries4chart.push(summaryDataResults[summary.index]);\n      /*summary.index.forEach(function(index){\n          summaries4chart.push( summaryDataResults[index] );\n        });*/\n    });\n\n    return summaries4chart;\n  }\n\n  loadSummaryDataTable() {\n    const summaryList = this.summaryDataResults;\n    const dtSummaries = [];\n\n    if (summaryList) {\n      const [\n        displayValuesOption = this.displayValuesOptions[0],\n      ] = this.state.displayValuesSelection;\n\n      let i = 0;\n\n      summaryList.forEach((summary) => {\n        const { summaryResults = {} } = summary;\n        const { records = 0, inserted = 0, updated = 0, archived = 0 } = summaryResults;\n\n        if (\n          (displayValuesOption.id === \"archived\" && archived === 0) ||\n          (displayValuesOption.id === \"inserted\" && inserted === 0) ||\n          (displayValuesOption.id === \"updated\" && updated === 0)\n        ) {\n          return;\n        }\n\n        const { spId, spName, executionUniqueKey, CreatedDate } = summary;\n\n        const existIndex = dtSummaries.filter((e) => e.name === spName);\n\n        if (existIndex && existIndex.length > 0) {\n          existIndex[0].index.push(i);\n\n          existIndex[0].records += records;\n          existIndex[0].inserted += inserted;\n          existIndex[0].updated += updated;\n          existIndex[0].archived += archived;\n        } else {\n          const createdDate = new Date(CreatedDate);\n          const startTime = new Date(summaryResults.startTime);\n\n          dtSummaries.push({\n            name: spName,\n            id: spName,\n            spId,\n            executionUniqueKey,\n            CreatedDate,\n            CreatedDateFormatted: moment.utc(createdDate).tz(TZ).format(DATE_FORMAT),\n            startTime,\n            startTimeFormatted: moment.utc(startTime).tz(TZ).format(DATETIME_FORMAT),\n            records,\n            inserted,\n            updated,\n            archived,\n            index: [i],\n          });\n        }\n        i++;\n      });\n    }\n\n    this.summaryDTItems = dtSummaries;\n\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      this.summaryDTSelection = this.summaryDTItems;\n    }\n  }\n\n  loadSummaryBreakdownTable() {\n    const summaryToShow = this.summaryDTSelection;\n    const summaryDataResults = this.summaryDataResults;\n    const summaryBreakdownDTItems = [];\n\n    if (summaryToShow) {\n      summaryToShow.forEach((dtSummary) => {\n        dtSummary.index.forEach((index) => {\n          let summary = summaryDataResults[index];\n\n          let archived = summary.summaryResults.archived;\n          let records = summary.summaryResults.records;\n          let inserted = summary.summaryResults.inserted;\n          let updated = summary.summaryResults.updated;\n\n          archived = archived ? archived : 0;\n          records = records ? records : 0;\n          inserted = inserted ? inserted : 0;\n          updated = updated ? updated : 0;\n\n          const createdDate = new Date(summary.CreatedDate);\n          const startTime = new Date(summary.summaryResults.startTime);\n\n          summaryBreakdownDTItems.push({\n            spId: summary.spId,\n            name: summary.spName,\n            Id: summary.Id,\n            id: summary.executionUniqueKey,\n            executionUniqueKey: summary.executionUniqueKey,\n            index: index,\n            CreatedDate: summary.CreatedDate,\n            CreatedDateFormatted: moment.utc(createdDate).tz(TZ).format(DATE_FORMAT),\n            startTime: summary.startTime,\n            startTimeFormatted: moment.utc(startTime).tz(TZ).format(DATETIME_FORMAT),\n            records,\n            inserted,\n            updated,\n            archived,\n            objectsList: summary.summaryMap ? Object.keys(summary.summaryMap) : [],\n          });\n        });\n      });\n    }\n\n    this.summaryBreakdownDTItems = summaryBreakdownDTItems;\n\n    this.dataTableRefreshSort(\"DataTable_SummaryBreakdown\", this.summaryBreakdownDTItems, {\n      property: \"name\",\n      sortDirection: \"asc\",\n    });\n  }\n\n  loadObjectDataTable(updateState = true) {\n    let summaryToShow = this.getSelectedSummary();\n    let itemsObjectsByDataRange = [];\n\n    if (summaryToShow) {\n      let allSummaries = {};\n\n      summaryToShow.forEach((summaryData) => {\n        var summaryMap = summaryData.summaryMap;\n\n        let smyDate = new Date(summaryData.summaryResults.startTime);\n\n        for (var objName in summaryMap) {\n          if (typeof summaryMap[objName] == \"object\" && !isObjectExcludedFromSummary(objName)) {\n            let archived = summaryMap[objName].archived;\n            let records = summaryMap[objName].records;\n            let inserted = summaryMap[objName].inserted;\n            let updated = summaryMap[objName].updated;\n\n            archived = archived ? archived : 0;\n            records = records ? records : 0;\n            inserted = inserted ? inserted : 0;\n            updated = updated ? updated : 0;\n\n            let _allSumaries = allSummaries[objName];\n\n            if (!_allSumaries) {\n              _allSumaries = {};\n              _allSumaries.name = objName;\n              _allSumaries.id = objName;\n              _allSumaries.archived = 0;\n              _allSumaries.records = 0;\n              _allSumaries.inserted = 0;\n              _allSumaries.updated = 0;\n              _allSumaries.startTimes = [];\n            }\n            _allSumaries.archived += archived ? archived : 0;\n            _allSumaries.records += records ? records : 0;\n            _allSumaries.inserted += inserted ? inserted : 0;\n            _allSumaries.updated += updated ? updated : 0;\n\n            let dateIndex = _allSumaries.startTimes.indexOf(smyDate);\n\n            if (dateIndex < 0) {\n              dateIndex = _allSumaries.startTimes.length;\n\n              _allSumaries.startTimes.push({\n                startTime: smyDate,\n                archived: 0,\n                records: 0,\n                inserted: 0,\n                updated: 0,\n              });\n            }\n\n            let dateData = _allSumaries.startTimes[dateIndex];\n            dateData.archived += archived ? archived : 0;\n            dateData.records += records ? records : 0;\n            dateData.inserted += inserted ? inserted : 0;\n            dateData.updated += updated ? updated : 0;\n\n            allSummaries[objName] = _allSumaries;\n          }\n        }\n      });\n\n      // Top Ten Data\n      for (var objName in allSummaries) {\n        itemsObjectsByDataRange.push(allSummaries[objName]);\n      }\n\n      // itemsObjectsByDataRangeSelection = itemsObjectsByDataRange;\n    }\n\n    this.itemsObjectsByDataRange = itemsObjectsByDataRange;\n\n    this.dataTableRefreshSort(\"DataTable_ObjectsInSummary\", this.itemsObjectsByDataRange, {\n      property: \"name\",\n      sortDirection: \"asc\",\n    });\n    // this.itemsObjectsByDataRangeSelection = itemsObjectsByDataRangeSelection;\n\n    if (updateState) {\n      this.setState(\n        {\n          isLoading: false,\n          renderCounter: this.state.renderCounter + 1,\n        },\n        this.refreshChart\n      );\n    }\n  }\n\n  getItemsObjectsByDataRange() {\n    this.loadObjectDataTable(false);\n\n    return this.itemsObjectsByDataRange;\n  }\n\n  refreshChart() {\n    const chartData = [];\n\n    const summartDataResults = this.summaryDataResults;\n    // const summaryDTSelection = this.summaryDTSelection;\n    const summaryBreakdownDTSelection = this.summaryBreakdownDTSelection;\n    const itemsObjectsByDataRangeSelection = this.itemsObjectsByDataRangeSelection;\n\n    const summaryIds = {};\n    summaryBreakdownDTSelection.forEach((summary) => {\n      summaryIds[summary.Id] = summary.Id;\n    });\n\n    const objNames = {};\n    itemsObjectsByDataRangeSelection.forEach((obj) => {\n      objNames[obj.name] = obj.name;\n    });\n\n    summartDataResults.forEach((summary) => {\n      const tempData = {};\n      if (summaryIds[summary.Id]) {\n        tempData.summaryMap = {};\n        tempData.spName = summary.spName;\n        tempData.summaryResults = {\n          archived: 0,\n          records: 0,\n          inserted: 0,\n          update: 0,\n          startTime: summary.summaryResults.startTime,\n          endTime: summary.summaryResults.endTime,\n        };\n\n        for (let key in summary.summaryMap) {\n          if (objNames[key]) {\n            let summaryMap = summary.summaryMap;\n            tempData.summaryMap[key] = summaryMap[key];\n            tempData.summaryResults.archived = summaryMap[key].archived\n              ? summaryMap[key].archived\n              : 0;\n            tempData.summaryResults.records = summaryMap[key].records ? summaryMap[key].records : 0;\n            tempData.summaryResults.inserted = summaryMap[key].inserted\n              ? summaryMap[key].inserted\n              : 0;\n            tempData.summaryResults.update = summaryMap[key].update ? summaryMap[key].update : 0;\n          }\n        }\n\n        chartData.push(tempData);\n      }\n    });\n\n    this.setState(\n      {\n        isLoading: false,\n        renderCounter: this.state.renderCounter + 1,\n        chartData,\n      },\n      () => {\n        this.chart.current.setDateFilter(this.state.fromDate, this.state.toDate);\n        this.chart.current.drawChart();\n      }\n    );\n  }\n\n  summaryDTHandleChanged(event, data) {\n    /*this.setState( {\n        isLoading: true\n      }, function(){ */\n    this.summaryDTSelection = data.selection;\n\n    this.loadSummaryBreakdownTable();\n    this.summaryBreakdownDTHandleChanged(null, {\n      selection: this.summaryBreakdownDTSelection,\n    });\n    //this.drawChart();\n    //} );\n\n    this.setState({\n      isLoading: false,\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  summaryBreakdownDTHandleChanged(event, data) {\n    this.summaryBreakdownDTSelection = this.getScheduleProcessBreakdownSelection(data.selection);\n    this.loadObjectDataTable();\n    this.itemsObjectsByDataRangeHandleChanged(null, {\n      selection: this.itemsObjectsByDataRangeSelection,\n    });\n    //this.drawChart();\n\n    this.setState({\n      isLoading: false,\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  itemsObjectsByDataRangeHandleChanged(event, data) {\n    /*this.setState({\n        isLoading: true\n      }, function(){*/\n    this.itemsObjectsByDataRangeSelection = this.getObjectsSelection(data.selection);\n\n    this.refreshChart();\n    //this.drawChart();\n    //});\n    this.setState({\n      isLoading: false,\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  dataTableHandleSort(dtName, items, sortColumn, callSortFunction = true) {\n    const sortProperty = sortColumn.property;\n    const sortDirection = sortColumn.sortDirection;\n    const newState = {\n      [dtName + \"Column\"]: sortProperty,\n      [dtName + \"Direction\"]: {\n        [sortProperty]: sortDirection,\n      },\n    };\n\n    if (callSortFunction) {\n      this.dataTableSortFunction(items, sortProperty, sortDirection);\n    }\n\n    this.setState(newState);\n  }\n\n  dataTableRefreshSort(dtName, items, sortColumn) {\n    const sortProperty = this.state[dtName + \"Column\"] || sortColumn.property;\n    const direction = this.state[dtName + \"Direction\"] || {\n      [sortColumn.property]: sortColumn.direction,\n    };\n\n    if (sortProperty != null && direction != null) {\n      const sortDirection = direction[sortProperty] || \"asc\";\n\n      this.dataTableSortFunction(items, sortProperty, sortDirection);\n    }\n  }\n\n  dataTableSortFunction(items, sortProperty, sortDirection) {\n    items.sort((a, b) => {\n      let val = 0;\n\n      if (a[sortProperty] > b[sortProperty]) {\n        val = 1;\n      }\n      if (a[sortProperty] < b[sortProperty]) {\n        val = -1;\n      }\n\n      if (sortDirection === \"desc\") {\n        val *= -1;\n      }\n\n      return val;\n    });\n  }\n\n  getIsDatatableSortedColumn(dtName, sortProperty) {\n    return this.state[dtName + \"Column\"] === sortProperty;\n  }\n\n  formatStartTime(startTime) {\n    return (\n      startTime.getFullYear() +\n      \"-\" +\n      (startTime.getMonth() + 1).toString().padStart(2, \"0\") +\n      \"-\" +\n      startTime.getDate().toString().padStart(2, \"0\") +\n      \" \" +\n      startTime.getHours().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getMinutes().toString().padStart(2, \"0\") +\n      \":\" +\n      startTime.getSeconds().toString().padStart(2, \"0\")\n    );\n  }\n\n  formatDate(dt) {\n    return dt.getMonth() + 1 + \"/\" + dt.getDate() + \"/\" + dt.getFullYear();\n  }\n\n  cleanFilterTables() {\n    this.summaryBreakdownDTItems = [];\n    this.summaryDTSelection = [];\n    this.summaryBreakdownDTSelection = [];\n    this.itemsObjectsByDataRangeSelection = [];\n    this.itemsObjectsByDataRange = [];\n\n    this.setState({\n      chartData: [],\n      renderCounter: this.state.renderCounter + 1,\n    });\n  }\n\n  renderAggregatedScheduleProcessSection() {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      return null;\n    }\n\n    const dataTableId = \"DataTable_Summaries\";\n\n    return (\n      <SLDSSection\n        title=\"Step 1: Aggregated GRAX Schedule Process\"\n        className=\"slds-p-top_large\"\n        isCollapsible={true}\n        isOpen={true}\n      >\n        <div className=\"slds-grid slds-wrap\">\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1 slds-p-horizontal_xx-small\">\n            <Combobox\n              events={{\n                onChange: (event, { value }) => {\n                  this.displayValuesInput = value;\n                  this.setState({\n                    displayValuesInput: value,\n                  });\n                },\n                onRequestRemoveSelectedOption: (event, data) => {\n                  this.setState(\n                    {\n                      displayValuesInput: \"\",\n                      displayValuesSelection: data.selection,\n                    },\n                    () => {\n                      this.loadSummaryDataTable();\n                      this.loadSummaryBreakdownTable();\n                      this.loadObjectDataTable();\n                    }\n                  );\n                },\n                onSelect: (event, data) => {\n                  this.setState(\n                    {\n                      displayValuesSelection: data.selection,\n                    },\n                    () => {\n                      this.loadSummaryDataTable();\n                      this.loadSummaryBreakdownTable();\n                      this.loadObjectDataTable();\n                    }\n                  );\n                },\n              }}\n              labels={{\n                label: \"Display Values\",\n                placeholder: \"-- SELECT OPTION --\",\n              }}\n              options={comboboxFilterAndLimit({\n                inputValue: this.state.displayValuesInput,\n                limit: 1000,\n                options: this.displayValuesOptions,\n                selection: this.state.displayValuesSelection,\n              })}\n              selection={this.state.displayValuesSelection}\n              value={this.state.displayValuesInput}\n              variant=\"readonly\"\n            />\n          </div>\n\n          <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1 slds-p-top_small\">\n            <div style={{ height: 300 }}>\n              <DataTable\n                assistiveText={{\n                  actionsHeader: \"actions\",\n                  columnSort: \"sort this column\",\n                  columnSortedAscending: \"asc\",\n                  columnSortedDescending: \"desc\",\n                  selectAllRows: \"all rows\",\n                  selectRow: \"select this row\",\n                }}\n                fixedHeader\n                fixedLayout\n                items={this.summaryDTItems}\n                id={dataTableId}\n                selection={this.summaryDTSelection}\n                selectRows=\"checkbox\"\n                onRowChange={(e, data) => this.summaryDTHandleChanged(e, data)}\n                onSort={(sortColumn) => {\n                  this.dataTableHandleSort(dataTableId, this.summaryDTItems, sortColumn);\n                }}\n              >\n                <DataTableColumn\n                  label=\"GRAX Schedule Process\"\n                  sortable\n                  primaryColumn\n                  property=\"name\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"name\")}\n                />\n\n                <DataTableColumn\n                  label=\"Records\"\n                  sortable\n                  property=\"records\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"records\")}\n                />\n\n                <DataTableColumn\n                  label=\"Inserted\"\n                  sortable\n                  property=\"inserted\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"inserted\")}\n                />\n\n                <DataTableColumn\n                  label=\"Updated\"\n                  sortable\n                  property=\"updated\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"updated\")}\n                />\n\n                <DataTableColumn\n                  label=\"Archived\"\n                  sortable\n                  property=\"archived\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"archived\")}\n                />\n              </DataTable>\n            </div>\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  getScheduleProcessBreakdownSelection(currentStepSelection, data) {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      this.summaryDTSelection = this.summaryDTItems;\n      // this.summaryBreakdownDTSelection = this.getSummaryBreakdownDTItems();\n\n      // return this.summaryBreakdownDTSelection;\n    }\n\n    const parentStepSelection = this.summaryDTSelection;\n    const currentStepItems = this.summaryBreakdownDTItems;\n\n    return currentStepSelection.reduce((accumulator, item) => {\n      const parentItem = parentStepSelection.find((x) => x.name === item.name);\n\n      if (parentItem !== undefined) {\n        return [...accumulator, currentStepItems.find((x) => x.id === item.id)];\n      }\n\n      return accumulator;\n    }, []);\n  }\n\n  getSummaryBreakdownDTItems() {\n    this.loadSummaryBreakdownTable();\n\n    const parentStepSelection = this.summaryDTSelection;\n    const currentStepItems = this.summaryBreakdownDTItems;\n\n    this.summaryBreakdownDTItems = currentStepItems.reduce((accumulator, item) => {\n      const parentItem = parentStepSelection.find((x) => x.name === item.name);\n      const currentItem = accumulator.find((x) => x.executionUniqueKey === item.executionUniqueKey);\n\n      if (parentItem !== undefined && currentItem === undefined) {\n        return [...accumulator, item];\n      }\n\n      return accumulator;\n    }, []);\n\n    return this.summaryBreakdownDTItems;\n  }\n\n  renderScheduleProcessBreakdownSection() {\n    const dataTableId = \"DataTable_SummaryBreakdown\";\n    const summaryBreakdownDTItems = this.getSummaryBreakdownDTItems();\n\n    let sectionTitle = \"Step 2: GRAX Schedule Process Breakdown\";\n\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      sectionTitle = \"Executions\";\n    }\n\n    return (\n      <SLDSSection\n        title={sectionTitle}\n        className=\"slds-p-top_large\"\n        isCollapsible={true}\n        isOpen={true}\n      >\n        <div className=\"slds-grid slds-wrap\">\n          <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n            <div style={{ height: 300 }}>\n              <DataTable\n                assistiveText={{\n                  actionsHeader: \"actions\",\n                  columnSort: \"sort this column\",\n                  columnSortedAscending: \"asc\",\n                  columnSortedDescending: \"desc\",\n                  selectAllRows: \"all rows\",\n                  selectRow: \"select this row\",\n                }}\n                fixedHeader\n                fixedLayout\n                items={summaryBreakdownDTItems}\n                id={dataTableId}\n                selection={this.summaryBreakdownDTSelection}\n                selectRows=\"checkbox\"\n                onRowChange={(e, data) => this.summaryBreakdownDTHandleChanged(e, data)}\n                onSort={(sortColumn) => {\n                  this.dataTableHandleSort(dataTableId, summaryBreakdownDTItems, sortColumn, false);\n                }}\n              >\n                <DataTableColumn\n                  label=\"GRAX Schedule Process\"\n                  sortable\n                  primaryColumn\n                  property=\"name\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"name\")}\n                >\n                  <CustomDataTableCell />\n                </DataTableColumn>\n\n                <DataTableColumn\n                  label=\"Execution Unique Key\"\n                  sortable\n                  property=\"executionUniqueKey\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"executionUniqueKey\")}\n                />\n\n                <DataTableColumn\n                  label=\"Start Time\"\n                  sortable\n                  property=\"startTimeFormatted\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"startTimeFormatted\")}\n                />\n\n                <DataTableColumn\n                  label=\"Records\"\n                  sortable\n                  property=\"records\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"records\")}\n                />\n\n                <DataTableColumn\n                  label=\"Inserted\"\n                  sortable\n                  property=\"inserted\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"inserted\")}\n                />\n\n                <DataTableColumn\n                  label=\"Updated\"\n                  sortable\n                  property=\"updated\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"updated\")}\n                />\n\n                <DataTableColumn\n                  label=\"Archived\"\n                  sortable\n                  property=\"archived\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"archived\")}\n                />\n              </DataTable>\n            </div>\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  getObjectsSelection(currentStepSelection) {\n    const parentStepSelection = this.summaryBreakdownDTSelection;\n    const currentStepItems = this.itemsObjectsByDataRange;\n\n    return currentStepSelection.reduce((accumulator, item) => {\n      const parentItem = parentStepSelection.find((x) => x.objectsList.indexOf(item.name) !== -1);\n\n      if (parentItem !== undefined) {\n        return [...accumulator, currentStepItems.find((x) => x.id === item.id)];\n      }\n\n      return accumulator;\n    }, []);\n  }\n\n  renderObjectsSection() {\n    const dataTableId = \"DataTable_ObjectsInSummary\";\n    const itemsObjectsByDataRange = this.getItemsObjectsByDataRange();\n\n    let sectionTitle = \"Step 3: Objects\";\n\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      sectionTitle = \"Objects\";\n    }\n\n    return (\n      <SLDSSection\n        title={sectionTitle}\n        className=\"slds-p-top_large\"\n        isCollapsible={true}\n        isOpen={true}\n      >\n        <div className=\"slds-grid slds-wrap\">\n          <div className=\"slds-col slds-size_10-of-12 slds-medium-size_10-of-12 slds-large-size_10-of-12\">\n            <div style={{ height: 300 }}>\n              <DataTable\n                assistiveText={{\n                  actionsHeader: \"actions\",\n                  columnSort: \"sort this column\",\n                  columnSortedAscending: \"asc\",\n                  columnSortedDescending: \"desc\",\n                  selectAllRows: \"all rows\",\n                  selectRow: \"select this row\",\n                }}\n                fixedHeader\n                fixedLayout\n                items={itemsObjectsByDataRange}\n                id={dataTableId}\n                selection={this.itemsObjectsByDataRangeSelection}\n                selectRows=\"checkbox\"\n                onRowChange={(e, data) => this.itemsObjectsByDataRangeHandleChanged(e, data)}\n                onSort={(sortColumn) => {\n                  this.dataTableHandleSort(dataTableId, itemsObjectsByDataRange, sortColumn, false);\n                }}\n              >\n                <DataTableColumn\n                  label=\"Object Name\"\n                  sortable\n                  primaryColumn\n                  property=\"name\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"name\")}\n                />\n\n                <DataTableColumn\n                  label=\"Records\"\n                  sortable\n                  property=\"records\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"records\")}\n                />\n\n                <DataTableColumn\n                  label=\"Inserted\"\n                  sortable\n                  property=\"inserted\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"inserted\")}\n                />\n\n                <DataTableColumn\n                  label=\"Updated\"\n                  sortable\n                  property=\"updated\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"updated\")}\n                />\n\n                <DataTableColumn\n                  label=\"Archived\"\n                  sortable\n                  property=\"archived\"\n                  isSorted={this.getIsDatatableSortedColumn(dataTableId, \"archived\")}\n                />\n              </DataTable>\n            </div>\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  renderFilterCriteriaSection() {\n    if (this.props.variant === RECORD_SUMMARIES_VARIANT) {\n      return null;\n    }\n\n    return (\n      <SLDSSection title=\"Filter Criteria\">\n        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1\">\n          <dl className=\"slds-list_stacked\">\n            <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"From\">\n              <label className=\"slds-form-element__label\">From</label>\n            </dt>\n            <dd className=\"slds-item_detail\">\n              <GRAXDatePicker\n                onChange={(event, data) => {\n                  this.setState({\n                    fromDate: data.date,\n                  });\n                }}\n                value={this.state.fromDate}\n              />\n            </dd>\n            <dt className=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"To\">\n              <label className=\"slds-form-element__label\">To</label>\n            </dt>\n            <dd className=\"slds-item_detail\">\n              <GRAXDatePicker\n                onChange={(event, data) => {\n                  this.setState({\n                    toDate: data.date,\n                  });\n                }}\n                value={this.state.toDate}\n              />\n            </dd>\n          </dl>\n        </div>\n        <div className=\"slds-col slds-size_1-of-1 slds-medium-size_2-of-4 slds-large-size_1-of-4 slds-m-top_small\">\n          <Checkbox\n            className=\"inline-block\"\n            defaultChecked={!this.state._currentOrgRecords}\n            onChange={(e) => {\n              this.setState({\n                _currentOrgRecords: !e.target.checked,\n              });\n            }}\n            assistiveText={{\n              label: \"Show records from all environments?\",\n            }}\n            variant=\"toggle\"\n            labels={{\n              toggleDisabled: \"Current Environment\",\n              toggleEnabled: \"All connected SF environments\",\n            }}\n          />\n          <div className=\"slds-float_right\">\n            <Button\n              label=\"Retrieve\"\n              variant=\"brand\"\n              onClick={() => {\n                this.loadSummaries();\n              }}\n            />\n          </div>\n        </div>\n      </SLDSSection>\n    );\n  }\n\n  renderFilterSections() {\n    if (!this.itemsObjectsByDataRange) return null;\n\n    return (\n      <div>\n        {this.summaryDataResults.length > 0 ? this.renderAggregatedScheduleProcessSection() : null}\n        {this.summaryDTSelection.length > 0 ? this.renderScheduleProcessBreakdownSection() : null}\n        {this.summaryBreakdownDTSelection.length > 0 ? this.renderObjectsSection() : null}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ minHeight: 2000 }}>\n        {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n\n        {this.renderFilterCriteriaSection()}\n        {this.renderFilterSections()}\n\n        <GRAXSummaryChartsChart\n          ref={this.chart}\n          summaryData={this.state.chartData}\n          renderCounter={this.state.renderCounter}\n        />\n      </div>\n    );\n  }\n}\n\nGRAXSummaryChartsAdvanced.propTypes = {\n  variant: PropTypes.string,\n  filterParams: PropTypes.shape({\n    fromDate: PropTypes.instanceOf(Date),\n    toDate: PropTypes.instanceOf(Date),\n    gspId: PropTypes.string,\n  }),\n};\n\nGRAXSummaryChartsAdvanced.defaultProps = {\n  variant: \"normal\",\n  filterParams: {\n    fromDate: new Date(),\n    toDate: new Date(),\n    gspId: null,\n  },\n};\n"],"sourceRoot":""}