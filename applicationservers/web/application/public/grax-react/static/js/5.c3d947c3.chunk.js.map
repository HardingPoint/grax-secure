{"version":3,"sources":["components/GRAXAuditDataTable.jsx","components/GRAXTree.jsx","components/GRAXAudit.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/SLDSPaginator.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXCSVExportButton.jsx","public/js/jquery.sldsTree.js"],"names":["GRAXTimeMachineCell","children","props","title","onClick","e","onClickHandler","preventDefault","displayName","DataTableCell","selectedDataIndex","GRAXAuditDataTable","state","sortColumn","sortDirection","items","extraInfo","page","isLoaded","isLoading","isTimeMachineModalOpen","timeMachineRecord","nextProps","nextState","this","renderKey","setState","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_select","_","union","columns","hiddenColumns","join","_q","filterQuery","_limit","_from","_sort","_sortType","getSortFieldType","success","data","results","filterFunction","map","item","i","forEach","val","key","SF_DATETIME_REGEXP","test","m","moment","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","id","toString","total","size","totalRetrieved","bind","error","xhr","status","err","console","getDataHandler","property","sortField","_graxFieldsSelection","find","assistiveText","dialogLabel","isOpen","onRequestClose","align","className","style","overflow","JSON","stringify","position","variant","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onSort","handleSort","columnName","isSorted","label","endsWith","match","sortable","isSortable","sortableColumns","log","Key","split","slice","SLDSPaginator","totalItems","length","pageSize","onChangePage","isInitialLoad","GRAXCSVExportButton","params","source","height","React","Component","cookieSubfix","renderFieldListSelector","$fieldListSelector","$fieldlist","onLoadHandler","onChangeHandler","sort","a","b","domPrefix","Date","now","sldsTree","attrs","root","class","onDiv","$div","settings","append","isSelected","onFinish","$root","fields","countChecked","cookieSelected","getCookie","updateValue","eventHandler","selectedFieldList","selectedFields","each","field","selected","push","getSelectedFields","setCookie","on","target","checked","prop","GRAXTree","_isMounted","reduce","_selection","fieldItem","onLoad","getMappedFieldSelection","onChange","selection","$el","el","fieldList","minHeight","Fragment","ref","fieldlist","ELASTIC_SORTABLE_TYPES","GRAXAudit","retrieved","retrievedCounter","_graxFields","_graxFieldsSelectionList","_filterFunction","dataList","_getFilterQuery","_filterValuesFields","_graxSortableFields","display","sortableFields","elasticField","SLDSSection","GRAXFilterGeneration","filterableFieldOptions","onFilterValueChangeHandler","getFilterQuery","process","window","__grax__","orgid","REACT_APP_ORGID","pageParams","authorization","REACT_APP_BASIC_TOKEN","token","_csrf","userid","undefined","param","ajaxSetup","beforeSend","method","setRequestHeader","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","isCollapsible","handleToggle","onToggle","category","name","pager","setPage","currentPage","totalPages","getPager","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","iconCategory","iconName","iconPosition","disabled","index","content","defaultProps","GRAXSFieldCombobox","options","inputValue","SObjectName","fieldName","picklistValues","value","onElseComponent","onRender","elseComponent","classNameMenu","events","event","onRequestRemoveSelectedOption","onSelect","labels","placeholder","comboboxFilterAndLimit","limit","multiple","required","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","isOpened","filterOptionsHandler","onOpen","onClose","_filterValues","_error","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","_filterValuesList","getFilterValuesList","getFilterFunction","splice","isReturned","filterOperator","filterVal","isArray","filterIsNegated","isFilterMatch","itemVal","Boolean","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","parseFloat","selectionIds","scope","data-label","width","defaultChecked","SObjectType","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","portalsRoot","document","getElementById","GRAXCSVExportForm","ReactDOM","createPortal","formId","encType","margin","padding","border","form","svgns","fn","extend","childs","ul","li","div","button","expandButton","expandIcon","onUl","$ul","onLi","$li","onButton","$button","getTreeItemContent","level","attr","toggleClass","icon","createElementNS","setAttribute","icon_use","setAttributeNS","path","appendChild","getTreeItemButton","getTreeItem","getTree","html","jQuery"],"mappings":"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","file":"static/js/5.c3d947c3.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\nimport {Spinner, DataTable, DataTableColumn, DataTableCell, Modal} from '@salesforce/design-system-react';\nimport SLDSPaginator from './SLDSPaginator';\nimport GRAXCSVExportButton from './GRAXCSVExportButton';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\nimport {moment, SF_DATETIME_REGEXP, DATETIME_FORMAT, DATE_FORMAT, TZ} from '../lib/utils';\n\nimport _ from 'lodash';\n\nconst ROWSXPAGE = 20;\n\n\nconst GRAXTimeMachineCell = ({ children, ...props }) => {\n\treturn (\n        <DataTableCell title={children}>\n            {children && (\n                <a onClick={(e) => {\n                    if(props.onClickHandler) {\n                        props.onClickHandler(children);\n                    }\n\n                    e.preventDefault();\n                }}>\n                    Load this version\n                </a>\n            )}\n        </DataTableCell>\n    );\n};\nGRAXTimeMachineCell.displayName = DataTableCell.displayName;\n\n\nexport default class GRAXAuditDataTable extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n        this.state = {\n\t\t\tsortColumn: 'CreatedDate',\n\t\t\tsortDirection: 'desc',\n            items: [],\n            extraInfo: {},\n            page: 0,\n            isLoaded: false,\n            isLoading: false,\n            isTimeMachineModalOpen: false,\n            timeMachineRecord: null\n\t\t};\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.renderKey !== nextProps.renderKey || this.state.items !== nextState.items || this.state.isLoaded !== nextState.isLoaded || this.state.isLoading !== nextState.isLoading || this.state.sortColumn !== nextState.sortColumn || this.state.sortDirection !== nextState.sortDirection || this.state.isTimeMachineModalOpen !== nextState.isTimeMachineModalOpen;\n    }\n\n    getDataHandler(page, sortColumn, sortDirection) {\n        this.setState({\n            isLoading: true,\n            page: page,\n            sortColumn: sortColumn,\n            sortDirection: sortDirection\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                action:'load',\n                dataIndex: this.props.dataIndex,\n                _select: _.union(this.props.columns, this.props.hiddenColumns).join(',') || 'Id',\n                _q: this.props.filterQuery,\n                _limit: ROWSXPAGE,\n                _from: ROWSXPAGE * page,\n                _sort: sortColumn + ' ' + sortDirection,\n                _sortType: this.getSortFieldType(sortColumn)\n            }),\n            /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n            success: function(data) {\n                var results = data.results;\n\n                if(this.props.filterFunction) {\n                    results = this.props.filterFunction(results);\n                }\n\n                results = _.map(results, (item, i) => {\n                    _.forEach(item, (val, key) => {\n                        if(typeof(val) == 'string') {\n                            if(SF_DATETIME_REGEXP.test(val)) {\n                                var m = moment(val);\n\n                                if(m.isValid()) {\n                                    item[key] = m.tz(TZ).format(m._i.indexOf(':') !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                                }\n                            }\n                        }\n                    });\n\n                    return {\n                        ...item,\n                        ...{id: i.toString()}\n                    }\n                });\n\n                this.setState({\n                    page: 0,\n                    data: results,\n                    extraInfo: data.extraInfo || {total: 0, size: ROWSXPAGE, totalRetrieved: 0},\n                    items: results,\n                    isLoaded: true,\n                    isLoading: false\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    isLoading: false,\n                    items: [],\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n    \n    componentDidMount() {\n        this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n    }\n\n\thandleSort(sortColumn, ...rest) {        \n        if(sortColumn.property) {\n            this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n        }\n    }\n    \n    getSortFieldType(sortField) {\n        if(!this.props._graxFieldsSelection) return null;\n\n        return (this.props._graxFieldsSelection.find((item) => {\n            return item.id === sortField;\n        }) || {}).type;\n    }\n\n\trender() {\n\t\treturn this.state.isLoaded ? (\n\t\t\t<div>\n                {this.state.isTimeMachineModalOpen ? (\n                    <Modal\n                        assistiveText={{ dialogLabel: 'Time Machine Record' }}\n                        isOpen={this.state.isTimeMachineModalOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                isTimeMachineModalOpen: false,\n                                timeMachineRecord: null\n                            });\n                        }}\n                        align=\"top\"\n                        size=\"large\"\n                    >\n                        <section className=\"slds-p-around_medium\" style={{\n                            overflow: 'auto'\n                        }}>\n                            {JSON.stringify(this.state.timeMachineRecord)}\n                        </section>\n                    </Modal>\n                ) : null}\n\n                <div style={{position: 'relative'}}>\n                    {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n                    <DataTable\n                        assistiveText={{\n                            actionsHeader: 'actions',\n                            columnSort: 'sort this column',\n                            columnSortedAscending: 'asc',\n                            columnSortedDescending: 'desc',\n                            selectAllRows: 'all rows',\n                            selectRow: 'select this row',\n                        }}\n                        fixedLayout\n                        items={this.state.items}\n                        id=\"GRAXAuditDataTable\"\n                        onSort={this.handleSort.bind(this)}\n                    >\n\n                        {this.props.columns.map((columnName) => (\n                            <DataTableColumn\n                                key={'col' + columnName}\n                                id={columnName}\n                                isSorted={this.state.sortColumn === columnName}\n                                label={columnName.endsWith('.keyword') ? columnName.match(/(.+)\\.keyword/)[1] : columnName}\n                                property={columnName}\n                                sortable\n                                sortDirection={this.state.sortDirection}\n                                isSortable={this.props.sortableColumns == null || this.props.sortableColumns.indexOf(columnName) !== -1}\n                            >\n                                {(columnName === 'ObjectVersion') ? (\n                                    <GRAXTimeMachineCell onClickHandler={(timeMachineRecord) => {\n                                        console.log({\n                                            Key: timeMachineRecord.split(/(\\/grax\\/)/).slice(1).join('')\n                                        });\n\n                                        /*var params = {\n                                            \"orgid\" : \"00D1I000003nRMaUAM\",\n                                            \"objecttype\" : \"Account\",\n                                            \"objectid\" : \"0014600000VpLa3AAF\",\n                                            \"filename\" : \"Account-0014600000VpLa3AAF-2018-10-23T15-38-14.json\"\n                                        };*/\n                                        \n                                        if(timeMachineRecord) {\n                                            this.setState({\n                                                isTimeMachineModalOpen: true,\n                                                timeMachineRecord: timeMachineRecord\n                                            });\n                                        }\n                                    }} />\n                                ) : null}\n                            </DataTableColumn>\n                        ))}\n                    </DataTable>\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n                    <SLDSPaginator totalItems={this.state.items.length > 0 ? this.state.extraInfo.total: 0} pageSize={ROWSXPAGE} onChangePage={(page, isInitialLoad) => {\n                        if(!isInitialLoad) {\n                            this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n                        }\n                    }} />\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n                    <GRAXCSVExportButton params={{\n                        source: 'elastic',\n                        dataIndex: this.props.dataIndex,\n                        _select: _.union(this.props.columns, this.props.hiddenColumns).join(','),\n                        _q: this.props.filterQuery,\n                        _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                        _sortType: this.getSortFieldType(this.state.sortColumn),\n                        columns: this.props.columns\n                    }} />\n                </div>\n\t\t\t</div>\n\t\t) : (\n            <div style={{ position: 'relative', height: '2rem' }}>\n                <Spinner size=\"medium\" variant=\"brand\" />\n            </div>\n        );\n\t}\n}","/* eslint-disable no-multi-str */\nimport React from \"react\";\nimport \"../public/js/jquery.sldsTree.js\";\n\nimport { Spinner } from \"@salesforce/design-system-react\";\n\nimport { $, baseUrl, GetParams } from \"../lib/grax-data-lake\";\n\nimport { getCookie, setCookie } from \"../lib/utils\";\n\nimport _ from \"lodash\";\n\nvar selectedDataIndex;\nvar cookieSubfix = \"Fields\";\n\nvar renderFieldListSelector = function(\n  $fieldListSelector,\n  $fieldlist,\n  data,\n  onLoadHandler,\n  onChangeHandler\n) {\n  data.sort(function(a, b) {\n    if (a.label > b.label) {\n      return 1;\n    }\n\n    if (a.label < b.label) {\n      return -1;\n    }\n\n    return 0;\n  });\n\n  var domPrefix = Date.now() + selectedDataIndex + cookieSubfix;\n\n  $fieldListSelector.sldsTree({\n    data: data,\n    attrs: {\n      root: { class: \"slds-scrollable_y\", style: \"max-height: 25vw\" }\n    },\n    onDiv: function($div, item, settings) {\n      $div.append(\n        '<div className=\"slds-size_1-of-1\">\\\n            <div className=\"slds-form-element\">\\\n                <div className=\"slds-form-element__control\">\\\n                    <span className=\"slds-checkbox\">\\\n                    <input name=\"field_' +\n          domPrefix +\n          item[settings.items.id] +\n          '\" id=\"field_' +\n          domPrefix +\n          item[settings.items.id] +\n          '\" type=\"checkbox\" ' +\n          (item.isSelected ? \"checked\" : \"\") +\n          ' />\\\n                    <label className=\"slds-checkbox__label\" for=\"field_' +\n          domPrefix +\n          item[settings.items.id] +\n          '\">\\\n                        <span className=\"slds-checkbox_faux\"></span>\\\n                        <span className=\"slds-form-element__label\">' +\n          item[settings.items.label] +\n          \"</span>\\\n                    </label>\\\n                    </span>\\\n                </div>\\\n                </div>\\\n            </div>\"\n      );\n    },\n    onFinish: function($root, items, settings) {\n      var fields = {};\n      var countChecked = 1;\n\n      var getSelectedFields = function() {\n        var selectedFields = [];\n\n        $.each(fields, function(field, selected) {\n          if (selected) {\n            selectedFields.push(field);\n          }\n        });\n\n        return selectedFields;\n      };\n\n      var cookieSelected = getCookie(selectedDataIndex + cookieSubfix);\n\n      var updateValue = function(eventHandler) {\n        var selectedFieldList = getSelectedFields();\n        var selectedFields = selectedFieldList.join(\",\");\n\n        $fieldlist.val(selectedFields);\n        setCookie(selectedDataIndex + cookieSubfix, selectedFields);\n\n        if (eventHandler) {\n          eventHandler(selectedFieldList);\n        }\n      };\n\n      $.each(items, function(i, item) {\n        var id = item[settings.items.id];\n\n        if (cookieSelected) {\n          fields[id] = cookieSelected.split(\",\").indexOf(id) !== -1;\n        } else {\n          fields[id] = item.isSelected;\n        }\n\n        $(\"#field_\" + domPrefix + id)\n          .on(\"change\", function(e) {\n            if (e.target.checked && countChecked >= 9) {\n              e.target.checked = false;\n              e.preventDefault();\n\n              return false;\n            }\n\n            fields[id] = e.target.checked;\n\n            if (e.target.checked) {\n              countChecked++;\n            } else {\n              countChecked--;\n            }\n\n            updateValue(onChangeHandler);\n          })\n          .prop(\"checked\", fields[id]);\n\n        //updateValue();\n      });\n\n      updateValue(onLoadHandler);\n    }\n  });\n};\n\nexport default class GRAXTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._isMounted = false;\n\n    this.state = {\n      items: [],\n      isLoaded: false\n    };\n  }\n\n  getMappedFieldSelection(selectedFieldList) {\n    return _.reduce(\n      this.state.items,\n      (_selection, fieldItem) => {\n        if (selectedFieldList.indexOf(fieldItem.id) !== -1) {\n          _selection.push(fieldItem);\n        }\n\n        return _selection;\n      },\n      []\n    );\n  }\n\n  onLoadHandler(selectedFieldList) {\n    if (this.props.onLoad) {\n      this.props.onLoad(\n        this.getMappedFieldSelection(selectedFieldList),\n        selectedFieldList,\n        this.state.items\n      );\n    }\n  }\n\n  onChangeHandler(selectedFieldList) {\n    if (this.props.onChange) {\n      this.props.onChange(\n        this.getMappedFieldSelection(selectedFieldList),\n        selectedFieldList,\n        this.state.items\n      );\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    selectedDataIndex = this.props.dataIndex;\n\n    if (this.props.cookieSubfix) {\n      cookieSubfix += this.props.cookieSubfix;\n    }\n\n    if (this.props.selection) {\n      setCookie(selectedDataIndex + cookieSubfix, this.props.selection.join(\",\"));\n    }\n\n    $.ajax({\n      type: \"GET\",\n      //dataType: 'jsonp',\n      url:\n        baseUrl +\n        \"/grax-app/grax-data-lake/getDataTypeFields/\" +\n        selectedDataIndex +\n        GetParams({ action: \"load\" }),\n      data: {},\n      success: function(data) {\n        if (this._isMounted) {\n          this.setState({\n            items: _.map(data, (val, key) => ({\n              id: key,\n              label: key,\n              type: val,\n              isSelected: !getCookie(selectedDataIndex + cookieSubfix) && key === \"Id\"\n            })),\n            isLoaded: true\n          });\n        }\n\n        this.$el = $(this.el);\n        this.$fieldlist = $(this.fieldList);\n\n        renderFieldListSelector(\n          this.$el,\n          this.$fieldlist,\n          this.state.items,\n          this.onLoadHandler.bind(this),\n          this.onChangeHandler.bind(this)\n        );\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        if (this._isMounted) {\n          this.setState({\n            isLoaded: true,\n            error: err.toString()\n          });\n        }\n      }.bind(this)\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.isLoaded !== nextState.isLoaded;\n  }\n\n  render() {\n    return (\n      <div style={{ position: \"relative\", minHeight: \"2rem\" }}>\n        {!this.state.isLoaded ? (\n          <Spinner size=\"small\" variant=\"base\" />\n        ) : (\n          <React.Fragment>\n            <input type=\"hidden\" ref={fieldlist => (this.fieldlist = fieldlist)} />\n            <div ref={el => (this.el = el)} />\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport SLDSSection from './SLDSSection';\nimport GRAXAuditDataTable from './GRAXAuditDataTable';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\nimport GRAXTree from './GRAXTree';\n\nimport {Button} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\nexport default class GRAXAudit extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this._isMounted = false;\n\n        this.state = {\n            retrieved: false,\n            retrievedCounter: 0,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: this.props.columns || ['Id'],\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => {}),\n            _filterValuesFields: [],\n            _graxSortableFields: null\n        }\n    }\n\n    getFilterQuery(_getFilterQuery) {\n        return _getFilterQuery();\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/graxgraxtimemachineindex' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this._isMounted) {\n                    this.setState({\n                        _graxFields: _.map(this.state._graxFieldsSelectionList, (val, i) => ({\n                            id: val,\n                            label: val,\n                            type: data[val]\n                        })),\n                        retrieved: true\n                    });\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        retrieved: true,\n                        error: err.toString()\n                    });\n                }\n            }.bind(this)\n        });\n    }\n    \n    render() {\n        return (\n            <div>\n                <div style={{display: 'none'}}>\n                    <GRAXTree\n                        dataIndex=\"graxgraxtimemachineindex\"\n                        onLoad={(_graxFieldsSelection, _graxFieldsSelectionList, _graxFields) => {\n                            console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                            this.setState({\n                                _graxFieldsSelection: _graxFieldsSelection,\n                                _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                    if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                        sortableFields.push(elasticField.id);\n                                    }\n                    \n                                    return sortableFields;\n                                }, [])\n                            });\n                        }}\n                        selection={this.state._graxFieldsSelectionList}\n                    />\n                </div>\n\n                <SLDSSection title=\"Filter Time Machine Records\">\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelection: this.state._graxFieldsSelection,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n                </SLDSSection>\n\n                <SLDSSection title=\"GRAX Time Machine Records\" className=\"slds-p-top_large\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n\t\t\t\t\t    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} />\n                    </div>\n\n                    <GRAXAuditDataTable\n                        key={'GRAXAuditDataTable_' + this.state.retrievedCounter}\n                        renderKey={'GRAXAuditDataTable_' + this.state.retrievedCounter}\n                        columns={this.state._graxFieldsSelectionList}\n                        _graxFieldsSelection={this.state._graxFieldsSelection}\n                        sortableColumns={this.state._graxSortableFields}\n                        hiddenColumns={this.state._filterValuesFields}\n                        dataIndex=\"graxgraxtimemachineindex\"\n                        filterFunction={this.state._filterFunction}\n                        filterQuery={this.getFilterQuery(this.state._getFilterQuery)}\n                    />\n                </SLDSSection>\n            </div>\n        );\n    }\n}","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nif (process && process.env && !window.__grax__) {\n  window.__grax__ = {\n    orgid: process.env.REACT_APP_ORGID,\n    pageParams: { authorization: process.env.REACT_APP_BASIC_TOKEN }\n  };\n}\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonGroup, Button, Tooltip} from '@salesforce/design-system-react';\n \nconst propTypes = {\n    totalItems: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    pageSize: PropTypes.number,\n}\n \nconst defaultProps = {\n    currentPage: 1,\n    pageSize: 10\n}\n \nclass SLDSPaginator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pager: {}\n        };\n    }\n \n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.totalItems) {\n            this.setPage(this.props.currentPage, true);\n        }\n    }\n \n    setPage(page, isInitialLoad) {\n        var { totalItems, pageSize } = this.props;\n        var pager = this.state.pager;\n \n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n \n        // get new pager object for specified page\n        pager = this.getPager(totalItems, page, pageSize);\n \n        // update state\n        this.setState({ pager: pager });\n \n        // call change page function in parent component\n        this.props.onChangePage(page, false || isInitialLoad);\n    }\n \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n \n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        var isNarrow = false;\n\n        if(totalItems > 10000) {\n            totalItems = 10000;\n            isNarrow = true;\n        }\n \n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n \n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (isNarrow && (currentPage + 3) >= totalPages) {\n                startPage = totalPages - 8;\n                endPage = totalPages;\n            } else if ((currentPage + 4) >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n \n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages,\n            isNarrow: isNarrow\n        };\n    }\n \n    render() {\n        var pager = this.state.pager;\n \n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n \n        return (\n            <ButtonGroup>\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"left\"\n\t\t\t\t\t\ticonPosition=\"left\" label=\"First\" variant=\"neutral\" onClick={() => this.setPage(1)} disabled={pager.currentPage === 1} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronleft\"\n\t\t\t\t\t\ticonPosition=\"left\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage - 1)} disabled={pager.currentPage === 1} />\n                {pager.pages.map((page, index) => {\n                    return (\n                        <Button key={'SLDSPaginator' + Date.now() + index} label={page} variant={pager.currentPage === page ? 'brand' : 'neutral'} onClick={() => this.setPage(page)} />\n                    )\n                })}\n                {pager.isNarrow && pager.currentPage >= (pager.totalPages - 3) && (\n                    <Tooltip\n                        align=\"top right\"\n                        content=\"The list is too long, try adding more filters to optimize the results.\"\n                    >\n                        <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n                    </Tooltip>\n                )}\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\t\ticonPosition=\"right\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage + 1)} disabled={pager.currentPage === pager.totalPages} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"right\"\n\t\t\t\t\t\ticonPosition=\"right\" label=\"Last\" variant=\"neutral\" onClick={() => this.setPage(pager.totalPages)} disabled={pager.currentPage === pager.totalPages} />\n            </ButtonGroup>\n        );\n    }\n}\n \nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams, token, orgid } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\",\n            token,\n            orgid\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n","import jQuery from 'jquery'\n\n(function($) {\n\tvar svgns = 'http://www.w3.org/2000/svg';\n\tvar xlinkns = 'http://www.w3.org/1999/xlink';\n\n    $.fn.sldsTree = function(options) {\n    \tvar $this = this;\n\n    \tvar settings = $.extend(true, {\n        \tdata: [],\n        \titems: {\n        \t\tid: 'id',\n        \t\tlabel: 'label',\n        \t\tchilds: 'childs',\n        \t},\n        \tattrs: {\n\t\t\t\troot: {'class': 'slds-tree_container'},\n\t\t\t\tul: {'class': 'slds-tree'},\n\t\t\t\tli: {\n\t\t\t\t\t'role': 'treeitem',\n\t\t\t\t\t'aria-level': '1',\n\t\t\t\t\t'aria-expanded': 'false'\n\t\t\t\t},\n\t\t\t\tdiv: {'class': 'slds-tree__item'},\n\t\t\t\tbutton: {\n\t\t\t\t\t'class': 'slds-button slds-button_icon slds-m-right_x-small',\n\t\t\t\t\t'aria-hidden': 'true',\n\t\t\t\t\t'tabindex': '-1'\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandButton: {\n\t\t\t\t'disabled': 'slds-is-disabled'\n\t\t\t},\n\t\t\texpandIcon: {\n\t\t\t\t'class': 'slds-button__icon slds-button__icon_small',\n\t\t\t\t'path': './assets/icons/utility-sprite/svg/symbols.svg#chevronright'\n\t\t\t},\n        \tonUl: function($ul, items, settings) {},\n        \tonLi: function($li, item, settings) {},\n        \tonDiv: function($div, item, settings) {\n        \t\t$div.append(item[settings.items.label]);\n        \t},\n        \tonButton: function($button, item, settings) {},\n            onFinish: function($root, items, settings) {}\n        }, options);\n\n        var getTreeItemButton = function(item, disabled, $li) {\n        \tvar $button = $('<button>').attr(settings.attrs.button).toggleClass(settings.expandButton.disabled, disabled);\n\n        \tvar icon = document.createElementNS(svgns, 'svg');\n        \ticon.setAttribute('class', settings.expandIcon.class);\n        \ticon.setAttribute('aria-hidden', 'true');\n\n        \tvar icon_use = document.createElementNS(svgns, 'use');\n        \ticon_use.setAttributeNS(xlinkns, 'xlink:href', settings.expandIcon.path);\n        \t\n        \ticon.appendChild(icon_use);\n\n    \t\t$button.append(icon);\n\n        \t$button.on('click', function(e) {\n        \t\t$li.attr('aria-expanded', function(i, attr) {\n\t\t            return !(attr === 'true');\n\t\t        });\n\n\t\t        e.preventDefault();\n        \t});\n\n        \tsettings.onButton($button, item, settings);\n\n        \treturn $button;\n        }\n\n        var getTreeItemContent = function(item, level, $ul, $li) {\n        \tvar $div = $('<div>').attr(settings.attrs.div);\n\n\t\t\t$div.append(getTreeItemButton(item, !item[settings.items.childs] || item[settings.items.childs].length < 1, $li));\n\n        \tsettings.onDiv($div, item, settings);\n\n        \treturn $div;\n        }\n\n        var getTreeItem = function(item, level, $ul) {\n        \tvar $li = $('<li>').attr(settings.attrs.li);\n\n        \t$li.attr({'aria-level': level}).append(getTreeItemContent(item, level, $ul, $li));\n        \tif(item[settings.items.childs]) {\n        \t\t$li.append(getTree(item[settings.items.childs], level+1));\n        \t}\n\n        \tsettings.onLi($li, item, settings);\n\n        \treturn $li;\n        };\n\n        var getTree = function(items, level) {\n        \tvar $ul = $('<ul>').attr(settings.attrs.ul);\n\n        \tif(level > 1) $ul.attr({'role': 'group'});\n\n\t        $.each(items, function(i, item) {\n\t        \t$ul.append(getTreeItem(item, level, $ul));\n\t        });\n\n\t        settings.onUl($ul, items, settings);\n\n\t        return $ul;\n        };\n\n        $this.attr(settings.attrs.root).html(getTree(settings.data, 1));\n\n        settings.onFinish($this, settings.data, settings);\n\n        return $this;\n    };\n \n}(jQuery));"],"sourceRoot":""}