{"version":3,"sources":["components/GRAXCloudSFLoginForm.jsx"],"names":["SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS","name","type","GRAXCloudSFLoginForm","props","_this","Object","_Users_dpickett_work_grax_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_dpickett_work_grax_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_dpickett_work_grax_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","isLoading","error","configuration","dataSourceIndex","isMetadataBackupEnabled","triggerConfigurationChange","bind","_Users_dpickett_work_grax_grax_applicationservers_web_application_graxreact_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","loginHandler","_","cloneDeep","setState","dataSource","get","onChange","onLogin","length","alert","provider","userName","password","url","$","ajax","baseUrl","contentType","data","JSON","stringify","success","console","log","set","accessToken","userInfo","instanceUrl","organizationId","parse","xhr","status","err","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_7__","size","variant","className","_SLDSSection__WEBPACK_IMPORTED_MODULE_12__","title","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_8__","id","label","defaultValue","onBlur","e","target","value","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_9__","labels","disabled","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_10__","checked","Fragment","htmlFor","_salesforce_design_system_react__WEBPACK_IMPORTED_MODULE_11__","onClick","readOnly","getSFConnectionInfoHandler","map","setting","i","key","_GRAXCloudConfigurationForm__WEBPACK_IMPORTED_MODULE_13__","React","Component"],"mappings":"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","file":"static/js/22.40ebb5f3.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spinner, Button, Input, RadioButtonGroup, Radio } from \"@salesforce/design-system-react\";\n\nimport SLDSSection from \"./SLDSSection\";\nimport { GRAXEnvSetting } from \"./GRAXCloudConfigurationForm\";\n\nimport { $, baseUrl } from \"../lib/grax-data-lake\";\n\nimport _ from \"lodash\";\n\nconst SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS = [\n  {\n    name: \"ANALYTICS_BATCH_SIZE\",\n    type: \"number\"\n  },\n  {\n    name: \"ANALYTICS_QUERY_FILE\",\n    type: \"text\"\n  },\n  {\n    name: \"MC_HOST\",\n    type: \"text\"\n  },\n  {\n    name: \"MC_PASSWORD\", // NEED ENCRYPTATION\n    type: \"password\"\n  },\n  {\n    name: \"MC_PORT\",\n    type: \"text\"\n  },\n  {\n    name: \"MC_USERNAME\",\n    type: \"text\"\n  }\n];\n\n/*const METADATA_BACKUP_SETTINGS = [\n    {\n        name: 'RETRIEVE_SALESFORCE_METADATA',\n        type: 'boolean'\n    }\n];*/\n\nconst NEW_DATASOURCE = \"New Data Source\";\n\nexport default class GRAXCloudSFLoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n\n      configuration: {},\n      dataSourceIndex: 0,\n\n      isMetadataBackupEnabled: false\n    };\n\n    this.triggerConfigurationChange = this.triggerConfigurationChange.bind(this);\n\n    this.loginHandler = this.loginHandler.bind(this);\n  }\n\n  componentDidMount() {\n    var configuration = this.props.configuration ? _.cloneDeep(this.props.configuration) : {};\n\n    this.setState({\n      dataSourceIndex: this.props.dataSourceIndex,\n      configuration: configuration,\n      isLoading: false\n    });\n  }\n\n  triggerConfigurationChange() {\n    var dataSource = _.get(this.state.configuration, [\"dataSources\", this.state.dataSourceIndex]);\n\n    if (this.props.onChange) {\n      this.props.onChange(this.state.configuration, dataSource);\n    }\n  }\n\n  loginHandler() {\n    if (this.props.onLogin) {\n      this.props.onLogin(this.state.configuration, this.state.dataSource);\n    }\n  }\n\n  getSFConnectionInfoHandler() {\n    var dataSource = _.get(this.state.configuration, [\"dataSources\", this.state.dataSourceIndex]);\n\n    if (dataSource == null || dataSource.length === 0) {\n      return alert(\"Incomplete data\");\n    }\n\n    if (dataSource.provider == null) {\n      // return alert('Provider required');\n      dataSource.provider = \"salesforce\";\n    }\n\n    if (dataSource.userName == null) {\n      return alert(\"User Name required\");\n    }\n\n    if (dataSource.password == null) {\n      return alert(\"Password required\");\n    }\n\n    if (dataSource.url == null) {\n      return alert(\"Url required\");\n    }\n\n    this.setState({\n      isLoading: true\n    });\n\n    $.ajax({\n      type: \"POST\",\n      url: baseUrl + \"/grax-app/grax-cloud/salesforce/login\",\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify(dataSource),\n      success: function(data) {\n        console.log(data);\n\n        dataSource[\"instanceUrl\"] = null;\n        dataSource[\"organizationId\"] = null;\n\n        var configuration = this.state.configuration;\n\n        _.set(configuration, [\"dataSources\", this.state.dataSourceIndex], dataSource);\n\n        if (data.accessToken != null) {\n          dataSource[\"instanceUrl\"] = data.userInfo.instanceUrl;\n          dataSource[\"organizationId\"] = data.userInfo.organizationId;\n        } else {\n          alert(JSON.parse(data));\n        }\n\n        this.setState({\n          configuration: configuration,\n          isLoading: false\n        });\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoading: false\n        });\n\n        alert(\"Error!\");\n\n        return false;\n      }.bind(this)\n    });\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <Spinner size=\"large\" variant=\"brand\" />;\n    }\n\n    return (\n      <div className=\"slds-p-around_medium\">\n        <SLDSSection title=\"Salesforce Connection\">\n          <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center slds-p-bottom_medium\">\n            <div className=\"slds-col\">\n              <Input\n                id=\"sf-connection-name\"\n                label=\"Conection Name\"\n                defaultValue={_.get(\n                  this.state.configuration,\n                  [\"dataSources\", this.state.dataSourceIndex, \"name\"],\n                  NEW_DATASOURCE\n                )}\n                onBlur={e => {\n                  var configuration = this.state.configuration;\n\n                  _.set(\n                    configuration,\n                    [\"dataSources\", this.state.dataSourceIndex, \"name\"],\n                    e.target.value\n                  );\n\n                  this.setState({\n                    configuration: configuration\n                  });\n\n                  this.triggerConfigurationChange();\n                }}\n              />\n\n              <RadioButtonGroup\n                labels={{\n                  label: \"Authentication Type\"\n                }}\n                onChange={e => {\n                  var configuration = this.state.configuration;\n\n                  console.log(e.target);\n\n                  _.set(\n                    configuration,\n                    [\"dataSources\", this.state.dataSourceIndex, \"provider\"],\n                    e.target.value\n                  );\n\n                  this.setState({\n                    configuration: configuration\n                  });\n\n                  this.triggerConfigurationChange();\n                }}\n                className=\"slds-m-top_small\"\n                disabled={true}\n              >\n                <Radio\n                  id=\"authentication-type-username-password\"\n                  label=\"Username / Password\"\n                  value=\"salesforce\"\n                  checked={\n                    _.get(\n                      this.state.configuration,\n                      [\"dataSources\", this.state.dataSourceIndex, \"provider\"],\n                      \"salesforce\"\n                    ) === \"salesforce\"\n                  }\n                  variant=\"button-group\"\n                />\n\n                <Radio\n                  id=\"authentication-type-oauth\"\n                  label=\"OAuth\"\n                  value=\"oauth\"\n                  checked={\n                    _.get(this.state.configuration, [\n                      \"dataSources\",\n                      this.state.dataSourceIndex,\n                      \"provider\"\n                    ]) === \"oauth\"\n                  }\n                  variant=\"button-group\"\n                />\n              </RadioButtonGroup>\n            </div>\n          </div>\n\n          {_.get(this.state.configuration, [\n            \"dataSources\",\n            this.state.dataSourceIndex,\n            \"provider\"\n          ]) === \"oauth\" ? (\n            <React.Fragment>\n              <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                <div className=\"slds-col\">\n                  {/*<Input id=\"sf-connection-name\" label=\"Conection Name\" defaultValue={this.state.dataSource.name} onBlur={(e) => {\n                                        var dataSource = this.state.dataSource;\n                                        \n                                        dataSource.name = e.target.value;\n                                        \n                                        this.setState({\n                                            dataSource: dataSource\n                                        });\n\n                                        this.triggerDataSourceChange();\n                                    }} />*/}\n\n                  <div className=\"slds-form-element\">\n                    <label className=\"slds-form-element__label\" htmlFor=\"sf-environment-type\">\n                      Environment Type\n                    </label>\n                    <div className=\"slds-form-element__control\">\n                      <div className=\"slds-select_container\">\n                        <select className=\"slds-select\" id=\"sf-environment-type\">\n                          <option value=\"Production\">Production</option>\n                          <option value=\"Developer\">Developer</option>\n                          <option value=\"Sandbox\">Sandbox</option>\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n                <div className=\"slds-col\">\n                  <div className=\"slds-p-top_medium\">\n                    <Button\n                      label=\"Login with SalesForce\"\n                      variant=\"brand\"\n                      onClick={e => {\n                        this.loginHandler();\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </React.Fragment>\n          ) : null}\n        </SLDSSection>\n\n        {_.get(\n          this.state.configuration,\n          [\"dataSources\", this.state.dataSourceIndex, \"provider\"],\n          \"salesforce\"\n        ) === \"salesforce\" ? (\n          <SLDSSection title=\"Login Details\">\n            <div className=\"slds-grid slds-gutters_direct slds-grid_vertical-align-center\">\n              <div className=\"slds-col\">\n                <Input\n                  id=\"sfdc-username\"\n                  label=\"SFDC Username\"\n                  defaultValue={_.get(this.state.configuration, [\n                    \"dataSources\",\n                    this.state.dataSourceIndex,\n                    \"userName\"\n                  ])}\n                  onBlur={e => {\n                    var configuration = this.state.configuration;\n\n                    _.set(\n                      configuration,\n                      [\"dataSources\", this.state.dataSourceIndex, \"userName\"],\n                      e.target.value\n                    );\n\n                    this.setState({\n                      configuration: configuration\n                    });\n\n                    this.triggerConfigurationChange();\n                  }}\n                />\n                <Input\n                  id=\"sfdc-password\"\n                  type=\"password\"\n                  label=\"SFDC Password\"\n                  defaultValue={_.get(this.state.configuration, [\n                    \"dataSources\",\n                    this.state.dataSourceIndex,\n                    \"password\"\n                  ])}\n                  onBlur={e => {\n                    var configuration = this.state.configuration;\n\n                    _.set(\n                      configuration,\n                      [\"dataSources\", this.state.dataSourceIndex, \"password\"],\n                      e.target.value\n                    );\n\n                    this.setState({\n                      configuration: configuration\n                    });\n\n                    this.triggerConfigurationChange();\n                  }}\n                />\n                <Input\n                  id=\"sfdc-url\"\n                  label=\"SFDC URL\"\n                  defaultValue={_.get(this.state.configuration, [\n                    \"dataSources\",\n                    this.state.dataSourceIndex,\n                    \"url\"\n                  ])}\n                  onBlur={e => {\n                    var configuration = this.state.configuration;\n\n                    _.set(\n                      configuration,\n                      [\"dataSources\", this.state.dataSourceIndex, \"url\"],\n                      e.target.value\n                    );\n\n                    this.setState({\n                      configuration: configuration\n                    });\n\n                    this.triggerConfigurationChange();\n                  }}\n                />\n              </div>\n\n              <div className=\"slds-col\">\n                <Input\n                  id=\"sfdc-token\"\n                  label=\"SFDC Security Token\"\n                  defaultValue={_.get(this.state.configuration, [\n                    \"dataSources\",\n                    this.state.dataSourceIndex,\n                    \"token\"\n                  ])}\n                  onBlur={e => {\n                    var configuration = this.state.configuration;\n\n                    _.set(\n                      configuration,\n                      [\"dataSources\", this.state.dataSourceIndex, \"token\"],\n                      e.target.value\n                    );\n\n                    this.setState({\n                      configuration: configuration\n                    });\n\n                    this.triggerConfigurationChange();\n                  }}\n                />\n                <Input\n                  id=\"sfdc-org-id\"\n                  label=\"SFDC Organization ID (18 Digit)\"\n                  defaultValue={_.get(this.state.configuration, [\n                    \"dataSources\",\n                    this.state.dataSourceIndex,\n                    \"organizationId\"\n                  ])}\n                  readOnly\n                />\n                <Input\n                  id=\"sfdc-org-title\"\n                  label=\"SFDC Organization Title\"\n                  defaultValue={_.get(this.state.configuration, [\n                    \"dataSources\",\n                    this.state.dataSourceIndex,\n                    \"name\"\n                  ])}\n                  readOnly\n                />\n              </div>\n            </div>\n\n            <div className=\"slds-p-top_medium\">\n              <Button\n                label=\"Connect to SFDC\"\n                variant=\"brand\"\n                onClick={() => {\n                  this.getSFConnectionInfoHandler();\n                }}\n              />\n            </div>\n          </SLDSSection>\n        ) : null}\n\n        <SLDSSection title=\"Sync Analytics & Marketing Cloud\" className=\"slds-p-top_large\">\n          {_.map(SYNC_ANALYTICS_AND_MARKETING_CLOUD_SETTINGS, (setting, i) => {\n            var key = \"grax-env-setting-\" + (setting.id || setting.name);\n\n            return (\n              <GRAXEnvSetting\n                id={key}\n                key={key}\n                setting={setting}\n                onBlur={e => {\n                  console.log(e);\n                }}\n              />\n            );\n          })}\n        </SLDSSection>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}