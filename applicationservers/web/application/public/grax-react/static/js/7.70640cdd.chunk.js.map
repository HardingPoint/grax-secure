{"version":3,"sources":["components/GRAXLoggingDataTable.jsx","components/GRAXLogging.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/SLDSPaginator.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXCSVExportButton.jsx","components/GRAXFieldsCombobox.jsx"],"names":["stackToHtml","stackContent","split","join","GRAXLoggingStackCell","children","props","title","style","display","cursor","whiteSpace","wordWrap","wordBreak","onClick","onClickHandler","dangerouslySetInnerHTML","__html","slice","length","displayName","DataTableCell","GRAXLoggingDataTable","state","sortColumn","sortDirection","items","extraInfo","page","isLoaded","isLoading","isStackModalOpen","stackModalHtml","nextProps","nextState","this","renderKey","setState","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_select","_","union","columns","hiddenColumns","_q","filterQuery","_limit","_from","_sort","_sortType","getSortFieldType","success","data","results","filterFunction","map","item","i","forEach","val","key","SF_DATETIME_REGEXP","test","m","moment","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","id","toString","total","size","totalRetrieved","bind","error","xhr","status","err","console","getDataHandler","property","sortField","_graxFieldsSelection","find","assistiveText","dialogLabel","isOpen","onRequestClose","align","className","overflow","position","variant","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onSort","handleSort","columnName","isSorted","label","endsWith","match","sortable","isSortable","sortableColumns","SLDSPaginator","totalItems","pageSize","onChangePage","isInitialLoad","GRAXCSVExportButton","params","source","height","React","Component","ELASTIC_SORTABLE_TYPES","GRAXLogging","_isMounted","retrieved","retrievedCounter","_graxFields","_graxFieldsSelectionList","_filterFunction","dataList","_getFilterQuery","_filterValuesFields","_graxSortableFields","q","subtype","GRAXFieldsCombobox","onLoad","e","log","reduce","sortableFields","elasticField","push","cookieSubfix","SLDSSection","isCollapsible","GRAXFilterGeneration","filterableFieldOptions","onFilterValueChangeHandler","getFilterQuery","process","window","__grax__","orgid","REACT_APP_ORGID","pageParams","authorization","REACT_APP_BASIC_TOKEN","token","_csrf","userid","undefined","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","handleToggle","onToggle","preventDefault","category","name","pager","setPage","currentPage","totalPages","getPager","isNarrow","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","iconCategory","iconName","iconPosition","disabled","index","Date","now","content","defaultProps","GRAXSFieldCombobox","options","inputValue","selection","SObjectName","fieldName","picklistValues","value","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","onChange","event","onRequestRemoveSelectedOption","onSelect","labels","placeholder","comboboxFilterAndLimit","limit","multiple","required","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","isOpened","filterOptionsHandler","onOpen","onClose","_filterValues","_error","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","_filterValuesList","getFilterValuesList","getFilterFunction","splice","isReturned","filterOperator","filterVal","isArray","filterIsNegated","isFilterMatch","itemVal","Boolean","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","selectionIds","scope","data-label","width","defaultChecked","target","checked","SObjectType","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","portalsRoot","document","getElementById","GRAXCSVExportForm","ReactDOM","createPortal","formId","encType","margin","padding","border","form","selectedDataIndex","getMappedFieldList","selectedFieldList","setCookie","JSON","stringify","selectedFieldsCookie","getCookie","selectedFields","parse","sortBy","_selection","onLoadHandler","onChangeHandler"],"mappings":"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","file":"static/js/7.70640cdd.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Spinner, DataTable, DataTableColumn, DataTableCell, Modal} from '@salesforce/design-system-react';\nimport SLDSPaginator from './SLDSPaginator';\nimport GRAXCSVExportButton from './GRAXCSVExportButton';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\nimport {moment, SF_DATETIME_REGEXP, DATETIME_FORMAT, DATE_FORMAT, TZ} from '../lib/utils';\n\nimport _ from 'lodash';\n\nconst ROWSXPAGE = 20;\n\n\nvar stackToHtml = function(stackContent) {\n    return stackContent.split(/\\\\n/).join('<br/>').split(/\\\\\\\\/).join('\\\\');\n};\n\n\nconst GRAXLoggingStackCell = ({ children, ...props }) => {\n\treturn (\n        <DataTableCell title={children}>\n            {children && (\n                <span\n                    style={{\n                        display: 'inline-block',\n                        cursor: 'pointer',\n                        whiteSpace: 'normal',\n                        wordWrap: 'break-word',\n                        wordBreak: 'break-all'\n                    }}\n                    onClick={() => {\n                        if(props.onClickHandler) {\n                            props.onClickHandler(children);\n                        }\n                    }}\n                    dangerouslySetInnerHTML={{__html: stackToHtml(children.slice(0, 255)) + (children.length > 255 ? '&hellip;' : '')}}\n                ></span>\n            )}\n        </DataTableCell>\n    );\n};\nGRAXLoggingStackCell.displayName = DataTableCell.displayName;\n\n\nexport default class GRAXLoggingDataTable extends React.Component {\n\tconstructor(props) {\n        super(props);\n\n        this.state = {\n\t\t\tsortColumn: 'CreatedDate',\n\t\t\tsortDirection: 'desc',\n            items: [],\n            extraInfo: {},\n            page: 0,\n            isLoaded: false,\n            isLoading: false,\n            isStackModalOpen: false,\n            stackModalHtml: null\n\t\t};\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.renderKey !== nextProps.renderKey || this.state.items !== nextState.items || this.state.isLoaded !== nextState.isLoaded || this.state.isLoading !== nextState.isLoading || this.state.sortColumn !== nextState.sortColumn || this.state.sortDirection !== nextState.sortDirection || this.state.isStackModalOpen !== nextState.isStackModalOpen;\n    }\n\n    getDataHandler(page, sortColumn, sortDirection) {\n        this.setState({\n            isLoading: true,\n            page: page,\n            sortColumn: sortColumn,\n            sortDirection: sortDirection\n        });\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake' + GetParams({\n                action:'load',\n                dataIndex: this.props.dataIndex,\n                _select: _.union(this.props.columns, this.props.hiddenColumns).join(',') || 'Id',\n                _q: this.props.filterQuery,\n                _limit: ROWSXPAGE,\n                _from: ROWSXPAGE * page,\n                _sort: sortColumn + ' ' + sortDirection,\n                _sortType: this.getSortFieldType(sortColumn)\n            }),\n            /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n            success: function(data) {\n                var results = data.results;\n\n                if(this.props.filterFunction) {\n                    results = this.props.filterFunction(results);\n                }\n\n                results = _.map(results, (item, i) => {\n                    _.forEach(item, (val, key) => {\n                        if(typeof(val) == 'string') {\n                            if(SF_DATETIME_REGEXP.test(val)) {\n                                var m = moment(val);\n\n                                if(m.isValid()) {\n                                    item[key] = m.tz(TZ).format(m._i.indexOf(':') !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                                }\n                            }\n                        }\n                    });\n\n                    return {\n                        ...item,\n                        ...{id: i.toString()}\n                    }\n                });\n\n                this.setState({\n                    page: 0,\n                    data: results,\n                    extraInfo: data.extraInfo || {total: 0, size: ROWSXPAGE, totalRetrieved: 0},\n                    items: results,\n                    isLoaded: true,\n                    isLoading: false\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    isLoading: false,\n                    items: [],\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n    \n    componentDidMount() {\n        this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n    }\n\n\thandleSort(sortColumn, ...rest) {        \n        if(sortColumn.property) {\n            this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n        }\n    }\n    \n    getSortFieldType(sortField) {\n        if(!this.props._graxFieldsSelection) return null;\n\n        return (this.props._graxFieldsSelection.find((item) => {\n            return item.id === sortField;\n        }) || {}).type;\n    }\n\n\trender() {\n\t\treturn this.state.isLoaded ? (\n\t\t\t<div>\n                {this.state.isStackModalOpen ? (\n                    <Modal\n                        assistiveText={{ dialogLabel: 'Stack' }}\n                        isOpen={this.state.isStackModalOpen}\n                        onRequestClose={() => {\n                            this.setState({\n                                isStackModalOpen: false,\n                                stackModalHtml: null\n                            });\n                        }}\n                        align=\"top\"\n                        size=\"large\"\n                    >\n                        <section className=\"slds-p-around_medium\" style={{\n                            overflow: 'auto'\n                        }}>\n                            <span style={{\n                                display: 'inline-block',\n                                whiteSpace: 'normal',\n                                wordWrap: 'break-word',\n                                wordBreak: 'break-all'\n                            }} dangerouslySetInnerHTML={{__html: this.state.stackModalHtml}}></span>\n                        </section>\n                    </Modal>\n                ) : null}\n\n                <div style={{position: 'relative'}}>\n                    {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n                    <DataTable\n                        assistiveText={{\n                            actionsHeader: 'actions',\n                            columnSort: 'sort this column',\n                            columnSortedAscending: 'asc',\n                            columnSortedDescending: 'desc',\n                            selectAllRows: 'all rows',\n                            selectRow: 'select this row',\n                        }}\n                        fixedLayout\n                        items={this.state.items}\n                        id=\"GRAXLoggingDataTable\"\n                        onSort={this.handleSort.bind(this)}\n                    >\n\n                        {this.props.columns.map((columnName) => (\n                            <DataTableColumn\n                                key={'col' + columnName}\n                                id={columnName}\n                                isSorted={this.state.sortColumn === columnName}\n                                label={columnName.endsWith('.keyword') ? columnName.match(/(.+)\\.keyword/)[1] : columnName}\n                                property={columnName}\n                                sortable\n                                sortDirection={this.state.sortDirection}\n                                isSortable={this.props.sortableColumns == null || this.props.sortableColumns.indexOf(columnName) !== -1}\n                            >\n                                {(columnName === 'stack' || columnName === 'error' || columnName === 'description') ? (\n                                    <GRAXLoggingStackCell onClickHandler={(stackContent) => {\n                                        if(stackContent) {\n                                            this.setState({\n                                                isStackModalOpen: true,\n                                                stackModalHtml: stackToHtml(stackContent.slice(1, -1)).split(/\\s/g).join('&nbsp;')\n                                            });\n                                        }\n                                    }} />\n                                ) : null}\n                            </DataTableColumn>\n                        ))}\n                    </DataTable>\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n                    <SLDSPaginator totalItems={this.state.items.length > 0 ? this.state.extraInfo.total: 0} pageSize={ROWSXPAGE} onChangePage={(page, isInitialLoad) => {\n                        if(!isInitialLoad) {\n                            this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n                        }\n                    }} />\n                </div>\n\n                <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n                    <GRAXCSVExportButton params={{\n                        source: 'elastic',\n                        dataIndex: this.props.dataIndex,\n                        _select: _.union(this.props.columns, this.props.hiddenColumns).join(','),\n                        _q: this.props.filterQuery,\n                        _sort: this.state.sortColumn + ' ' + this.state.sortDirection,\n                        _sortType: this.getSortFieldType(this.state.sortColumn),\n                        columns: this.props.columns\n                    }} />\n                </div>\n\t\t\t</div>\n\t\t) : (\n            <div style={{ position: 'relative', height: '2rem' }}>\n                <Spinner size=\"medium\" variant=\"brand\" />\n            </div>\n        );\n\t}\n}","import React from 'react';\nimport SLDSSection from './SLDSSection';\nimport GRAXLoggingDataTable from './GRAXLoggingDataTable';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\nimport GRAXFieldsCombobox from './GRAXFieldsCombobox';\n\nimport {Button} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\nexport default class GRAXLogging extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this._isMounted = false;\n\n        this.state = {\n            retrieved: false,\n            retrievedCounter: 0,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: this.props.columns || ['Id'],\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => {}),\n            _filterValuesFields: [],\n            _graxSortableFields: null\n        }\n    }\n\n    getFilterQuery(_getFilterQuery) {\n        var q = 'doc.attributes.type.keyword: \"grax_logging';\n\n        if(this.props.subtype) {\n            q += ('+' + this.props.subtype);\n        }\n\n        q += '\"';\n\n        var _q = _getFilterQuery();\n        if(_q) {\n            q += (' AND (' + _q + ')')\n        }\n\n        return q;\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/graxgrax_loggingindex' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this._isMounted) {\n                    this.setState({\n                        _graxFields: _.map(this.state._graxFieldsSelectionList, (val, i) => ({\n                            id: val,\n                            label: val,\n                            type: data[val]\n                        })),\n                        retrieved: true\n                    });\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        retrieved: true,\n                        error: err.toString()\n                    });\n                }\n            }.bind(this)\n        });\n    }\n    \n    render() {\n        return (\n            <div>\n                <div style={{display: 'none'}}>\n                    <GRAXFieldsCombobox\n                        dataIndex=\"graxgrax_loggingindex\"\n                        onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                            console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                            this.setState({\n                                _graxFieldsSelection: _graxFieldsSelection,\n                                _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                    if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                        sortableFields.push(elasticField.id);\n                                    }\n                    \n                                    return sortableFields;\n                                }, [])\n                            });\n                        }}\n                        cookieSubfix={this.props.subtype || 'logs'}\n                    />\n                </div>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Logs\">\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelection: this.state._graxFieldsSelection,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Logs\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n\t\t\t\t\t    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} />\n                    </div>\n\n                    <GRAXLoggingDataTable\n                        key={'GRAXLoggingDataTable_' + this.state.retrievedCounter}\n                        renderKey={'GRAXLoggingDataTable_' + this.state.retrievedCounter}\n                        columns={this.state._graxFieldsSelectionList}\n                        _graxFieldsSelection={this.state._graxFieldsSelection}\n                        sortableColumns={this.state._graxSortableFields}\n                        hiddenColumns={this.state._filterValuesFields}\n                        dataIndex=\"graxgrax_loggingindex\"\n                        filterFunction={this.state._filterFunction}\n                        filterQuery={this.getFilterQuery(this.state._getFilterQuery)}\n                    />\n                </SLDSSection>\n            </div>\n        );\n    }\n}","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nif (process && process.env && !window.__grax__) {\n  window.__grax__ = {\n    orgid: process.env.REACT_APP_ORGID,\n    pageParams: { authorization: process.env.REACT_APP_BASIC_TOKEN }\n  };\n}\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonGroup, Button, Tooltip} from '@salesforce/design-system-react';\n \nconst propTypes = {\n    totalItems: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    pageSize: PropTypes.number,\n}\n \nconst defaultProps = {\n    currentPage: 1,\n    pageSize: 10\n}\n \nclass SLDSPaginator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pager: {}\n        };\n    }\n \n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.totalItems) {\n            this.setPage(this.props.currentPage, true);\n        }\n    }\n \n    setPage(page, isInitialLoad) {\n        var { totalItems, pageSize } = this.props;\n        var pager = this.state.pager;\n \n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n \n        // get new pager object for specified page\n        pager = this.getPager(totalItems, page, pageSize);\n \n        // update state\n        this.setState({ pager: pager });\n \n        // call change page function in parent component\n        this.props.onChangePage(page, false || isInitialLoad);\n    }\n \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n \n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        var isNarrow = false;\n\n        if(totalItems > 10000) {\n            totalItems = 10000;\n            isNarrow = true;\n        }\n \n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n \n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (isNarrow && (currentPage + 3) >= totalPages) {\n                startPage = totalPages - 8;\n                endPage = totalPages;\n            } else if ((currentPage + 4) >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n \n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages,\n            isNarrow: isNarrow\n        };\n    }\n \n    render() {\n        var pager = this.state.pager;\n \n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n \n        return (\n            <ButtonGroup>\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"left\"\n\t\t\t\t\t\ticonPosition=\"left\" label=\"First\" variant=\"neutral\" onClick={() => this.setPage(1)} disabled={pager.currentPage === 1} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronleft\"\n\t\t\t\t\t\ticonPosition=\"left\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage - 1)} disabled={pager.currentPage === 1} />\n                {pager.pages.map((page, index) => {\n                    return (\n                        <Button key={'SLDSPaginator' + Date.now() + index} label={page} variant={pager.currentPage === page ? 'brand' : 'neutral'} onClick={() => this.setPage(page)} />\n                    )\n                })}\n                {pager.isNarrow && pager.currentPage >= (pager.totalPages - 3) && (\n                    <Tooltip\n                        align=\"top right\"\n                        content=\"The list is too long, try adding more filters to optimize the results.\"\n                    >\n                        <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n                    </Tooltip>\n                )}\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\t\ticonPosition=\"right\" variant=\"neutral\" onClick={() => this.setPage(pager.currentPage + 1)} disabled={pager.currentPage === pager.totalPages} />\n                <Button iconCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"right\"\n\t\t\t\t\t\ticonPosition=\"right\" label=\"Last\" variant=\"neutral\" onClick={() => this.setPage(pager.totalPages)} disabled={pager.currentPage === pager.totalPages} />\n            </ButtonGroup>\n        );\n    }\n}\n \nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport _ from \"lodash\";\n\nimport { baseUrl, GetParams, token, orgid } from \"../lib/grax-data-lake\";\n\nconst portalsRoot = document.getElementById(\"portals\");\n\nclass GRAXCSVExportForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <form\n        id={this.props.formId}\n        action={\n          baseUrl +\n          \"/grax-app/grax-data-lake/export/\" +\n          this.props.params.source +\n          \"/csv\" +\n          GetParams({\n            action: \"export\",\n            token,\n            orgid\n          })\n        }\n        target=\"_blank\"\n        method=\"POST\"\n        encType=\"application/x-www-form-urlencoded\"\n        style={{\n          margin: 0,\n          padding: 0,\n          border: 0,\n          display: \"inline-block\"\n        }}\n      >\n        {_.map(this.props.params, function(val, key) {\n          return (\n            <input type=\"hidden\" key={String(Date.now()) + key} name={key} value={val || \"\"} />\n          );\n        })}\n      </form>,\n      portalsRoot\n    );\n  }\n}\n\nexport default class GRAXCSVExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formId: \"csvExport\" + Date.now()\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GRAXCSVExportForm formId={this.state.formId} params={this.props.params} />\n        <button className=\"slds-button slds-button_neutral\" type=\"submit\" form={this.state.formId}>\n          Export to CSV\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}