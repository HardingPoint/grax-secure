{"version":3,"sources":["../node_modules/@salesforce/design-system-react/module/components/card/private/header.js","../node_modules/@salesforce/design-system-react/module/components/card/private/body.js","../node_modules/@salesforce/design-system-react/module/components/card/private/footer.js","../node_modules/@salesforce/design-system-react/module/components/card/empty.js","../node_modules/@salesforce/design-system-react/module/components/card/index.js","components/GRAXCloudConfigurationsDataTable.jsx"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","header_renderFilter","filter","id","clonedFilter","react_default","a","cloneElement","props","createElement","className","displayName","header_CardHeader","title","heading","String","Header","headingId","header","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","sym","getOwnPropertyDescriptor","forEach","_objectSpread","figure","icon","body","verticalCenter","canTruncate","media_object","hasFilter","classnames_default","filterId","headerActionsId","slds-size_1-of-3","slds-text-align_right","headerActions","constants","propTypes","prop_types_default","node","string","oneOfType","element","isRequired","body_CardBody","children","array","object","footer_CardFooter","footer","empty_CardEmpty","defaultProps","card_empty","card_idSuffixes","card_Card","bodyId","empty","style","hasNoHeader","bodyClassName","bool","card","GRAXCloudConfigurationForm","lazy","Promise","all","__webpack_require__","e","then","bind","GRAXCloudSFLoginForm","GRAXCloudBulkRestoreForm","NEW_SETTING","NEW_BULK_PROCESS","GRAX_ICON","src","width","height","alignSelf","alt","SF_ICON","assistiveText","category","name","size","variant","fill","MAGIC_ICON","ACTIONS","GRAXCloudTree","maxWidth","minWidth","undefined","this","label","aria-labelledby","role","React","PureComponent","GRAXCloudTreeNode","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","isCollapsible","isEditable","toggleHandler","assertThisInitialized","clickHandler","editHandler","setState","isLoaded","onToggle","isToggleOnClick","onClick","onEdit","Fragment","aria-level","level","aria-expanded","tabIndex","content","components_button","iconCategory","iconName","iconSize","GRAXCloudConfigurationsDataTable","_this2","isLoading","error","globalConfigurations","configurations","modalSize","isModalOpen","isConfigurationFormOpened","isSFLoginFormOpened","isBulkRestoreFormOpened","selectedConfigurationName","configurationName","configuration","selectedDataSourceName","dataSource","selectedBulkProcesseName","bulkProcessName","bulkProcess","configurationCollapsibleOpen","collapsiblesOpenByConfiguration","actionHandler","dataSources","elastic","storage","action","params","_this3","generateConfigurationStructure","_","cloneDeep","dataSourceIndex","trim","alert","get","console","log","push","remove","onChange","_this4","spinner","isEmpty","flexGrow","react","fallback","modal","dialogLabel","onRequestClose","align","ariaHideApp","onLogin","JSON","stringify","GRAXCloudConfigurationsDataTable_GRAXCloudTree","map","kebabCase","GRAXCloudConfigurationsDataTable_GRAXCloudTreeNode","uniqueId","bulkProcesses","Component"],"mappings":"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","file":"static/js/21.211176c6.chunk.js","sourcesContent":["function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, \"a simple javascript utility for conditionally\n// joining classNames together.\"\n\nimport classnames from 'classnames'; // ## Children\n\nimport MediaObject from '../../media-object';\nimport { CARD_HEADER } from '../../../utilities/constants'; // Allow for predicatable DOM queries with `querySelectorAll(cssClasses.base)`\n\nvar idSuffixes = {\n  headerActions: '__header-actions',\n  heading: '__heading',\n  filter: '__filter-input'\n};\n\nvar renderFilter = function renderFilter(filter, id) {\n  // allow id to be set by custom header component passed in\n  var clonedFilter = React.cloneElement(filter, {\n    id: filter.props.id || id\n  });\n  return React.createElement(\"div\", {\n    className: \"slds-input-has-icon slds-input-has-icon_left slds-size_1-of-3\"\n  }, clonedFilter);\n};\n\nrenderFilter.displayName = 'renderFilter';\n/**\n * Card Header is a private component and is not meant to be imported or used for Card's `header` prop. It just happens to have the same file name.\n */\n\nvar CardHeader = function CardHeader(props) {\n  var title = null;\n\n  if (typeof props.heading === 'string' || props.heading instanceof String) {\n    title = props.heading;\n  }\n\n  var heading = React.createElement(\"h2\", {\n    id: props.headingId,\n    className: \"slds-text-heading_small slds-truncate\",\n    title: title\n  }, props.heading);\n  var Header;\n\n  if (props.header) {\n    Header = React.cloneElement(props.header, _objectSpread({\n      figure: props.icon,\n      body: heading,\n      verticalCenter: true,\n      canTruncate: true\n    }, props.header.props));\n  } else {\n    Header = React.createElement(MediaObject, {\n      figure: props.icon,\n      body: heading,\n      verticalCenter: true,\n      canTruncate: true\n    });\n  }\n\n  var hasFilter = props.filter ? true : null;\n  return React.createElement(\"div\", {\n    className: classnames('slds-card__header', 'slds-grid')\n  }, Header, props.filter ? renderFilter(props.filter, props.filterId) : null, React.createElement(\"div\", {\n    id: props.headerActionsId,\n    className: classnames('slds-no-flex', {\n      'slds-size_1-of-3': hasFilter,\n      'slds-text-align_right': hasFilter\n    })\n  }, props.headerActions));\n}; // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nCardHeader.displayName = CARD_HEADER; // ### Prop Types\n\nCardHeader.propTypes = {\n  /**\n   * Adds a filter input to the card header\n   */\n  filter: PropTypes.node,\n\n  /**\n   * Set the HTML `id` of the card filter.\n   */\n  filterId: PropTypes.string,\n\n  /**\n   * Allows a custom header (the media object with the icon in the first column). `icon`, `heading` and other props are passed in the media object from Card. Use `design-system-react/components/media-object` to create your own.\n   */\n  header: PropTypes.node,\n\n  /**\n   * Actions performed on selected items or that relate to the entire group of items such as \"Add Item.\"\"\n   */\n  headerActions: PropTypes.node,\n\n  /**\n   * Set the HTML `id` of the card header actions.\n   */\n  headerActionsId: PropTypes.string,\n\n  /**\n   * The heading is the name of the related item group.\n   */\n  heading: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n\n  /**\n   * Set the HTML `id` of the card heading.\n   */\n  headingId: PropTypes.string,\n\n  /**\n   * Icon associated with grouped items\n   */\n  icon: PropTypes.node\n};\nexport default CardHeader;\nexport { idSuffixes };","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, \"a simple javascript utility for conditionally joining classNames together.\"\n\nimport classNames from 'classnames';\nimport { CARD_BODY } from '../../../utilities/constants';\n\nvar CardBody = function CardBody(props) {\n  return React.createElement(\"div\", {\n    className: classNames('slds-card__body', props.className),\n    id: props.id\n  }, props.children);\n};\n\nCardBody.displayName = CARD_BODY;\nCardBody.propTypes = {\n  /**\n   * Elements to place in the body.\n   */\n  children: PropTypes.node,\n\n  /**\n   * CSS classes to be added to the card.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Set the HTML `id` of the body.\n   */\n  id: PropTypes.string\n};\nexport default CardBody;","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CARD_FOOTER } from '../../../utilities/constants';\n\nvar CardFooter = function CardFooter(props) {\n  return React.createElement(\"div\", {\n    className: \"slds-card__footer\"\n  }, props.children);\n};\n\nCardFooter.displayName = CARD_FOOTER;\nCardFooter.propTypes = {\n  /**\n   * Elements to place in the footer.\n   */\n  children: PropTypes.node\n};\nexport default CardFooter;","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\n// React is an external dependency of the project.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CARD_EMPTY } from '../../utilities/constants';\n/**\n * A default empty state for Cards.\n */\n\nvar CardEmpty = function CardEmpty(props) {\n  return React.createElement(\"div\", {\n    className: \"slds-p-horizontal_small\"\n  }, React.createElement(\"div\", {\n    className: \"slds-text-align_center slds-m-bottom_x-large\"\n  }, React.createElement(\"h3\", {\n    className: \"slds-text-heading_small slds-p-top_large slds-p-bottom_large\"\n  }, props.heading), props.children));\n}; // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nCardEmpty.displayName = CARD_EMPTY; // ### Prop Types\n\nCardEmpty.propTypes = {\n  /**\n   * Additional call to actions that will render under the heading. Often this is an \"Add Item\" button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Primary text for an Empty Card.\n   */\n  heading: PropTypes.string\n};\nCardEmpty.defaultProps = {\n  heading: 'No Related Items'\n};\nexport default CardEmpty;","/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Card Component\n// Implements the [Card design pattern](https://www.lightningdesignsystem.com/components/cards/) in React.\n// Based on SLDS v2.2.1\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, \"a simple javascript utility for conditionally\n// joining classNames together.\"\n\nimport classnames from 'classnames'; // ## Children\n\nimport Header from './private/header';\nimport Body from './private/body';\nimport Footer from './private/footer';\nimport Empty from './empty';\nimport { CARD } from '../../utilities/constants';\nvar idSuffixes = {\n  body: '__body',\n  headerActions: '__header-actions',\n  heading: '__heading',\n  filter: '__filter-input'\n};\n/**\n * Cards are used to apply a container around a related grouping of information. It has a header, a body, and an optional footer. It often contains a DataTable or Tile (coming soon). Actions associated with selected items or with all items are included within the header actions. Footer often contains pagination.\n */\n\nvar Card = function Card(props) {\n  var bodyId = props.id ? props.id + idSuffixes.body : null;\n  var filterId = props.id ? props.id + idSuffixes.filter : null;\n  var headingId = props.id ? props.id + idSuffixes.heading : null;\n  var headerActionsId = props.id ? props.id + idSuffixes.headerActions : null;\n  var empty = props.empty;\n\n  if (empty === true) {\n    // Can be overridden by passing in a node to the empty prop\n    empty = React.createElement(Empty, {\n      id: props.id,\n      heading: props.heading\n    });\n  }\n\n  return React.createElement(\"article\", {\n    id: props.id,\n    className: classnames('slds-card', props.className),\n    style: props.style\n  }, !props.hasNoHeader && React.createElement(Header, {\n    header: props.header,\n    headingId: headingId,\n    icon: props.icon,\n    filter: props.filter,\n    filterId: filterId,\n    heading: props.heading,\n    headerActions: props.headerActions,\n    headerActionsId: headerActionsId\n  }), !empty ? React.createElement(Body, {\n    id: bodyId,\n    className: props.bodyClassName\n  }, props.children) : React.createElement(Body, {\n    id: bodyId,\n    className: props.bodyClassName\n  }, empty), props.footer ? React.createElement(Footer, null, props.footer) : null);\n}; // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nCard.displayName = CARD;\nCard.defaultProps = {\n  heading: 'Related Items'\n}; // ### Prop Types\n\nCard.propTypes = {\n  /**\n   * CSS classes to be added to the card body (wraps children).\n   */\n  bodyClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The main section of the card. It often contains a `DataTable` or `Tile`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * CSS classes to be added to the card.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Replaces the body (that is the children) with the specified empty state, this will also remove header actions, the filter, and the icon. If the default empty state is wanted, set to `true`.\n   */\n  empty: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n\n  /**\n   * Adds a filter input to the card header.\n   */\n  filter: PropTypes.node,\n\n  /**\n   * Footer often contains pagination.\n   */\n  footer: PropTypes.node,\n\n  /**\n   * Allows card to have no header, and ignores header related props altogether.\n   */\n  hasNoHeader: PropTypes.bool,\n\n  /**\n   * Allows a custom header (the media object with the icon in the first column). `icon`, `heading` and other props are passed into the media object from Card if present. Use `design-system-react/components/media-object` to create your own custom header.\n   */\n  header: PropTypes.node,\n\n  /**\n   * The heading is the name of the related item group and should only contain inline elements.\n   */\n  heading: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n\n  /**\n   * Actions to perform on selected items or actions that are not specific to one item such as adding an item. If no group actions are needed, then the number of selected items is often present.\n   */\n  headerActions: PropTypes.node,\n\n  /**\n   * Icon associated with the items within the `body`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * Set the HTML `id` of the card. This also sets the `id` of the filter and the header actions.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Custom styles to be added to the card.\n   */\n  style: PropTypes.object\n};\nexport default Card;\nexport { idSuffixes };","import React, { Suspense, lazy } from 'react';\nimport { Spinner, Card, CardEmpty, Button, Modal, Icon} from '@salesforce/design-system-react';\n\nimport _ from 'lodash';\n\nconst GRAXCloudConfigurationForm = lazy(() => import('./GRAXCloudConfigurationForm'));\nconst GRAXCloudSFLoginForm = lazy(() => import('./GRAXCloudSFLoginForm'));\nconst GRAXCloudBulkRestoreForm = lazy(() => import('./GRAXCloudBulkRestoreForm'));\n\n\nconst NEW_SETTING = 'New Configuration';\nconst NEW_DATASOURCE = 'New Data Source';\n\nconst NEW_BULK_PROCESS = 'New Bulk Process';\n\n/*const GRAX_ICON = (\n    <img src=\"./assets/icons/custom/grax-x.svg\" className=\"slds-m-right_x-small\" style={{\n        width: '14px',\n        height: '14px',\n        alignSelf: 'center'\n    }} alt=\"GRAX\" />\n);*/\n\nconst GRAX_ICON = (\n    <img src=\"./grax-x.svg\" className=\"slds-m-right_x-small\" style={{\n        width: '14px',\n        height: '14px',\n        alignSelf: 'center'\n    }} alt=\"\" />\n);\n\nconst SF_ICON = (\n    <Icon\n        assistiveText={{ icon: 'Expand' }}\n        category=\"utility\"\n        name=\"salesforce1\"\n        size=\"xx-small\"\n        variant=\"icon\"\n        className=\"slds-m-right_x-small\"\n        style={{\n            fill: '#009EDB'\n        }}\n    />\n);\n\nconst MAGIC_ICON = (\n    <Icon\n        assistiveText={{ icon: 'Expand' }}\n        category=\"utility\"\n        name=\"magicwand\"\n        size=\"xx-small\"\n        variant=\"icon\"\n        className=\"slds-m-right_x-small\"\n    />\n);\n\nconst ACTIONS = {\n    // CLOSE_MODAL: null,\n\n    ADD_CONFIGURATION: 0,\n    EDIT_CONFIGURATION: 1,\n    DELETE_CONFIGURATION: 2,\n    \n    ADD_SF_ENVIRONMENT: 3,\n    EDIT_SF_ENVIRONMENT: 4,\n    DELETE_SF_ENVIRONMENT: 5,\n\n    SAVE_CONFIGURATION: 6,\n    SAVE_SF_ENVIRONMENT: 7,\n\n    CLOSE_CONFIGURATION: 8,\n    CLOSE_SF_ENVIRONMENT: 9,\n\n    CLOSE_MODAL: 10,\n\n    OPEN_CONFIGURATION: 11,\n    OPEN_SF_ENVIRONMENT: 12,\n\n    ON_CHANGE_CONFIGURATIONS_TRIGGER: 13,\n\n    ADD_BULK_PROCESS: 14,\n    EDIT_BULK_PROCESS: 15,\n    DELETE_BULK_PROCESS: 16,\n\n    OPEN_BULK_PROCESS: 17,\n    CLOSE_BULK_PROCESS: 18\n};\n\n\nclass GRAXCloudTree extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"slds-tree_container\" style={{\n                maxWidth: 'none',\n                minWidth: 'none'\n            }}>\n                {this.props.label !== undefined ? (\n                    <h4 className=\"slds-tree__group-header\">{this.props.label}</h4>\n                ) : null}\n                <ul aria-labelledby=\"treeheading\" className=\"slds-tree\" role=\"tree\">\n                    {this.props.children}\n                </ul>\n            </div>\n        );\n    }\n}\n\nclass GRAXCloudTreeNode extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false,\n            isCollapsible: false,\n\n            isEditable: true\n        }\n\n        this.toggleHandler = this.toggleHandler.bind(this);\n        this.clickHandler = this.clickHandler.bind(this);\n        this.editHandler = this.editHandler.bind(this);\n    }\n\n    componentDidMount() {\n        var isOpen = false;\n        var isCollapsible = false;\n        var isEditable = false;\n\n        if(this.props.isOpen) {\n            isOpen = this.props.isOpen;\n        }\n\n        if(this.props.children !== undefined && this.props.children.length > 0) {\n            isCollapsible = true;\n        }\n\n        if(this.props.isCollapsible) {\n            isCollapsible = this.props.isCollapsible;\n        }\n\n        if(this.props.isEditable) {\n            isEditable = this.props.isEditable;\n        }\n\n        this.setState({\n            isOpen: isOpen,\n            isLoaded: isOpen,\n            isCollapsible: isCollapsible,\n            isEditable: isEditable\n        });\n    }\n\n    toggleHandler() {\n        var isOpen = !this.state.isOpen;\n        var isLoaded = this.state.isLoaded || isOpen;\n\n        this.setState({\n            isOpen: isOpen,\n            isLoaded: isLoaded\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n    }\n\n    clickHandler() {\n        if(this.props.isToggleOnClick === true) {\n            this.toggleHandler();\n        }\n\n        if(this.props.onClick) {\n            this.props.onClick();\n        }\n    }\n\n    editHandler() {\n        if(this.props.onEdit) {\n            this.props.onEdit();\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <li id={this.props.id} key={this.props.id} aria-level={this.props.level} aria-expanded={this.state.isOpen} role=\"treeitem\" tabIndex=\"0\">\n                    <div className={'slds-tree__item' + (this.props.content !== undefined ? ' slds-tree__item--no-hover' : '')}>\n                        <Button\n                            assistiveText={{ icon: 'Expand' }}\n                            iconCategory=\"utility\"\n                            iconName=\"chevronright\"\n                            iconSize=\"small\"\n                            className={'slds-m-right_x-small' + (!this.state.isCollapsible ? ' slds-is-disabled' : '')}\n                            variant=\"icon\"\n                            onClick={this.toggleHandler}\n                        />\n                        {this.props.icon !== undefined ? (\n                            <div className=\"slds-m-right_x-small slds-tree__item--icon\">\n                                {this.props.icon}\n                            </div>\n                        ) : null}\n                        {this.props.content !== undefined ? this.props.content : (\n                            <span className=\"slds-has-flexi-truncate\" onClick={this.clickHandler}>\n                                <span className=\"slds-tree__item-label slds-truncate\" title={this.props.label}>\n                                    {this.props.label}\n                                </span>\n                            </span>\n                        )}\n                        {this.state.isEditable ? <button className=\"slds-button slds-button_icon slds-m-right_x-small\" title=\"Edit\" onClick={this.editHandler}>\n                            <Icon\n                                assistiveText={{ icon: 'Expand' }}\n                                category=\"utility\"\n                                name=\"edit\"\n                                size=\"xx-small\"\n                                variant=\"icon\"\n                            />\n                        </button> : null}\n                    </div>\n\n                    {this.state.isLoaded ? <ul role=\"group\">\n                        {this.props.children}\n                    </ul> : null}\n                </li>\n            </React.Fragment>\n        );\n    }\n}\n\n\n\nexport default class GRAXCloudConfigurationsDataTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            error: null,\n            globalConfigurations: {},\n            configurations: {},\n\n            modalSize: 'large',\n            isModalOpen: false,\n            isConfigurationFormOpened: false,\n            \n            isSFLoginFormOpened: false,\n\n            isBulkRestoreFormOpened: false,\n\n            selectedConfigurationName: null,\n            configurationName: NEW_SETTING,\n            configuration: null,\n\n            selectedDataSourceName: null,\n            dataSource: null,\n\n            selectedBulkProcesseName: null,\n            bulkProcessName: NEW_BULK_PROCESS,\n            bulkProcess: null,\n\n            configurationCollapsibleOpen: null,\n            collapsiblesOpenByConfiguration: {}\n        };\n\n        this.actionHandler = this.actionHandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            globalConfigurations: this.props.globalConfigurations,\n            configurations: this.props.configurations,\n            isLoading: false\n        });\n    }\n\n    generateConfigurationStructure() {\n        return {\n            \"dataSources\": [\n                /*{\n                    \"userName\": null,\n                    \"password\": null,\n                    \"token\": null,\n                    \"url\": null,\n                    \"organizationId\": null,\n                    \"provider\": \"salesforce\",\n                    \"name\": null\n                }*/\n            ],\n            \"elastic\": [\n                /*{\n                    \"provider\": null,\n                    \"name\": null,\n                    \"url\": null\n                }*/\n            ],\n            \"storage\": [\n                /*{\n                    \"provider\": null,\n                    \"name\": null,\n                    \"accessKey\": null,\n                    \"secretAccessKey\": null,\n                    \"bucket\": null,\n                    \"region\": null\n                }*/\n            ]\n        };\n    }\n\n    actionHandler(action, params) {\n        var configurations = this.state.configurations;\n\n        if(action === ACTIONS.OPEN_CONFIGURATION) {\n            this.setState({\n                isModalOpen: true,\n                modalSize: 'medium',\n                isConfigurationFormOpened: true\n            });\n        }\n\n        if(action === ACTIONS.ADD_CONFIGURATION) {\n            this.actionHandler(ACTIONS.OPEN_CONFIGURATION);\n\n            this.setState({\n                selectedConfigurationName: null,\n                configurationName: NEW_SETTING,\n                configuration: this.generateConfigurationStructure()\n            });\n        }\n\n        if(action === ACTIONS.EDIT_CONFIGURATION) {\n            this.actionHandler(ACTIONS.OPEN_CONFIGURATION);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                configurationName: params.configurationName,\n                configuration: _.cloneDeep(params.configuration)\n            });\n        }\n\n        if(action === ACTIONS.OPEN_SF_ENVIRONMENT) {\n            this.setState({\n                isModalOpen: true,\n                modalSize: 'medium',\n                isSFLoginFormOpened: true\n            });\n        }\n\n        if(action === ACTIONS.OPEN_BULK_PROCESS) {\n            this.setState({\n                isModalOpen: true,\n                modalSize: 'medium',\n                isBulkRestoreFormOpened: true\n            });\n        }\n\n        if(action === ACTIONS.EDIT_SF_ENVIRONMENT) {\n            this.actionHandler(ACTIONS.OPEN_SF_ENVIRONMENT);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                configuration: params.configuration,\n                dataSource: params.dataSource,\n                dataSourceIndex: params.dataSourceIndex\n            });\n        }\n\n        if(action === ACTIONS.EDIT_BULK_PROCESS) {\n            this.actionHandler(ACTIONS.OPEN_BULK_PROCESS);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                bulkProcess: params.bulkProcess\n            });\n        }\n\n        if(action === ACTIONS.ADD_SF_ENVIRONMENT) {\n            this.actionHandler(ACTIONS.OPEN_SF_ENVIRONMENT);\n\n            this.setState({\n                selectedConfigurationName: params.configurationName,\n                configuration: params.configuration,\n                dataSourceIndex: params.dataSourceIndex\n            });\n        }\n\n        if(action === ACTIONS.ADD_BULK_PROCESS) {\n            this.actionHandler(ACTIONS.OPEN_BULK_PROCESS);\n\n            this.setState({\n                configuration: params.configuration,\n                selectedBulkProcesseName: params.configurationName,\n                bulkProcess: {\n                    name: NEW_BULK_PROCESS\n                }\n            });\n        }\n\n        if(action === ACTIONS.SAVE_CONFIGURATION) {\n            if(this.state.configurationName.trim() === '') {\n                alert('The Name cannot be blank.');\n\n                return;\n            }\n\n            if(configurations[this.state.configurationName] && this.state.configurationName !== this.state.selectedConfigurationName){\n                alert('Name in use...');\n\n                return;\n            }\n\n            if(this.state.selectedConfigurationName != null) {\n                delete configurations[this.state.selectedConfigurationName];\n            }\n\n            configurations[this.state.configurationName] = this.state.configuration;\n\n            this.setState({\n                action: action,\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_CONFIGURATION);\n        }\n\n        if(action === ACTIONS.DELETE_CONFIGURATION) {\n            delete configurations[this.state.selectedConfigurationName];\n\n            this.setState({\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_CONFIGURATION);\n        }\n\n        if(action === ACTIONS.CLOSE_CONFIGURATION) {\n            this.setState({\n                isModalOpen: false,\n                isConfigurationFormOpened: false,\n                selectedConfigurationName: null,\n                configurationName: null\n            });\n        }\n\n        if(action === ACTIONS.SAVE_SF_ENVIRONMENT) {\n            var dataSourceIndex = params.dataSourceIndex;\n\n            var dataSource = params.dataSource || _.get(params.configuration, ['dataSources', dataSourceIndex], {\n                name: NEW_DATASOURCE\n            });\n\n            console.log('dataSourceIndex: ', dataSourceIndex);\n            console.log('params..selectedConfigurationName: ', params.selectedConfigurationName);\n            console.log('configurations[params.selectedConfigurationName]: ', configurations[params.selectedConfigurationName]);\n            console.log('dataSource: ', dataSource);\n\n            if(!dataSource) {\n                alert('Invalid dataSource');\n\n                return;\n            }\n\n            if(dataSource != null && dataSource.name.trim() === '') {\n                alert('The Name cannot be blank.');\n\n                return;\n            }\n\n\n            if(dataSourceIndex != null) {\n                configurations[params.selectedConfigurationName].dataSources[dataSourceIndex] = dataSource;\n            } else {\n                configurations[params.selectedConfigurationName].dataSources.push(dataSource);\n            }\n\n            this.setState({\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_SF_ENVIRONMENT);\n        }\n\n        if(action === ACTIONS.DELETE_SF_ENVIRONMENT) {\n            _.remove(configurations[this.state.selectedConfigurationName].dataSources, (dataSource) => {\n                return dataSource.name === this.state.dataSource.name;\n            });\n\n            this.setState({\n                configurations: configurations\n            });\n\n            this.actionHandler(ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER);\n            this.actionHandler(ACTIONS.CLOSE_SF_ENVIRONMENT);\n        }\n\n        if(action === ACTIONS.CLOSE_SF_ENVIRONMENT) {\n            this.setState({\n                isModalOpen: false,\n                isSFLoginFormOpened: false,\n                selectedConfigurationName: null,\n                dataSource: null\n            });\n        }\n\n        if(action === ACTIONS.CLOSE_BULK_PROCESS) {\n            this.setState({\n                isModalOpen: false,\n                isBulkRestoreFormOpened: false,\n                selectedBulkProcesseName: null,\n                bulkProcess: null\n            });\n        }\n\n        if(action === ACTIONS.CLOSE_MODAL) {\n            this.actionHandler(ACTIONS.CLOSE_CONFIGURATION);\n            this.actionHandler(ACTIONS.CLOSE_SF_ENVIRONMENT);\n            this.actionHandler(ACTIONS.CLOSE_BULK_PROCESS);\n        }\n\n        if(action === ACTIONS.ON_CHANGE_CONFIGURATIONS_TRIGGER) {\n            if(this.props.onChange) {\n                this.props.onChange(this.state.configurations);\n            }\n        }\n\n        this.setState({\n            action: action\n        });\n\n        console.log('this.state.configurations: ', this.state.configurations);\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return (\n                <Spinner size=\"large\" variant=\"brand\" />\n            );\n        }\n\n        const isEmpty = this.state.configurations == null || Object.keys(this.state.configurations).length === 0;\n\n        return (\n            <div className=\"slds-grid slds-grid_vertical\" style={{flexGrow: 1}}>\n                {this.state.isModalOpen ? (\n                    <Suspense fallback={<Spinner size=\"large\" variant=\"brand\" />}>\n                        <Modal\n                            assistiveText={{ dialogLabel: 'Configuration Form' }}\n                            isOpen={this.state.isModalOpen}\n                            footer={[\n                                (this.state.isConfigurationFormOpened ? (\n                                    <React.Fragment key={'modal-action-' + this.state.action}>\n                                        <Button key=\"configuration-save\" label=\"Save\" variant=\"brand\" onClick={() => {\n                                            this.actionHandler(ACTIONS.SAVE_CONFIGURATION);\n                                        }} />\n\n                                        {this.state.action === ACTIONS.EDIT_CONFIGURATION ? (\n                                            <Button variant=\"destructive\" label=\"Delete\" onClick={() => {\n                                                this.actionHandler(ACTIONS.DELETE_CONFIGURATION);\n                                            }} />\n                                        ) : null}\n                                    </React.Fragment>\n                                ) : null),\n\n                                (this.state.isSFLoginFormOpened ? (\n                                    <React.Fragment key={'modal-action-' + this.state.action}>\n                                        <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                            this.actionHandler(ACTIONS.SAVE_SF_ENVIRONMENT, {\n                                                dataSourceIndex: this.state.dataSourceIndex,\n                                                dataSource: this.state.dataSource,\n                                                configuration: this.state.configuration,\n                                                selectedConfigurationName: this.state.selectedConfigurationName\n                                            });\n                                        }} />\n\n                                        {this.state.action === ACTIONS.EDIT_SF_ENVIRONMENT ? (\n                                            <Button variant=\"destructive\" label=\"Delete\" onClick={() => {\n                                                this.actionHandler(ACTIONS.DELETE_SF_ENVIRONMENT);\n                                            }} />\n                                        ) : null}\n                                    </React.Fragment>\n                                ) : null),\n\n                                (this.state.isBulkRestoreFormOpened ? (\n                                    <React.Fragment key={'modal-action-' + this.state.action}>\n                                        <Button label=\"Save\" variant=\"brand\" onClick={() => {\n                                            this.actionHandler(ACTIONS.CLOSE_BULK_PROCESS);\n                                        }} />\n\n                                        {this.state.action === ACTIONS.EDIT_SF_ENVIRONMENT ? (\n                                            <Button variant=\"destructive\" label=\"Delete\" onClick={() => {\n                                                this.actionHandler(ACTIONS.CLOSE_BULK_PROCESS);\n                                            }} />\n                                        ) : null}\n                                    </React.Fragment>\n                                ) : null),\n\n                                <Button key=\"configuration-cancel\" label=\"Cancel\" onClick={() => {\n                                    this.actionHandler(ACTIONS.CLOSE_MODAL);\n                                }} />\n                            ]}\n                            onRequestClose={() => {\n                                this.actionHandler(ACTIONS.CLOSE_MODAL);\n                            }}\n                            align=\"top\"\n                            size={this.state.modalSize}\n                            ariaHideApp={false}\n                        >\n                            {this.state.isConfigurationFormOpened ? (\n                                <GRAXCloudConfigurationForm title={this.state.configurationName} configuration={this.state.configuration} onChange={(title, configuration) => {\n                                    console.log(title, configuration);\n                                    \n                                    this.setState({\n                                        configurationName: title,\n                                        configuration: configuration\n                                    });\n                                }} />\n                            ) : null}\n\n                            {this.state.isSFLoginFormOpened ? (\n                                <GRAXCloudSFLoginForm dataSource={this.state.dataSource} configuration={this.state.configuration} dataSourceIndex={this.state.dataSourceIndex} onChange={(configuration, dataSource) => {\n                                    this.setState({\n                                        dataSource: dataSource\n                                    });\n                                }} onLogin={(configuration, dataSource) => {\n                                    console.log(JSON.stringify(dataSource));\n                                }} />\n                            ) : null},\n\n                            {this.state.isBulkRestoreFormOpened ? (\n                                <GRAXCloudBulkRestoreForm globalConfigurations={this.state.globalConfigurations} configuration={this.state.configuration} onChange={(name, globalConfigurations, bulkProcess) => {\n                                    console.log(name);\n                                    console.log(globalConfigurations);\n                                    console.log(JSON.stringify(bulkProcess));\n                                }} onLogin={(bulkProcess) => {\n                                    console.log(JSON.stringify(bulkProcess));\n                                }} />\n                            ) : null}\n                        </Modal>\n                    </Suspense>\n                ) : null}\n\n                <Card\n                    id=\"grax-cloud-configurations\"\n                    heading=\"GRAX Configurations\"\n                    empty={\n                        isEmpty ? (\n                            <CardEmpty heading=\"No GRAX Configurations\">\n                                <Button label=\"Add Configuration\" onClick={() => {\n                                    this.actionHandler(ACTIONS.ADD_CONFIGURATION);\n                                }} />\n                            </CardEmpty>\n                        ) : null\n                    }\n                    style={{flexGrow: 1}}\n                >\n                    <div id=\"grax-cloud-configurations-accordion\" className=\"slds-p-around_medium\">\n                        <GRAXCloudTree>\n                            {_.map(this.state.configurations, (configuration, configurationName) => {\n                                // var key = _.uniqueId('grax-cloud-configurations-accordion-');\n                                var key = 'grax-cloud-configurations-accordion-' + _.kebabCase(configurationName);\n\n                                return (\n                                    <GRAXCloudTreeNode\n                                        isOpen={this.state.configurationCollapsibleOpen === configurationName}\n                                        isCollapsible={true}\n                                        id={key}\n                                        key={key}\n                                        onToggle={(isOpen) => {\n                                            this.setState({\n                                                configurationCollapsibleOpen: isOpen ? configurationName : null\n                                            });\n                                        }}\n                                        isToggleOnClick={true}\n                                        label={configurationName}\n                                        level={1}\n                                        isEditable={true}\n                                        icon={GRAX_ICON}\n                                        onEdit={() => {\n                                            this.actionHandler(ACTIONS.EDIT_CONFIGURATION, {\n                                                configurationName: configurationName,\n                                                configuration: configuration\n                                            });\n                                        }}\n                                    >\n                                        <GRAXCloudTreeNode\n                                            id={'grax-cloud-configurations-sfconnection-accordion-item'}\n                                            key={'grax-cloud-configurations-sfconnection-accordion-item'}\n                                            label={'SFDC Configurations'}\n                                            level={2}\n                                            isEditable={false}\n                                            //icon={SF_ICON}\n\n                                            isCollapsible={true}\n                                            isOpen={false}\n                                            isToggleOnClick={true}\n                                        >\n\n                                            {_.map(configuration.dataSources, (dataSource, i) => {\n                                                if(dataSource == null) return null;\n\n                                                var key = _.uniqueId('grax-cloud-configurations-accordion-item');\n                                                \n                                                return (\n                                                    <GRAXCloudTreeNode\n                                                        id={key}\n                                                        key={key}\n                                                        label={dataSource.name}\n                                                        level={3}\n                                                        isEditable={true}\n                                                        icon={SF_ICON}\n                                                        onEdit={() => {\n                                                            this.actionHandler(ACTIONS.EDIT_SF_ENVIRONMENT, {\n                                                                configurationName: configurationName,\n                                                                configuration: configuration,\n                                                                dataSourceIndex: i,\n                                                                dataSource: dataSource\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            })}\n\n                                            <GRAXCloudTreeNode\n                                                content={\n                                                    <Button\n                                                        label=\"Add SFDC Configuration\"\n                                                        onClick={(e) => {\n                                                            this.actionHandler(ACTIONS.ADD_SF_ENVIRONMENT, {\n                                                                configurationName: configurationName,\n                                                                configuration: configuration,\n                                                                dataSourceIndex: configuration.dataSources.length\n                                                            });\n                                                        }}\n                                                    />\n                                                }\n                                                level={3}\n                                            />\n\n                                        </GRAXCloudTreeNode>\n\n\n\n\n\n\n                                        <GRAXCloudTreeNode\n                                            id={'grax-cloud-configurations-bulkrestoreconnections-accordion-item'}\n                                            key={'grax-cloud-configurations-bulkrestoreconnections-accordion-item'}\n                                            label={'Bulk Restore Connections'}\n                                            level={2}\n                                            isEditable={false}\n                                            //icon={SF_ICON}\n\n                                            isCollapsible={true}\n                                            isOpen={false}\n                                            isToggleOnClick={true}\n                                        >\n\n                                            {_.map(configuration.bulkProcesses, (bulkProcess, i) => {\n                                                var key = _.uniqueId('grax-cloud-configurations-bulkrestore-accordion-item');\n                                                \n                                                return (\n                                                    <GRAXCloudTreeNode\n                                                        id={key}\n                                                        key={key}\n                                                        label={bulkProcess.name}\n                                                        level={3}\n                                                        isEditable={true}\n                                                        icon={MAGIC_ICON}\n                                                        onEdit={() => {\n                                                            this.actionHandler(ACTIONS.EDIT_BULK_PROCESS, {\n                                                                configuration: configuration,\n                                                                configurationName: configurationName,\n                                                                bulkProcess: bulkProcess\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            })}\n\n                                            <GRAXCloudTreeNode\n                                                content={\n                                                    <Button\n                                                        label=\"Add Bulk Restore Connection\"\n                                                        onClick={(e) => {\n                                                            this.actionHandler(ACTIONS.ADD_BULK_PROCESS, {\n                                                                configuration: configuration,\n                                                                configurationName: configurationName\n                                                            });\n                                                        }}\n                                                    />\n                                                }\n                                                level={3}\n                                            />\n\n                                        </GRAXCloudTreeNode>\n\n                                        \n                                    </GRAXCloudTreeNode>\n                                )\n                            })}\n\n                            <GRAXCloudTreeNode\n                                content={\n                                    <Button\n                                        label=\"Add GRAX Configuration\"\n                                        onClick={() => {\n                                            this.actionHandler(ACTIONS.ADD_CONFIGURATION);\n                                        }}\n                                    />\n                                }\n                                level={1}\n                            />\n\n                        </GRAXCloudTree>\n                    </div>\n                </Card>\n            </div>\n        )\n    }\n}"],"sourceRoot":""}