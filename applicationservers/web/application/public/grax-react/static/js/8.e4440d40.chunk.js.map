{"version":3,"sources":["components/GRAXDeleteDataTable.jsx","components/GRAXDelete.jsx","lib/grax-data-lake.js","components/SLDSSection.jsx","components/SLDSPaginator.jsx","components/GRAXSFieldCombobox.jsx","components/GRAXFilterGeneration.jsx","components/GRAXFieldsCombobox.jsx","components/GRAXObjectCombobox.jsx"],"names":["GRAXDeleteDataTable","props","state","sortColumn","sortDirection","chunks","items","extraInfo","page","selection","isLoaded","isLoading","deleteConfirmIsOpen","deleteConfirmIsChecked","deleteConfirmCallback","deleteConfirmTotal","nextProps","nextState","this","renderKey","_sort","setState","$","ajax","type","url","baseUrl","GetParams","action","dataIndex","_select","_","union","columns","hiddenColumns","join","_q","filterQuery","_limit","_from","_includeMetadata","success","data","results","filterFunction","map","item","i","forEach","val","key","SF_DATETIME_REGEXP","test","m","moment","isValid","tz","TZ","format","_i","indexOf","DATETIME_FORMAT","DATE_FORMAT","id","toString","total","size","totalRetrieved","error","xhr","status","err","console","getDataHandler","event","slice","log","property","style","position","variant","assistiveText","actionsHeader","columnSort","columnSortedAscending","columnSortedDescending","selectAllRows","selectRow","fixedLayout","onRowChange","handleChanged","bind","onSort","handleSort","selectRows","columnName","isSorted","label","sortable","sortableColumns","className","SLDSPaginator","totalItems","length","pageSize","onChangePage","isInitialLoad","disabled","onClick","confirm","contentType","JSON","stringify","pick","alert","dismissible","footer","labels","onChange","e","target","checked","isOpen","onRequestClose","prompt","align","dismissOnClickOutside","title","height","React","Component","ELASTIC_SORTABLE_TYPES","GRAXDelete","selectedDataIndex","retrieved","retrievedCounter","_graxFields","_graxFieldsSelection","_graxFieldsSelectionList","_filterFunction","dataList","_getFilterQuery","_filterValuesFields","_graxSortableFields","SLDSSection","isCollapsible","GRAXObjectCombobox","onSelect","excludeIds","onRequestRemoveSelectedOption","GRAXFieldsCombobox","onLoad","reduce","sortableFields","elasticField","push","GRAXFilterGeneration","SObjectType","filterableFieldOptions","onFilterValueChangeHandler","hasFieldSelected","token","window","__grax__","_csrf","orgid","pageParams","userid","params","undefined","param","ajaxSetup","beforeSend","settings","method","setRequestHeader","authorization","crossDomain","withCredentials","skipFail","fail","jqXHR","textStatus","errorThrown","showError","statusText","responseText","handleToggle","onToggle","preventDefault","category","name","children","getPager","currentPage","isNarrow","startPage","endPage","totalPages","Math","ceil","startIndex","endIndex","min","pages","Array","keys","pager","setPage","iconCategory","iconName","iconPosition","index","Date","now","content","prevState","newTotalItems","newPageSize","newCurrentPage","defaultProps","GRAXSFieldCombobox","options","inputValue","SObjectName","fieldName","picklistValues","value","onElseComponent","onRender","elseComponent","Fragment","classNameMenu","events","placeholder","comboboxFilterAndLimit","limit","multiple","required","sanitizeElasticFilterValue","filterValue","replace","TYPE_VS_OPERATORS","isNegated","GRAXFilterableCombobox","_isMounted","isOpened","filterOptionsHandler","onOpen","onClose","_filterValues","_error","operator","isActive","selectedField","filterValueStruct","getFilterValueStruct","filter","option","filterValues","Object","_filterValuesList","getFilterValuesList","getFilterFunction","getFilterQuery","splice","isReturned","filterOperator","filterVal","isArray","split","filterIsNegated","isFilterMatch","itemVal","Boolean","String","toLowerCase","includes","operatorByName","queryConditions","startsWith","_filterVal","condition","inConditions","each","parseFloat","selectionIds","scope","data-label","width","find","defaultChecked","getSelectionValues","defaultValue","onBlur","isPicklist","date","menuPosition","hasStaticAlignment","removeFieldHandler","addAnotherFieldHandler","cookieSubfix","getMappedFieldList","selectedFieldList","setCookie","selectedFieldsCookie","getCookie","selectedFields","parse","sortBy","_selection","onLoadHandler","onChangeHandler"],"mappings":"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","file":"static/js/8.e4440d40.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React from \"react\";\n\nimport {\n  Spinner,\n  Button,\n  DataTable,\n  DataTableColumn,\n  Modal,\n  Checkbox\n} from \"@salesforce/design-system-react\";\nimport SLDSPaginator from \"./SLDSPaginator\";\n\nimport { $, baseUrl, GetParams } from \"../lib/grax-data-lake\";\nimport { moment, SF_DATETIME_REGEXP, DATE_FORMAT, DATETIME_FORMAT, TZ } from \"../lib/utils\";\n\nimport _ from \"lodash\";\n\nconst ROWSXPAGE = 100;\n\nexport default class GRAXDeleteDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortColumn: \"Id\",\n      sortDirection: \"asc\",\n      chunks: [],\n      items: [],\n      extraInfo: {},\n      page: 0,\n      selection: [],\n      isLoaded: false,\n      isLoading: false,\n      deleteConfirmIsOpen: false,\n      deleteConfirmIsChecked: false,\n      deleteConfirmCallback: () => {},\n      deleteConfirmTotal: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.renderKey !== nextProps.renderKey ||\n      this.state.items !== nextState.items ||\n      this.state.selection !== nextState.selection ||\n      this.state.isLoaded !== nextState.isLoaded ||\n      this.state.isLoading !== nextState.isLoading ||\n      this.state.sortColumn !== nextState.sortColumn ||\n      this.state.sortDirection !== nextState.sortDirection ||\n      this.state.deleteConfirmIsOpen !== nextState.deleteConfirmIsOpen ||\n      this.state.deleteConfirmIsChecked !== nextState.deleteConfirmIsChecked\n    );\n  }\n\n  getDataHandler(page, sortColumn, sortDirection) {\n    const _sort = sortColumn + \" \" + sortDirection;\n\n    this.setState({\n      isLoading: true,\n      page: page,\n      sortColumn: sortColumn,\n      sortDirection: sortDirection\n    });\n\n    $.ajax({\n      type: \"GET\",\n      //dataType: 'jsonp',\n      url:\n        baseUrl +\n        \"/grax-app/grax-data-lake\" +\n        GetParams({\n          action: \"load\",\n          dataIndex: this.props.dataIndex,\n          _select:\n            _.union(this.props.columns, this.props.hiddenColumns, [\n              \"Id\",\n              \"graxorgid\",\n              \"attributes.type\"\n            ]).join(\",\") || \"Id\",\n          _q: this.props.filterQuery,\n          _limit: ROWSXPAGE,\n          _from: ROWSXPAGE * page,\n          _sort: _sort,\n          _includeMetadata: true\n        }),\n      /*data: {\n                _select: this.props.columns.join(',')\n            },*/\n      success: (data) => {\n        let results = data.results;\n\n        if (this.props.filterFunction) {\n          results = this.props.filterFunction(results);\n        }\n\n        results = _.map(results, (item, i) => {\n          _.forEach(item, (val, key) => {\n            if (typeof val == \"string\") {\n              if (SF_DATETIME_REGEXP.test(val)) {\n                const m = moment(val);\n\n                if (m.isValid()) {\n                  item[key] = m\n                    .tz(TZ)\n                    .format(m._i.indexOf(\":\") !== -1 ? DATETIME_FORMAT : DATE_FORMAT);\n                }\n              }\n            }\n\n            if (typeof val == \"boolean\") {\n              item[key] = val ? \"true\" : \"false\";\n            }\n          });\n\n          return {\n            ...item,\n            ...{ id: i.toString() }\n          };\n        });\n\n        this.setState({\n          page: 0,\n          data: results,\n          extraInfo: data.extraInfo || { total: 0, size: ROWSXPAGE, totalRetrieved: 0 },\n          items: results,\n          isLoaded: true,\n          isLoading: false\n        });\n      },\n      error: (xhr, status, err) => {\n        console.error(xhr, status, err);\n\n        this.setState({\n          isLoaded: true,\n          isLoading: false,\n          items: [],\n          error: err.toString()\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getDataHandler(0, this.state.sortColumn, this.state.sortDirection);\n  }\n\n  handleChanged(event, data) {\n    this.setState({ selection: data.selection.slice(0, 10) });\n    console.log(event, data);\n  }\n\n  handleSort(sortColumn, ...rest) {\n    if (sortColumn.property) {\n      this.getDataHandler(this.state.page, sortColumn.property, sortColumn.sortDirection);\n    }\n  }\n\n  render() {\n    return this.state.isLoaded ? (\n      <div>\n        <div style={{ position: \"relative\" }}>\n          {this.state.isLoading && <Spinner size=\"large\" variant=\"brand\" />}\n          <DataTable\n            assistiveText={{\n              actionsHeader: \"actions\",\n              columnSort: \"sort this column\",\n              columnSortedAscending: \"asc\",\n              columnSortedDescending: \"desc\",\n              selectAllRows: \"all rows\",\n              selectRow: \"select this row\"\n            }}\n            fixedLayout\n            items={this.state.items}\n            id=\"GRAXDeleteDataTable\"\n            onRowChange={this.handleChanged.bind(this)}\n            onSort={this.handleSort.bind(this)}\n            selection={this.state.selection}\n            selectRows={true}\n          >\n            {this.props.columns.map(columnName => (\n              <DataTableColumn\n                key={\"col\" + columnName}\n                id={columnName}\n                isSorted={this.state.sortColumn === columnName}\n                label={columnName} // TODO\n                property={columnName}\n                sortable={\n                  this.props.sortableColumns == null ||\n                  this.props.sortableColumns.indexOf(columnName) !== -1\n                }\n                sortDirection={this.state.sortDirection}\n              />\n            ))}\n          </DataTable>\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_small\">\n          <SLDSPaginator\n            totalItems={this.state.items.length > 0 ? this.state.extraInfo.total : 0}\n            pageSize={ROWSXPAGE}\n            onChangePage={(page, isInitialLoad) => {\n              if (!isInitialLoad) {\n                this.getDataHandler(page - 1, this.state.sortColumn, this.state.sortDirection);\n              }\n            }}\n          />\n        </div>\n\n        <div className=\"-x-small-buttons--horizontal slds-p-top_medium\">\n          <Button\n            label=\"Delete Selection\"\n            disabled={this.state.selection.length < 1 || this.state.isLoading}\n            onClick={() => {\n              this.setState({\n                deleteConfirmIsOpen: true,\n                deleteConfirmIsChecked: false,\n                deleteConfirmTotal: this.state.selection.length,\n                deleteConfirmCallback: () => {\n                  if (\n                    this.state.deleteConfirmIsChecked &&\n                    confirm(\"Are you sure that you want to delete the selected records?\")\n                  ) {\n                    $.ajax({\n                      type: \"POST\",\n                      url:\n                        baseUrl +\n                        \"/grax-app/grax-data-lake/deleteAPI\" +\n                        GetParams({\n                          action: \"delete\"\n                        }),\n                      contentType: \"application/json; charset=utf-8\",\n                      data: JSON.stringify(\n                        _.map(this.state.selection, item => {\n                          return _.pick(item, [\n                            \"Id\",\n                            \"graxorgid\",\n                            \"_id\",\n                            \"_type\",\n                            \"_index\",\n                            \"attributes.type\"\n                          ]);\n                        })\n                      ),\n                      success: data => {\n                        alert(data.state);\n                      }\n                    });\n\n                    this.setState({\n                      selection: [],\n                      deleteConfirmIsOpen: false,\n                      deleteConfirmCallback: () => {},\n                      deleteConfirmTotal: 0\n                    });\n                  }\n                }\n              });\n            }}\n          />\n\n          {/*<Button label=\"Delete All\" disabled={this.state.isLoading} onClick={() => {\n                        this.setState({\n                            deleteConfirmIsOpen: true,\n                            deleteConfirmIsChecked: false,\n                            deleteConfirmTotal: this.state.extraInfo.total,\n                            deleteConfirmCallback: (() => {\n                                if(this.state.deleteConfirmIsChecked && confirm('Are you sure that you want to delete the filtered records?')) {\n                                    $.ajax({\n                                        type: 'POST',\n                                        url: baseUrl + '/grax-app/grax-data-lake/deleteAll' + GetParams({\n                                            action: 'delete',\n                                        }),\n                                        contentType: \"application/json; charset=utf-8\",\n                                        data: JSON.stringify({\n                                            dataIndex: this.props.dataIndex,\n                                            _q: this.props.filterQuery,\n                                            _sort: this.state.sortColumn + ' ' + this.state.sortDirection\n                                        }),\n                                        success: function(data) {\n                                            alert(data.state);\n                                        }.bind(this)\n                                    });\n\n                                    this.setState({\n                                        selection: [],\n                                        deleteConfirmIsOpen: false,\n                                        deleteConfirmCallback: (() => {}),\n                                        deleteConfirmTotal: 0\n                                    });\n                                }\n                            })\n                        });\n                    }} />*/}\n        </div>\n\n        <Modal\n          dismissible={true}\n          footer={[\n            <div key=\"agree\" className=\"slds-p-bottom_small\">\n              <Checkbox\n                assistiveText={{\n                  label: \"I understand the risks\"\n                }}\n                id=\"delete-confirm\"\n                labels={{\n                  label: \"I understand the risks\"\n                }}\n                onChange={e => {\n                  this.setState({\n                    deleteConfirmIsChecked: e.target.checked\n                  });\n                }}\n              />\n            </div>,\n            <Button\n              key=\"cancelBtn\"\n              label=\"Cancel\"\n              onClick={() => {\n                this.setState({\n                  deleteConfirmIsOpen: false,\n                  deleteConfirmIsChecked: false\n                });\n              }}\n            />,\n            <Button\n              key=\"deleteBtn\"\n              label=\"Delete\"\n              onClick={this.state.deleteConfirmCallback}\n              variant=\"destructive\"\n              disabled={!this.state.deleteConfirmIsChecked}\n            />\n          ]}\n          isOpen={this.state.deleteConfirmIsOpen}\n          onRequestClose={() => {\n            this.setState({\n              deleteConfirmIsOpen: false,\n              deleteConfirmIsChecked: false\n            });\n          }}\n          prompt=\"error\"\n          size=\"medium\"\n          align=\"top\"\n          dismissOnClickOutside={false}\n          title={\n            <span>\n              Delete <b>{this.state.deleteConfirmTotal}</b> record(s)\n            </span>\n          }\n        >\n          <div className=\"slds-m-around_medium\">\n            Please confirm that you want to delete these record(s) from your GRAX Datalake.\n            <br />\n            After you confirm deletion, these records are NOT recoverable.\n          </div>\n        </Modal>\n      </div>\n    ) : (\n      <div style={{ position: \"relative\", height: \"2rem\" }}>\n        <Spinner size=\"medium\" variant=\"brand\" />\n      </div>\n    );\n  }\n}\n","///* global $ */\nimport React from 'react';\nimport _ from 'lodash';\n\nimport SLDSSection from './SLDSSection';\nimport GRAXObjectCombobox from './GRAXObjectCombobox';\nimport GRAXFieldsCombobox from './GRAXFieldsCombobox';\nimport GRAXDeleteDataTable from './GRAXDeleteDataTable';\nimport GRAXFilterGeneration from './GRAXFilterGeneration';\n\nimport {Button} from '@salesforce/design-system-react';\n\n\nconst ELASTIC_SORTABLE_TYPES = ['text', 'date', 'number'];\n\n\nexport default class GRAXDelete extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedDataIndex: null,\n            retrieved: false,\n            retrievedCounter: 0,\n            _graxFields: null,\n            _graxFieldsSelection: null,\n            _graxFieldsSelectionList: null,\n            _filterFunction: ((dataList) => dataList),\n            _getFilterQuery: (() => null),\n            _filterValuesFields: [],\n            _graxSortableFields: null\n        }\n    }\n\n    hasFieldSelected() {\n        return this.state._graxFields != null && this.state._graxFieldsSelectionList != null && this.state._graxFieldsSelectionList.length > 0;\n    }\n    \n    render() {\n        return (\n            <div>\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Select the GRAX Table\">\n                    <GRAXObjectCombobox\n                        onSelect={(event, data) => {\n                            this.setState({\n                                selectedDataIndex: data[0]\n                            });\n                        }}\n                        excludeIds={['graxgrax_loggingindex']}\n                        onRequestRemoveSelectedOption={(event, data) => {\n                            this.setState({\n                                retrieved: false,\n                                selectedDataIndex: null,\n                                _graxFieldsSelection: null,\n                                _graxFieldsSelectionList: null\n                            });\n                        }}\n                    />\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n                \n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Search GRAX Table\">\n                    {\n                        this.state.selectedDataIndex != null\n                        ? (\n                            <GRAXFieldsCombobox\n                                dataIndex={this.state.selectedDataIndex.id}\n                                onLoad={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                    console.log('onLoad', _graxFieldsSelection, _graxFieldsSelectionList, _graxFields);\n\n                                    this.setState({\n                                        _graxFields: _graxFields,\n                                        _graxFieldsSelection: _graxFieldsSelection,\n                                        _graxFieldsSelectionList: _graxFieldsSelectionList,\n                                        _graxSortableFields: _.reduce(_graxFields, (sortableFields, elasticField, i) => {\n                                            if(ELASTIC_SORTABLE_TYPES.indexOf(elasticField.type) !== -1) {\n                                                sortableFields.push(elasticField.id);\n                                            }\n                            \n                                            return sortableFields;\n                                        }, [])\n                                    });\n                                }}\n                                onChange={(e, _graxFieldsSelection, _graxFields, _graxFieldsSelectionList) => {\n                                    console.log('onChange', _graxFieldsSelection, _graxFieldsSelectionList);\n\n                                    var retrievedCounter = this.state.retrievedCounter;\n\n                                    if(_graxFieldsSelectionList.length > this.state._graxFieldsSelectionList.length) {\n                                        retrievedCounter++;\n                                    }\n\n                                    this.setState({\n                                        retrievedCounter: retrievedCounter,\n                                        _graxFieldsSelection: _graxFieldsSelection,\n                                        _graxFieldsSelectionList: _graxFieldsSelectionList\n                                    });\n                                }}\n                            />\n                        )\n                        : 'No GRAX Table selected...'\n                    }\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"Filter Records\">\n                    {/*<Input\n                        iconLeft={\n                            <InputIcon\n                                assistiveText=\"Search\"\n                                name=\"search\"\n                                category=\"utility\"\n                            />\n                        }\n                        assistiveText={{ label: 'Search Term' }}\n                        id=\"record-query\"\n                        placeholder=\"Search\"\n                    />*/}\n                    {this.state._graxFieldsSelectionList != null && (\n                        <GRAXFilterGeneration\n                            SObjectType={this.state.selectedDataIndex.label}\n                            filterableFieldOptions={this.state._graxFields}\n                            onFilterValueChangeHandler={(_filterFunction, _filterValuesFields, _getFilterQuery) => {\n                                this.setState({\n                                    retrievedCounter: this.state.retrievedCounter,\n                                    _filterFunction: _filterFunction,\n                                    _getFilterQuery: _getFilterQuery,\n                                    _graxFieldsSelectionList: this.state._graxFieldsSelectionList,\n                                    _filterValuesFields: _filterValuesFields\n                                });\n                            }}\n                        />\n                    )}\n\n                    <div className=\"slds-m-bottom_large\"></div>\n                </SLDSSection>\n\n                <SLDSSection isCollapsible={true} isOpen={true} title=\"GRAX Stored Records\">\n                    <div className=\"-x-small-buttons--horizontal slds-p-bottom_large\">\n\t\t\t\t\t    <Button label=\"Retrieve\" variant=\"brand\" onClick={() => {\n                            this.setState({\n                                retrieved: this.state.selectedDataIndex != null,\n                                retrievedCounter: this.state.retrievedCounter + 1\n                            })\n                        }} disabled={!this.hasFieldSelected()} />\n                    </div>\n\n                    {this.state.retrieved && this.state._graxFieldsSelectionList && (\n                        <GRAXDeleteDataTable\n                            key={'GRAXDeleteDataTable_' + this.state.retrievedCounter}\n                            renderKey={'GRAXDeleteDataTable_' + this.state.retrievedCounter}\n                            columns={this.state._graxFieldsSelectionList}\n                            hiddenColumns={this.state._filterValuesFields}\n                            dataIndex={this.state.selectedDataIndex.id}\n                            filterFunction={this.state._filterFunction}\n                            filterQuery={this.state._getFilterQuery()}\n                            sortableColumns={this.state._graxSortableFields}\n                        />\n                    )}\n                </SLDSSection>\n            </div>\n        );\n    }\n}","/* eslint-disable no-useless-escape */\n/* --------------------------------------------------------------------------\n * This file is subject to the terms and conditions defined in\n * file https://github.com/HardingPoint/GRAXForSFDC/blob/master/LICENSE,\n * which is part of this source code package.\n * --------------------------------------------------------------------------\n *          Copyright (c) 2017-2018 Harding Point\n *                  All rights reserved\n * --------------------------------------------------------------------------\n * Support:\tSupport@Grax.io\n * Website:\thttps://grax.io\n * Github:\thttps://github.com/HardingPoint/grax-application\n * License:\thttps://github.com/HardingPoint/grax-application/blob/master/LICENSE\n * --------------------------------------------------------------------------*/\n\nimport $ from \"jquery\";\n\n// export const isDev = window.location.port !== '80';\n\nexport const isDev = false;\n\nexport const baseUrl = isDev ? process.env.REACT_APP_BASE_URL : \"\";\n\nexport const token = window.__grax__.token;\nexport const _csrf = window.__grax__._csrf;\nexport const orgid = window.__grax__.orgid;\nexport const userid = window.__grax__.userid;\nexport const sessionid = null;\nexport const endpoint = null;\nexport const pageParams = window.__grax__.pageParams || {};\n\nexport function GetParams(params) {\n  if (params === null || params === undefined) params = {};\n\n  if (params.action === null || params.action === undefined || params.action === \"\")\n    params.action = \"load\";\n\n  return \"?\" + $.param(params);\n}\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    xhr.setRequestHeader(\"sfdcorgid\", orgid);\n\n    if (pageParams.authorization != null) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + pageParams.authorization);\n    } else {\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    }\n\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", _csrf);\n    }\n\n    xhr.withCredentials = true;\n\n    if (settings.skipFail !== true) {\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        console.error(jqXHR);\n\n        if (jqXHR.status !== 404 && errorThrown !== \"Not Found\") {\n          window.showError(jqXHR.statusText + \": \" + jqXHR.responseText);\n        }\n      });\n    }\n  }\n});\n\nexport { $ };\n","import React from 'react';\nimport { Icon } from '@salesforce/design-system-react';\n\nexport default class SLDSSection extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.isOpen === true ? true : false || props.isCollapsible === undefined\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(e) {\n        var isOpen = !this.state.isOpen;\n\n        this.setState({\n            isOpen: isOpen\n        });\n\n        if(this.props.onToggle) {\n            this.props.onToggle(isOpen);\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        var title = <span className={'slds-truncate' + (!this.props.isCollapsible ? ' slds-p-horizontal_small' : '')} title={this.props.title}>{this.props.title}</span>;\n\n        return (\n            <div id={this.props.id || this.props.key} className={['slds-section', this.state.isOpen && 'slds-is-open', this.props.className].join(' ')}>\n                <h3 className=\"slds-section__title slds-theme_shade\">\n                    {this.props.isCollapsible ? <button className=\"slds-button slds-section__title-action\" onClick={this.handleToggle}>\n                        <Icon\n                            assistiveText={{ label: this.props.title }}\n                            category=\"utility\"\n                            name=\"switch\"\n                            size=\"x-small\"\n                            className=\"slds-section__title-action-icon slds-button__icon slds-button__icon_left\"\n                        />\n                        {title}\n                    </button> : title}\n                </h3>\n                {this.state.isOpen && <div className=\"slds-section__content\">\n                    {this.props.children}\n                </div>}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ButtonGroup, Button, Tooltip } from \"@salesforce/design-system-react\";\n\nconst propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\n\nconst defaultProps = {\n  currentPage: 1,\n  pageSize: 10\n};\n\nconst getPager = (totalItems, currentPage, pageSize) => {\n  // default to first page\n  // eslint-disable-next-line no-param-reassign\n  currentPage = currentPage || 1;\n\n  // default page size is 10\n  // eslint-disable-next-line no-param-reassign\n  pageSize = pageSize || 10;\n\n  let isNarrow = false;\n\n  if (totalItems > 10000) {\n    // eslint-disable-next-line no-param-reassign\n    totalItems = 10000;\n    isNarrow = true;\n  }\n\n  // calculate total pages\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  let startPage;\n  let endPage;\n  if (totalPages <= 10) {\n    // less than 10 total pages so show all\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // more than 10 total pages so calculate start and end pages\n    // eslint-disable-next-line no-lonely-if\n    if (currentPage <= 6) {\n      startPage = 1;\n      endPage = 10;\n    } else if (isNarrow && currentPage + 3 >= totalPages) {\n      startPage = totalPages - 8;\n      endPage = totalPages;\n    } else if (currentPage + 4 >= totalPages) {\n      startPage = totalPages - 9;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - 5;\n      endPage = currentPage + 4;\n    }\n  }\n\n  // calculate start and end item indexes\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n  // create an array of pages to ng-repeat in the pager control\n  const pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n\n  // return object with all pager properties required by the view\n  return {\n    totalItems,\n    currentPage,\n    pageSize,\n    totalPages,\n    startPage,\n    endPage,\n    startIndex,\n    endIndex,\n    pages,\n    isNarrow\n  };\n};\n\nclass SLDSPaginator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pager: {}\n    };\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillMount() {\n    // set page if items array isn't empty\n    const { totalItems, currentPage } = this.props;\n    if (totalItems) {\n      this.setPage(currentPage, true);\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      totalItems: newTotalItems,\n      pageSize: newPageSize,\n      currentPage: newCurrentPage\n    } = nextProps;\n    const { totalItems, pageSize, page } = prevState.pager;\n    if (totalItems !== newTotalItems || pageSize !== newPageSize || newCurrentPage !== page) {\n      return { pager: getPager(newTotalItems, newCurrentPage, newPageSize) };\n    }\n    return null;\n  }\n\n  setPage(page, isInitialLoad) {\n    const { totalItems, pageSize } = this.props;\n    let { pager } = this.state;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    pager = getPager(totalItems, page, pageSize);\n\n    // update state\n    this.setState({ pager });\n\n    // call change page function in parent component\n    // eslint-disable-next-line react/destructuring-assignment\n    this.props.onChangePage(page, false || isInitialLoad);\n  }\n\n  render() {\n    const { pager } = this.state;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return (\n      <ButtonGroup>\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"left\"\n          iconPosition=\"left\"\n          label=\"First\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(1)}\n          disabled={pager.currentPage === 1}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronleft\"\n          iconPosition=\"left\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage - 1)}\n          disabled={pager.currentPage === 1}\n        />\n        {pager.pages.map((page, index) => {\n          return (\n            <Button\n              // eslint-disable-next-line react/no-array-index-key\n              key={`SLDSPaginator${Date.now()}${index}`}\n              label={page}\n              variant={pager.currentPage === page ? \"brand\" : \"neutral\"}\n              onClick={() => this.setPage(page)}\n            />\n          );\n        })}\n        {pager.isNarrow && pager.currentPage >= pager.totalPages - 3 && (\n          <Tooltip\n            align=\"top right\"\n            content=\"The list is too long, try adding more filters to optimize the results.\"\n          >\n            <Button label=\"&middot;&middot;&middot;\" variant=\"neutral\" />\n          </Tooltip>\n        )}\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"chevronright\"\n          iconPosition=\"right\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.currentPage + 1)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n        <Button\n          iconCategory=\"utility\"\n          iconName=\"right\"\n          iconPosition=\"right\"\n          label=\"Last\"\n          variant=\"neutral\"\n          onClick={() => this.setPage(pager.totalPages)}\n          disabled={pager.currentPage === pager.totalPages}\n        />\n      </ButtonGroup>\n    );\n  }\n}\n\nSLDSPaginator.propTypes = propTypes;\nSLDSPaginator.defaultProps = defaultProps;\nexport default SLDSPaginator;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXSFieldCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/salesforce/sobjects/' + this.props.SObjectName + '/fields/' + this.props.fieldName + GetParams({action:'load'}),\n            data: {\n                _select: 'name,type,picklistValues'\n            },\n            success: function(data) {\n                this.setState({\n                    options: _.map(data.picklistValues || [], (item, i) => ({\n                        id: item.value,\n                        label: item.label\n                    })),\n                    isLoaded: true\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(true);\n                }\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n\n                if(this.props.onLoad) {\n                    this.props.onLoad(false, err);\n                }\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            if(this.state.options == null || this.state.options.length === 0) {\n                if(this.props.onElseComponent) {\n                    this.props.onRender(false);\n                }\n\n                return this.props.elseComponent;\n            } else if(this.props.onLoad) {\n                this.props.onRender(true);\n            }\n\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXSFieldCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }]);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant={this.props.variant || 'inline-listbox'}\n                        multiple={this.props.multiple || false}\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Spinner, Combobox, Input, Datepicker, Button, Checkbox, comboboxFilterAndLimit} from '@salesforce/design-system-react';\nimport GRAXSFieldCombobox from './GRAXSFieldCombobox';\n\n// import {comboboxFilterAndLimit} from '../lib/utils';\n\nvar sanitizeElasticFilterValue = function(filterValue) {\n    return filterValue\n        .replace(/[\\*\\+\\-=~><\\\"\\?^\\${}\\(\\)\\:\\!\\/[\\]\\\\\\s]/g, '\\\\$&') // replace single character special characters\n        .replace(/\\|\\|/g, '\\\\||') // replace ||\n        .replace(/\\&\\&/g, '\\\\&&') // replace &&\n        .replace(/AND/g, '\\\\A\\\\N\\\\D') // replace AND\n        .replace(/OR/g, '\\\\O\\\\R') // replace OR\n        .replace(/NOT/g, '\\\\N\\\\O\\\\T'); // replace NOT\n};\n\nconst FIELD = 'Field';\nconst OPERATOR = 'Operator';\nconst FILTER_VALUE = 'Filter Value';\nconst IS_ACTIVE = 'Is Active?';\n\nconst TYPE_VS_OPERATORS = {\n    'text': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'contains', label: 'contains', isNegated: false},\n        {id: 'contains', label: 'not contains', isNegated: true},\n        {id: 'in', label: 'in', isNegated: false},\n        {id: 'in', label: 'not in', isNegated: true},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'date': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=' , isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'number': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'long': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'eq', label: '!=', isNegated: true},\n        {id: 'gt', label: '>', isNegated: false},\n        {id: 'lt', label: '<', isNegated: false},\n        {id: 'gte', label: '>=', isNegated: false},\n        {id: 'lte', label: '<=', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false, type: 'boolean'}\n    ],\n    'boolean': [\n        {id: 'eq', label: '==', isNegated: false},\n        {id: 'exists', label: 'exists', isNegated: false}\n    ]\n};\n\n\nexport class GRAXFilterableCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n        this._isMounted = false;\n\n\t\tthis.state = {\n\t\t\tinputValue: '',\n            selection: [],\n            isOpened: false\n\t\t};\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        if(this.props.selection) {\n            console.log(this.props.selection);\n\n            this.setState({\n                selection: this.props.selection\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    filterOptionsHandler() {\n        var options = this.props.options || [];\n\n        if(this.props.filterOptionsHandler && this.state.isOpened) {\n            options = this.props.filterOptionsHandler(options);\n        }\n\n        return comboboxFilterAndLimit({\n            inputValue: this.state.inputValue,\n            limit: 1000,\n            options: options,\n            selection: this.state.selection\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Combobox\n                    classNameMenu={'scrollable-GRAXFilterableCombobox'}\n                    events={{\n                        onChange: (event, { value }) => {\n                            this.setState({\n                                inputValue: value\n                            });\n\n                            if (this.props.onChange) {\n                                this.props.onChange(event, value);\n                            }\n                        },\n                        onRequestRemoveSelectedOption: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onRequestRemoveSelectedOption) {\n                                this.props.onRequestRemoveSelectedOption(event, data.selection);\n                            }\n                        },\n                        onSelect: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n                            }\n\n                            if (this.props.onSelect) {\n                                this.props.onSelect(event, data.selection);\n                            }\n                        },\n                        onOpen: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: true\n                                });\n                            }\n                        },\n                        onClose: (event, data) => {\n                            if(this._isMounted) {\n                                this.setState({\n                                    isOpened: false\n                                });\n                            }\n                        }\n                    }}\n                    labels={{\n                        placeholder: this.props.placeholder,\n                    }}\n                    options={this.filterOptionsHandler()}\n                    selection={this.state.selection}\n                    value={this.state.inputValue}\n                    variant={this.props.variant || 'inline-listbox'}\n                    required={true}\n                    multiple={false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default class GRAXFilterGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _filterValues: null,\n            _error: null,\n            _filterValuesFields: []\n        };\n    }\n\n    isLoaded() {\n        return this.state._error || (this.props.filterableFieldOptions != null);\n    }\n\n    getFilterValueStruct() {\n        return {\n            id: null,\n            value: null,\n            operator: 'eq',\n            isNegated: false,\n            isActive: true,\n            selectedField: null\n        };\n    }\n\n    getFilterValuesList(_filterValues) {\n        return _.map(_filterValues, (filterValue, fieldName) => {\n            var filterValueStruct = this.getFilterValueStruct();\n\n            filterValueStruct.id = fieldName;\n            filterValueStruct.value = filterValue.value;\n            filterValueStruct.operator = filterValue.operator;\n            filterValueStruct.isNegated = filterValue.isNegated;\n            filterValueStruct.isActive = filterValue.isActive;\n            filterValueStruct.selectedField = _.filter(this.props.filterableFieldOptions, (option, i) => {\n                return option && option.id === fieldName;\n            })[0] || null;\n\n            return filterValueStruct;\n        });\n    }\n\n    componentDidMount() {\n        var _filterValues = this.props.filterValues || {};\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.getFilterValuesList(_filterValues)\n        });\n\n        this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n    }\n\n\n    onFilterValueChangeHandler(filterValue, selection) {\n        var _filterValues = this.state._filterValues;\n\n        if(selection && selection.length > 0) {\n            var selectedField = selection[0] || null;\n\n            filterValue.id = selectedField.id;\n            filterValue.selectedField = selectedField;\n\n            _filterValues[filterValue.id] = {\n                value: filterValue.value,\n                isActive: filterValue.isActive,\n                operator: filterValue.operator,\n                isNegated: filterValue.isNegated,\n                selectedField: selectedField\n            };\n        } else {\n            delete _filterValues[filterValue.id];\n            filterValue.id = null;\n            filterValue.selectedField = null;\n        }\n\n        var _filterValuesFields = Object.keys(_filterValues);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: _filterValuesFields,\n            _filterValuesList: this.state._filterValuesList\n        });\n\n        if(this.props.onFilterValueChangeHandler) {\n            this.props.onFilterValueChangeHandler(this.getFilterFunction.bind(this), _filterValuesFields, this.getFilterQuery.bind(this), this.state._filterValues);\n        }\n    }\n\n    addAnotherFieldHandler() {\n        var _filterValuesList = this.state._filterValuesList;\n\n        if(_filterValuesList.length === 0 || _filterValuesList[_filterValuesList.length - 1].id != null) {\n            _filterValuesList.push(this.getFilterValueStruct());\n\n            this.setState({\n                _filterValuesList: _filterValuesList\n            });\n        }\n    }\n\n    removeFieldHandler(i) {\n        var _filterValues = this.state._filterValues;\n        var _filterValuesList = this.state._filterValuesList;\n\n        delete _filterValues[_filterValuesList[i].id];\n        _filterValuesList.splice(i, 1);\n\n        this.setState({\n            _filterValues: _filterValues,\n            _filterValuesFields: Object.keys(_filterValues),\n            _filterValuesList: _filterValuesList\n        });\n    }\n\n    getFilterFunction(dataList) {\n        return _.filter(dataList, (item, i) => {\n            var isReturned = true;\n\n            _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n                if(!filterValue.isActive) return;\n\n                var filterOperator = filterValue.operator;\n                var filterVal = filterValue.value;\n\n                if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                    filterVal = filterVal.split(' OR ');\n                }\n\n                var filterIsNegated = filterValue.isNegated;\n                var isFilterMatch = false;\n                var itemVal = item[fieldName];\n\n                if(filterOperator === 'eq' && filterVal !== '' && !Boolean(filterVal)) {\n                    filterOperator = 'exists';\n                    filterIsNegated = false;\n                }\n\n                if(Array.isArray(filterVal) && filterOperator !== 'in') {\n                    filterVal = filterVal.length > 0 ? filterVal[0] : null;\n                }\n\n                if(filterValue.selectedField.type === 'date') {\n                    itemVal = moment(itemVal);\n\n                    if(itemVal) {\n                        itemVal = itemVal.format('YYYY-MM-DD');\n                    }\n\n                    filterVal = moment(filterVal);\n\n                    if(filterVal) {\n                        filterVal = filterVal.format('YYYY-MM-DD');\n                    }\n                }\n\n                if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                    filterVal = true;\n                    filterIsNegated = true;\n                }\n\n                if(filterOperator === 'exists') {\n                    isFilterMatch = Boolean(itemVal) === Boolean(filterVal);\n                } else if(filterOperator === 'contains') {\n                    isFilterMatch = String(itemVal).toLowerCase().includes(filterVal.toLowerCase());\n                } else if(filterOperator === 'in') {\n                    isFilterMatch = filterVal && filterVal.length > 0 && _.includes(filterVal, ...(typeof(itemVal) === 'string' ? [itemVal] : itemVal));\n                } else {\n                    isFilterMatch = _[filterOperator](itemVal, filterVal);\n                }\n\n                isReturned &= filterIsNegated ? !isFilterMatch : isFilterMatch;\n            });\n\n            return isReturned;\n        }) || [];\n    }\n\n    getFilterQuery() {\n        // Contains: doc.field:value, doc.field:*value*\n        // Equal: doc.field:\"value\" (Contains exact on text type)\n        // NotNull: _exists_:doc.field\n\n        // Gt: doc.field:[value TO *]; doc.field:>value\n        // Lt: doc.field:[* TO value]; doc.field:<value\n        // Gte: doc.field:>=value\n        // Lte: doc.field:<=value\n\n        // Boolean: +doc.field; -doc.field\n        // Negation: NOT (...)\n        // IN: (doc.field: 'a' OR doc.field: 'b' OR ...)\n        // Exists: __exists__:doc.field\n\n        var operatorByName = {\n            'gt': '>',\n            'gte': '>=',\n            'lt': '<',\n            'lte': '<='\n        };\n\n        var queryConditions = [];\n\n        _.forEach(this.state._filterValues, (filterValue, fieldName) => {\n            var filterOperator = filterValue.operator;\n\n            if(!filterValue.isActive || filterOperator.startsWith('_')) return;\n\n            var filterVal = filterValue.value;\n\n            if(filterOperator !== 'in' && Array.isArray(filterVal)) {\n                filterVal = filterVal.length > 0 ? sanitizeElasticFilterValue(filterVal[0]) : null;\n            } else if(filterOperator === 'in' && !Array.isArray(filterVal)) {\n                filterVal = _.map(filterVal.split(' OR '), (_filterVal) => {\n                    return sanitizeElasticFilterValue(_filterVal);\n                });\n            }\n\n            var filterIsNegated = filterValue.isNegated;\n\n            if(filterOperator === 'eq' && filterIsNegated && !Boolean(filterVal)) {\n                filterOperator = 'exists';\n                filterVal = filterIsNegated;\n            }\n\n            if(filterOperator === 'exists') {\n                filterIsNegated = !Boolean(filterVal);\n            }\n\n            var condition = '(';\n\n            if(filterIsNegated) {\n                condition += 'NOT ';\n            }\n\n            condition += '(';\n\n            if(filterValue.selectedField.type === 'boolean' && !Boolean(filterVal)) {\n                condition += 'NOT ';\n            }\n\n            if(filterOperator === 'in') {\n                var inConditions = [];\n\n                _.each(filterVal, (item, i) => {\n                    inConditions.push('\"' + item + '\"');\n                });\n\n                condition += 'doc.' + fieldName + ':(' + inConditions.join(' OR ') + ')';\n            } else if(filterOperator === 'exists') {\n                condition += '_exists_:doc.' + fieldName;\n            } else {\n                condition += 'doc.' + fieldName + ':';\n\n                if(filterOperator === 'eq') {\n                    if(filterValue.selectedField.type === 'boolean') {\n                        condition += 'true';\n                    } else if(filterValue.selectedField.type === 'number') {\n                        condition += filterVal ? parseFloat(filterVal) : '';\n                    } else if(filterValue.selectedField.type === 'date') {\n                        condition += filterVal ? moment(filterVal).format('YYYY-MM-DD') : '';\n                    } else {\n                        condition += '\"' + filterVal + '\"';\n                    }\n                } else if(filterOperator === 'contains') {\n                    var _filterVal = filterVal ? String(filterVal) : '';\n\n                    condition += '(';\n                    condition += '\"' + sanitizeElasticFilterValue(filterVal) + '\"';\n                    condition += ' OR ';\n                    condition += sanitizeElasticFilterValue(_filterVal.toLowerCase());\n                    condition += ' OR ';\n                    condition += '*' + sanitizeElasticFilterValue(_filterVal.toLowerCase()) + '*';\n                    condition += ')';\n                } else if(filterValue.selectedField.type === 'date') {\n                    condition += operatorByName[filterOperator] + (filterVal ? moment(filterVal).format('YYYY-MM-DD') : '');\n                } else {\n                    condition += operatorByName[filterOperator] + (filterVal ? sanitizeElasticFilterValue(filterVal) : '');\n                }\n\n            }\n\n            condition += '))';\n\n            queryConditions.push(condition);\n        });\n\n        return queryConditions.length > 0 ? queryConditions.join(' AND ') : null;\n    }\n\n    getSelectionValues(selection) {\n        return selection ? _.reduce(selection, function(selectionIds, item) {\n            selectionIds.push(item.id);\n\n            return selectionIds;\n        }, []) : null;\n    }\n\n    render() {\n        if (this.state._error) {\n            return <div>Error: {this.state._error}</div>;\n        } else if (!this.isLoaded()) {\n            return (\n                <div style={{ position: 'relative', height: '5rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    {/*<div className=\"slds-scrollable_y\" style={{maxHeight: '50vw'}}>*/}\n                        <table className=\"slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover\">\n                            <thead>\n                                <tr className=\"slds-line-height_reset\">\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FIELD}>{FIELD}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={OPERATOR}>{OPERATOR}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={FILTER_VALUE}>{FILTER_VALUE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\" title={IS_ACTIVE}>{IS_ACTIVE}</div>\n                                    </th>\n                                    <th className=\"slds-text-title_caps\" scope=\"col\">\n                                        <div className=\"slds-truncate\"></div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/* Iterate over fields */}\n                                {_.map(this.state._filterValuesList, function(filterValue, i) {\n                                    var fieldName = filterValue.id;\n\n                                    var selectedField = filterValue.selectedField || {};\n\n                                    return (\n                                        <tr className=\"slds-hint-parent\" key={'fieldName: ' + (fieldName || '')}>\n                                            <td data-label={FIELD} style={{width: '30vw'}}>\n                                                {fieldName ||\n                                                <GRAXFilterableCombobox\n                                                    placeholder=\"Select Field to filter\"\n                                                    options={this.props.filterableFieldOptions || []}\n                                                    filterOptionsHandler={(options) => {\n                                                        return _.filter(options, (option, i) => {\n                                                            return option && this.state._filterValuesFields.indexOf(option.id) === -1;\n                                                        }) || [];\n                                                    }}\n                                                    selection={_.find(this.props.filterableFieldOptions, (option) => {\n                                                        return option && option.id === fieldName;\n                                                    }) || []}\n                                                    onSelect={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                    onRequestRemoveSelectedOption={(event, selection) => this.onFilterValueChangeHandler(filterValue, selection)}\n                                                />}\n                                            </td>\n                                            <td data-label={OPERATOR} style={{width: '20vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        selectedField.type === 'boolean' && TYPE_VS_OPERATORS[selectedField.type].label\n                                                    ) || (\n                                                        <GRAXFilterableCombobox\n                                                            placeholder=\"Select Operator to Compare\"\n                                                            options={TYPE_VS_OPERATORS[selectedField.type] || []}\n                                                            selection={[]}\n                                                            variant=\"readonly\"\n                                                            onSelect={(event, selection) => {\n                                                                selection[0].type = selection[0].type || filterValue.selectedField.type;\n\n                                                                filterValue.operator = selection[0].id;\n                                                                filterValue.isNegated = selection[0].isNegated;\n\n                                                                if(filterValue.type !== selection[0].type) {\n                                                                    filterValue.value = null;\n\n                                                                    if(selection[0].type === 'boolean') {\n                                                                        filterValue.value = false;\n                                                                    }\n\n                                                                    if(selection[0].type === 'text') {\n                                                                        filterValue.value = '';\n                                                                    }\n\n                                                                    filterValue.type = selection[0].type;\n                                                                }\n\n                                                                this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField])\n                                                            }}\n                                                        />\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={FILTER_VALUE} style={{width: '30vw'}}>\n                                                {selectedField && (\n                                                    (\n                                                        (selectedField.type === 'boolean' || filterValue.operator === 'exists') && (\n                                                            <Checkbox\n                                                                defaultChecked={filterValue.value}\n                                                                onChange={(e) => {\n                                                                    filterValue.value = e.target.checked;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        (selectedField.type === 'text' || selectedField.type === 'number' || selectedField.type === 'long') && (\n                                                            <GRAXSFieldCombobox\n                                                                SObjectName={this.props.SObjectType}\n                                                                fieldName={selectedField.id}\n                                                                onSelect={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                onRequestRemoveSelectedOption={(event, selection) => {\n                                                                    filterValue.value = this.getSelectionValues(selection);\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                elseComponent={\n                                                                    <Input\n                                                                        defaultValue={filterValue.value}\n                                                                        assistiveText={{ label: selectedField.label }}\n                                                                        id={selectedField.id}\n                                                                        onBlur={(event) => {\n                                                                            filterValue.value = event.target.value;\n\n                                                                            this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                        }}\n                                                                    />\n                                                                }\n                                                                onRender={(isPicklist) => {}}\n                                                                multiple={filterValue.operator === 'in'}\n                                                                variant={filterValue.operator === 'in' ? 'base' : 'inline-listbox'}\n                                                            />\n                                                        )\n                                                    ) || (\n                                                        selectedField.type === 'date' && (\n                                                            <Datepicker\n                                                                value={filterValue.value}\n                                                                onChange={(event, data) => {\n                                                                    filterValue.value = data.date;\n\n                                                                    this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                                }}\n                                                                className=\"inline-table\"\n                                                                menuPosition=\"relative\"\n                                                                hasStaticAlignment={true}\n                                                            />\n                                                        )\n                                                    )\n                                                )}\n                                            </td>\n                                            <td data-label={IS_ACTIVE} style={{width: '10vw'}}>\n                                                <Checkbox\n                                                    defaultChecked={filterValue.isActive}\n                                                    onChange={(e) => {\n                                                        filterValue.isActive = e.target.checked;\n\n                                                        this.onFilterValueChangeHandler(filterValue, [filterValue.selectedField]);\n                                                    }}\n                                                />\n                                            </td>\n                                            <td data-label={'Actions'} style={{width: '10vw'}}>\n                                                <Button label=\"Remove Filter\" variant=\"base\" onClick={() => {\n                                                    this.removeFieldHandler(i);\n                                                }}/>\n                                            </td>\n                                        </tr>\n                                    );\n                                }.bind(this))}\n                            </tbody>\n                        </table>\n                    {/*</div>*/}\n\n                    <div className=\"slds-p-top_medium\">\n                        <Button label=\"Add Filter\" variant=\"brand\" onClick={() => {\n                            this.addAnotherFieldHandler();\n                        }} disabled={this.props.filterableFieldOptions == null || this.props.filterableFieldOptions.length === 0 || this.props.filterableFieldOptions.length === this.state._filterValuesFields.length} />\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\nimport _ from 'lodash';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\nimport {getCookie, setCookie} from '../lib/utils';\n\nvar selectedDataIndex;\nvar cookieSubfix = 'Fields';\n\n\nexport default class GRAXFieldsCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [{id: 'Id', label: 'Id', type: 'text'}],\n            isLoaded: false,\n            error: null\n        };\n        \n        this.getMappedFieldList = this.getMappedFieldList.bind(this);\n    }\n\n\n    getMappedFieldList(selection) {\n        return _.map(selection || this.state.selection, (item) => {\n            return item.id;\n        });\n    }\n\n    onLoadHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if(this.props.onLoad) {\n            this.props.onLoad(event, selection, this.state.options, selectedFieldList);\n        }\n    }\n\n    onChangeHandler(event, selection) {\n        var selectedFieldList = this.getMappedFieldList(selection);\n\n        if (this.props.onChange) {\n            this.props.onChange(event, selection, this.state.options, selectedFieldList);\n        }\n\n        setCookie(selectedDataIndex + cookieSubfix, JSON.stringify(selectedFieldList));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        selectedDataIndex = this.props.dataIndex;\n\n        if(this.props.cookieSubfix) {\n            cookieSubfix += this.props.cookieSubfix;\n        }\n\n        $.ajax({\n            type: 'GET',\n            // dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypeFields/' + selectedDataIndex + GetParams({action:'load'}),\n            data: {},\n            success: (data) => {\n                if(this._isMounted) {\n                    var options = _.map(data, (val, key) => ({\n                        id: key,\n                        label: key,\n                        type: val\n                    }));\n\n                    this.setState({\n                        options: options,\n                        isLoaded: true\n                    });\n\n                    var selectedFieldsCookie = getCookie(selectedDataIndex + cookieSubfix);\n                    if(!selectedFieldsCookie.startsWith('[')) {\n                        selectedFieldsCookie = '[]';\n                    }\n\n                    var selectedFields = JSON.parse(selectedFieldsCookie);\n\n                    this.setState({\n                        selection: selectedFields.length > 0 ? (\n                            _.sortBy(\n                                _.reduce(options, (_selection, item) => {\n                                    if(selectedFields.indexOf(item.id) !== -1) {\n                                        _selection.push(item);\n                                    }\n\n                                    return _selection;\n                                }, [])\n                            , (item) => {\n                                return selectedFields.indexOf(item.id);\n                            })\n                        ) : this.state.selection\n                    });\n                }\n\n                this.onLoadHandler(null, this.state.selection);\n            },\n            error: (xhr, status, err) => {\n                console.error(xhr, status, err);\n\n                if(this._isMounted) {\n                    this.setState({\n                        isLoaded: true,\n                        error: err.toString()\n                    });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isLoaded !== nextState.isLoaded;\n    }*/\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <Combobox\n                        classNameMenu={'scrollable-GRAXFieldsCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                this.onChangeHandler(event, data.selection);\n                            },\n                            onRequestClose: (event, data) => {\n                                if (this.props.onSelect && this.state.inputValue) {\n                                    var selectedFieldList = this.getMappedFieldList(data.selection);\n\n                                    this.props.onSelect(event, [{\n                                        id: this.state.inputValue,\n                                        label: this.state.inputValue\n                                    }], this.state.options, selectedFieldList);\n                                }\n                            }\n                        }}\n                        labels={{\n                            placeholder: 'Select Option',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        // variant={this.props.variant || 'inline-listbox'}\n                        required={true}\n                        multiple={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React from 'react';\n\nimport {Spinner, Combobox} from '@salesforce/design-system-react';\n\nimport {$, baseUrl, GetParams} from '../lib/grax-data-lake';\n\nimport _ from 'lodash';\n\nimport {comboboxFilterAndLimit} from '../lib/utils';\n\n\nexport default class GRAXObjectCombobox extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            options: [],\n\t\t\tinputValue: '',\n            selection: [],\n            isLoaded: false,\n            error: null\n\t\t};\n    }\n    \n    componentDidMount() {\n        $.ajax({\n            type: 'GET',\n            //dataType: 'jsonp',\n            url: baseUrl + '/grax-app/grax-data-lake/getDataTypes' + GetParams({action:'load'}),\n            data: {},\n            success: function(data) {\n                if(this.props.excludeIds) {\n                    data = _.filter(data, (item) => {\n                        return this.props.excludeIds.indexOf(item.id) === -1;\n                    });\n                }\n\n                this.setState({\n                    options: data,\n                    isLoaded: true\n                });\n            }.bind(this),\n            error: function(xhr, status, err) {\n                console.error(xhr, status, err);\n\n                this.setState({\n                    isLoaded: true,\n                    error: err.toString()\n                });\n            }.bind(this)\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Error: {this.state.error}</div>;\n        } else if (!this.state.isLoaded) {\n            return (\n                <div style={{ position: 'relative', height: '2rem' }}>\n                    <Spinner size=\"small\" variant=\"base\" />\n                </div>\n            );\n        } else {\n            return (\n                <React.Fragment>                    \n                    <Combobox\n                        classNameMenu={'scrollable-GRAXObjectCombobox'}\n                        events={{\n                            onChange: (event, { value }) => {\n                                this.setState({\n                                    inputValue: value\n                                });\n\n                                if (this.props.onChange) {\n                                    this.props.onChange(event, value);\n                                }\n                            },\n                            onRequestRemoveSelectedOption: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onRequestRemoveSelectedOption) {\n                                    this.props.onRequestRemoveSelectedOption(event, data.selection);\n                                }\n                            },\n                            onSelect: (event, data) => {\n                                this.setState({\n                                    inputValue: '',\n                                    selection: data.selection,\n                                });\n\n                                if (this.props.onSelect) {\n                                    this.props.onSelect(event, data.selection);\n                                }\n                            },\n                        }}\n                        labels={{\n                            placeholder: 'Search GRAX Table',\n                        }}\n                        options={comboboxFilterAndLimit({\n                            inputValue: this.state.inputValue,\n                            limit: 1000,\n                            options: this.state.options,\n                            selection: this.state.selection\n                        })}\n                        selection={this.state.selection}\n                        value={this.state.inputValue}\n                        variant=\"inline-listbox\"\n                        required={true}\n                    />\n                </React.Fragment>\n            );\n        }\n    }\n}"],"sourceRoot":""}